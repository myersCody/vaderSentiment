beer rulez!

epic

Hahaha nice!

github is too github...

Oh my... EPIC!

#win!

Is there some way to just turn off github pull requests? They're all jokes.

You could ask support@github.com or whatever their help email is.
Though that means legitimate pull request won't get through, though.

don't do that, by tomorrow people will lose the urge to troll ;)

Unecessary =p

Unecessary \* 2

This is not Orkut =/

Thanks for linux!

totally unnecessary, congratz!

yeah make pull requests either vanish or be a link to https://github.com/torvalds/linux/tree/master/Documentation/development-process

Are you considering use Github as the standard public repository? Pull requests generally work out well for open source projects, but I'd be curious how it works out for a project the size of Linux.

This is not Orkut =/ 2

I am thoroughly disappoint.

@torvalds you could just report the user. You might have to go to their profile page and click the gear to get to the reporting page.

Reported @Holek, you guys all should too as @Spaceghost said :P

...This is just crazy

@torvalds I will volunteer to help clean up spam requests if there is a way to do so.

thankyou kind sir, your commit will not go unnoticed.

@diegoviola called @Holek's mommy.

I would laugh if @Holek is some millionaire troll :P

@Holek I see you contribute to wikipedia.pl quite a lot. I would have thought that someone who probably deals with a lot of  spam himself would have had more sense than this. 

Great way to introduce someone very prominent in the open source
community to github. Brilliant way to get your chuckles...

Hello, everybody!

First of all, I apologize about that crappy prank: that should not have happened. And I'm not saying that, because people are mad, but because I should have known better before doing that.

I have a huge respect towards Linux, and people doing their job on this project, and me making them waste time on such pull requests was irresponsible.

I sincerely apologize for my childish behaviour, and wish you the best of code!

Good job for coming around, Holek! :)

No more beers for you, going back to BSD

Please note that pull requests are not the proper procedure to submit patches to the Linux kernel (Linus put the kernel up here because kernel.org's master mirror is down; it seems that he doesn't like the pull request system[1], but github does not allow him to disable it). Please read Documentation/SubmittingPatches - you must write a proper commit message, add a Signed-Off-By line, and submit to the linux kernel mailing list, CCing the affected maintainers (ie, not Linus in most cases).

[1] - http://blueparen.com/node/12

Please note that pull requests are not the proper procedure to submit patches to the Linux kernel (Linus put the kernel up here because kernel.org's master mirror is down; it seems that he doesn't like the pull request system[1], but github does not allow him to disable it). Please read Documentation/SubmittingPatches - you must write a proper commit message (actually describing what changed, not just 'tinkered with'), add a Signed-Off-By line, and submit to the linux kernel mailing list.

[1] - http://blueparen.com/node/12

"No more beers for you, going back to BSD" :D

can you please point me at some url where I can read that submitting patches documentation? thanks!

smartinez87, this is pretty silly stuffs, these stunt-style pull requests that have been coming into this repo lately. Sure it's open source and you want to help fix it, but as bdonlan notes above, there are proper guidelines to be followed to submit patches to be fixed. A simpler solution (lifted wholesale [from reddit here](http://www.reddit.com/r/programming/comments/k6ceu/linus_torvalds_comments_about_github/c2hu7vu) btw): someone volunteers to run the "typo in the readme" branch. People send pull requests to them. When that branch has a delta of more than a couple fucking kilobytes, then a reasonable pull request can be sent to the main project.

Also look at [this link](http://kernelnewbies.org/KernelJanitors) to the Kernel Janitors site please in the future for things related to code quality guidelines cleaner-uppers in the kernel.

Let's not distract and annoy Linus with such silly trivialities like this, it just makes you look like a jackass.

Bravo!

hey, I just don't care about this, just noticed the typo and wanted the people that can do something about this to know about it and fix it. If no one care about the docs, I care even less.

@diegoviola you might want to cool it a bit. We're not a lynch mob, the goal was to stop having joke pull requests started on @torvalds repository. Save the 'saving the world' bit for later. :)

That's a bit too much work for the usual github stuff. Perhaps I'll just leave it alone and let the usual kernel.org hackers help out.

I'm not doing github pulls. The pull requests are seriously
misdesigned, and github does horrible things to the commits.

Please don't press the "pull request" github button. Do proper kernel
pull request with diffstat, git source tree (which can be on github,
of course), branch, commit information etc etc etc.

```
                  Linus
```

@snarkyMcSnark is right. @smartinez87 is just unnecessarily trying to create work for a high profile project just to be part of the commit history. His background points to the same. He claims to be a core contributor for the rails project although his entire commit history consists solely of frivolous grammatical and whitespace changes to the documentation. In fact he has no original commits for documentation either just small formatting changes to existing commits. This is entirely true.

@diegoviola, instead of you two trying to fix whitespace issues and unnecessarily trying to police other contributors you should work on something useful. These are all valid arguments and the original committer has a bad history of doing this and  3 people have already pointed that out.

@DiegoViola, you're cool. Just something we all might want to keep in
mind. There are no enemies here, at least none I can see.

How are pullrequest seriously misdesigned (apart from that you might be used to a different kind of workflow)?

The amount of social networking b.s. for an operating system kernel's source code repository IS TOO DAMN HIGH.

+1

I'm not doing linux kernel pulls. The kernel pulls are seriously
misdesigned, and linux does horrible things to the commits.

Please don't press the "pull request" kernel button. Do proper github
pull request with diffstat, git source tree (which can be on linux,
of course), branch, commit information etc etc etc.

GitHub

I honestly would like to know why github pull requests are misdesigned. I'll grant that I didn't actually create git but they seem to work just fine, is there something I am missing?

See https://github.com/torvalds/diveclog/pull/18#issuecomment-2023552

> See https://github.com/torvalds/diveclog/pull/18#issuecomment-2023552

Wow, great discussion went on there. Shacon raised perfectly valid points and Torvalds was basically "f this, I don't care, you're crazy". Great response!

On Fri, Sep 9, 2011 at 12:49 AM, Nils Werner
reply@reply.github.com
wrote:

> Wow, great discussion went on there. Shacon raised perfectly valid points and Torvalds was basically "f this, I don't care, you're crazy". Great response!

Can you read?

  "If the merge message doesn't tell me _who_ the merge is from and what
  branch it was, the merge message is totally useless."

If you can't understand that, then yes, you're crazy. Or just terminally stupid.

The quality of github "issues" and comments really is very low. This
being just another example of it.

```
                          Linus
```

First, I agree with Scott: In many cases people delete their fork (or at least the branch). So where would the message point you to? The pull request of the pulling repository will much more likely be around for a long time.

Also, what if the branch you'll pull from has _changed in the meantime_? You'd end up with changes that are not documented in the pull request and thus not reviewed by the ones discussing the pull request. As soon as the PR is posted you **must** put them out of reach of the author to keep them from sneaking in changes.

> > Great response!
> 
> Can you read?

Also, you did notice that you've proven my point right there, right?

On Fri, Sep 9, 2011 at 12:10 PM, Nils Werner
reply@reply.github.com
wrote:

> First, I agree with Scott: In many cases people delete their fork (or at least the branch). So where would the message point you to? The pull request of the pulling repository will much more likely be around for a long time.

That's a "implementation problem". It's not an argument for doing crap.

Simple solution: if people delete the branch or repository, consider
the pull request dead.

You can make the "pull request" namespace separate from the branch
namespace, but do it on the _source_ side, instead of on the
destination side like you do now. So if somebody says "please pull by
branch xyzzy", you turn it into a pull request for

   git pull git://github.com/<source> pull/xyzzy

and then if there i a previous pull request, add a number to it (so it
becomes "pull/xyzzy-2" or whatever).

Or something along those lines. The important part is that YOU MUST
NOT THROW AWAY THE SOURCE INFORMATION!

> Also, what if the branch you'll pull from has _changed in the meantime_?

We actually do this in the kernel on purpose sometimes - people fix up
their stuff.

That said, again, you could do the same thing: if somebody changes a
branch after created a pull request off it, just invalidate the pull
request and refuse to honor it. Again, if you do a separate
"pull/xyzzy" namespace, you should be able to validate that trivially
(save off the commit ID at the time of the pull, and refuse to serve
"pull/xyzzy" if the commit ID doesn't match the branch "xyzzy" any
more).

> You'd end up with changes that are not documented in the pull request and thus not reviewed by the ones discussing the pull request.

Umm, considering that the pull requests used to have no documentation
what-so-ever before I even complained about it, that's a pretty damn
weak argument, isn't it?

 As soon as the PR is posted you **must** put them out of reach of the
author to keep them from sneaking in changes.

> > Can you read?
> 
> Also, you did notice that you've proven my point right there, right?

Umm. I'm not polite. Big news. I'd rather be acerbic than stupid.

```
                       Linus
```

> That's a "implementation problem".

A decentralized system that doesn't accept disappearing nodes sounds more like a design problem.

> Simple solution: if people delete the branch or repository, consider the pull request dead.

Years after the branch has been merged? Is that a problem we wanted to solve?

> > Also, what if the branch you'll pull from has _changed in the meantime_?
> 
> We actually do this in the kernel on purpose sometimes - people fix up their stuff.

I meant malicuous changes. Hierarchies are shallow, elite circles basically nonexistant so that's a real issue. And the biggest strength of GitHub.

> save off the commit ID at the time of the pull, and refuse to serve "pull/xyzzy" if the commit ID doesn't match the branch "xyzzy" any more

Thats the first constructive comment to this discussion. And sounds like a good idea, apart from the problem that you'd lose the link to the PR wich, to many, is more useful than being able to immediately recognise the source.

Also it would probably require lots of modifications to the deamon though.And very disciplined contributors (always make sure to use dead-end topic-branches, not everybody does that). Separating the two simply improves the workflow a lot.

It'd be interesting what @schacon has to say about it.

> Umm, considering that the pull requests used to have no documentation what-so-ever before I even complained about it, that's a pretty damn weak argument, isn't it?

When was that? Months ago? I am talking about your comment 2 days ago.

> Umm. I'm not polite. Big news. I'd rather be acerbic than stupid.

A personal, unrelated note: Being unable to lead an objective discussion. Judging people, then insulting them just to prove a point. Recognising ones flaws but being unwilling to change them, instead bragging about them. Missing the ability to reflect on ones actions during interactions with others.

That sounds pretty stupid to me. Anyways, I'm moving on.

@nils-werner  

> A decentralized system that doesn't accept disappearing nodes sounds more like a design problem.  

I thought we were talking about pull requests and branches? When did a branch become a node?
Perhaps I'm missing something but this sounds simple; if you have a change and you want someone else to pull it, it sounds reasonable to expect you to keep the change published at _least_ until it is pulled.

> I meant malicuous changes. Hierarchies are shallow, elite circles basically nonexistant so that's a real issue. And the biggest strength of GitHub.  

Except that, as indicated by Scott Chacon [0], the most common scenario is to perform the pull request locally on your machine, allowing you to pull the code and then review it without said code being changed before merging.  I can understand your argument in relation to pull requests done using the button on the website though.

[0] https://github.com/torvalds/diveclog/pull/18

I believe pull requests like this are not used.

https://github.com/torvalds/linux/blob/master/Documentation/HOWTO

I recommend reading that.

Thanks Gunni!

Now that I have read my way through the documentation, three small questions before I close this:
- Should I send my (protocol appliant) email to linux-kernel@vger.kernel.org?
- The `CREDITS` file seems to have no maintainers. Can I help by maintaining this file?
- Should my email contain a patch, or can it be a link to my github clone?

This is considered a trivial patch. Please consult `MAINTAINERS` and `Documentation/SubmittingPatches` for the person responsible and how to submit patches. Kernel.org is down right now, so trivial@kernel.org does not work. You can contact the current trivial patch maintainer at jkosina@suse.cz

Well, according to https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches#L200 you should mail Jiri Kosina trivial@kernel.org.

https://github.com/torvalds/linux/blob/master/MAINTAINERS#L6515

However since kernel.org is down i can not say where this should be sent, maybe use vger as a replacement and note that you're mailing there because the correct mail is down.

EDIT: yeah or use the mail sc68cal submitted: Jiri Kosina jkosina@suse.cz.

Thanks a lot! I'll email my patch to Jiri Kosina.

You also need to amend your commit message to add a sign off line. You need that in the commit message or your patch will not be accepted. Check the docs for more info

Just saw the Documentation/SubmittingPatches file; will resubmit properly.

please add LinuxPPS in kernel support ntpd for gps...
http://wiki.enneenne.com/index.php/LinuxPPS_installation 

I don't do github pull requests.

github throws away all the relevant information, like having even a
valid email address for the person asking me to pull. The diffstat is
also deficient and useless.

Git comes with a nice pull-request generation module, but github
instead decided to replace it with their own totally inferior version.
As a result, I consider github useless for these kinds of things. It's
fine for _hosting_, but the pull requests and the online commit
editing, are just pure garbage.

I've told github people about my concerns, they didn't think they
mattered, so I gave up. Feel free to make a bugreport to github.

```
                Linus
```

On Fri, May 11, 2012 at 4:27 AM, Roman
reply@reply.github.com
wrote:

> You can merge this Pull Request by running:
> 
>  git pull https://github.com/WNeZRoS/linux master
> 
> Or you can view, comment on it, or merge it online at:
> 
>  https://github.com/torvalds/linux/pull/17
> 
> -- Commit Summary --
> - Add support for AR5BBU22 [0489:e03c]
> 
> -- File Changes --
> 
> M drivers/bluetooth/btusb.c (3)
> 
> -- Patch Links --
> 
>  https://github.com/torvalds/linux/pull/17.patch
>  https://github.com/torvalds/linux/pull/17.diff
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17

How do you feel about merging in things that may include commits downstream that have been pull requested with github? Seems hard to stop that.

Somebody please look at the diff. Thats a simple 3 line code addition. I agree to you @torvalds but you could have excused this time :)

By the way, its quite funny that github is sending instructions to @torvalds on using git.

On Fri, May 11, 2012 at 1:03 PM, orblivion
reply@reply.github.com
wrote:

> How do you feel about merging in things that may include commits downstream that have been pull requested with github? Seems hard to stop that.

Read my email.

I have no problem with people using github as a hosting site.

But in order for _me_ to pull from github, you need to

 (a) make a real pull request, not the braindamaged crap that github
does when you ask it to request a pull: real explanation, proper email
addresses, proper shortlog, and proper diffstat.

 (b) since github identities are random, I expect the pull request to
be a signed tag, so that I can verify the identity of the person in
question.

I also refuse to pull commits that have been made with the github web
interface. Again, the reason for that is that the way the github web
interface work, those commits are invariably pure crap. Commits done
on github invariably have totally unreadable descriptions, because the
github commit making thing doesn't do _any_ of the simplest things
that the kernel people expect from a commit message:
- no "short one-line description in the first line"
- no sane word-wrap of the long description you type: github commit
  messages tend to be (if they have any description at all) one long
  unreadable line.
- no sign-offs etc that we require for kernel submissions.

github _could_ make it easy to write good commit messages and enforce
the proper "oneliner for shortlogs and gitk, full explanation for full
logs". But github doesn't. Instead, the github "commit on the web"
interface is one single horrible text-entry field with absolutely no
sane way to write a good-looking message.

Maybe some of this has changed, I haven't checked lately. But in
general, the quality of stuff I have seen from people who use the
github web interfaces has been so low that it's not worth my time.

I'm writing these explanations in the (probably vain) hope that people
who use github will actually take them to heart, and github will
eventually improve. But right now github is a total ghetto of crap
commit messages and unreadable and unusable pull requests.

And the fact that other projects apparently have so low expectations
of commit messages that these things get used is just sad. People
should try to compare the quality of the kernel git logs with some
other projects, and cry themselves to sleep.

```
               Linus
```

Btw, Joseph, you're a quality example of why I detest the github
interface. For some reason, github has attracted people who have zero
taste, don't care about commit logs, and can't be bothered.

The fact that I have higher standards then makes people like you make
snarky comments, thinking that you are cool.

You're a moron.

```
               Linus
```

@torvalds The GitHub commit UI provides a text area for commit messages. This supports new lines and makes it easy to do nicely formatted commit messages :)

@skalnik would be nice if it had an 80-character line to help format things nicely.

Every time another Pull Request fiasco happens on one of Linus's repos it makes me sad, especially because I want someone whose work I greatly respect, to have a good experience on GitHub - instead he gets dozens of troll comments.

An OS kernel very rightfully demands a very disciplined approach to development that is in many ways not compatible with the goals of GitHub, which is to get as many people _of all skill levels_ involved in Free / Open Source Software. We can certainly make improvements though, and I appreciate that Linus has taken some time to detail exactly _why_ he doesn't use PRs, even if it's a bit harsh.

```
 - no sane word-wrap of the long description you type: github commit
messages tend to be (if they have any description at all) one long
unreadable line.
```

I think this is only because people who are new to Git are using GitHub and not understanding about Git-style committing. Remember, a lot of these newbies are just out of the gate from using SVN for years. I bet a lot of them don't even realize that `git commit` with the "-m" omitted just opens up COMMIT_EDITMSG in your editor. It isn't even very apparent (to newbies) of the 50-char title rule and 72-char every other line rule with commit messages.

```
github *could* make it easy to write good commit messages and enforce
the proper "oneliner for shortlogs and gitk, full explanation for full
logs". But github doesn't. Instead, the github "commit on the web"
interface is one single horrible text-entry field with absolutely no
sane way to write a good-looking message.
```

I have to agree with you there. Commit message viewing on Github sucks and I hope they change it soon. 

On Fri, May 11, 2012 at 1:29 PM, Mike Skalnik
reply@reply.github.com
wrote:

> @torvalds The GitHub commit UI provides a text area for commit messages. This supports new lines and makes it easy to do nicely formatted commit messages :)

No it doesn't.

What it supports is writing long lines that you have not a f*cking
clue how long they are. The text area does not do line breaks for you,
and you have no way to judge where the line breaks would go.

In other words, it makes it very hard indeed to do "nicely formatted
commit messages". It also doesn't enforce the _trivial_ "oneliner for
shortlog" model, so the commit messages often end up looking like
total crap in shortlogs and in gitk.

So the github commit UI should have
- separate "shortlog" one-liner text window, so that people cannot
  screw that up.
- some way to actually do sane word-wrap at the standard 72-column mark.
- reminders about sign-offs etc that some projects need for
  project-specific or even legal reasons.

It didn't do any of those last time I checked.

```
              Linus
```

I always thought of the title of a pull request as the one-liner ...

Newbie question I know, but can someone point me to this "nice pull-request generation module" Linus mentions? My google fu, documentation fu, and command-line-help fu all failed.

On Fri, May 11, 2012 at 1:40 PM, Tom Scott
reply@reply.github.com
wrote:

> - no sane word-wrap of the long description you type: github commit
>      messages tend to be (if they have any description at all) one long
>      unreadable line.
> 
> I think this is only because people who are new to Git are using GitHub and not understanding about Git-style committing.

The thing is, even if you _do_ understand about git-style committing,
it's actually _really_ hard to do that with the github web interface.

The best way to do it is _literally_ to open up another text editor
for the commit message, and then cut-and-paste the end result into the
web interface text tool.

Yes, commit messages should have proper word-wrap, with empty lines in
between paragraphs, and at the same time sometimes you need a long
line without word-wrap (compiler error messages or other "non-prose"
explanation).

And yes, that would almost require some kind of "markup" format with
quoting markers etc. And yes, it would be a more complex model of
writing commit messages. But if the default is "word-wrap at 72
characters, put empty lines in between paragraphs", then people who
don't know about the markup would still on average get better results
(even if the word-wrap would then occasionally be the wrong thing to
do)

Right now, github simply seems to default to "broken horrible
messages", and make it really really hard to do a good job.

And I think it should default to "nice readable messages" with some
effort needed for special things.

```
            Linus
```

@jrep: I believe he's referring to [git-request-pull](http://git-scm.com/docs/git-request-pull).  

I'm not sure I understand why the commit message itself should be hard word-wrapped. Naively, it seems like that should be a display property of the editor used to write the commit message or the tool used to display the commit message.

On Fri, May 11, 2012 at 1:48 PM, Dominik Dabrowski
reply@reply.github.com
wrote:

> You might have fun raging on the internet, but I think your goals would be better served if you expressed your thoughts in a clear (maybe even polite) manner that doesn't embarrass the people whose actions you're trying to influence.

Umm. I think I've been able to reach my goals on the internet better
than most people.

The fact that I'm very clear about my opinions is probably part of it.

If people get offended by accurate portrayals of the current state of
github pull requests, that's _their_ problem.

I hate that whole "victim philosophy".  The truth shouldn't be sugarcoated.

```
                    Linus
```

While I do have great respect for you @torvalds and your work, and it's totally valid for the repository of Linux to have rather rigorous standards, have you considered the possibility there could be a lot of GitHub users who don't really need nor care about any of those "features" you try to portray as _objectively_ superior?

On Fri, May 11, 2012 at 1:49 PM, Daniel Nugent
reply@reply.github.com
wrote:

> I'm not sure I understand why the commit message itself should be hard word-wrapped. Naively, it seems like that should be a display property of the editor used to write the commit message or the tool used to display the commit message.

No it shouldn't.

Word-wrapping is a property of the _text_. And the tool you use to
visualize things cannot know. End result: you do word-wrapping at the
only stage where you _can_ do it, namely when writing it. Not when
showing it.

Some things should not be word-wrapped. They may be some kind of
quoted text - long compiler error messages, oops reports, whatever.
Things that have a certain specific format.

The tool displaying the thing can't know. The person writing the
commit message can. End result: you'd better do word-wrapping at
commit time, because that's the only time you know the difference.

Sure, the alternative would be to have commit messages be some
non-pure-textual format (html or similar). But no, that's not how git
does things. Sure, technically it could, but realistically the rule is
simple: we use 72-character columns for word-wrapping, except for
quoted material that has a specific line format.

(And the rule is not 80 characters, because you do want to allow the
standard indentation from git log, and you do want to leave some room
for quoting).

Anyway, you are obviously free to do your commit messages any way you
want. However, these are the rules we try to follow in the kernel, and
in git itself.

And quite frankly, anybody who thinks they have better rules had
better prove their point by showing a project with better commit
messages. Quite frankly, I've seen a lot of open-source projects, and
I have yet to see _any_ project that does a better job of doing good
commit messages than the kernel or git. And I've seen a _lot_ of
projects that do much worse.

So I would suggest taking the cue for good log messages from projects
that have proven that they really can do good log messages. Linux and
git are both good examples of that.

```
             Linus
```

If you add .patch onto this URL you'll get a git-am style patch.

(Github is very silly for not exposing this in the interface, and for not even really mentioning this feature.)

I agree with you on the messages, I wish the text areas were at least monospaced.

On Fri, May 11, 2012 at 2:01 PM, Prathan Thananart
reply@reply.github.com
wrote:

> While I do have great respect for you @torvalds and your work, and it's totally valid for the repository of Linux to have rather rigorous standards, have you considered the possibility there could be a lot of GitHub users who don't really need nor care about any of those "features" you try to portray as _objectively_ superior?

Sure.

And when those people with lower standards try to get their commits
included in the kernel, I will ridicule them and point out how broken
their commit messages or pull requests are.

Agreed?

Btw, the commit message rules we use in the kernel really _are_
objectively better. The fact that some other projects don't care that
much is fine. But just compare kernel message logs to other projects,
and I think you'll find that no, it's not just "my opinion". We do
have standards, and the standards are there to make for better logs.

```
               Linus
```

On Fri, May 11, 2012 at 2:03 PM, Mahmut Bulut
reply@reply.github.com
wrote:

> So, if you can't "impolite" dear @torvalds, we can say 'why the "linux kernel" is here'?

.. because I think github does some things _very_ well.

So sure, you may think I hate github. I don't. I hate very specific
parts of github that I think are done badly.

But other parts are done really really well.

I think github does a _stellar_ job at the actual hosting part. I
really do. There is no question in my mind that github is one of the
absolute best places to host a project. It's fast, it's efficient, it
works, and it's available to anybody.

That's _wonderful_. I think github is absolutely lovely in many respects.

And that then makes me really annoyed at the places where I think
github does a subpar job: pull requests and committing changes using
the web interface.

```
            Linus
```

> Word-wrapping is a property of the _text_. And the tool you use to
> visualize things cannot know. End result: you do word-wrapping at the
> only stage where you _can_ do it, namely when writing it. Not when
> showing it.

Just curious - why is it that the tool used to visualize things cannot know how to wrap text it displays? And if it is the case, isn't that a problem with the viewer itself, rather than a reason to hard wrap?

Commit messages must be limited to 140 characters, like tweets. Right in git's core.

(See what I did there? What's “pure garbage” for you is just perfect for a lot of people.)

@torvalds Thank you for your rational and good opinion. I appreciate you.

Do you guys not understand that this is _Linus'_ blessed repository and he can accept and reject whomever and whichever request he likes? He has specific and pertinent rules when it comes to merging that he's learned over _20 years_ of maintaining the Linux kernel. He developed git - in case you forgot, he was the initial developer - with features specifically for gpg signoffs, shortlogs, etc. - things he and other intelligent computer scientists find useful for maintaining repositories.

I've maintained small projects with three developers plus myself and as soon as you become loose with your merging criteria, the entire repository goes to hell. If he wants gpg signoffs, then he'll get gpg signoffs. Try maintaining 20 millions lines of code and merges requests from 2,000 developers, and then you can give Linus advise.

I think @torvalds is a pretty cool guy. eh scolds githubs and doesnt afraid of anything.

> While I do have great respect for you @torvalds and your work, and it's totally valid for the repository of Linux to have rather rigorous standards, have you considered the possibility there could be a lot of GitHub users who don't really need nor care about any of those "features" you try to portray as objectively superior?

"GitHub is the best place to share code with friends, co-workers,
classmates, and complete strangers." As long as GH actually, genuinely
cares about making this statement true, they should be providing these
features.

Roman, in the future, you should follow the kernel's guide for 
submitting patches. I believe that drivers/bluetooth is covered by the 
list at linux-bluetooth@vger.kernel.org and you can submit your patch
to them, with a proper Signed-off-by tag.

FWIW, Reviewed-by: Corbin Simpson MostAwesomeDude@gmail.com, but 
there's no way to confirm that since GH is going to hide my email 
address and I can't easily sign this message.

(As an example of broken UI, while writing this message, I split my 
screen between Firefox and vim, vertically. Linus' messages, being 
wrapped, were perfectly readable, but because Github has a massive 
minimum width, I had to scroll back and forth in order to read everybody
else's messages.)

@mmorris-gc
Sure, tools can do that, but at what cost?
Mostly messages are read in terminal, not via web interface.

How to distinguish part which should be wrapped from ones that
 don't? Add extra tags? 

Commit logs are mostly viewed in terminals, which tends to use
monotype fonts.

What about quoting? ">" are clean and indicates
level of quoting.

This ideas are used for years in emails and guess what? 
They work!

@mmorris-gc It's open source. Fork it and write a custom viewer for youself. Problem solved.

Amen for the "victim philosophy" comment. If you want to commit or suggest features get ready for feedback. People need to seriously stop crying when others are blunt with them; It's pathetic. (not everyone has time to consider the infinite ways you may interpret something)

I'd have to say I fully agree with @torvalds, I've worked in very strict commit standards, and in very loose standards, and by far my entire experience was a lot better with well formatted standard commit messages. Github does not handle this at all.

Some say that "people don't care", it's mostly because they don't know what they are missing, if it were more convenient to use good standards, everyone would use them.

Sometimes I wonder if the ones who like a massive one-liner as commit message are Windows users...

@ivyl 

> Sure, tools can do that, but at what cost?

I don't know what the cost is, but I'd be interested to know! That's why I was asking what prevents the tool from doing this rather than requiring that the user handle it.

@factormystic Not sure what this has to do with my question. I was just wondering if there was a reason that the viewer couldn't handle it; I wasn't complaining or asking someone to fix it for me.

Sad that there is no option to disable pull requests via github

@torvalds It is indeed a text area. ![](https://img.skitch.com/20120511-g5spnfijkip37bcsbysmpk4kxi.png)
On top of this, vim/emacs/$EDITOR does not usually enforce the commit format either. In both cases it's up to the end user to write a well styled commit message.

That being said, I agree it could be better. Perhaps if it was more like the commit form that the [GitHub application has](http://www.forgetfoo.com/images/blog/github-mac-app-commit.png).

Since this is seems so important, perhaps git should enforce this style by rejecting any commits with a message that does not adhere to your specification?

> why is it that the tool used to visualize things cannot know how to wrap text it displays?

@mmorris-gc That was actually covered by @torvalds above when he said:

> Some things should not be word-wrapped. They may be some kind of
> quoted text - long compiler error messages, oops reports, whatever.

Not only would it be a tremendous burden for every viewing tool to try and determine which items meet the above definition (and do so correctly), many of the tools we use are generic whereas the formatting rules might depend what domain the material came from, making it literally impossible to display things correctly under all conditions.

@camdez Interesting. Still seems like a problem that could be solved by better tooling, but I appreciate you taking the time to point that out. Thanks!

@jnavia there´s a way to disable pull requests in Github, they call it private repos.

So sad seeing someone who made a great system raging like a child because no one and no system can be like him or how he wants.

@torvalds other than "form" of pull requests what I'm even more worried about is that this new model of contributing code bypasses the former interaction that there is in a mailing list. If the hub of a project is the ML there are better chances that things are discussed before turning into code that will be refused. Even when the approach starts with a patch, it gets publicly discussed by interested parties, and a long term trace remains in the ML archive. It's a pretty different way of doing this, that was used to build a lot of code with success, and one that works better for a project where patches and new ideas are scrutinized in depth before being accepted.

@torvalds I would like to take this oppurtunity to say thanks for Linux and git. For without both of those this great coding community wouldn't have had a chance.

I'd also like to point out something else GitHub does do really well. This. What we are doing right now. Socially coding in an open environment. Talking about things, being connected. Hell when I was growing up I never thought I'd get a chance to say something that Linus effing Torvalds would get to read and possibly comment on, and now here I am, able to put in my two cents (in a flood of thousands of pennies). So thankyou. Thankyou Linus for making git and Linux, and thankyou GitHub for making coding social.

@leobalter No : disabling pull requests does not mean making a repo private. As many other opensource projects, the linux kernel has its own workflow, so why not follow it? At GH, they are aware of it, they even mention in the progit book.

And before "raging like a child" about his comments, read them again: he just does not care or bother.

My own preferred solution would be if GitHub kept to one commit message box but live previewed how it would appear below with 72 character wrap. Then you could see clearly what the short and long messages would look and could adjust accordingly (this is done in Stack Overflow and is very helpful). 

The last issue is that monospace is required to view / wrap correctly. A natural way to handle this is to use the markdown four space indent syntax, but since this could get annoying it might be better to have an input type pulldown (text vs markdown) in the same way editing GitHub wikis allows.

@jnavila github has its pull requests as they are. Maybe no one follow "high standards" Linus but it´s great in my workflow.

My point is: raging like a child is unnecessary. Turn of pull requests notifications and don´t answer.

If this github pull requests mess your day off, start thinking about using other code hosting. 

The community doesn´t need to be blamed for not being such highness standards followers, we just need people collaborating, because it´s open and many visions are still great on any project.

I'm not sure why this topic is about **pull requests** not the feature of editing files online. Most of the people create pull requests out of branches prepared locally, I've prepared tons of pull requests and I've used online editor only once.

@leobalter, you're missing the point, this isn't about downplaying the current workings of github, it's about suggesting better workings for github. Just because you are fine with having pull requests on doesn't mean there shouldn't be an option to turn them off.

@leobalter He's not blaming 'the community', he's pointing out what he thinks needs improving _in GH_.  Raging like a child?  If you don't like his 'childish' opinion (read: high standards), don't open a pull request.  I'm quite happy to see the conversation that's followed as a result.

I work at a financial institution where a single line code change can be backed with 50 page specs, 200 lines of test code, 2 weeks of testing, etc.  Asking for a decent commit message _on your own repo_ isn't _that_ big of a deal.

@camdez Are we talking about _only_ the situation where some text shouldn't be word wrapped though? Are there other wrapping related formatting concerns with plain text?

I agree, especially the identify verification via confirmed email addresses, digital signatures, or a mix.

@torvalds I think you missed my point. I'm not just talking about people using Github to host. You don't merge everything in Linux yourself, you defer 90% of that through a trust hierarchy (as you eloquently described in your Google talk about Git). Unless you somehow enforce that everybody under you also refuses Github pull requests, your logs could still get soiled.

@antirez How is the discussion of a pull request on GitHub different than the discussion of a patch on a mailing list? Is it that you end up with two different places to discuss things - mailing list for things without patches, GitHub for things with patches? Or is it that subscribing to see pull requests for a project is not as elegant as subscribing to a mailing list?

My company has had quite a bit of success having in depth discussions about both experimental and more straightforward patches on pull requests, and treating them as the long term trace of discussion, much like you're suggesting - what would we gain from using a mailing list instead?

On Fri, May 11, 2012 at 4:12 PM, orblivion
reply@reply.github.com
wrote:

> Unless you somehow enforce that everybody under you also refuses Github pull requests, your logs could still get soiled.

I'm not a "rules over everything else" kind of black-and-white person.

I'm basically describing what _my_ requirements are. Not all Linux
sub-maintainers are necessarily as critical as I am, and yes, there
are ugly commit messages in the kernel too (and some of them are very
much about lacking proper word wrapping, for example).

So things slip through occasionally. I'm not German - rules are good,
and they set a standard that people should really try to strive for
(and quite frankly, hopefully exceed: the "formatting rules" should
preferably go with "really good and readable message that really
explains what is going on"), but rules are not some kind of absolute
thing that have to be 100% guaranteed.

In the kernel, see commit cb8722d30c20, for example. That's a case of
"oops, that's one long line". It happens, and I got it through David
Miller, who usually doesn't have those kinds of issues. I suspect the
patch came from somebody who used an annoying editor or MUA that has
problems wrapping lines properly (sometimes, you have to disable
word-wrap in the MUA for it to not corrupt patches, but then some
MUA's have a horrible editor that doesn't help you wrap lines when you
want to!).

So I don't worry about "still get soiled". Crap happens, we try to minimize it.

What I dislike about the github thing is that it's not "crap happens,
we'll try to minimize it", it's "crap absolutely _WILL_ happen".
Instead of trying to minimize it, the commit message editor actively
_revels_ in it, and makes it hard not to make a crappy message.

Similarly, the pull request interface of github makes it literally
_impossible_ to make a good pull request. You literally cannot make a
good pull request using the github web interface.

So right now, I encourage people to use github as a hosting site, but
as a hosting site _only_. Don't create commits there, and don't use
github for pull requests. Do your commits on your own machine, push
them to github, and then when you're ready for a pull request, again
do it on your own machine and email it to the maintainer that way.

So I'm really not trying to hate on github. I only despise a few of
the small details of github.

Github as a hosting site for open-source (or closed, for that matter)
projects is _wonderful_.

Github as a place to generate commits and pull requests? Not so much.

```
                    Linus
```

@johnmetta Oh, you must be new to the internet, or to @torvalds rants :P

Linus, I love your rants and your code. @torvalds.

I like how @torvalds rants on a high niveau ;)

nice read, and I have to agree (tho the "moron" comment really wasn't necessary)

Worth read : http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

Did you see about adding `.patch` to the end of the pull request URL like so: [https://github.com/torvalds/linux/pull/17.patch](https://github.com/torvalds/linux/pull/17.patch)

I'm no git-expert, but doesn't that have all the information?

Not sure what all this fuss is about. @Torvalds points out that due to definite weaknesses in GitHub's UI he won't accept pull requests, and the world starts whaling on him. It's simple: if you want him to pull your changes in, don't use GitHub to generate the request. This would probably be easier than trying to change his mind.

On Fri, May 11, 2012 at 5:05 PM, Jorge Espada
reply@reply.github.com
wrote:

> Worth read : http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

Yes, that has all the basic rules.

In the kernel, we have the extra sign-off rule (and
"Reported-by"/"Acked-by" etc to give credit to people who have been
involved in other ways than just moving the patch around), so some
projects will have extra rules about what a commit message should
contain.

But the basic rule about "one-liner header" (which really is used by a
lot of tools) and then nice word-wrapped textual bodies is really
good.

We _often_ have 20-50 lines of explanation for even a _single_ line of
changes. Sure, it can be overkill, but on the other hand it really can
come in very useful too. And git makes it so easy to make shortlogs
and other "condensed" versions, that it should never be a question of
"I don't want to bother people with too much information".

```
           Linus
```

On Fri, May 11, 2012 at 5:05 PM, Matthew Pietz
reply@reply.github.com
wrote:

> Did you see about adding `.patch` to the end of the pull request URL like so: [https://github.com/torvalds/linux/pull/17.patch]()
> 
> I'm not git-expert, but doesn't that have all the information?

Umm. I read _email_. I don't look at web interface.

And no, I don't want the patch either (it might be thousands of lines long).

Look here for a good example of a recent _valid_ pull request:

  http://groups.google.com/group/linux.kernel/browse_thread/thread/c3de7bbe9bb73cf5/1d61f01ea9ec3c67?show_docid=1d61f01ea9ec3c67&pli=1

where that pull request contains:
- the real person with a real email asking me to pull
- the _explanation_ of why I should pull
- a shortlog of the changes (a single line)
- a proper diffstat

it doesn't have silly links to other information, it _has_ the information.

```
               Linus
```

If the rules for writing good commit messages are that mechanistic, then @skalnik made a good suggestion: provide a way for maintainers to specify a validation function on commit messages. Could be a nice feature.

Why is Linus word wrapping his comments in this thread? Looks silly.

On 12.05.2012 02:35, Michael Fogleman wrote:

> Why is Linus word wrapping his comments in this thread? Looks silly.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17#issuecomment-5663924

because he's writing replies via email, which, with the right client,
gets auto wrapped (like this reply)

I fully agree with @torvalds. GitHub is a UI that replaces an important feature with inferior version, have no excuses.

I think github devs should really take @torvalds remarks seriously for two main reasons. 

Git was built for kernel and designed by @torvalds, so even if it might not seem important for some new people to git and github, there is a reason for  git commit messages and pull request to respect some rules which might not be evident, and Github has a great responsability in teaching these rules to new comers.

Second, Gh might be the best tool/platform to start using Git, so with all the possibilities given by a modern web service like Github and how easily UI can be tweaked, it seems like a waste not to build on top of best practices. Seriously how hard is it to make a text field validator for respecting git commit messages ? 

I just want to get on the record as one of the original pull request developers that we've been aware of these issues for a long time and certainly take them seriously. There are a number of problems we need to address that would make maintainers's lives a lot easier.

There's no question Linus's feedback is warranted. I could add considerably to his critique, even. (Mail headers anyone?) Nobody hates these issues more than we do.

@torvalds is very clear on what Linux needs if the contributors wants to send him pull requests. I think Github should just look into this and fix the problems.

Github was made for 'easy & fast' code management, perhaps this is not the right tool for this job.

I don't agree that there should be rigid pull request standards in place, it works fine for 99% of the smaller projects that are hosted here.

The ticketing system on other hand.. is another story.

> (not everyone has time to consider the infinite ways you may interpret something)

I can think of only one way to interpret Linus telling someone "You're a moron."  There is no subtle nuance there.

Sure is my way or the highway in here.

My comments keep getting deleted lol

> I hate that whole "victim philosophy".  The truth shouldn't be sugarcoated.

By truth Linus is of course referring to his own opinion. 

No doubt his manner is abrupt. Possibly curt. Probably rude. It's fairly obvious @torvalds doesn't "suffer fools gladly". For all I know, this may be a necessary strategy, though it's certainly not one I would find productive. But luckily for him, I'm not him. I do know prominent open sourcerers who are, I wouldn't say harassed, but certainly imposed upon mercilessly. The "nice guys" end up conscientiously dealing with at least some of the traffic, which takes up time that could be spent working or with their families and friends.

But the most important points have almost been lost in the noise: a) @torvalds made explicit complaints about the github pull request, with cogent reasons why it was unsatisfactory; b) Github responded (nice to know they watch their logs) explaining that they are aware of the shortcomings, and others not mentioned, and are working towards fixing it.

It's pointless to argue and bicker
Linus doesn't respond to a clicker
So just make a note
He's a crabby old goat
And then we'll all get along quicker

The Miss Manners conversation can now continue :)

Why is it possible to commit using the web interface anyway? I agree that it's difficult to write decent commit messages using the web interface, but it's even more difficult to write decent _changes_ using the web interface.

People often either don't have knowledge of the organization of the project, or they are half asleep when writing the changes using the web interface.

Anyway, this discussion about wraps is getting me hungry.

I started reading this thread with no opinion. Then I realised I started reading 
@torvalds nice newspaper column like posts with ease and skipping 
non wrapped texts, and said "uhm, that's the point!" 
So now I do have an opinion, _all_ comments should be line-wrapped.
Thank's for the lesson :)

@torvalds You have a lot more patience than I have.  I rarely even log in to github (website); once in a while I'll go in and just blindly delete all the pending pull requests unless I recognise the name of the person.

I've long had a policy of "no pull requests, no issues, no comments on code via github; everything on email only" and if people don't know that it's their problem.

[edited to change "tolerance" to "patience" in first line]

@sitaramc Maybe the solution is for Github to convert actions that were created with the web interface into an email friendly format and send it out like it does for comments. That way all parties are satisfied regardless of which interface they prefer (web or terminal).

In defence of Linus's attitude here:

There is one thing you need to bear in mind about the Linux kernel. It is an operating system kernel -- the most fundamental, critical software component of your entire computer. If it goes wrong, everything goes wrong. On top of that, it is probably the most widely deployed OS kernel in the world, being used from everything from transport to logistics to medicine to the military to aerospace. Many of these are applications where people could be killed if things went wrong.

A system of that nature requires much more care and attention to detail than your average vim setup or pet weekend IOC container. If that extends to issues as seemingly trivial (to some people) as word wrapping on check-in comments, then so be it. And if the lead developer of a project such as that does get sharp with people, it's not unfriendliness and political incorrectness, but simply due care and attention with regards to the bigger picture and the stakes being so much higher.

@AlekseyKorzun, "easy and fast" development is based upon code that's easy to manage. Loose pull requests really hurts efficiency in code management, no matter for big project or small project. A rigid pull request standard would make the development easier and faster, especially for projects involving multiple contributors:).

@JonDum sounds like a nice idea but consider this sequence.  I get an email from the website.  I reply to it, cc-ing someone outside github.  The original requestor (who is interacting only via github's web interface) sees my reply and replies to that.  At this point I believe the guy I added in my CC does not get cc-d and is out of the loop.

At least that's my recollection of this; maybe they fixed it...

It's not hard to fix; qa.debian.org does it ok I think.  So does bugzilla, IIRC and probably many other such systems.

I think that if @torvalds does not like github, he can move "his" project to another site. I like github web interface. We are on 2012, not on 1980. Probably Linus use a 80-char green-on-black display. The real people mostly not.

Furtherhand, @torvalds cannot say "you are a moron" while his minions clap. It is hateful.

@robermorales He explained already why he hosted "his" project here in a very sensible manner. Read comments. 
There are quite a lot advantages using the 80 chars convention even in 2012. 
He is the only reason why we at least have a sensible "80-char green-on-black display", respect him for that.

@robermorales move "his" project?

You're here because you use git right.. who specifically do you think wrote git?

Linus wrote: "For some reason, github has attracted people who have zero
taste, don't care about commit logs, and can't be bothered."

It seems like github is written using C++ :-))

I'm fascinated by how many comments say things along the lines of "why not enforce the commit message formatting" or "github should add validation to the commit message tool".  The point is that you can't validate or enforce good formatting, since only the author knows which parts of the text should be wrapped nicely and which parts shouldn't.

On a side note, doing a good text editor in a web browser that looks nice and works well is very very challenging.

@yobert no, you can't (or should) not enforce the commit message formatting,
but you sure could validate it. Look at how vim does this with colors when you 
use it as your commit editor.

@n3storm @SkaveRat : I don't share your opinion about auto-wrapped email.

First, I feel sick reading those auto-wrapped comments in this thread because I always make a "stop breath" after each end of line. It's not natural, especially with non-monospace font. Imagine reading a book where text is not justified and text width is 3/4 of the page. That'd be weird.

It's not your responsibility to format the text displayed in a web page. If your feel uncomfortable with reading all other comments, maybe the designers at GitHub should change the font-size or the `.discussion-timeline` div width. The only reason is if you read that thread on your terminal... which leads to my second point.

My second point is : **I don't read my emails on a terminal!**, like most of people. I hate when somebody send me (wrapped) text-only email that are very hard to read on a smartphone (need to scroll horizontally), and often looks weird on the web interface, like @fogleman noticed it here.

That could be compared to a width-fixed content like PDF which is not adaptable (/responsive) for all supports, whereas HTML is.

On the other hand, most people use a terminal or a monospaced text editor/IDE to code and use git. That's why I totally agree on wrapping message commits, but not in emails or in comments.

So my opinion is: don't use a web UI as your main tools to make commits -- most people work locally anyway, this is just here to provide a quick (and crappy, ok) solution when you don't have your usual working environment. But Github pull requests are really awesome and are much more user-friendly than emails.

Wait a minute, I'm going to invite Tanenbaum to this conversation.

@torvalds 

> Look here for a good example of a recent _valid_ pull request:
> 
> http://groups.google.com/group/linux.kernel/browse_thread/thread/c3de7bbe9bb73cf5/1d61f01ea9ec3c67?show_docid=1d61f01ea9ec3c67&pli=1

To be fair, pull requests on GitHub are not that different to that. Pull requests (and issues, which are very related) here are a replacement for mailing lists. It’s where the discussion is going on. All the data you mention is available in a pull request as well, just not _that_ visible. Instead you have to look at the commits appended to the request, or the diff view that’s next to the discussion tab.

Obviously that’s not how you do things. You are an email person, using mailing lists as the main (if not only) way to discuss and propose changes to your projects. And I think that is perfectly fine, especially looking at how well it works with your projects.

But I don’t think that makes pull requests on GitHub inferior. They are different, yes, they require a different workflow, but that workflow works extremely well for many projects, especially those that are not using other means for communication (like mailing lists).

A bad style for commit messages or reasoning of commits and pull request does not come automatically with pull requests on GitHub, the same way as a good style does not come automatically with mailing lists. I’ve seen many perfectly described commits in a well-reasoned pull requests on GitHub, and I’ve also seen as many bad requests in mailing lists. You can do both good and bad things with either (or any) system, and I personally think GitHub offers a great system for projects that are not as busy as the kernel or Git itself.

Github should supply a mechanism for disabling pull requests from the Admin interface, so these conversations aren't required and people like @torvalds can make his own decisions on how he wants to receive commits. At the moment, pull request capabilities are always on so one needs to constantly close them, explain to people why, rinse & repeat.

@MattKetmo, just to give you a clue, ever wondered why you prefer reading books
in a tablet or pad and not in a 29'' screen?
Even in year 2030, human eyes will have the same comfortable eye scanning and
skimming range, proportionally to font size, of course.

Just add a feature to disable pull requests on a per-repo basis, GitHub. Since it's an _option_, it doesn't need a majority of users to want it, to justify adding it.

It's also a good first step to take in fixing pull requests.

@n3storm Sure, I agree with you about having a "comfortable eye scanning and skimming range".

I'm just saying breaking lines at 80 chars for that kind of content doesn't solve the problem (except in a terminal). Text should be displayed at fullwidth in a pad, and in a column of "xxx" px max in a 24" or 42" screen. Line breaks won't be the same depending on the support, so manually breaking lines can make reading harder.

Maybe @github could add a per-repo option to enforce the @torvalds recommended commit messaging style?

I can't believe this whole discussion has gone on with no mention of [format=flowed](http://www.faqs.org/rfcs/rfc3676.html), probably the best thing Apple ever did. Not that it really applies to the question of how git commit messages should be formatted (or does it?), but you shouldn't be commenting on formatting of plain text emails unless you've read that rfc.

I love it that you can easily know just by
looking at word wraps of the comment
whether a person is supporting Linus or not

For future reference, here are the HN discussions on this topic:

http://news.ycombinator.com/item?id=3960876
http://news.ycombinator.com/item?id=3964252

@fisherwebdev 
I know! It's 1940s all over again.

@fisherwebdev Ad hominems will take you nowhere. I don't know how to tell you this, though, because you seem easily disappointed, but he's not German either.

@fisherwebdev ???

@fisherwebdev he's neither German nor a moron. He's empowered with other tastes and made development easier for all of us (with linux and git).

Curious situation where I find myself installing linux while laughing at the absurdity of the Linux core team.

We're supposed to format our input for your preferred display device? What? Why should data need to be formatted for your terminal when it is viewed in many different environments. Besides, my terminal is more than 80 characters wide. What universe do you live in?

The real culprit is the utter inadequacy of plain-text. This was obvious from my first *nix experiences, when awk couldn't consume stdin because some data contained whitespace, ruining its ability to distinguish columns. Here it shows itself again. Instead of addressing this root problem, we're bikeshedding about number of characters per line.

@JoshCheek (And others, but you're the most recent):

If you have a better idea, I suggest you implement it. Then open source it. Then merge every suggested contribution regardless of it's formatting.

@richo thats like a chinese proverb that reads "Yu Fa Kof Go Doet Be Ta" ? Criticizing something that exists, isn't in the same as reinventing the wheel. And flame bait doesn't add anything to this conversation really.

This is the problem: 

Linus:
"My place my rules, I use terminal, do it like that because we do it like that or you are a moron"

Sane person:
"This is the link to the guidelines [url]. Github web interface doesnt help/prohibit enforcing these guidlines. Its ok though, we have a team that can help you do it better next time, just use this mailgroup [group]. 

plus: Thank you for your contribution however its a 1/5 quality, and we cant utilize it without proper comments.
or: Thank you for your contribution, it has been forwarded to the appropriate team for commenting and quality control

By the way:
I do agree with the fact that he is trying to enforce his rules, thats the most logical and secure in the long run. HOWEVER being all pms about it doesnt encourage the community at all. 

@MikeBagos I mostly agree with you. But I think an extra team / mailing list or reviewing code / requests that do not meet current standards that are used by Linux developers would mean as much work or even more than just accepting and reviewing everything they get.

A link, as you suggest, that clearly show "how to do it right" should be enough as answer for everyone smart enough to write code and generate a pull request.

Lesson to learn : The original author will never commit with more than 80 chars in a line ever after. 

Linux is the most successful free software because of strict rules. It's not a free-for-all-party. If you were inside Microsoft contributing to Windows, or inside Apple contributing to Darwin or anything, you would probably have to follow some rules as well.

Linus is maintaining the Linux Kernel, he decides the rules to keep it successful and as long as it's working, one can't complain. Work with goals.

"One can't complain". Linus can say someone is a moron. Double win.
El 13/05/2012 20:21, "Carlos Júnior" <
reply@reply.github.com>
escribió:

> Linux is the most successful free software because of strict rules. It's
> not a free-for-all-party. If you were inside Microsoft contributing to
> Windows, or inside Apple contributing to Darwin or anything, you would
> probably have to follow some rules as well.
> 
> Linus is maintaining the Linux Kernel, he decides the rules to keep it
> successful and as long as it's working, one can't complain. Work with goals.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17#issuecomment-5678211

@robermorales didn't get your point. But yes, Linus can, you can't. Thanks for engaging this conversation with helpful points.

@JoshCheek @richo I wrote a patch a few months ago that adds line wrapping to Git. It wraps commit messages to the width of your terminal when you read them, and respects convention — lines that begin with whitespace are not wrapped, lines that look like list items are wrapped with hanging indents.

[Here’s a squash commit](https://github.com/Sidnicious/git/commit/f8d2586215df26aff1fc66281d4f2b44227844bc) of the changes. Below is an example. The patch was rejected by the Git maintainer, whose objections were similar to what @torvalds brought up in this thread, but I believe that formatting conventions have become consistent enough that it makes sense to move the responsibility for line wrapping to the tools (a good example being comment formatting here on the GitHub website, and on programming websites like Stack Overflow where human-language text is regularly mixed with code).

![in a terminal window, a commit message which was not hard wrapped is now wrapped to the window’s width.](http://i.imgur.com/6A0CJ.png)

I believe the point here is that the commit message should be formatted by the author. Like many processing problems this is a write once/read many scenario, it makes sense to spend the extra effort on the single write to display the message exactly as intended.

Noone is forcing you to adhere to this standard in your own repos, the point is that if you want it merged into the mainline linux tree, you need to stick to the upstream convention (as with any project).

It's what they call a "protocol". You are free to ignore it, but then you can't interoperate.

@Sidnicious Nice!

---

@richo says

_"Noone is forcing you to adhere to this standard in your own repos"_

But that is not consistent with [this](https://github.com/torvalds/linux/pull/17#issuecomment-5654674) post, saying:

_"I've told github people about my concerns, they didn't think they
mattered, so I gave up. Feel free to make a bugreport to github."_

I agree. It would be awesome if github's web interface provided a sane way to make sure a commit message adhered to the convention.

Still noone is trying to force you to change your workflow.

@Sidnicious It's a shame your patch wasn't accepted. It seems like it'd make the line wrapping problem in the main bodies of commits an entirely moot issue and make commit logs look better across a variety of interfaces.

Theres :+1:

Also :shipit: ;)

On May 11, 2012, at 4:41 PM, Jonathan Dahan wrote:

> comments like @xpaulbettsx is why we need +1 buttons for comments on github. instead of me cluttering up this thread with a semi-wasted comment.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17#issuecomment-5660462

Guys, guys, guys. This is really simple just attach your git-push-hash to your remote flow. If your commit messages merge recursively then you're doing it wrong. @torvalds isn't re-fitting your columns just because your soft wraps won't hash with Micro$uck FrontPage or whatever you fucking noobs are doing these days.

Pull yourself together.

For those who do not accept GitHub-delivered contributions for your projects, but who insist on using GitHub for hosting, I would suggest documenting this fact in big letters on the front page of your project _as it appears on GitHub_, preferably somewhere near the top.

I suspect that the current practice of inviting people to use GitHub with your projects and then chastising them when they do so is unlikely to lead to anything positive.

In the case of Linux specifically, a quick note in the README directing potential contributors to [Documentation/SubmittingPatches](https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches) would probably help. It also looks as if the latter document could use updating to reflect suggested Git workflow.

On Wed, May 16, 2012 at 1:33 PM, mathew
reply@reply.github.com
wrote:

> I suspect that the current practice of inviting people to use GitHub with your projects and then chastising them when they do so is unlikely to lead to anything positive.

Why not?

What the f*ck is the problem with just trying to get github to improve?

```
                  Linus
```

I like this guy.

On Wed, May 16, 2012 at 1:43 PM, Linus Torvalds
torvalds@linux-foundation.org wrote:

> What the f*ck is the problem with just trying to get github to improve?

Btw, don't get me wrong. I think github does a stellar job at _hosting_.

And that's what I use github for. Sure, I get to host the kernel over
kernel.org too, but hey, distributed systems are all good, there's no
reason not to allow people to fetch from github if they want to, and
as a nice backup plan.

So github is great at hosting, and I think using those excellent
hosting facilities is great.

I think github is horrible at creating commits or pull requests, but I
don't _use_ those facilities, so quite frankly, I don't really care
that much.

I'm perfectly happy to argue about it until the cows come home,
though. I don't mind _arguing_. It's one of my favorite hobbies, in
fact.

I turned off the github "issue tracking" and "wiki" things for the
kernel, because I don't want to use it, we have better models
elsewhere.

The github pull requests I can't turn off, despite us having better
models elsewhere. So if I get one, I instead tell people why they are
really horrible, and get to be snarky at the same time.

End result: if somebody _else_ wants to use github pull requests, go
wild. If you use them for the kernel, you need to first get github to
do a better job at it, though. Or live through me cursing at you and
calling you names.

```
                Linus
```

@torvalds github will improve, it's a matter of time. The economics here are
that it brings simple 80% functionality to the masses: issues, wikis, pull
requests, privacy. You need 100%. It's the same reason I host my sites on
Wikidot, the github wikis are (still) too simple for my use. I assume it'll work
in a couple of years. In the meantime, that simple 80% lets me bring
non-technical people into the process, which is a real benefit.

> I don't mind _arguing_. It's one of my favorite hobbies, in fact.

That's a bit redundant by this point.

@BilgeXA the problem here in the github community is that there are also people that _don't_ argue, but like you write comments that are not going to be useful in any way. There is this idea that trolling is cool. This is the triumph of mediocrity, actually.

@Sidnicious I would imagine it was rejected because there is a large minority of cases where you don't want a line larger than 72 columns to be wrapped--it's often more important to see how the text was originally formatted, and a set of error messages starts to look terrible when they're a bit too long for the terminal. Often, the first 72 characters are enough to get the meaningful bit of the error message (especially when you have several related in a row); when it's not enough, the reader can choose to resize his terminal, swap to the next set of columns, etc.

Since it's hard to automatically word wrap prose but not code/error messages/program output/etc., and the functionality is not universal, it makes sense to place the onus on the writer to format his text in a way that will be easily readable for a large set of readers. As with writing in general, the writer cares more about having his output read than the reader cares about reading it; spelling rules and grammar conventions exist to provide a low barrier for the reader to quickly understand the writer, not just so teachers can slap wrists over syntax. Likewise, conventions about formatting and what data to include are provided so that the reader can parse your output quickly and move on to one of the hundreds of other similar pieces he needs to address.

80 characters has remained a safe convention not because it's the widest anyone thinks a terminal should be, but because it's a safe minimum that everyone can expect, and which tends to work well for visually scanning, at least at current font sizes. The width has the added benefit of allowing developers to have multiple windows visible on their fancy modern screens with the knowledge that there is an accepted width to which they can shrink their terminal and still get predicted behavior out of 90% of the data they can read. I currently have several dozen windows open, and almost a dozen tiled visibly on my screen; I'm very happy that I've been able to keep my terminal at the same width for several days and meet pretty much all of my needs.

At any rate, I haven't seen anywhere that @torvalds thinks GitHub should require every user to follow his desired convention--he simply thinks the tools should be reworked so that they enable and encourage developers to do so. Imply that certain pieces of information and formatting rules are desired, and many new users would fall into the habit. Several people have mentioned a markup that would allow GitHub to know what to wrap and what not to; this would allow a maintainer to set conventions for their individual repo, and would produce better output with less effort from the writer. While this would do less to educate new git users about useful conventions, it would still lead to better output.

At the end of the day, it's the writer's job to ease the reader's job, and it's the tool's job to ease the writer's job. An optional/default setting in the tool and perhaps viewers that makes it easier for people to follow convention without worry (heck, I didn't know that the git convention was 72 as opposed to the traditional 80 until I read this thread) would go a long way.

> What the f*ck is the problem with just trying to get github to improve?

Nothing. I agree entirely that they need improvement in this area, and some others.

However, I don't believe that being unpleasant or unhelpful to first-time Linux contributors will get GitHub to improve. (Unless we're talking about contributors who are also employees of GitHub, which I don't believe we are, right?)

When I see a project on GitHub, my expectation is that the project maintainers would like me to use GitHub for any contributions. If that's not the case, I would expect them to at least say so on the project page, so as to avoid wasting my time.

In fact, it might be even better to leave an open blank pull request on GitHub that's just a placeholder saying "This project does not accept pull requests via GitHub", with a note saying where to find the documented submission procedure. That way anyone who wanders into the pull requests area will find out they're in the wrong place.

On Wed, May 16, 2012 at 5:40 PM, mathew
reply@reply.github.com
wrote:

> In fact, it might be even better to leave an open blank pull request on GitHub that's just a placeholder saying "This project does not accept pull requests via GitHub", with a note saying where to find the documented submission procedure. That way anyone who wanders into the pull requests area will find out they're in the wrong place.

Hmm. That sounds like it could be a good workaround for the "cannot
disable pull requests" problem, but looking at the UI, I don't think
your idea works.

The normal way to make pull requests would not be to go to the pull
requests area and look at pending pull requests, but to simply be in
the "source" area and click the "Pull Request" button.

So you'd never see the placeholder, afaik.

That said, I've never actually created a real github pull request
(just seen the effects of others doing so), so maybe the open pull
requests are shown at some other point?

Hmm?

```
                 Linus
```

Just ignore pull requests (leave them open). It'll rapidly teach 
people to use other methods. You're not using the issue tracker
anyhow, are you.

And you should point people to the kernel contribution process right 
up front in the README; this should explain how to make pull requests
and why you don't use or accept github pull requests.

@lpar, @hintjens: I disagree, I don't think adding GitHub-specific instructions to the Linux README is a good idea for two reasons:
1. Not everyone uses GitHub to contribute code to the kernel.
2. The Linux kernel source is hosted in multiples places, GitHub is just one of them.

Therefore  adding GitHub-specific instructions to the README wouldn't make sense for those cases when the kernel source is hosted somewhere else.

Why not fix the real problem instead? Adding GitHub-specific instructions to the README is a band-aid solution to a problem that can be fixed _now_.

# FIX GITHUB, SOLVE THE REAL PROBLEM

> Or live through me cursing at you and calling you names.

That certainly seems to be a challenge for some people.  :)  I'm sure Linus has been called a moron for a lot of his ideas (especially before he was famous / respected) but he shipped working code.  Maybe that changed their tune, maybe it didn't.  I doubt he cares all that much either way.

I think if you aren't called a moron for at least some of your ideas you aren't trying hard enough.  Get over it and ship some code.

Frankly, I took Github for another example of opinionated software like so many other Rails/Mac examples (Basecamp, Heroku just to name two other services). I think those developers have very strong views about their logic and are not likely to change it.

You are good to go as long as you follow along their logic, if not there's really not much love for you - instead they will usually tell you how to understand it and why they think it's brilliant, straight forward and all the other subjective attributes.

I'm using Github but I don't expect them to change for me.

(In this specific case however it seems Github developers actually want to change things)

So, really, the simplest thing would be for github to allow you to disable pull requests on a repo.

I think it is the easiest option. But it is not good for github. Github
already allows people to disable pull requests: if you pay for private
repos nobody requests you anything.

;)

PLEASE, understand me. Github is an awesome freemium service. If you want
features, pay for them. I think, however, that pull requests are the base
for the democratizing of coding we are experiencing at github.

Rober
El 18/05/2012 21:14, "katy lavallee" <
reply@reply.github.com>
escribió:

> So, really, the simplest thing would be for github to allow you to disable
> pull requests on a repo.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17#issuecomment-5793425

There's more to private repos than pull requests but I also suspect that not allowing to disable pull requests might very well be a marketing decision knowing that other options _are_ given ...

@torvalds Are these higher standards documented anywhere?, since —I'd bet— people in general feel for github for the social value of pull-requests/forking (don't look at me, I prefer bitbucket/rhodecode and mercurial [yeah, sorry])... seeing the linux kernel in github might cause them having a false expectation of this space and it would be best to rather channel their contributions through the appropriate channels/filters.

Why not create a single wiki page with a link to that (or verbatim copy of them) with a brief explanation of the purpose of this space?. Oh, I don't know, something along the lines of:

> Dear morons,
> 
> This github repository is for you minions to backup the kernel, If you would like to contribute like a non-moron, 
> please read our commit guidelines over here.
> 
> With love,
> 
> Linus

I advocate for not sugar-coating anything as well (valuable time is generally lost in hypocrisy), and even when I enjoy reading drama in communities (open-source or otherwise), I don't think conflict is something good for any community, even if it is an extended community that doesn't matter that much (who needs 5k+ watchers & ~.8k forkers).

This general confusion might lead to conflict in the future and can be avoided easily.

My 2 mexican cents

you could write a custom hook which triggered to the pull_request event and automatically closes (Update a pull request, setting the stat to closed) the incoming pr with a comment explaining the proper way for sending patches.

http://developer.github.com/v3/repos/hooks/
http://developer.github.com/v3/pulls/comments/

Nonsense. Markdown is for wikis, not for help files.

It's also for READMEs.

No, it's not. It makes the file awfully difficult to read.

Plus, it's a kernel, people _will_ need to read the file in situations where
there's nothing but a tty. Nobody in their right mind would merge this.

That's exactly what markdown does! Anyway I don't use the kernel anymore so I shouldn't care.

Hey @holdenweb I like your poem! :)

take it easy

Oh awesome, we're reviving this? >.<

sounds like fun. brb popcorn

On Wed, Jun 20, 2012 at 12:29 PM, Korvin Szanto
reply@reply.github.com
wrote:

> Oh awesome, we're reviving this? >.<
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17#issuecomment-6464558

## 

Aleks Clark

Ugh...

How the fuck can you unsubscribe from single threads?

On 20.06.2012 22:20, Aleks Clark wrote:

> sounds like fun. brb popcorn
> 
> On Wed, Jun 20, 2012 at 12:29 PM, Korvin Szanto
> reply@reply.github.com
> wrote:
> 
> > Oh awesome, we're reviving this? >.<
> > 
> > ---
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/torvalds/linux/pull/17#issuecomment-6464558

LUG Life baby.

On Wed, Jun 20, 2012 at 1:21 PM, SkaveRat
reply@reply.github.com
wrote:

> Ugh...
> 
> How the fuck can you unsubscribe from single threads?
> 
> On 20.06.2012 22:20, Aleks Clark wrote:
> 
> > sounds like fun. brb popcorn
> > 
> > On Wed, Jun 20, 2012 at 12:29 PM, Korvin Szanto
> > reply@reply.github.com
> > wrote:
> > 
> > > Oh awesome, we're reviving this? >.<
> > > 
> > > ---
> > > 
> > > Reply to this email directly or view it on GitHub:
> > > https://github.com/torvalds/linux/pull/17#issuecomment-6464558
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17#issuecomment-6466027

## 

Aleks Clark

This shits being picked up again because it was mentioned in some article the other day on wired or gizmodo or some shit like that.

You mean this?

(nsfw) http://static02.mediaite.com/geekosystem/uploads/2012/06/v40g6.gif

made my week, personally.

On Wed, Jun 20, 2012 at 1:29 PM, Faisal Abid
reply@reply.github.com
wrote:

> This shits being picked up again because it was mentioned in some article the other day on wired or gizmodo or some shit like that.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17#issuecomment-6466210

## 

Aleks Clark

Yes, GitHub should propose a validator or an assistant to the editor in order to write good commit logs or pull requests. 
That is why high level web interfaces can be so helpfull for some young people who need assistance to _learn_ how to make good commits (those young people just use web interfaces every day and will do it more and more through their cloudy platforms).

PS: I'm not that young and I love my vim... ;)

Hm... is there any way we can close threads like this ? 

@dysoco Nope, but you can disable notifications (see the link down there ↓) ... which I'm doing right now :)

Most of the recent traffic on this bug is from people putting "#17" in their commit message.  GitHub really needs to fix this too -- how many times is this bug is going to be "referenced" over the life of the kernel?

Interestingly, most of the referenced commits have awesome commit messages.  And they'd be near impossible to write using github's ui.

that doesn't change anything... 
0x15E is equal to 0x015E (and also equal to 0x0000015E)

http://ideone.com/wzJoG

To get your stuff accepted in the tree, you have to notify them on the mailing list, or send an email to Linus...
See: http://www.tux.org/lkml/

I don't do github pull requests. Nobody does. They don't work.

Use the normal kernel pull models, with emails and real pull requests. And
send them to the right parties. They probably want patches, not pull
requests anyway, since that way they can more easily comment on what is
going on.

```
          Linus
```

On Sat, Nov 10, 2012 at 12:16 PM, Paolo Stivanin
notifications@github.comwrote:

> added support for "foxconn hon/hai 0489:e027" bluetooth which is an
> 
> ## Atheros 3011 chip
> 
> You can merge this Pull Request by running:
> 
>   git pull https://github.com/polslinux/linux master
> 
> Or view, comment on, or merge it at:
> 
>   https://github.com/torvalds/linux/pull/25
> Commit Summary
> - added support for Sony Vaio E-Series
> - added support for Sony Vaio E-Series
> 
> File Changes
> - _M_ drivers/bluetooth/ath3k.c (1)
> - _M_ drivers/bluetooth/btusb.c (1)
> 
> Patch Links
> - https://github.com/torvalds/linux/pull/25.patch
> - https://github.com/torvalds/linux/pull/25.diff
>   
>   —
>   Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/25.

Nobody takes kernel pulls from github pull requests. Stop doing them. They
are crap.

Use the "git request-pull" scripting instead, which does this properly.

```
         Linus
```

>  objectively superior
> objectively better

I object to labeling an opinion objective because language is more efficient if opinions are assumed objective (on a binary scale) unless otherwise mentioned

> Word-wrapping is a property of the _text_. And the tool you use to
> visualize things cannot know. End result: you do word-wrapping at the
> only stage where you _can_ do it, namely when writing it. Not when
> showing it.
> 
> The tool displaying the thing can't know. The person writing the
> commit message can. End result: you'd better do word-wrapping at
> commit time, because that's the only time you know the difference.

This is why the principles of free software is

```
A program is free software if the program's users have the four essential freedoms and one essential non-freedom:

* The freedom to run the program, for any purpose (freedom 0).
…
* The non-freedom to word-wrap (non-freedom 0).
```

(If you argue that the above `nowrap` element illustrate a disadvantage with wrapping during display I argue that `pre-wrap` is more efficient than `nowrap` and that it should be used on this site <https://github.com/github/markup/issues/168> .)

@torvalds and everyone else... I think that word-wrapping when writing is clearly wrong place where to do it (sames as forced wrap when viewing). Because you can't know where to wrap (and it takes your time if you do it manually). You can't assume everyone need it at 72 char margin. For plain text and most of time it will be good enough, but it won't be good everywhere. When you do word-wrap you don't and can't specify font size nor family. And who says font should be monospaced? Just because consoles mostly are such isn't good argument, because console font can be changed (including size) even to non-monospaced. Also it's possible that formatting style (font, size etc) might be changed after you've done your wrapping so making it useless.

What I want to say is that plaintext isn't good enough for our nowadays needs, we need ability to format text. Because we want mix wrapable text (our comments) with non-wrapable (source code). And by the way this manual word-wrapping IS text formatting. Formatting text that's not meant to be formatted. Only solution I could see is that we need some kind of markup. So we can separate these 2 cases and render text when displaying accordingly. Then wouldn't have to try guess when wrap and when not. What kind of markup, that's pretty hard question. Most markups are too heavy HTML, BBCode. Maybe something like markdown.

And for those who say that it's easier to read <= 80 chars: I think that it should be customizable preference not enforcement. Because people are different, you can't say that everyone want it so, while mostly it's said that best line length is 50-75 chars I'm sure [it's not true always](http://viget.com/inspire/the-line-length-misconception). Maybe I read on phone and would prefer 40 chars per line.

Main point why wrapping when writing is useless is because you CAN'T know when to wrap. It just looks kinda weird [screenshot](http://i.imm.io/QLQV.png)
And even if you think you got right... Here's same page in console with lynx. It actually looks good but all line breaks were removed by engine and words wrapped at different places.
![lynx](https://f.cloud.github.com/assets/651800/34424/2e8d7780-511c-11e2-9818-efcecb7357f7.png)

by enforcing hard wrap makes it inflexible, because there's no way to use different window width. Currently there's no way to separate wrapable text from unwrapable.

![git](https://f.cloud.github.com/assets/651800/34452/7b29422a-511e-11e2-8bc3-7d144734658e.png)

At left side we've wider window where we could see more text at bottom if only that extra space would be used... And at right if text would be wrapped wouldn't have to scroll horizontally. Of course there's things which never should be wrapped.

Solution is some kind of markup.

yea but how are you gonna do ascii art in a non-monospaced font? That's
just silly.

On Fri, Dec 28, 2012 at 11:03 AM, Dāvis notifications@github.com wrote:

> @torvalds https://github.com/torvalds and everyone else... I think that
> word-wrapping when writing is clearly wrong place where to do it (sames as
> forced wrap when viewing). Because you can't know where to wrap (and it
> takes your time if you do it manually). You can't assume everyone need it
> at 72 char margin. For plain text and most of time it will be good enough,
> but it won't be good everywhere. When you do word-wrap you don't and can't
> specify font size nor family. And who says font should be monospaced? Just
> because consoles mostly are such isn't good argument, because console font
> can be changed (including size) even to non-monospaced. Also it's possible
> that formatting style (font, size etc) might be changed after you've done
> your wrapping so making it useless.
> 
> What I want to say is that plaintext isn't good enough for our nowadays
> needs, we need ability to format text. Because we want mix wrapable text
> (our comments) with non-wrapable (source code). And by the way this manual
> word-wrapping IS text formatting. Formatting text that's not meant to be
> formatted. Only solution I could see is that we need some kind of markup.
> So we can separate these 2 cases and render text when displaying
> accordingly. Then wouldn't have to try guess when wrap and when not. What
> kind of markup, that's pretty hard question. Most markups are too heavy
> HTML, BBCode. Maybe something like markdown.
> 
> And for those who say that it's easier to read <= 80 chars: I think that
> it should be customizable preference not enforcement. Because people are
> different, you can't say that everyone want it so, while mostly it's said
> that best line length is 50-75 chars I'm sure it's not true alwayshttp://viget.com/inspire/the-line-length-misconception.
> Maybe I read on phone and would prefer 40 chars per line.
> 
> Main point why wrapping when writing is useless is because you CAN'T know
> when to wrap. It just looks kinda weird screenshothttp://i.imm.io/QLQV.png
> And even if you think you got right... Here's same page in console with
> lynx. It actually looks good but all line breaks were removed by engine and
> words wrapped at different places.
> [image: lynx]https://f.cloud.github.com/assets/651800/34424/2e8d7780-511c-11e2-9818-efcecb7357f7.png
> 
> by enforcing hard wrap makes it inflexible, because there's no way to use
> different window width. Currently there's no way to separate wrapable text
> from unwrapable.
> 
> [image: git]https://f.cloud.github.com/assets/651800/34452/7b29422a-511e-11e2-8bc3-7d144734658e.png
> 
> At left side we've wider window where we could see more text at bottom if
> only that extra space would be used... And at right if text would be
> wrapped wouldn't have to scroll horizontally. Of course there's things
> which never should be wrapped.
> 
> Solution is some kind of markup.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/17#issuecomment-11738817.

## 

Aleks Clark
cell: 775-391-6114

not everything you write is ascii art, but yes console with non-monospaced font could be kinda silly as everything would look quite bad, but it's limitation in console design that you can't mix different fonts. Here on GitHub this text isn't mononspaced but there's no problem to embed ascii art

```
        .___.
       /     \
      | O _ O |
      /  \_/  \
    .' /     \ `.
   / _|       |_ \
  (_/ |       | \_)
      \       /
     __\_>-<_/__
     ~;/     \;~
```

use monspaced font where it's necessary (this GitHub monospaced font still isn't best for ascii art). But I'm not arguing that you should use non-monospaced font. I'm just saying that if you do word-wrapping when writing and make it specific for some font (like here for non-monospaced) and then view it under different font (like in console with monospaced) all your word-wraping can be thrown in trash. If it would be done automatically when displaying then it's possible to calculate where exactly wrap no matter what font & size is used.

Whoa, glad you did that. You prevented a Y2K...

U MAD, LINUS?

Linus doesnt like github pull requests...

Miss click on git

@torvalds, I know that is a bit stupid to have to create a CONTRIBUTING file on the repo just for this, but you could use it to say where they can find the documented submission procedure.
This would create a warning when submitting the PR (see https://github.com/blog/1184-contributing-guidelines).

In my opinion, this filename should be a configuration available on github to say which file you want to use for that warning, tho.

Post this on the kernel mailing list. Torvalds doesn't do GitHub pull requests.

may I ask what is the swap value for?

The compiler will get rid of the temporary variable anyway this is just a different way or writing it.

12 GB
On 12 May 2013 23:30, "Rubén Marrero Ruiz" notifications@github.com wrote:

> may I ask what is the value swap for?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/32#issuecomment-17782140
> .

Thanks

Linus typically doesn't do pull requests via GitHub AFAIK.

Hello,

I've published [a jquery plugin](https://github.com/oelmekki/jquery.textWrapper.js) to solve part of the problem Linus is 
mentionning : text wrapping in web interface.

It allows to automatically wrap text in textareas, can be toggled on 
and off and allows to fire wrapping manually to reshape a paragraph.

I've contacted github about this. But if you want to use it immediately 
on github (or if they decide not to use it), I've also published a 
[chrome extension](https://github.com/oelmekki/github_text_wrapper) that automatically converts all textareas on github to 
use the plugin.

@oelmekki Thanks a lot! Amazing  extension =)

This is not how things are done with Linux. I strongly recommend
reading the files in Documentation/development-process. (think I have
that right)

I know you're a young guy but don't be in such a rush to start
submitting patches. As you become more familiar with Linux you'll find
plenty of opportunity to fix real bugs. :)

Jim

Today i will agree to something in the internet.
And shall this be what @jim02762 have sad above.

Also, totaly cannot not notice you avatar XDDD

Please do this correctly. No github pull requests, and send them to
the proper people (in this case, the list is

  Ivo van Doorn IvDoorn@gmail.com (maintainer:RALINK RT2X00 WIR...)
  Gertjan van Wingerde gwingerde@gmail.com (maintainer:RALINK RT2X00 WIR...)
  Helmut Schaa helmut.schaa@googlemail.com (maintainer:RALINK RT2X00 WIR...)
  "John W. Linville" linville@tuxdriver.com (maintainer:NETWORKING [WIREL...)
  linux-wireless@vger.kernel.org (open list:RALINK RT2X00 WIR...)
  users@rt2x00.serialmonkey.com (moderated list:RALINK RT2X00 WIR...)
  netdev@vger.kernel.org (open list:NETWORKING DRIVERS)

which you would have gotten if you had run

  ./scripts/get_maintainer.pl -f  drivers/net/wireless/rt2x00/

which is quite useful).

Also, generally for driver updates, especially small ones, just send
people a patch by email with the desription and sign-off.

```
                Linus
```

What's the point of this patch?

Translation file "READEME" for Portuguese and encouraging others to do the
same with the other documentation

2013/8/29 Jesus Ramos notifications@github.com

> What's the point of this patch?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/45#issuecomment-23528003
> .

## 

_Evandro Bruno Zanatta_
Desenvolvedor Web
Agradeço pela atenção e interesse

How does your patch accomplish anything though? It's just a file with the word start in it, maybe if it was actually a translation of the README it might make sense but this is useless really.

ok..
I will translate here first locally and then send the whole file....

As I read The Art of Unix Programming by @eric-s-raymond I realize I should always remember to STFU and listen and read to how guys like @torvalds and Linux Kernel developers regulate merges on their project, because all our new school shit only hopes to be that stable and important in 40 years.

Yeah I said it.  But just saying. This thread is awesome.  <3

::puts head down in shame::

This is not how to do kernel development. You need to talk to the
maintainers of the code in question, which in this case would be

  ./scripts/get_maintainer.pl -f net/802/mrp.c:

  "David S. Miller" davem@davemloft.net (maintainer:NETWORKING
[GENERAL],commit_signer:4/4=100%)
  David Ward david.ward@ll.mit.edu (commit_signer:2/4=50%)
  Patrick McHardy kaber@trash.net (commit_signer:1/4=25%)
  Stephen Hemminger stephen@networkplumber.org (commit_signer:1/4=25%)
  Eric Dumazet edumazet@google.com (commit_signer:1/4=25%)
  netdev@vger.kernel.org (open list:NETWORKING [GENERAL])

and I'm pretty sure that they don't want just some random github pull
request either. Patches, explanations, background. And then _when_
they trust you, you can use the proper git "request-pull" script to
generate a high-quality pull request that you send from a real email
address, not the random stuff github generates. That said, for a
single small commit, an actual emailed patch is probably the way to
go.

github people - is there really no way to turn off Pull requests like
this and have an explanation pointing to
Documentation/SubmittingPatches or something? The kernel doesn't take
github pull requests, and never will. They don't contain enough
information, and they don't have the proper context.

```
                 Linus
```

On Mon, Sep 16, 2013 at 1:34 PM, noelbk notifications@github.com wrote:

> Added periodic timer from [802.1Q-2011] to retry if MRP loses messages. MRP
> used to lose JoinIn messages and never retry if it sent messages before the
> interface became ready.
> 
> The periodic timer from the 802.1Q spec never turns off. It fires every
> second, causing MRP to bounce from state QA to AA and back. You might think
> that would stop when the registrar responds with an JoinIn, but there's no
> state in the MRP state table to ignore the periodic timer after getting a
> reply. The result is MRP sends a JoinIn message every second. This may not
> be desirable, but it's what the spec requires.
> 
> [802.1Q-2011]
> http://standards.ieee.org/findstds/standard/802.1Q-2011.html
> 
> ---
> 
> You can merge this Pull Request by running
> 
>   git pull https://github.com/noelbk/linux master
> 
> Or view, comment on, or merge it at:
> 
>   https://github.com/torvalds/linux/pull/48
> 
> Commit Summary
> 
> added periodictimer to mrp to allow retries when packets get lost
> cleaned up debug prints before committing back to master
> clean up before pull request
> 
> File Changes
> 
> M include/net/mrp.h (1)
> M net/802/mrp.c (45)
> 
> Patch Links:
> 
> https://github.com/torvalds/linux/pull/48.patch
> https://github.com/torvalds/linux/pull/48.diff

Oops, sorry for wasting your time.  I tried looking for a HOWTO to submit
this, but totally missed Documentation/SubmittingPatches.  Duh.

## Cheers,

Noel

On Mon, Sep 16, 2013 at 12:53 PM, Linus Torvalds
notifications@github.comwrote:

> This is not how to do kernel development. You need to talk to the
> maintainers of the code in question, which in this case would be
> 
> ./scripts/get_maintainer.pl -f net/802/mrp.c:
> 
> "David S. Miller" davem@davemloft.net (maintainer:NETWORKING
> [GENERAL],commit_signer:4/4=100%)
> David Ward david.ward@ll.mit.edu (commit_signer:2/4=50%)
> Patrick McHardy kaber@trash.net (commit_signer:1/4=25%)
> Stephen Hemminger stephen@networkplumber.org (commit_signer:1/4=25%)
> Eric Dumazet edumazet@google.com (commit_signer:1/4=25%)
> netdev@vger.kernel.org (open list:NETWORKING [GENERAL])
> 
> and I'm pretty sure that they don't want just some random github pull
> request either. Patches, explanations, background. And then _when_
> they trust you, you can use the proper git "request-pull" script to
> generate a high-quality pull request that you send from a real email
> address, not the random stuff github generates. That said, for a
> single small commit, an actual emailed patch is probably the way to
> go.
> 
> github people - is there really no way to turn off Pull requests like
> this and have an explanation pointing to
> Documentation/SubmittingPatches or something? The kernel doesn't take
> github pull requests, and never will. They don't contain enough
> information, and they don't have the proper context.
> 
> Linus
> 
> On Mon, Sep 16, 2013 at 1:34 PM, noelbk notifications@github.com wrote:
> 
> > Added periodic timer from [802.1Q-2011] to retry if MRP loses messages.
> > MRP
> > used to lose JoinIn messages and never retry if it sent messages before
> > the
> > interface became ready.
> > 
> > The periodic timer from the 802.1Q spec never turns off. It fires every
> > second, causing MRP to bounce from state QA to AA and back. You might
> > think
> > that would stop when the registrar responds with an JoinIn, but there's
> > no
> > state in the MRP state table to ignore the periodic timer after getting a
> > reply. The result is MRP sends a JoinIn message every second. This may
> > not
> > be desirable, but it's what the spec requires.
> > 
> > [802.1Q-2011]
> > http://standards.ieee.org/findstds/standard/802.1Q-2011.html
> > 
> > ---
> > 
> > You can merge this Pull Request by running
> > 
> > git pull https://github.com/noelbk/linux master
> > 
> > Or view, comment on, or merge it at:
> > 
> > https://github.com/torvalds/linux/pull/48
> > 
> > Commit Summary
> > 
> > added periodictimer to mrp to allow retries when packets get lost
> > cleaned up debug prints before committing back to master
> > clean up before pull request
> > 
> > File Changes
> > 
> > M include/net/mrp.h (1)
> > M net/802/mrp.c (45)
> > 
> > Patch Links:
> > 
> > https://github.com/torvalds/linux/pull/48.patch
> > https://github.com/torvalds/linux/pull/48.diff
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/48#issuecomment-24539030
> .

Ignore

What is this even...?

Cat on my keyboard is what that was.  Sorry :p.  Infuriates  me,  it's
brand new and she's under the impression I spent 2 grand on a heated cat
bed.
On Oct 9, 2013 12:28 PM, "Justin Pumford" notifications@github.com wrote:

> What is this even...?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/50#issuecomment-25982485
> .

However, very impressive typing for a cat...

genius cat, now we can say even cats trying to make Linux better! =)

If you want to get stuff into the kernel for real, I'd suggest looking at Documentation/SubmittingPatches and send them to the mailing list instead pull requesting here.

r u don't know how to use git?

发自我的小米手机

Robert B Colton notifications@github.com编写：

> What the fuck is this shit?
> 
> —
> Reply to this email directly or view it on GitHub.￼

Dear admin,
what i get mailed to is abusing.i cant withstand things like fuck
etc.we are mature beings here.
Do your part admin

Linus does not accept pull requests from github. Send an e-mail to LKML. 

How to send an email to LKML ?

http://www.cadsoft.de/people/kls/vdr/ => Not Found. Apologies, but the page you requested could not be found.

http://www.metzlerbros.org/dvb/ => Not Found. The requested URL /dvb/ was not found on this server.

http://xinehq.de/ => The page is not displayed

http://cvs.tuxbox.org/ => projet dead, no code source :(

bad idea.

http://lwn.net/Articles/200422/

Reaching back a ways, I know, but to a question @aleksclark raised..

> yea but how are you gonna do ascii art in a non-monospaced font? That's just silly.

Not really that hard. Unicode includes a full range of Half-Width and Full-Width glyphs covering most of the basic ASCII characters, so you can do things like this. (As you might guess, I had to edit this from the significantly-more-rude original.)

．．．＿．．．．．．．
．．｜．⁣｜．．．．．．
．．｜．｜．．．．．．
．．｜．｜．．．．．．
．．｜．｜＿．＿．．．
．／｜．｜．｜．⁣｜＿．
｜．｜．｜．｜．｜．｜
｜．｜．｜．｜．｜．｜
｜．．．．．．．．．｜
．＼＿．．．．．＿／．

P.s> Why the dotfield background? While full-width characters are generally supported, MANY systems — lookin' at you, Facebook — do stupid things when confronted with the equivalent-width em spaces (or multiple consecutive whitespace characters in general).

Whoops, PR to wrong repo! :cold_sweat:

Unfortunately Linus does not merge github PRs, read this: https://github.com/torvalds/linux/pull/17

Also see the comment starting at [line 652](https://github.com/torvalds/linux/blob/d158fc7f36a25e19791d25a55da5623399a2644f/fs/ext4/resize.c#L652).

i.e.  The code should read:

```
 // current power of three, init to 3^0
 unsigned three = 1;
```

Regardless your patch is broken and wrong.

pull-linuxmaster

Ok, after submitting this and reading the comments on some of the other pull requests I see that this isn't going to get accepted. I'll try and do it the way suggested here: https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

Do comment typo style fixes get accepted, or do they need to be bundled with something actually useful?

Why in the world would you wanna do that?

Also, Linus doesn't accept github pull requests. See https://github.com/torvalds/linux/pull/17.

This is awesome news for everyone with ten trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion trillion exabytes of memory.

I'm fairly sure it's just someone desperate for a change they added to the linux kernel...

As said above, not many people have that much memory...

:-)

On Mon, Mar 17, 2014 at 6:47 AM, biciman124 notifications@github.comwrote:

> I'm fairly sure it's just someone desperate for a change they added to the
> linux kernel...
> 
> As said above, not many people have that much memory...
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/78#issuecomment-37802837
> .

@biciman124 its obviously a joke

This is why aliens won't talk to us.

Aff
:facepalm:

you forgot the 6! 

wish someone would notice when i derp, and comment... :)

Does it actually work?

This looks amazing... :P

And why would anyone want to use it?

Would you mind put the link of reference?
The link on the first discussion message got 404.

Thanks

On Tue, Mar 18, 2014 at 10:50 AM, enedil notifications@github.com wrote:

> And why would anyone want to use it?
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/81#issuecomment-37905283
> .

## 

Mohammad Etemaddar
http://goog_1283906581
metemaddar.ir
Web Development Services
- in\*  http://www.linkedin.com/pub/mohammad-etemaddar/9/832/462

submitted through proper channels

Should have at least started by putting the check inside of a function.

Your other "joke" pull request made me laugh a bit. However, the linux kernel (_particularly_ torvalds:master) isn't the place for this kind of humor.

Thank you guys so much for cleaning up this filthy kernel :+1: 

Glad to see that not everyone is a bigot!

yes @raincoats you should be banned for life...  

Wow you guys did a good job at making the readme not make sense! Keep up the great work!

@joshkurz lol u k

As has been said many times before torvalds doesn't accept pull requests via github.

Oh gods. I seriously hope you're just a bunch of trolls. Changing perfectly valid English (or German) into an unreadable mess that 'd be graded a F by any English language teacher makes feminism look like a bunch of dogmatic taliban.

Quit doing that bullshit and do REAL work for advancing feminism. Please.

Seriously? What a bunch of trolls you are.

Oh god..
![tumblr_m6yce2rdra1raei82o1_500](https://f.cloud.github.com/assets/3954728/2493511/59705f2e-b298-11e3-898c-15b945f3ef3b.gif)

Presumably @Feminist-Software-Foundation is just pointing out how ridiculous most feminists are. Keep up the good work :)

As most feminist foundations you are not helping women at all getting more credibility in the IT world. What is this kind of initiative? I only care about code, architecture, how it works etc. Not who wrote it... Do you see a "Masculist Software Foundation"?

Shit man @Feminist-Software-Foundation , you remind me of http://blog.fefe.de/?ts=addeacc3 (German feminazis live in action).

> with the invention of
> the philosophical advancements
> the schools

Clearly you meant "xhe"?

I'm sorry, I don't see sexism in just labels and words. I see sexism in sentences like "women don't know how to write code" ;-). Sentences I don't see in my every day life of developer and open source projects I use or contribute to. And I will never be a feminist if it means supporting the way you're thinking. 
I work with women that don't care with that kind of stuff. You are loosing your time.

I personally do not see how this will change anything, pretty much everything your changing is just the text from the license itself so if you want it to mean something get the actual license changed and then everyone will change it without question.

u wan sum fuk

This is clearly trolling xD

As I said torvalds doesn't accept pull request done on github, it's on various other pull requests. To accept one pull request would be unfair. Even if that pull request is politically minded.

heh

@chenasraf This is not 'trolling'. A lot of people are offended by xhe offensive comments all around us.

this should be merged immediately

@Feminist-Software-Foundation please just take a gun, shoot yourselves and vanish off this planet before you drag feminism even deeper into the mud.

People already think you're serious but in my opinion you're a bunch of stupid retards who could actually use a good fuck instead of whining around on the internet all the time.

/g/ seems to be having fun tracking this, there were two threads about it last I checked.

You are all being trolled. That is my guess. If you just look at their ideas and code examples you will see how ridic they are. 

Privilege Checker
https://github.com/Feminist-Software-Foundation/C-plus-Equality/blob/mistress/examples/PrivilegeCheck.Xir

Social media lynchmob initiator for misogynistic GitHub repo
https://github.com/Feminist-Software-Foundation/C-plus-Equality/blob/mistress/examples/github_report.Xe

Needless to say this is TROLLING! There is even a web site which I will not even bother to link to. 

@Feminist-Software-Foundation there's a difference between a death threat and asking someone to remove herself out of the equation. The latter is not illegal :)

@ALulzyApprentice I've been watching this since it started, it really is just a bunch of guys making fun of modern feminism. Shame they're actually being taken seriously by some.

That will be their demise, same for the Vomitive Shithole™ they come from.

/g/ is the technology thread on 4chan

The code itself is useless. For one thing, you didn't even declare facebook_login_is_correct and what it is or does, you aren't working with Facebook at all in this code. Next up, facebook_login_is_correct can't be both a function and a boolean. You only broke it all. Then there's `for (;;){sleep();}`, which means sleep() will run and nothing else, and that is in the kernel which is responsible for what code is running at all times, so on ACCESS DENIED the computer just hangs and freezes.

Forget about that, Linux is only the kernel. Linux by itself does not have the user interface, the authentication control, or even the core system startup/service manager. Get out of this misconception that "Linux" is the whole operating system. You're modifying the Linux kernel, the part that goes in between to manage processes and drivers, applies contexts such as privileges and filesystem locations, and generally is responsible for what code is running at all times.

The correct form of what you're trying to achieve is actually a http://linux-pam.org/Linux-PAM-html/Linux-PAM_MWG.html module for logging in with Facebook, and maybe a GDM greeter which has a discrete "Login with Facebook" option, but this retarded try with the kernel should be closed.

Why not accept pull request and close the issue?

I'll just leave this here: http://knowyourmeme.com/memes/events/c-plus-equality-c

@KonradIT you should read why Linus doesn't accept them, he has good reasons.

@barnold1953 thanks for the clarification, I had forgotten if the FeSF was satire or crazies gone real. :)

Hm... this one too.

Oh please, this isn't funny.

Apparently I'm "spoiling the fun", oh well.

This stupidity has reality goes on for way too long. Please keep your fights away from the technical documentations, and stop trying to make complex texts even more difficult to read by creatively breaking some languages.

Attention whoring at it's best.

@Feminist-Software-Foundation  It's not that he doesn't accept pull requests, it's that he doesn't accept them via git-hub as it strips too much information. I believe this is an excellent case of a straw man.

This is the funniest thing I've seen in a long time

[Protip: this is an un-funny joke](http://knowyourmeme.com/memes/events/c-plus-equality-c).

@ekul81 beware, you wrote "strip". Now face the wrath of feminism! :D

@Feminist-Software-Foundation you're doing more harm to the cause of gender equality than you are doing good.

Everybody who sees this will not identify with your "claim"/<del>whine</del> about something completely unrelated.

Please stop impeding the advances made by actual gender activists

Imagine if this got into embedded platforms...lol

Please don't mind my ignorance, but what the hell is "xhe" "xhem" ? Why the hell are the t's replaced by x's ?

I really want to know what happened？

Kyluke notifications@github.com编写：

> @Feminist-Software-Foundation you're doing more harm to the cause of gender equality than you are doing good.
> 
> Everybody who sees this will not identify with your "claim"/whine about something completely unrelated.
> 
> Please stop impeding the advances made by actual gender activists
> 
> —
> Reply to this email directly or view it on GitHub.￼

@Feminist-Software-Foundation you should rewrite all linux kernel to your «fundamentally new» language. Also i think you should invent new computer logic where is no 0 and 1 to make it gender neutral.

@Feminist-Software-Foundation just call it a day

I can't stop laughing...what's the point of the readme if it confuses people instead of helping them ? (Or do u prefer "xhem" here??)

Please do not feed the trolls

If @Feminist-Software-Foundation isn't just a giant stupid troll, this is a really sad day for women programmers. Its sad because the actions of this radical and frankly quite psychopathic group is casting a dark shadow over all the great contributions to software made by real women programmers.

Does@Feminist-Software-Foundation believe its doing good? The stupidity of their actions is unbelievable. You are a disgrace to the human race. Reminds me of [this group](https://www.youtube.com/watch?v=M2KPeMcYsuc).

I somewhat regret my previous post. @Feminist-Software-Foundation is obviously an attention whore trying to create pointless drama, and any further response or participation from the community is just adding fuel to the fire. 

Lets kill this evil cult by ignoring it. They can scream as loud as they want, meanwhile we can prevent their evildoing by ignoring their provocations.

shouldnt you be cliff jungling, @Netherdrake?

good job keep it up not really

oh get over it stop clogging my emails

Please stop arguing, my mailbox is being spammed!
Il giorno 23/mar/2014 21:37, "Feminist-Software-Foundation" <
notifications@github.com> ha scritto:

> @Aristona https://github.com/Aristona @Netherdrakehttps://github.com/NetherdrakeWell done. Calling a feminist an "attention whore" and hand-waving away
> their efforts.
> 
> Stay classy, brogrammers.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/82#issuecomment-38396250
> .

![](https://github.com/Feminist-Software-Foundation/C-plus-Equality/blob/mistress/assets/wallpapers/STOPRAPE.png?raw=true) ![](http://www.reactiongifs.com/r/doc-rivers.gif)

![Oh Linux](http://media0.giphy.com/media/Ha5KomTLlOyIM/giphy.gif)

Much gay, very hate, such female, wasted time, wow, dumb language... 

What a briliant idea!
changing a few word (the->xth, they->xhey..) makes this hub clean!! lol

BULL SHIT

@karansingh9008 "Please don't mind my ignorance, but what the hell is "xhe" "xhem" ? Why the hell are the t's replaced by x's ?"
it is a chromosomal thing i am guessing..
its like X and T's a "T" has two handles easy to phuck oneself with...just a guess of course:/

This is what happens when you don't have an organism who regulates the English language.

@markus it's a simple feminist expression. 

Brilliant! I love this stuff. You, my friend, are the top-level class of all that is Troll!

Let's write the readme using Finnish, because Finnish has no he or she, just "hän" which is gender neutral. This would work for everyone. Finnish is also a very expressive language, that everyone should learn. It's also the native language of Torvalds, so it makes pretty much sense and hän can contribute too.

good idea...

are u water me?

mikachuman notifications@github.com编写：

> Let's write the readme using Finnish, because Finnish has no he or she, just "hän" which is gender neutral. This would work for everyone. Finnish is also a very expressive language, that everyone should learn. It's also the native language of Torvalds, so it makes pretty much sense and hän can contribute too.
> 
> —
> Reply to this email directly or view it on GitHub.￼

bumping for justice

Is the first computer programmer being female not enough credibility for women?

Let's kick en, fr, de and similar european languages out and pick Turkish up, because there is no he or she just 'o'. That is why all feminists prefer  to live in Antalya. Sun, sand and no discrimination. lol

@Netherdrake I wish there is a "like" button in git comment!

So how did this group make it out of tumblr again?

![qljgjd3](https://f.cloud.github.com/assets/3977239/2501194/a20ba35c-b369-11e3-85c3-c47113ec778b.gif)

That Image is not so useful in this situation :-1: 

None of your comments are useful in this situation. This entire thing is bullshit and needs to be stopped, right now. Linus doesn't care, he's laughing at you all. He doesn't reply because there's no reason to, so quit trolling and go back to whatever imageboards you obviously came from.

Then how to contribute a pull request ?

On 3/26/14, envunderscoreexplosion notifications@github.com wrote:

> linus won't take pulls. read #17.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/83#issuecomment-38651549

## 

Best Regards

## Zhongbin Zha(查中彬)

Institute of Computing Technology, Chinese Academy of Sciences.
No.6 Kexueyuan South Road Zhongguancun,Haidian District Beijing,China

read #17 

Please read https://github.com/torvalds/linux/pull/17 and https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

@unload Your post is offensive to me. Do you ever consider anyone's feelings aside from your own?

@Feminist-Software-Foundation 
This thread just got funny again

Oh, Lord, it isn't funny :-1: 

@Feminist-Software-Foundation On the EthicalCode's website you linked to in the first post under rules it is said that "[...] #CleanUpGitHub is about hate speech, not censoring swear words. [...] Be sensible, mature, and honest in your approach to things. [...]" - Please explain how replacing "the" with "xhe", "they" with "xhey" etc. does reduce any _potential_ hate speech in the file you edited.

so the point is: you made a stupid readme, and if tovald will not merge it into the kernel, it is proof that woman have no right? he won't merge this because this repository is belonged to him, if you what to make a linux xernel or something, you can just clone it your own. you have a whole community who is ready to support your code and your fairness, right? why try to make some noise with us? you remind me of some guy try to convince people that the government is evil because they don't accept a day has 4 days.

@Feminist-Software-Foundation.

I am not against an "equal" language, but seriously it is not gonna 
change all the Linux kernel just because you want it. If you want a 
Linux kernel written in C + =, then write it with your friends. But stop 
spamming our mailboxes just for an idea that is rejected.

This is one of the finest examples of trolling I've ever seen.

On Wed, Mar 26, 2014 at 11:06 AM, Vincent notifications@github.com wrote:

> @Feminist-Software-Foundation.
> 
> I am not against an "equal" language, but seriously it is not gonna
> change all the Linux kernel just because you want it. If you want a
> Linux kernel written in C + =, then write it with your friends. But stop
> spamming our mailboxes just for an idea that is rejected.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/torvalds/linux/pull/82#issuecomment-38694790
> .

I'm just gonna put this right here, http://knowyourmeme.com/memes/events/c-plus-equality-c

Here is the thing though... "The" is neutral. It's used either for a man and a woman.

x)

@git-fuck Oh did I offend? My bad.. 

@Feminist-Software-Foundation Let me clarify what you stated and remedy your mistakes: I committed a basic guide to push requirements, but I never implied I believed in your satirical language changes to C+. I'm not sure you really have a leg to stand on here. Anybody can make defines. The only impressive thing was the interpreter which I also made improvements (under another name) on github and on bitbucket in the early stages. 

@Feminist-Software-Foundation Oh my god, I receive more than one hundred emails about this.You are really "闲得". I respect your opinion.But you bother us.I only focus on technical discussion.So stop it please. Thx.

They r really really "得鸠闲"~

qiuwujie notifications@github.com编写：

> @Feminist-Software-Foundation Oh my god, I receive more than one hundred emails about this.You are really "闲得". I respect your opinion.But you bother us.I only focus on technical discussion.So stop it please. Thx.
> 
> —
> Reply to this email directly or view it on GitHub.￼

@Feminist-Software-Foundation Lex me correct xhat for you :)

> @unload, stop trolling. Xou contributed to C-plus-Equality. You wrote Xhe CONSENT guide, and tidied up some exampl@ code.
> 
> Xour recent behaviour is deeply concerning. Xhe Feminist Software Foundation recognis@s and upholds the rights of Xen — xey are not to be trampled. If you continue with xour actions xhen we will have to consider issuing limitations to your future probability in participating in Xeminist Software Foundation projects. We reserve xhe right to impose commit sanctions on xou.

Xou are welxome

This pull request is so lame.

Being gender neutral is one thing, messing up grammar is another...
I don't see how "the" and "they" are not gender neutral; "_the girls_" and "_the boys_" are both valid English AFAIK, as much is "_they committed changes_", whether you're talking about male or female gender.
Making text gender neutral is a positive thing, but there's no need to mess it up because **it is already neutral**. This patch is not "_lame_" or "_trolling_", but actually pretty useless from a linguistic point of view.
**TLDR; stop. Stop it now. Seriously. This satire isn't even fun anymore! Don't bother Linus for that kind of crap.**

This PR made me loose whatever faith in humanity I had left.

Welp, now time to go back to programming.

@Feminist-Software-Foundation A great way to further equality for women in technology?  Get in the line of great companies and female techs like Limor Fried and Adafruit Industries; support the Ada Initiative and long-term science and technical education for women, and job sustainability for them after they graduate.  I have two daughters who are natural born hackers and I'd want them to be taken seriously, like Limor Fried.  I appreciate the sentiment, but the execution begs reconsideration.

That commit is one of the most insanely idiotic things I have ever read. At no point in that rambling incoherent mess were you even close to anything that could be considered an improvement. Everyone on github is dumber for reading that. I award you no points and may God have mercy on your soul.

good

> This particular commit was made to replace pronouns and articles with gender neutral versions in the README of the Linux kernel.

@Feminist-Software-Foundation, please explain to me how this does this when the words that have been changed in the commit are gender-neutral all ready.

Is there any benefit to having this in kernel space instead of user-space?

发自我的小米手机

renweihub notifications@github.com编写：

> Closed #89.
> 
> —
> Reply to this email directly or view it on GitHub.￼

is this thing finally over? I was having fun reading all these.

Well, your feminism actions are welcome, however, I cannot have myself accept you doing these this time. I mean, you are making the README hard to read, why don't you change the dictionaries first for non-English speakers.

After reading this discussion, I'm sad that there is no report "for trolling" function. 

Great job! The bigotry in the Linux readme has offended me for many years.

I think it should be merged on top of 3.4 branch, but not master. Or am I 
miss something here?

daneos notifications@github.com wrote:

> Added Inventec Velocity modem IDs to option driver as it supports this device. It is a modem found in Kohjinsha SC3-VHB.
> You can merge this Pull Request by running:
> 
>  git pull https://github.com/daneos/linux master
> 
> Or you can view, comment on it, or merge it online at:
> 
>  https://github.com/torvalds/linux/pull/95
> 
> -- Commit Summary --
> - option: Inventec Velocity (V HSDPA) support
> 
> -- File Changes --
> 
>    M drivers/usb/serial/option.c (5)
> 
> -- Patch Links --
> 
> https://github.com/torvalds/linux/pull/95.patch
> https://github.com/torvalds/linux/pull/95.diff
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/95

Does we need a 'break' statement at the end of 'case 0' block?

yes it's been added . others types will be added

Why does in case 1 sprintf() need to be called before local_irq_save()? Since there is no 'undefined type' for which we don't do anything, local_irq_save() and some other routines are going to be used anyway, why not leave repeated statements out of the switch?

int printk_type(int type, const char *fmt, ...)
{
    unsigned long flags;
    va_list args;
    char *buf;
    int r;

```
local_irq_save(flags);
buf = __get_cpu_var(printk_sched_buf);

switch(type){
    case 0:
        va_start(args, fmt);
        r = vsnprintf(buf, PRINTK_BUF_SIZE, fmt, args);
        break;
    case 1:
        const char *all_fmt;
        sprintf(all_fmt, "[Error] : %s", fmt);
        va_start(args, all_fmt)
        r = vsnprintf(buf, PRINTK_BUF_SIZE, all_fmt, args);
        break;
}

va_end(args);
__this_cpu_or(printk_pending, PRINTK_PENDING_SCHED);
irq_work_queue(&__get_cpu_var(wake_up_klogd_work));
local_irq_restore(flags);

return r;
```

}

Yes it's been added to , and also the default case .

Also, if you want the function to be visible inside the kernel API (as printk() is) you should add this underneath the closing brace of the function:

EXPORT_SYMBOL(type_printk);

This is exactly why Linus doesn't support pull requests via GitHub. Your willingness to contribute to an open source project is appreciated, but you can't just send pull requests to a major project with broken, untested code. Read the [docs](https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches), go through the proper vetting process, and THEN submit your pull requests (but not here).

OP's current code doesn't work. I made a working version, for educational purposes. Applying this commit (https://github.com/kjenova/linux/commit/26eb273d60d91a0979468e094ea0718348599d65) to the latest kernel (3.15.0-rc7), building the kernel, running it, compiling this module against the kernel and running this module:

#include "/where_your_3.15rc-7_kernel_source_is/linux/module.h"
#include "/where_your_3.15rc-7_kernel_source_is/linux/kernel.h"

int init_module()
{
    printk(KERN_INFO "using printk() with KERN_INFO macro.");
    printk(KERN_WARNING "using printk() with KERN_WARNING macro.");
    printk(KERN_ERR "using printk() with KERN_ERR macro.");

```
printk(KERN_INFO "switching to type_printk().");

type_printk(0, "using type_printk() with normal type.");
type_printk(1, "using type_printk() with error type.");
type_printk(2. "using type_printk() with action type.");
type_printk(-1, "using type_printk() with unsupported type.");

return 0;
```

}

void exit_module(void)
{

}

produces this output on the /usr/var/kern.log of my machine (my .config is http://pastebin.com/BcZCkp8i):

/begin

May 31 17:07:28 kje-desktop kernel: [  177.015377] test_type_printk: module license 'unspecified' taints kernel.
May 31 17:07:28 kje-desktop kernel: [  177.015382] Disabling lock debugging due to kernel taint
May 31 17:07:28 kje-desktop kernel: [  177.015461] using printk() with KERN_INFO macro.
May 31 17:07:28 kje-desktop kernel: [  177.015463] using printk() with KERN_WARNING macro.using printk() with KERN_ERR macro.
May 31 17:07:56 kje-desktop kernel: [  177.015472] switching to type_printk().using type_printk() with normal type.[Error] : using type_printk() with error type.[Action] : using type_printk() with action type.using type_printk() with unsupported type.
May 31 17:07:56 kje-desktop kernel: [  205.352376] general protection fault: 0000 [#1] SMP 
May 31 17:07:56 kje-desktop kernel: [  205.352385] Modules linked in: test_type_printk(PO)

/end

I don't see a reason, why to add this change to the kernel. If there is a reason, go with it through the above mentioned process.

Well, the reason your code didn't work is, that you should've put it under the declaration of wake_up_klogd() (as printk_sched(), on which your code is based on, is).

thank you guys for you comments , i have updated the code 

Don't forget to add this line to include/linux/printk.h

/begin

asmlinkage __printf(2, 3) __cold
int type_printk(int type, char *fmt, ...);

/end

The macro __printf(2, 3) tells us, that the second (we don't start counting at zero here, zero means argument not supplied) argument will be the format string and the third the va_list. __cold is a compiler hint, it tells us to optimise (but not so "agressively", it's "cold" because of that) this functions and place it near other "cold" functions (from: http://axon.cs.byu.edu/~adam/gatheredinfo/tips/tips_gcc.php).

On a side note: your original function also compiles and works (you should put that func at the very end, however), if you add kmalloc(). You can also use the printk_sched() function (I used it in type_printk_using_printk_sched() function).

The full code:

/include/linux/printk.h

add this:

asmlinkage __printf(2, 3) __cold
int type_printk(int type, char *fmt, ...);

asmlinkage __printf(2, 3) __cold
int type_printk_using_printk_sched(int type, char *fmt, ...);

/kernel/printk.c

add this:

asmlinkage __visible int type_printk(int type, char *fmt, ...)
{
    va_list args;
    char *buf;
    char *all_fmt;
    int r;
    unsigned long flags;

```
local_irq_save(flags);
buf = __get_cpu_var(printk_sched_buf);

switch(type) {
    default:
        va_start(args, fmt);
        r = vsnprintf(buf, PRINTK_BUF_SIZE, fmt, args);
        break;
    case 1:
        all_fmt = kmalloc(sizeof(fmt)+11*sizeof(char), GFP_KERNEL);
        sprintf(all_fmt, "[Error] : %s", fmt);
        va_start(args, all_fmt);
        r = vsnprintf(buf, PRINTK_BUF_SIZE, all_fmt, args);
        kfree(all_fmt);
        break;
    case 2:
        all_fmt = kmalloc(sizeof(fmt)+12*sizeof(char), GFP_KERNEL);
        sprintf(all_fmt, "[Action] : %s", fmt);
        va_start(args, all_fmt);
        r = vsnprintf(buf, PRINTK_BUF_SIZE, all_fmt, args);
        kfree(all_fmt);
        break;
}
va_end(args);
__this_cpu_or(printk_pending, PRINTK_PENDING_SCHED);
irq_work_queue(&__get_cpu_var(wake_up_klogd_work));
local_irq_restore(flags);
return r;
```

}
EXPORT_SYMBOL(type_printk);

asmlinkage __visible int type_printk_using_printk_sched(int type, char *fmt, ...)
{
    va_list args;
    char *all_fmt;
    int r;

```
switch(type) {
    default:
        va_start(args, fmt);
        r = printk_sched(fmt, args);
    case 1:
        all_fmt = kmalloc(sizeof(fmt)+11*sizeof(char), GFP_KERNEL);
        sprintf(all_fmt, "[Error] : %s\n", fmt);
        va_start(args, all_fmt);
        r = printk_sched(all_fmt, args);
        kfree(all_fmt);
        break;
    case 2:
        all_fmt = kmalloc(sizeof(fmt)+12*sizeof(char), GFP_KERNEL);
        sprintf(all_fmt, "[Action] : %s\n", fmt);
        va_start(args, all_fmt);
        r = printk_sched(all_fmt, args);
        kfree(all_fmt);
        break;
}
return r;
```

}
EXPORT_SYMBOL(type_printk_using_printk_sched);

/begin

Jun  1 20:20:15 kje-desktop kernel: [   67.877502] test_type_printk: module license 'unspecified' taints kernel.
Jun  1 20:20:15 kje-desktop kernel: [   67.877506] Disabling lock debugging due to kernel taint
Jun  1 20:20:15 kje-desktop kernel: [   67.877569] using printk() with KERN_INFO macro.
Jun  1 20:20:15 kje-desktop kernel: [   67.877570] using printk() with KERN_WARNING macro.using printk() with KERN_ERR macro.
Jun  1 20:20:15 kje-desktop kernel: [   67.877572] switching to type_printk().switching to type_printk_using_printk_sched().
Jun  1 20:20:15 kje-desktop kernel: [   67.877765] [sched_delayed] [Error] : using type_printk_using_printk_sched() with unsupported type.

/end

Important: as seen, only one of the outputs of those functions is seen, due to scheduling. So you're better off with the current version!

ok I corrected the code 

Yeah, this is annoying, but **_[Linus does not merge pull requests from GitHub](https://github.com/torvalds/linux/pull/17#issuecomment-5654674)**_.

The First "Computers" was womans, yes seem ok, after, womans was programming in Cobol, seems ok too. With the advance of Hippies and all your Peaces & Loves, womans left Computer Science by the Hippie Communitys with Hippie Boys and so far very much sex, drugs, rock n roll and more shit... Nowadays there are fews womans here in Computer Science, but all of respect.

Yet, I was trolling.

I agree that gender neutral pronouns should be used over masculine or feminine ones, however I prefer the term equalist over feminist because it is more gender neutral.
though what I don't like are these made up words like "xhem", "xhe", and  so on which are not actual words that anyone knows plus "them" is gender neutral as is "the".

FSF womens have 2 choices:  Create own apps and convince all to use it or You could join in the team to get notoriety as a developer, implementing new features. Sounds fine to me. I guess to all developers here too. 

Stop trying to take control and Helps Them doing something useful. 
Thanks.

> This particular commit was made to replace pronouns and articles with gender neutral versions in xhe README of the Linux kernel.

Fixed that for you.

> Fixed xhat for you.

Fixed xhat for me.

anyone know even how xhat, xhe, and xhis are pronounced?

Gender neutral pronouns are bullshit.
There is NOTHING sexist about the, that, etc.

OH NO! SOME WORDS HAVE XHE LETTER H FOLLOWED BY THE LETTER E IN XHEM!
SEEEEXIIIISSSSM!

On Mon, Jun 23, 2014 at 5:12 PM, Marcus Danillo M. Nunes <
notifications@github.com> wrote:

> Fixed xhat for you.
> 
> Fixed xhat for me.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/82#issuecomment-46917937.

I think it's zat, zee, and zis.

On Mon, Jun 23, 2014 at 5:21 PM, zeitue notifications@github.com wrote:

> anyone know even how xhat, xhe, and xhis are pronounced?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/82#issuecomment-46918478.

As some said above sexism does not simply arise by the interpretation of simple words. Sexism would really mean "women can't be real programmers" or bulls**\* like that. 
Also I think that "feminism" is not the same as anti-sexism. So some feminists should think about how real emancipation of women AND men might be accomplished. 
So either they are trolls,.. then we should ignore them. Or they are serious... then we should ignore that stupid opinion and the ridiculous pull request, too =P

This weird pull request has been dead for over a month now. Let it rest in peace!

@philos: I'm not sure they are trolls, there are some REALLY extreme
feminists that are totally serious (they don't admit it, but in some cases
they want women SUPERIORITY). Having h followed by e is in no way sexist.
Anyway, I agree with chris. I dont need any more stuff in my inbox either.

On Mon, Jun 23, 2014 at 11:34 PM, Chris notifications@github.com wrote:

> This weird pull request has been dead for over a month now. Let it rest in
> piece!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/82#issuecomment-46936553.

For me, this is daily comedy delivered in my inbox.

This merge request needs to die a death now, because it is complete and utter bollocks.

Well, you can be assured that Mr. Torvalds won't accept this pull request because he doesn't accept commits via Github.

I can't help but think this went a little off topic... All the same, it's hilarious. 

@clfarron4 i think @torvalds is laughing with this pull. 

[ze](http://www.urbandictionary.com/define.php?term=ze)

test

dude, it worked! :D

@ComradePhilos  :)

Why would you change the way you refer a document from "them" to "xhem?" Like if you want to use common gender neutral pronouns "eg they or better yet 'the user' instead of 'he'" that's ok, but "them" is already gender neutral.

tl;dr "The" is fine. It doesn't need to be "Xhe."

Points have been made, repeated, and beaten dead.
So, if you don't have anything new to add, don't comment.
Let this commit die already.

No. In C there is something called Expressions with types.

"Like in any other programming language, in C, there are a number of arithmetic relational and logical operators we can use to write expressions that are made up of simpler basic types."

In C language there are no exceptions.

@oelmekki, all, to make it suck a bit less on a Mac, here's a quick shot from the hip (as in: double @@'s are not part of anyone's commit message, are they?) as a pop clip extension. See https://github.com/mnott/GitWrapper

This is not a bug.
https://github.com/torvalds/linux/blob/164c09978cebebd8b5fc198e9243777dbaecdfa0/drivers/staging/usbip/userspace/libsrc/list.h#L110

And Mr. Torvalds doesn't accept GitHub pull requests.

Thanks for the reply. So how does one contributes to the code?

According to [this](https://github.com/torvalds/linux/pull/11#issuecomment-2023618), one should use kernel pull request instead of GitHub's.

I'm really sorry, this was created by mistake. Please ignore!

This definitely is an incorrect change. The macro expands to a for loop header; you can't separate it from the body with a semicolon. Don't bother sending it in.

Not need to merge. I'm customising my own driver, to expand my PHY intrusion detection system  ro incluse 80211.ac, with emphasis on the use of ath10k DSP. 

Linus doesn't accept pull requests on GitHub.

You should take a look at https://www.kernel.org/doc/Documentation/SubmittingPatches 

@torvalds братишка я тебе покушать принес

Linus doesn't accept Pulls from github.

You should take a look on how to submit a path into Linux Kernel's repo, dude!

Check this: https://github.com/gregkh/kernel-tutorial

... why?

No, in this case they did not mean GNU/Linux.

I would like to propose to add this patch in official linux kernel. Might be this patch will be useful, but of course it will be good to do carefull review of this/

:+1: we need this!

3======================================>

congratz for HARD work

Worked for me as well, thank you @chemelnucfin 

Not surprised that your PR is numbered only 129?

For more information, please refer to https://github.com/torvalds/linux/blob/master/Documentation/HOWTO

Also you should address to the subsystem mailing list.

http://eudyptula-challenge.org/

Linus doesn't accept PRs on github. 

FYI, from everything I've seen, pull requests are not reviewed on GitHub.
Info here on the community process:
https://github.com/torvalds/linux/blob/master/Documentation/HOWTO

Interesting dicussion, what i gained from it is my commit messages are cr*p ! 

adding change for key-payload null check.

I think Linus doesn't accept pull request at GitHub. 

@adolphenom any idea how can i make these changes in source code, or any guidelines? Thanks

In case anyone is interested, there is a [Stylish theme](https://userstyles.org/styles/107938/github-commit-limits) that changes the GitHub commit input/textarea to use a monospace font & adds a background color to show character limits of 50 for the commit title (input) and 72 for the description (textarea)... useful, if you ever plan on commiting directly from GitHub.

![commit-limit](https://cloud.githubusercontent.com/assets/136959/5310952/02338234-7c02-11e4-982b-803af39ac2d7.png)

the abs_y and the abs_ry should negate the val and add 1 because it's the complement of the origin variable

Linus doesn't accept pull requests on GitHub. Also this commit is completely pointless.

Linus doesn't accept pull requests on GitHub. Also this commit is completely pointless.

Wow! After applying this patch to my local linux-next development repository, my computer's ACPI problems have disappeared, the ondemand governor managed to stably run my processor at 150 GHz, ELF binaries parse faster than the time required for light to travel in a vacuum a distance of 1 Planck length, and gcc magically built a kernel module to directly interface with my toaster!

Really?

joshumax is just Kidding .  Don't believe it. btw nice joke.

I said that for the commit, not for the joke :)

https://github.com/torvalds/linux/blob/master/Documentation/HOWTO

This patch seems to be unnecessary, since "asymmetric_key_preparse" is the only function that calls "x509_key_preparse," and it would cause a null pointer dereference fault before x509_key_preparse:

```
static int asymmetric_key_preparse(struct key_preparsed_payload *prep)
    /* Code Omitted */
    if (prep->datalen == 0)
        return -EINVAL;
    /* Code Omitted */
    ret = parser->parse(prep);
```

See: http://lxr.free-electrons.com/source/crypto/asymmetric_keys/asymmetric_type.c

I haven't checked too far upstream, so I'm not sure if *prep is sanitized beforehand though, you might want to look into that..

Linux doesn't accept pull requests

@alex8092 Linus doesn't generally accept pull requests from GitHub, check out https://github.com/torvalds/linux/blob/master/Documentation/HOWTO to find out how to submit these changes.

Pull requests are not accepted here. Please close your request.

Cheers,
Logan

On Sun, Dec 21, 2014 at 11:11 AM, Irvandoval notifications@github.com
wrote:

> ## I made some documentation changes, please review
> 
> You can merge this Pull Request by running
> 
>   git pull https://github.com/Irvandoval/linux my-branch
> 
> Or view, comment on, or merge it at:
> 
>   https://github.com/torvalds/linux/pull/147
> Commit Summary
> - Changes: 'Gnu' replaced by 'GNU'
> - 'Gnu' replaced by 'GNU'
> - 'Gnu' replaced by 'GNU'
> - 'Gnu' replaced by 'GNU'
> - 'Gnu' replaced by 'GNU'
> - 'Gnu' replaced by 'GNU'
> 
> File Changes
> - _M_ Documentation/Changes
>   https://github.com/torvalds/linux/pull/147/files#diff-0 (6)
> - _M_ arch/arm/nwfpe/ARM-gcc.h
>   https://github.com/torvalds/linux/pull/147/files#diff-1 (2)
> - _M_ drivers/net/ethernet/i825xx/sun3_82586.c
>   https://github.com/torvalds/linux/pull/147/files#diff-2 (2)
> - _M_ drivers/net/ethernet/i825xx/sun3_82586.h
>   https://github.com/torvalds/linux/pull/147/files#diff-3 (2)
> - _M_ net/ipx/af_ipx.c
>   https://github.com/torvalds/linux/pull/147/files#diff-4 (2)
> - _M_ scripts/ver_linux
>   https://github.com/torvalds/linux/pull/147/files#diff-5 (4)
> 
> Patch Links:
> - https://github.com/torvalds/linux/pull/147.patch
> - https://github.com/torvalds/linux/pull/147.diff
> 
> ## 
> 
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/147.

You should probably talk to the head kernel maintainers to get this amazing patched merged upstream!

Also...Linus doesn't accept pull requests.
Furthermore, this commit is useless...and it contains a memory leak.

...and you spelled "Linux" wrong.
Good day.

I'm assuming the pull request was an accident lol

Linus doesn't take pull requests from GitHub; check out http://kernelnewbies.org/ if you'd like to write a pull request that has a chance of being accepted.

Or, check out https://www.kernel.org/doc/Documentation/SubmittingPatches

fixing a typo in a COMMENT! and opening a pull request to LINUS TORVALDS on GITHUB!! HILARIOUS!

@SirBomble @nuggs  Lol.

Lol

:(

What does the title even suggest?

@joshumax Lol. Good one bro. Good one

lol

This is still open. Lol

Gotta love that dioff tho. I think he is a troll. Those are rare on GitHub.

Linus doesn't accept PRs on GitHub.

Where should I file it? I didn't see any pull request mechanism on kernel.org, and it was only a minor change (doesn't even change code)

@felixphew Linux doesn't have a pull-request mechanism for very specific reasons...most upstream patches will have to be merged upstream by a maintainer you will have to talk to first.

There's a great guide on kernelnewbies on how to do this: http://kernelnewbies.org/UpstreamMerge

@felixphew http://www.tuxradar.com/content/newbies-guide-hacking-linux-kernel Is what I used to submit my first patch yesterday! It is a pretty good tutorial.
I think this one goes right to the top: torvalds@linux-foundation.org || linux-kernel@vger.kernel.org

OK, if I need to go through this much of a process I may as well make some more significant documentation improvements. I'll email the maintainer with a more significant patch soon.

emm... To have a project like Linux with more than 10,000 stargazers on the profile page can be really cooooooool!!! This may be the reason. LOL

i WOULD LOVE O SEE lINUX BE RANMED TO THIS TICKET' SUGGESTED NAMEW. lOL JK

Sorry about **dem** cpas locks yo.

@codinfox :D Probbaly needed to have some attention as that is maybe what he is seeking for, what he has totally got. ;D

WHen do we close this **bullsh-t**

Maybe he's trying to get a job?
![screenshot_010715_091629_am](https://cloud.githubusercontent.com/assets/8272012/5649818/dc6bc3de-964d-11e4-9608-e5a8aadf3d45.jpg)

heh. maybe.

@jimjim116 - Linus rarely accepts pull requests directly from GitHub.

If you're interested in helping the development of the Linux kernel, please read the [HOWTO file found in the Documentation folder](https://github.com/torvalds/linux/blob/master/Documentation/HOWTO).

Happy Hacking!

Learning

Please [report @jimjim16 for abuse](https://github.com/contact?report=jimjim116) so we can prevent similar spam in the future. If we let this slide, we are encouraging this behavior and shouldn't be surprised if we see more of this spam in the future.

I sent GitHub the following text, but feel free to send whatever you want:

> jimjim16 has spammed three large and active open-source projects with bogus pull requests, probably to make his profile show contributions to the projects. So far, he has submitted PRs to Linux (or liunx, as he believes it's spelled), Ansible, and VBA-Web.
> 
> See the following PRs:  
> -  Create Liunx by jimjim16:  https://github.com/torvalds/linux/pull/148  
> -  Create VBA-Web by jimjim16: https://github.com/VBA-tools/VBA-Web/pull/74  
> -  Create Test1 by jimjim16: https://github.com/ansible/ansible/pull/9891 

@michaeljcalkins is probably right. Either that or he wants to show off that he contributes to Liunx, the great invention of [Lynios Turvliltos](http://www.adequacy.org/stories/2001.12.2.42056.2147.html)!

Linus does not accept PR's on github. Send this to the appropriate maintainer via email.

Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

@qioixiy Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

@vjiki This is great and good, but Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

@AnTAVR Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

@1800alex Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

@Johvoo Not only is this totally worthless, Linus doesn't accept pull requests from GitHub. Sorry!

Wow, what a fabulous contribution to the open-source ecosystem!

Your whopping nothing is incredibly useful! I recommend you send it to the appropriate channels, because Linus doesn't accept pull requests.

Fantastic, but Linus doesn't accept pull requests.

1) what is your reason for changing these? is there any justification
2) Linus doesn't accept PR's from GitHub, sorry.

Linus doesn't accept PR's on github.

[Linus doesn't accept pull reuqests on GitHub](https://github.com/torvalds/linux/pull/17#issuecomment-5654674).

@Ulexus A really minor docs change that fixes something slightly irritating, and should be upstreamed, but there's just one problem. [Linus doesn't accept pull requests on github](https://github.com/torvalds/linux/pull/17#issuecomment-5654674), so send them to the appropriate maintainer.

@renweihub [Linus doesn't accept PR's on github](https://github.com/torvalds/linux/pull/17#issuecomment-5654674)

Omg fuck off Elizabeth Myers 

Sent from my iPhone

> On Jan 8, 2015, at 9:05 AM, Elizabeth Myers notifications@github.com wrote:
> 
> @renweihub Linus doesn't accept PR's on github
> 
> —
> Reply to this email directly or view it on GitHub.

Wonderful, but [Linus doesn't accept PR's on github](https://github.com/torvalds/linux/pull/17#issuecomment-5654674).

Useless. And Linus doesn't accept PR's, to add insult to injury.

Please stfu Elizabeth  myers
On Jan 8, 2015 9:06 AM, "Elizabeth Myers" notifications@github.com wrote:

> Wonderful, but Linus doesn't accept PR's on github
> https://github.com/torvalds/linux/pull/17#issuecomment-5654674.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/79#issuecomment-69182859.

Second that. Stfu Elizabeth. Back in the kitchen 

Sent from my iPhone

> On Jan 8, 2015, at 9:11 AM, tua79344 notifications@github.com wrote:
> 
> Please stfu Elizabeth myers 
> On Jan 8, 2015 9:06 AM, "Elizabeth Myers" notifications@github.com wrote: 
> 
> > Wonderful, but Linus doesn't accept PR's on github 
> > https://github.com/torvalds/linux/pull/17#issuecomment-5654674. 
> > 
> > — 
> > Reply to this email directly or view it on GitHub 
> > https://github.com/torvalds/linux/pull/79#issuecomment-69182859. 
> > 
> > —
> > Reply to this email directly or view it on GitHub.

Yes please, you are spamming our inboxes with this garbage.

On Thu, Jan 8, 2015 at 9:14 AM, Steve McMullin notifications@github.com
wrote:

> Second that. Stfu Elizabeth. Back in the kitchen
> 
> Sent from my iPhone
> 
> > On Jan 8, 2015, at 9:11 AM, tua79344 notifications@github.com wrote:
> > 
> > Please stfu Elizabeth myers
> > On Jan 8, 2015 9:06 AM, "Elizabeth Myers" notifications@github.com
> > wrote:
> > 
> > > Wonderful, but Linus doesn't accept PR's on github
> > > https://github.com/torvalds/linux/pull/17#issuecomment-5654674.
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/torvalds/linux/pull/79#issuecomment-69182859.
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/79#issuecomment-69183815.

samcn, that kind of language really isn't appropriate.

Eliza, I would not say that fixing documentation is useless. That's a little demeaning.

FWIW, this bug is fixed upstream already by 49d063cb3532 "proc: show mnt_id in /proc/pid/fdinfo".

Pull requests are not accepted on GitHub for Linux.

On Fri, Jan 16, 2015, 6:38 PM Triton64 notifications@github.com wrote:

> ---
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/torvalds/linux/pull/155
> Commit Summary
> - Moving index in a more precise scope.
> 
> File Changes
> - _M_ sound/last.c
>   https://github.com/torvalds/linux/pull/155/files#diff-0 (4)
> 
> Patch Links:
> - https://github.com/torvalds/linux/pull/155.patch
> - https://github.com/torvalds/linux/pull/155.diff
> 
> ## 
> 
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/155.

Not sure how I feel about this. It will be interesting to see what this turns into.

I think we are seeing the social justice warriors and liberal progressives try to insert ineffective left-wing propaganda into Linux. Either that or the Feminist Software Foundation is some troll account subject to Poe's law.

If you cannot Pull Linux, try Forking Linux. Apologies to Adria Richards who doesn't get the joke.

What the hell is that?

No idea, but it's funny. :D

On Sunday, January 18, 2015 06:49:32 AM Stefan Tatschner wrote:

> No idea, but it's funny. :D
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/156#issuecomment-70410819
> The joke of the year

maybe

This pull request is fuckin' stupid and is a terrible attempt to troll someone.

This is some sort of stupid politics publicity stunt:
http://arstechnica.com/information-technology/2015/01/toleranux-satirical-linux-fork-mocks-calls-for-open-source-diversity/

It only modifies the documentation and source code comments to mock Linus for some speech he gave recently about diversity in the FOSS community. 

http://www.reddit.com/r/TumblrInAction/comments/2sqjat/twitter_and_tumblr_feminists_call_for_the_removal/

This is Twiter and Tumblr Feminists protesting Linus and want him removed because he is a white CIS male. It is called tearing down the white straight male because they dominate at STEM.

I'm pretty sure it's supposed to be a satirical argument against perceived
feminist attacks against white/male dominated culture in IT, etc. It's a
straw man argument though, better to just ignore it and apply some rational
thinking than to get caught up in a non-existent battle.

On 19 January 2015 at 04:15, orionblastar notifications@github.com wrote:

> This is some sort of stupid politics publicity stunt:
> 
> http://arstechnica.com/information-technology/2015/01/toleranux-satirical-linux-fork-mocks-calls-for-open-source-diversity/
> 
> It only modifies the documentation and source code comments to mock Linus
> for some speech he gave recently about diversity in the FOSS community.
> 
> http://www.reddit.com/r/TumblrInAction/comments/2sqjat/twitter_and_tumblr_feminists_call_for_the_removal/
> 
> This is Twiter and Tumblr Feminists protesting Linus and want him removed
> because he is a white CIS male. It is called tearing down the white
> straight male because they dominate at STEM.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/156#issuecomment-70444623.

## 

email: jim@jamessiddle.net
web: www.jamessiddle.net

"There's an old saying in Tennessee -- I know it's in Texas, probably in
Tennessee -- that says, fool me once, shame on --shame on you. Fool me --
you can't get fooled again." - George W. Bush

I am sorry. This pull request was submitted by mistake.

On Monday, January 19, 2015 02:03:55 AM Anubhav wrote:

> YOU DUMBASS BITCH!!! TROVALDS DONOT ACCEPTS PULL REQUESTS HERE !!!!
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/157#issuecomment-70469786
> This is a bit brutal, but considering what's happenning lately 
>     Yuxuan Chen should take it lightly

stiill Anubhav if linus does not ACCEPTS PULL REQUESTS , so what is the 
use of linux on github and secondly can't we disable the pull request

Feminazis

This is honestly the best troll ever

I am really sorry. I was about to fetch update from origin repositories yesterday and mistakenly pulled it to original repo and didn't even noticed.

The pull request is closed now.
Really sorry about this.

Wasn't sure if joke or serious. Honestly SJW are not far off this.

https://github.com/bmuller/gender_detector/pull/14

lol. Let's see what @torvalds has to say on this.

haha the @torvalds response will be legendary

If he even bothers. I kind of feel like he's likely to ignore this PR, assuming he checks GitHub at all.

Some guy was fired for not merging a PR where some girl removed male pronouns and replaced them with gender-neutral ones, he might ignore this to avoid a backlash, not that he has ever shown signs of ever giving a fuck.

Yay! let's put your name on the contributors list for getting rid of some male pronouns!  

You do realize that C doesn't allow type declarations inside a for loop except in C99...right? If you tried to compile the kernel with these changes you should have noticed the big, huge, unavoidable compilation error that would appear.

Plus Linus doesn't accept PRs on GitHub...

Just be careful how you guys respond to this PR. It does look satirical, but all joking aside, this thread may turn in to a quote mine.

Continuing with logical comments:

```
Absolutely no coding experience is necessary: all code are equal in the eyes of the Feminist Software Foundation. There is no objective way to determine whether one person's code is better than another's. In light of this fact, all submitted code will be equally accepted. However, marginalized groups, such as wom*n and trans* will be given priority in order to make up for past discrimination. Simply submit a pull request for any submission, whether code, artwork, or even irrelevant bits — nothing is irrelevant in the grand struggle for a Truly Tolerant UNIX-ike Kernel!:
```

Sexism occurs in this PR here:

```
However, marginalized groups, such as wom*n and trans* will be given priority in order to make up for past discrimination
```

Other satires: https://gitorious.org/c-plus-equality/c-plus-equality/source/cefcfb4276889bd3833c539225a9cdfd3eb16d33

First off I believe that diversity is strength. I welcome everyone into IT and programming. This is not the way to get equality by sabotaging someone else's work with a political agenda. 

I encourage people of all gender, race, sexual orientation, national origin, disability, religion or non-religion, whatever to visit this website: http://noexcuselist.com/ and find an area they want to learn in and learn it and then learn how to code and contribute in a positive way to Github.

Satire, mockery, sarcasm, does not help it only hurts the developers who work hard on these projects.

...I can't wait until Linus looks at this PR...

_meanwhile, at The Linux Foundation_

Linus: "Looks like it's that time of day again to push linux-next changes to my GitHub mirro--hey, looks like a lot of people have been pinging me, I wonder why they'r--SON OF A--"

**Two Hours Later**

![](http://www.brianmcquay.com/wp-content/uploads/2010/02/Picture-3-300x218.png)

@orionblastar thanks for no excuse list!  Also sometimes satire is an effective way to get your point across... also @joshumax that's a really old 404 haha

Where's the type declaration inside a loop?? Not seeing it. 

[and, yes, Linus **really**, _really_, doesn't accept pull requests on GitHub](https://github.com/torvalds/linux/pull/17#issuecomment-5654674)

# REALLY? THESE GUYS AGAIN??!???

It's pathetic. Not funny.

[Please. You were deleted the first time.](https://github.com/torvalds/linux/pull/82)

yes gators, we get it, you made a funny fake feminist linux thing. maybe go outside, have a jog, read a book? honestly it's getting pathetic. sorry someone made fun of your toys :-(

> samcn, that kind of language really isn't appropriate.

(That's a right reserved for Linus, and Linux only)

No it doesn't.

Why would the explanation mark be necessary?

Just some other random wanting the "I contributed to the Linux Kernel." guy I suppose.

It's an error code (%d), the exclamation mark just doesn't make sense.

+1

You know...I'm starting to think Linus uses GitHub just to judge people's intelligence based on their PRs.

On a more serious note, Linus doesn't accept pull requests on GitHub, so please, don't create them...

Good ! 很好的建议。

@Mottie nice idea :)

> Gators
> what does this even mean? I don't like American football.

Gamergaters. They think it's some kind of funny parody of feminists

On February 11, 2015 1:16:10 PM PST, Uncle Benis notifications@github.com wrote:

> > Gators
> > what does this even mean? I don't like American football.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/156#issuecomment-73965976

## 

Sent from my Android device with K-9 Mail. Please excuse my brevity.

Linus doesn't accept pull requests from GitHub. Consult https://github.com/torvalds/linux/blob/master/Documentation/HOWTO instead.

Oh, that stuff. I don't even like that movement and I think it's a good parody of the radical left. My mother was actually a huge feminist in Finland years ago and she thinks a lot of this is hillariously insane.

Linus doesn't accept pull requests on GitHub...and all of your changes are useless and a lie.
![huvc7](https://cloud.githubusercontent.com/assets/1807142/6275571/08831cca-b835-11e4-9ea5-bfcdbe937426.jpg)

Linus after seeing this pull request:

![table-flip](http://laslow.net/reactiongifs/Batch01/table-flip.gif)

legit enough

What the hell...kill it with fire...kill this PR will fire! 

https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

That's a lovely addition, but alas, Linus doesn't accept pull requests on GitHub for many important reasons... You can always try to submit this as a patch on the LKML, but AFAIK the kernel README isn't already in markdown for _other_ important reasons, so you will most likely just get yelled at...good luck with whatever you do, and if the worst happens, you'll always have your own fork!

Time to think.

Sorry I am a fairly new dev. And I just joined gethub so I was learning what everything does. I'm not sure what I requested but I wasn't trying to edit anything. I'm here only to read code not submit yet.

Sent from my iPhone

> On Feb 20, 2015, at 4:03 PM, Josh Max notifications@github.com wrote:
> 
> That's a lovely addition, but alas, Linus doesn't accept pull requests on GitHub for many important reasons... You can always try to submit this as a patch on the LKML, but AFAIK the kernel README isn't already in markdown for other important reasons, so you will most likely get yelled at...good luck with whatever you do, and if the worst happens, you'll always have your own fork!
> 
> —
> Reply to this email directly or view it on GitHub.

Gethub and iPhone
On Feb 21, 2015 8:11 AM, "icePrograms" notifications@github.com wrote:

> Sorry I am a fairly new dev. And I just joined gethub so I was learning
> what everything does. I'm not sure what I requested but I wasn't trying to
> edit anything. I'm here only to read code not submit yet.
> 
> Sent from my iPhone
> 
> > On Feb 20, 2015, at 4:03 PM, Josh Max notifications@github.com wrote:
> > 
> > That's a lovely addition, but alas, Linus doesn't accept pull requests
> > on GitHub for many important reasons... You can always try to submit this
> > as a patch on the LKML, but AFAIK the kernel README isn't already in
> > markdown for other important reasons, so you will most likely get yelled
> > at...good luck with whatever you do, and if the worst happens, you'll
> > always have your own fork!
> > 
> > —
> > Reply to this email directly or view it on GitHub.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/162#issuecomment-75378296.

Linus does not respond to pull requests on GitHub.  [Please read this if you wish to contribute](https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches)

Legit

I really hope Github can allow repo owners to disable pull requests. Many large projects have their own code review mechanism, and having a useless pull request system here is confusing to contributors. It's not encouraging, but hindering collaboration.

Agreed. I know some repos have a CONTRIBUTING file which makes it easy to
know what to do.

I'll try to figure out how to use their system.

On Feb 26, 2015 9:12 PM, "Zhaofeng Li" notifications@github.com wrote:

> I really hope Github can allow repo owners to disable pull requests. Many
> large projects have their own code review mechanism, and having a useless
> pull request system here is confusing to contributors. It's not
> encouraging, but hindering collaboration.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/163#issuecomment-76318134.

Hi @joshumax:
I just wanted this on the GitHub clone of the repository, so that it only displays on GitHub.
If that is possible...

No, Linus just pushes the changes from the [official Linux git repo](https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/).

Linus does not respond to pull requests on Github.  Read the documentation: https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

how do I get the change published? what you have recommended is horrifying to me, as I am limited to the procedure? but others with write access does...

There's an app for that: http://teacherswithapps.com/50-best-ipad-apps-for-reading-disabilities/

@fernando-rodriguez 50 applications?! seriously..

so serial, sid dart.
On Mar 8, 2015 1:50 PM, "Siddhartha Sharma" notifications@github.com
wrote:

> @fernando-rodriguez https://github.com/fernando-rodriguez 50
> applications?! seriously..
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/166#issuecomment-77767183.

who'll merge this PR?

Siddhartha, read the documentation if you want people to take you seriously.  The only reason PRs are allowed on this GitHub repo is because GitHub doesn't provide the ability to disable them.  There are rules, follow them or leave.

Sorry! I'll read them @ecnepsnai , fernando confused me.. Sorry again, for the pain to the community.

Pull requests aren't accepted on GitHub.

Cheers,
Logan

On Mon, Mar 9, 2015 at 1:33 PM, Siddhartha Sharma notifications@github.com
wrote:

> ## Added ftp://ftp.kernel.org/pub/linux/kernel
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/torvalds/linux/pull/167
> Commit Summary
> - Update README
> 
> File Changes
> - _M_ README https://github.com/torvalds/linux/pull/167/files#diff-0
>   (3)
> 
> Patch Links:
> - https://github.com/torvalds/linux/pull/167.patch
> - https://github.com/torvalds/linux/pull/167.diff
> 
> ## 
> 
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/167.

Got to know after few edits here. :100:  Cheers!

^^

Bullshit politics and internet drama shouldn't have this much interaction on a core linux project. This pull request is a joke by supporters of "gamergate" to mock feminists.

On Wednesday, January 21, 2015 07:35:25 AM Jake wrote:

> Yay! let's put your name on the contributors list for getting rid of
> some male pronouns!
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/156#issuecomment-70858260
> Maybe You don't realise but pritvi(or prithvi) is technically a female 
> name but used mostly by the males

but prithviraj is a male name meaning earth ruler

Pft.. Can't believe this thread is still going on.. 😕

@dautov2 Read the - https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

This is my first commit, thank you for helping.

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

Next time you may want to check your dictionary. :)

I'm sorry.

Y'all are still at this? Please spend your time on something else. There are tons of open source projects that are in desperate need of help.

Stop doing this. Seriously. You are filling up my inbox with your annoying bullshit.

Why did it never end with any punctuation though? Is it not a sentence?

[#17 (Comment)](https://github.com/torvalds/linux/pull/17#issuecomment-5654674)

So, what is the best method for requesting this merge?

[Read this](https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches)

> Just some other random wanting the **"I contributed to the Linux Kernel."** guy I suppose.

2333.....

> So, what is the best method for requesting this merge?

This one is even better, you can watch it while drinking a beer and learn how to do it. :)
https://www.youtube.com/watch?v=LLBrBBImJt4

What?

I think you said it right and very funny.
2333... is China Internet Slang .
**2333 ≈ LOL**

Oh, I don't do Chinese  :P

you're late April 1 ended

BSD is no joke, sir

oh my Fuck you've got balls. :smile: 

oh my Fuck too :joy: 

oh fuck! yall er fukn stupe odds!
On Apr 5, 2015 5:06 PM, "ali" notifications@github.com wrote:

> oh my Fuck too [image: :joy:]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/175#issuecomment-89862265.

cool
2015-04-24 

kmcfly 

发件人：Thomas Steinholz notifications@github.com
发送时间：2015-04-24 07:46
主题：Re: [linux] Added README.md (#180)
收件人："torvalds/linux"linux@noreply.github.com
抄送：

Closed #180.
—
Reply to this email directly or view it on GitHub.

[Pull Requests aren't accepted on this GitHub repo.](https://github.com/torvalds/linux/pull/17#issuecomment-5654674)

https://github.com/torvalds/linux/pull/17#issuecomment-5654674
I like Github PR but clearly not everybody likes it :disappointed: 

It seems this issue has already been fixed a while ago, your HID mapping is nearly exactly the same as the one currently in the code-base, and since there's no additional commits tied to your PR it seems that your fix is simply an unused array (See https://github.com/Erendis/linux/blob/master/drivers/hid/hid-kye.c#L558).

If you are in a bug-fixing mood though, the LKML receives several bug reports each day and I'm sure any patches that correctly fix them would be appreciated.

it has 4 differences, although the second one is only a _2 suffix:

https://github.com/Erendis/linux/blob/master/drivers/hid/hid-kye.c#L193
https://github.com/Erendis/linux/blob/master/drivers/hid/hid-kye.c#L196
https://github.com/Erendis/linux/blob/master/drivers/hid/hid-kye.c#L236
https://github.com/Erendis/linux/blob/master/drivers/hid/hid-kye.c#L240

the line you mentioned is already there indeed, but this block is also needed for the driver to work properly with full drawing area (ymmv)

@Erendis It seems that the part of the patch you're trying to send as a PR has already been sent to the LKML from linux-input (http://www.spinics.net/lists/linux-input/msg31764.html). But I'm still confused, exactly where in your Pull Request is `mousepen_i608x_2_rdesc_fixed` referenced?

yeah, right. cool. thanks!

Well if you want things to "Just work" you should follow the proper procedure for submitting patches: https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

Please read the documentation: https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

Linus doesn't accept pull requests from GitHub: https://github.com/torvalds/linux/pull/17#issuecomment-5654674

Please read the documentation: https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

Linus doesn't accept pull requests from GitHub: https://github.com/torvalds/linux/pull/17#issuecomment-5654674

Watching...

cbeb22aa359aeb2114e83d3edf03f89e36ff2a41

@Antonius-git First of all Linus does not accept patches via github pull request. Second, Greg applied this patch to the git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/char-misc.git to the char-misc-next branch.

woops!
In which case 
cheers :)

[Won't be merged from github man](https://github.com/torvalds/linux/pull/17#issuecomment-5654674)

@dileep-p this isnt the way to make a pull request into linux...

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

Also the "fix" is incorrect. See [this pull request](https://github.com/torvalds/linux/pull/74) trying to merge the same bug.

Thanks for the info. Closing PR

Lol..

Jajajaja

Linus doesn't use github PR's

`I don't do github pull requests. github throws away all the relevant information, like having even a valid email address for the person asking me to pull. The diffstat is also deficient and useless. Git comes with a nice pull-request generation module, but github instead decided to replace it with their own totally inferior version. As a result, I consider github useless for these kinds of things. It's fine for *hosting*, but the pull requests and the online commit editing, are just pure garbage. I've told github people about my concerns, they didn't think they mattered, so I gave up. Feel free to make a bugreport to github.`

Source | #17 

i will do, thanks for the info

-1 Spam

Hi 
I'm sorry about spam message

Happy day 

나의 iPhone에서 보냄
1. 7. 21. 오전 10:01 Ian Spence notifications@github.com 작성:

> -1 Spam
> 
> —
> Reply to this email directly or view it on GitHub.

This is by far the most amazing contribution the Linux kernel has ever seen. Please, torvalds, make an exception to your do-not-pull-from-github rule and pull this right now. 

Linux development does not work this way. Please read Document/HOWTO in your kernel tree to learn how to contribute to the Linux kernel.

This is fun as fuck! Keep on doing this, Im lovin it!

@GBGamer on the sidebar to the top right of this thread there is a unsubscribe button. This will solve your spam issue.
![screen shot 2015-08-20 at 1 58 12 pm](https://cloud.githubusercontent.com/assets/178857/9395466/87d5df7e-4743-11e5-81c1-be3d0cb58f6d.png)

[Pull requests are not accepted on Github](https://github.com/torvalds/linux/pull/17#issuecomment-5654674). In any case, this is hardly the type of thing that belongs in the kernel README.

bull fucking shit
On Aug 23, 2015 1:32 AM, "Sam Shelton" notifications@github.com wrote:

> Pull requests are not accepted on Github
> https://github.com/torvalds/linux/pull/17#issuecomment-5654674. In any
> case, this is hardly the type of thing that belongs in the kernel README.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/200#issuecomment-133793546.

Are you trying to shill your book in the kernel readme? Like Shelt said though, Torvalds said "I don't do github pull requests." 

Don't leave commercials on a non-profit open source project! The kernel readme as well.

done

#### Manual wrapping on the web is not a good idea, because it is not responsive, and is not portable.

The application that is viewing the plaintext is what should be formatting it. If you need to delineate wrapping and non wrapping text, you _should be using delineators_ for this that your editor or viewer or terminal can interpret. 

In the modern world of responsiveness and portability, stored text should _never_ have line breaks or formatting added to it.

**This is why Markdown was invented**.

Strictly enforcing word-wrap, etc, probably makes sense if you use a terminal for most of your work. If you want to use that same text for the web, or anything other than a proper terminal, you _need_ format-less text.

> if you use a terminal for most of your work.

That's the case :smiling_imp: 

> > if you use a terminal for most of your work.
> 
> That's the case :smiling_imp:

Yes, but the issue was with github's way of doing things. Not everyone uses the terminal exclusively, and with github's model a web centric setup is necessary. This means there are two essential viewpoints to consider, and that neither is inherently moronic. ^_^

It's pathetic to attract the attention of a serious and stable community on you with such a ridiculous pull request. You're even damaging the reputation of SERIOUS femisists! Stop it, it has absolutely no sense.

https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

OK
----- Original Message -----
From: Alex notifications@github.com
To: torvalds/linux linux@noreply.github.com
Subject: Re: [linux] Update README (#200)
Date: 2015-09-14 16:52

Hi there , whoever maintains the github repo please add on the top of readme info that PR through github isn't accepted and include the reason!

&mdash;
Reply to this email directly or view it on GitHub.

omg

Im a bitchass dog. Woof Woof!

where's esr when ya need him¿
On Sep 26, 2015 11:35 PM, "Gian Crescini Santillan" <
notifications@github.com> wrote:

> Im a bitchass dog. Woof Woof!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/17#issuecomment-143517055.

不相关的PR也提交？

Okay, here is the thing.

Some one is trying to add commercial on it and we didn't grant.

He/She must be in the wrong place.

：（

Will submit through the official process.

So when is this getting merged?

Just imagine the code:
#include<stdio.h>
#include<> //we must include everything. no one should feel left out
...
500 lines later
void xyz()
{
 //will do later. I don't feel that the functions name is cute enough.
}

main()
{
  printk("Hello kernel! How are you ! OMG I'm so excited, to talk to you. You're so cute and cuddly"!)
}

The kernel doesn't do PRs via Github.

Guys, remember that GitHub was built with both beginners and advanced programmers like Linus in mind. The interface may seem crappy to an advanced programmer but it needs to be beginner friendly, and since these people may have little or no experience with Git, they made the interface the way it is. I can understand where Linus is coming from, being a developer of Git and also working on the Linux Kernel (which has strict standars just btw), but the goals of GitHub (Being beginner friendly and general purpose) and Linus (creating and maintaining an OS kernel with strict standards on pulls and pushes, with official commit messages) are different. GitHub just isn't suited to the stricter standards behind development of a kernel. I think Linus may be a tad unreasonable for not accepting PR's just because there are beginners to Git on this site making requests who are amazing programmers, but are making them via GitHub because that is the only interface they are used to. That is all.

https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

redacted
On Oct 9, 2015 1:50 AM, "Jemo Mgebrishvili" notifications@github.com
wrote:

> hey
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/210#issuecomment-146709849.

Thanks for your advices. I'm a newbie here.
I'm sorry to commit like this...
I'll try to commit a much better thing next time.

redacted
On Oct 9, 2015 4:24 AM, "Kyuha Hwang" notifications@github.com wrote:

> Thanks for your advices. I'm a newbie here.
> I'm sorry to commit like this...
> I'll try to commit a much better thing next time.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/210#issuecomment-146731702.

I don't expect to change @torvalds opinion on this matter but perhaps I can help those who are swayed by his delivery here. 

It's perfectly fine for him to state expectations in his repository. Of course it is. 

The line where he steps into ridicule is not helpful. He can, if he so chooses, state his requirements (he doesn't need to repeat himself, I'm sure there's a contributor's guide someplace) and stop completely short of calling someone a moron. 

It _is_ far more effective to stop short of ridicule. 

This is _not_ the victim philosophy.

Sugarcoating is at the other end of a continuum from ridicule. In the middle is stated facts and/or requirements. No one deserves ridicule. Not even @torvalds. Even if he chooses to do it himself.

I never said I was sugarcoating, I was simply stating the fact that there are _very_ skilled programmers who only know how to use the GitHub web interface and thus are being ignored by Linus. I think that is simply unreasonable. Linus is denying help he very well could have but since they are new to Git and started on GitHub, he won't accept their work.

@nkeck720 It's a bit hard to imagine that this one who is a great 
programmer, can write drivers without specs or kernel level code and is 
willing to contribute to linux kernel is not able and willing to learn 
how to use git itself extensively to achieve this :)

Also, the linux kernel is probably way past the point where maximizing 
contributors is an issue.

How about a great amazing programmer who isn't prepared to use bash, GCC,
make etc. Should Linus accommodate building the kernel in visual studio?
On 10 Oct 2015 9:40 a.m., "Olivier El Mekki" notifications@github.com
wrote:

> @nkeck720 https://github.com/nkeck720 It's a bit hard to imagine that
> this one who is a great
> programmer, can write drivers without specs or kernel level code and is
> willing to contribute to linux kernel is not able and willing to learn
> how to use git itself extensively to achieve this :)
> 
> Also, the linux kernel is probably way past the point where maximizing
> contributors is an issue.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/17#issuecomment-147064593.

I can see where you are coming from. What I am saying is though that there
are people out there who may have never heard of git. When they start using
git, the github interface is what they learn to use instead of the terminal
interface. While they may he new to git, they still know C inside and out.
That is my point, that at one point or another everyone was new to git but
knew at least what they were doing in their programming.
On Oct 10, 2015 5:00 AM, "Conrad Jones" notifications@github.com wrote:

> How about a great amazing programmer who isn't prepared to use bash, GCC,
> make etc. Should Linus accommodate building the kernel in visual studio?
> On 10 Oct 2015 9:40 a.m., "Olivier El Mekki" notifications@github.com
> wrote:
> 
> > @nkeck720 https://github.com/nkeck720 It's a bit hard to imagine that
> > this one who is a great
> > programmer, can write drivers without specs or kernel level code and is
> > willing to contribute to linux kernel is not able and willing to learn
> > how to use git itself extensively to achieve this :)
> > 
> > Also, the linux kernel is probably way past the point where maximizing
> > contributors is an issue.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/torvalds/linux/pull/17#issuecomment-147064593.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/17#issuecomment-147066964.

nkeck720, 10/10/2015 18:31:

> everyone was new to git but
> knew at least what they were doing in their programming.

False. I exhibit myself as counterexample: proper usage of git and code 
review tools allowed me to learn coding, from being a total coding n00b.

Am 10. Oktober 2015 17:43:36 WESZ, schrieb nemobis notifications@github.com:

> nkeck720, 10/10/2015 18:31:
> 
> > everyone was new to git but
> > knew at least what they were doing in their programming.
> 
> False. I exhibit myself as counterexample: proper usage of git and code
> 
> review tools allowed me to learn coding, from being a total coding
> n00b.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/17#issuecomment-147105036

## Guys could you take me off this crap please? I'm not the slightest interested and have no idea why I'm CCed at all.

Diese Nachricht wurde von meinem Android-Mobiltelefon mit K-9 Mail gesendet.

@kaber, you are receiving updates on this because your commit in:
https://github.com/kaber/nf-nat-ipv6/commit/4533703ebde964fb217979d3d533e53ac1430a2d
has (in the commit message) `#17`, so github relates that automatically and therefore you are automatically subscribed to the same thread you referenced (in this case this one).

I complained to github about a very similar issue: I was receiving notifications from things happening on the forked repo that I don't care about, since I'm not maintaining them.

You need to manually click the unsubscribe button (on the bottom right part) in the https://github.com/torvalds/linux/pull/17 page.

Username checks out

Indeed
On Oct 10, 2015 7:27 PM, "flarn2006" notifications@github.com wrote:

> Username checks out
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/203#issuecomment-147135497.

https://en.wiktionary.org/wiki/acceptible

I don't see why every little spelling error in the commentary. Comments do
not affect the compiled result, guys. If there is a spelling error in the
code, by all means fix it, but please don't waste Linus' time with PRs
about spelling mistakes that don't even help the kernel, other than maybe
in the readability department. Spelling in the comments does not matter
unless you absolutely cannot tell what is being said.
On Oct 12, 2015 5:54 AM, "Sagar Panchal" notifications@github.com wrote:

> https://en.wiktionary.org/wiki/acceptible
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/203#issuecomment-147354425.

Meant to say, "I don't see why you try to fix every little spelling error
in the commentary."
On Oct 14, 2015 7:14 AM, "Noah Keck" noahkeck72@gmail.com wrote:

> I don't see why every little spelling error in the commentary. Comments do
> not affect the compiled result, guys. If there is a spelling error in the
> code, by all means fix it, but please don't waste Linus' time with PRs
> about spelling mistakes that don't even help the kernel, other than maybe
> in the readability department. Spelling in the comments does not matter
> unless you absolutely cannot tell what is being said.
> On Oct 12, 2015 5:54 AM, "Sagar Panchal" notifications@github.com wrote:
> 
> > https://en.wiktionary.org/wiki/acceptible
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/torvalds/linux/pull/203#issuecomment-147354425.

@nkeck720 This is a bot :)

I should add this:
Hi! I'm a bot that checks GitHub for spelling mistakes, and I found one in your repository. When it
should be 'acceptable', you typed 'acceptible'. I created this pull request to fix it!

If you think there is anything wrong with this pull request or just have a question, be kind to mail me 
at thetypomaster@hotmail.com (professional email, huh?). I’ll try to address the problem as soon as
I’m aware of it.

Looking for the source code of this bot? Well, you have to be patient! The bot is under development
and I will publish the source code as soon as I’m finished with it.

If you decide to close this pull request, pleace specify why before doing so.

With kind regards,
TheTypoMaster

Wow. Such hostility here. I came to look around here and see this ^.

Cya.

Ikr.
On Oct 18, 2015 2:19 PM, "Jeff Huijsmans" notifications@github.com wrote:

> Wow. Such hostility here. I came to look around here and see this ^.
> 
> Cya.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/210#issuecomment-149036274.

 ![nice](http://imgsrc.baidu.com/forum/w%3D580/sign=abb83e52d8b44aed594ebeec831d876a/9241bb18972bd407185aeee579899e510eb309e9.jpg?v=tbs)

Closing as obsolete.

nice work

good

Please look at #192 :)

Please look at #192 

Please look at #192 :)

Something something linus doesn't into pull requests from github.

PRs here won't get anywhere.
On Oct 30, 2015 2:38 PM, "laingsoft" notifications@github.com wrote:

> Something something linus doesn't into pull requests from github.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/216#issuecomment-152611476.

No one can understand what is this PR for except Chinese.

Thanks

Probably optimized by the compiler anyways.

If you're gonna make a PR, you had better have some code to improve or a good reason to not have any.  If you want @torvalds to "Make it way more better," then email him directly about it. Pestering him with empty PRs will help nobody. Don't just make a PR to comment on his work, make no changes to code, and then immediately close it. This is the whole reason he doesn't accept GitHub PRs in the first place, people like you who just spam him to "make it betterer" or that "this code is awful" <strong>without suggesting any fixes or submitting any code or even measly suggestions on how to make it better.</strong> So don't run back here when he doesn't fulfill the request, because without any code or any type of fix mentioned in the PR, it <em>definitely</em> won't be accepted, or even considered.

It was just a dumb joke by me. Forget it.

the operating system running the world's servers is a joke?
On Nov 24, 2015 7:11 PM, "Ivan Markin" notifications@github.com wrote:

> It was just a dumb joke by me. Forget it.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/228#issuecomment-159453507.

@marctmiller, Linux is not my project. The PR is a joke.

It makes me so mad when people make PRs like this on code that is, if you haven't noticed, a pretty big deal, and then don't give any way to try and fix it. And then crap like this happens, when people do this as a "joke" but don't ever realize that they are the <strong>entire reason</strong> that people (not just @torvalds) don't want anything to do with GitHub PRs. All I can say is if you're gonna joke about crap like this, grow up and get a life. If you want to help develop, that's one thing, but if you're just gonna spam, then get outta here, you have no place here.

oh, well in that case, thanks ivan, keep up the good work!
On Nov 24, 2015 7:15 PM, "Ivan Markin" notifications@github.com wrote:

> @marctmiller https://github.com/marctmiller, Linux is not my project.
> PR is a joke.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/228#issuecomment-159455101.

@nkeck720, calm down. There was a typo in the PR title and I haven't intended to comment Linus' work.
btw it had actual improvements but I decided to force-push it and to left it to be a joke. Why can't you just forget about it?

join the cause or move away from it
On Nov 24, 2015 7:26 PM, "Ivan Markin" notifications@github.com wrote:

> @nkeck720 https://github.com/nkeck720, calm down. There was a typo in
> the PR title and I haven't intended to comment Linus' work.
> btw it had actual improvements but I decided to force-push it and to left
> it to be a joke. Why can't you just forget about it?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/228#issuecomment-159456960.

Quit spamming my inbox!!!!!!
On Nov 24, 2015 8:30 PM, "marc" notifications@github.com wrote:

> join the cause or move away from it
> On Nov 24, 2015 7:26 PM, "Ivan Markin" notifications@github.com wrote:
> 
> > @nkeck720 https://github.com/nkeck720, calm down. There was a typo in
> > 
> > the PR title and I haven't intended to comment Linus' work.
> > btw it had actual improvements but I decided to force-push it and to
> > left
> > it to be a joke. Why can't you just forget about it?
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/torvalds/linux/pull/228#issuecomment-159456960.
> 
> —
> Reply to this email directly or view it on GitHub.

Hmm, I wonder what @torvalds will say about this BS?

Sorry. Didn't see replies, my browser didn't refresh.
On Nov 24, 2015 8:36 PM, "copyleft7212" notifications@github.com wrote:

> Quit spamming my inbox!!!!!!
> On Nov 24, 2015 8:30 PM, "marc" notifications@github.com wrote:
> 
> > join the cause or move away from it
> > On Nov 24, 2015 7:26 PM, "Ivan Markin" notifications@github.com wrote:
> > 
> > > @nkeck720 https://github.com/nkeck720, calm down. There was a typo
> > > in
> > > 
> > > the PR title and I haven't intended to comment Linus' work.
> > > btw it had actual improvements but I decided to force-push it and to
> > > left
> > > it to be a joke. Why can't you just forget about it?
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/torvalds/linux/pull/228#issuecomment-159456960.
> > 
> > —
> > Reply to this email directly or view it on GitHub.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/228#issuecomment-159457963.

I don't like computer science jokes, not one bit. Even this one.

@jeffmerkey You should prob close this. You put the PR in the wrong repo.

How do I do that?  Please help.  What do I do wrong?

Jeff

On 11/28/15, Kamran Mackey notifications@github.com wrote:

> @jeffmerkey You should prob close this. You put the PR in the wrong repo.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/229#issuecomment-160380054

ok, I fixed it.  Now how the hell did that happen?

I find this pretty pointless. It's not needed.

Sorry, ignore. github error, my bad.

Might wanna close this, you pushed this to the wrong repository....just like another person did a few days ago.

You need to submit this as a patch to the Linux Kernel Mailing List, as Linus doesn't look at PRs.

Some are not really typo errors like: `behaviour` in british english and `behavior` in american english. British guy checks your work, then corrects your `typo`, then there come another American guy who see the British guy's `typo`, then the cycle of `typo errors` continues.

Github Pull Requests are not accepted for this project. You must submit a patch to the Kernel Mailing List. The procedures are outlined here: http://kernelnewbies.org/UpstreamMerge/SubmittingPatches

Please close this PR.

Github Pull Requests are not accepted for this project. You must submit a patch to the Kernel Mailing List. The procedures are outlined here: http://kernelnewbies.org/UpstreamMerge/SubmittingPatches

Please close this PR.

Github Pull Requests are not accepted for this project. You must submit a patch to the Kernel Mailing List. The procedures are outlined here: http://kernelnewbies.org/UpstreamMerge/SubmittingPatches

Please close this PR.

Github Pull Requests are not accepted for this project. You must submit a patch to the Kernel Mailing List. The procedures are outlined here: http://kernelnewbies.org/UpstreamMerge/SubmittingPatches

Please close this PR.

Github Pull Requests are not accepted for this project. You must submit a patch to the Kernel Mailing List. The procedures are outlined here: http://kernelnewbies.org/UpstreamMerge/SubmittingPatches

Please close this PR.

Please close this PR

Most of these are not typos as they are in British English as @jobs-git said. 

@choleraehyq: Simply using Google Translate it says that means "Raspberry Pi" :smiling_imp: 

nice
2015年12月25日 18:39，"Helio" notifications@github.com写道：

> @choleraehyq https://github.com/choleraehyq: Simply using Google
> Translate it says that means "Raspberry Pi" [image: :smiling_imp:]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/torvalds/linux/pull/186#issuecomment-167220882.

Pull request sent through the Github web interface are not accepted in this
repository. You should send them to the kernel mailing list instead.

Have you compare the values of sizeof(struct radix_tree_node) between old and new version? I guess it change nothing unless a packed attribute is there. 

I suggest you that submit paths on a right way: https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

> Linus, in particular, will not pull from public hosting sites like GitHub in the absence of a signed tag.

@torvalds does not accept pull requests from GitHub. You will need to send this to him via the Linux Kernel Mailing list.

@nkeck720 Yes, we just do an internal pre-review.

Sorry, did I accidentally send this to Thorvalds's tree?
I didn't mean to.
Anyway, closing this because I've a better implementation in flight.

update

When it will be added to git?

Hi koshkoshka! For this to be considered you will need to send it in as a patch to the kernel mailing list. linux doesn't use PR:s. There is a system for it and a tutorial here: http://kernelnewbies.org/FirstKernelPatch

Linux does use PRs, it just use the `git request-pull` instead of Github's own
PR system.

Yes, what I meant was of course that Linux does not use Github's PRs

Yeah, you have to deliver your patches through the mailing list.

Can kernel bisection resolve this issue?

@Frennzzy I don't have this laptop to build a kernel, while setting wapf to 4 in `/etc/modprobe.d/asus_nb_wmi.conf` works : http://bbs.deepin.org/forum.php?mod=viewthread&tid=30383&extra=page%3D1

> And when those people with lower standards try to get their commits included in the kernel, **I will ridicule them** and point out how broken their commit messages or pull requests are.

Wow, really!? I respect @torvalds **work**, but I can't see how anybody could respect **him**, I guess that as long as his arrogance and his geniusness are not mutually exclusive, lots of people don't care at all and even idolize him for that. :worried: 

Even you Torvalds were a n00b at some point, and your rudeness and willingness to publicly ridicule other newbies is totally unnecessary, why not just _point them how broken their commit messages or pull requests are_ and link them to your standards guide (which I agree is a good standard) if you are taking the trouble to answer or just ignore them instead?

Issues reported here are not processed. You had better send your issue to the kernel mailing list: linux-kernel@vger.kernel.org

Thanks for the tip.

Already posted to the mail list, https://lkml.org/lkml/2016/1/30/257 .

not sure how does the LKML work. and when will the thread be picked up by someone...

> ...his arrogance...lots of people don't care at all and even idolize him for that.

I, for one, would be honored if Linus took the time to call me a moron.

> why not just point them how broken their commit messages or pull requests are and link them to your standards guide...if you are taking the trouble to answer

Then golden threads like this one wouldn't exist.  :)  

> I, for one, would be honored if Linus took the time to call me a moron.

Good for **you**, but the point is that not all the people would be willing to take insults from **anyone** with _pride_ like you and some others may do. 

Insulting over the internet is super easy, insulting back is also super easy. I wonder if he would also still be at least that rude with each and everyone of _those people with lower standards that try to get their commits included in the kernel_ in person ...at fist range?

So much for a **_benevolent_** dictator for life... if such a thing even exists.

I am pretty sure that **you** wouldn't tell him all this in person..

Can you please stop spamming my inbox with this useless junk? Thank you

Sure, why not? He is just a man like you and me. Are you implying that you would also be OK if he insulted you? And It doesn't mean that I would be disrespecting him. Not all the people likes to be disrespectful and I would also ask him first if he is still like that and why (you know ...talk), if he still does, in that case.

I'm just wondering, because I cannot truly believe that each and everyone he insults just lets him be, either because they idolize him or _fear_ him? 

I would expect at least one of them to fight back, that's all, I'm done with my comments here, I think I'm pretty clear of my opinion.

@Ismael-VC, I think you are seeing things in the wrong perspective.
It seems to me that you assume wrong things and if you read carefully above, Linus explained that in the first comment. He got upset when other ppl jumped into the thread and said "open an exception", which I must agree, makes **no sense** to open an exception just because it is 3 lines of code...

There are standards that Linux project is following and all of that is well documented already, thus making statements/comments like those are just a waste of Linus and other ppl's time. If the maintainers of the project (and community) already spent their own time to write those standards and to share them with the community (giving it for free), I strongly believe that all we (including n00bs) should do is: RTFM!
I often see n00bs on forums asking things that could clearly be found by researching a little bit more. It is a my time vs your time problem.

Seems like that you did the same mistake and judged the entire thread.
I would probably burst too and would have the same reaction when I read the comment:
https://github.com/torvalds/linux/pull/17#issuecomment-5659884

Don't you think that was being disrespectful? I do :smile: 

@leonklingele, please unsubscribe the thread (it is easier to press that button than it is to make a comment here).

з

Linus does not pull from GitHub.

@torvalds refuses to use github.

I'm surprised there isn't a link yet, so here it goes: https://mako.cc/writing/hill-free_tools.html

@DeadMetaler You probably should see [this](https://www.kernel.org/doc/Documentation/SubmittingPatches) if you already haven't! AFAIK your patches will not be accepted as a pull request on Github!

Tutorial: https://www.youtube.com/watch?v=LLBrBBImJt4
Use https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl script
Use the mailing lists.

And if you are a beginner: https://coderwall.com/p/dp-gka/setting-up-git-send-email-with-gmail

Tutorial: https://www.youtube.com/watch?v=LLBrBBImJt4
Setting git send mail: https://coderwall.com/p/dp-gka/setting-up-git-send-email-with-gmail
Use get_maintainer.pl
Use the mailing lists.
Close this please, and tell to others.

Tutorial: https://www.youtube.com/watch?v=LLBrBBImJt4
Setting git send mail: https://coderwall.com/p/dp-gka/setting-up-git-send-email-with-gmail
Use get_maintainer.pl
Use the mailing lists.
Close this please, and tell to others.

Tutorial: https://www.youtube.com/watch?v=LLBrBBImJt4
Setting git send mail: https://coderwall.com/p/dp-gka/setting-up-git-send-email-with-gmail
Use get_maintainer.pl
Use the mailing lists.
Close this please, and tell to others.

Tutorial: https://www.youtube.com/watch?v=LLBrBBImJt4
Setting git send mail: https://coderwall.com/p/dp-gka/setting-up-git-send-email-with-gmail
Use get_maintainer.pl
Use the mailing lists.
Close this please, and tell to others.

Tutorial: https://www.youtube.com/watch?v=LLBrBBImJt4
Setting git send mail: https://coderwall.com/p/dp-gka/setting-up-git-send-email-with-gmail
Use get_maintainer.pl
Use the mailing lists.
Close this please, and tell to others.

The mailing list doesn't seem to like my email configuration, possibly because I use DMARC to make it difficult for unapproved servers to send mail on my behalf. I'm not going to go more than a few hours out of my way to use an archaic code review process. 

@TheTypoMaster You have a typo ("pleace") in your comment here on github:
"...pleace specify why before doing so"

Huh...  Lots of references.

Just got a notification for this issue. Unintended consequence? ;-)

Please close this PR @koshkoshka .

I'm a newbie.Here I learnt that Linux doesn't support PRs. 

It is not due to the lack of support, it is a deliberate choice,
which mr. Torvalds have made.

@petr0001 Yep!

Jesus christ people hate this bot

What did I expect tbh

It has to be in the "D" section, the list is in alphabetical order.

how to pull a request ?

I'm not gonna hate this bot but you are making a pulling request to the Linux kernel which is.. 

The issue isn't your bot. The Linux project just does not accept Pull Requests on Github. There is a system for emailing patches to the Linux mailing list, search and you shall find.

Maybe it would be a good idea for your bot to specifically blacklist Github repos which do not accept PR:s?

update

Tutorial: https://www.youtube.com/watch?v=LLBrBBImJt4
Setting git send mail: https://coderwall.com/p/dp-gka/setting-up-git-send-email-with-gmail
Use get_maintainer.pl
Use the mailing lists.
Close this please, and tell to others.

Linus does not accept Github PRs. :-P

Apart from that, if I were you I'd make sure `try_to_run_init_process` can actually take arguments like that.

@Zenexer Then this change will never be accepted.

h是嘛

You are right, I just haven't had enough time to compile it.

@immibis it can't, it only takes the path to program and runs it with empty argv, so this is wrong. you would have to change it to set argv[0] to "ash" in that special case, which becomes too busybox-specific to be accepted to mainline

https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/

please CLOSE this when you submit

I assume you meant to merge this into your own repo. you got it backwards. please close

I assume you meant to merge this into your own repo. you got it backwards. please close

I assume you meant to merge this into your own repo. you got it backwards. please close

I assume you meant to merge this into your own repo. you got it backwards. please close

I assume you meant to merge this into your own repo. you got it backwards. please close

What even is this? Bumping so someone closes

please close this

@parrotgeek1 Linus doesn't even pay attention to this. It's just a mirror for him. 

I’m sorry. I'm not very clear about the use of GitHub.How can I close it?

发件人: casxter+caf_=casxter=163.com@gmail.com [mailto:casxter+caf_=casxter=163.com@gmail.com] 代表 Ethan
发送时间: 2016年5月4日 11:33
收件人: torvalds/linux linux@noreply.github.com
主题: Re: [torvalds/linux] Merge pull request #1 from torvalds/master (#83)

I assume you meant to merge this into your own repo. you got it backwards. please close

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub https://github.com/torvalds/linux/pull/83#issuecomment-216733224 

---

Avast 防毒软件已对此电子邮件执行病毒检查。
https://www.avast.com/antivirus

@immibis That's fine; I can apply the patch myself.  I've done my duty and made it available to the public via industry-standard methods.  If the Linux team doesn't want patches from the next generation of programmers, who use GitHub rather than mailing lists, that's not my problem.

I am a guy from JiangXi , where is humours point?

What's changed ? o.O 

@abdullahvelioglu
Mr @torvalds  don't merging pull requests from github. 
Follow: https://www.kernel.org/doc/Documentation/SubmittingPatches

Indented stuff that should be indented, it looks like.

I have already read the documentation:
https://www.kernel.org/doc/Documentation/SubmittingPatches
I promise to mend. )

@escalator2015  FYI
https://www.kernel.org/doc/Documentation/SubmittingPatches
http://kernelnewbies.org/FirstKernelPatch
https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/

Thanks for the links. I will check them and  close my request

@willzma Your change adds trailing whitespace on Line 215, please revert that change.

Also, Linus doesn't accept GitHub PR, for documentation changes you should email a patch to Jonathan Corbet corbet@lwn.net (he's the documentation maintainer) and CC linux-kernel@vger.kernel.org and trivial@kernel.org.

Thanks.

@renancunha33 Linus doesn't accept GitHub PR. You need to send a patch to corbet@lwn.net (documentation maintainer) and CC linux-kernel@vger.kernel.org and trivial@kernel.org.

Also, remember to set your textwidth to 80 when editing this file.

@willzma It looks better now, but you still need to create a patch in order to send it to the LKML.

Look into git-format-patch for creating the patch and use git-send-email for sending it over. Also, you'll need to sign off your commit.

See git-commit -s or --signoff.

Always a good read:

https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

I'd probably squash the commits you created into 1 commit and then use git-commit --amend and -s to sign-off. Then create the patch with git-format-patch and send it with git-send-email.

You want to write better commit messages as well. Please get familiar with how the Linux kernel development works, this is not your typical small github project.

I would write something along the lines of "README: indent make localmodconfig commands"

Thanks.

Submitted via signed-off patch over email... Closing this.

@iambrosie FYI
https://www.kernel.org/doc/Documentation/SubmittingPatches
http://kernelnewbies.org/FirstKernelPatch
https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/

@FadeMind Thanks, will follow when time allows it.

@roissy: Linus does not accept PRs from Github. You must send this patch by email to the maintainer, which in this case is `Wolfgang Grandegger <wg@grandegger.com>`, and CC the appropriate subsystem mailing lists, which in this case, happen to be: `linux-can@vger.kernel.org`, `netdev@vger.kernel.org`, and `linux-kernel@vger.kernel.org`.

@roissy : any comments why this patch??  

@RobertCochran @ArashJavan I understand, thank you, I have determined that such codes more efficiently develop themselves. I will report to the necessary places. Best regards.

roissy.

Also, why use 8 spaces for indentation? You should make it consistent with the rest of the file and use 2 spaces for example commands.

@willzma Have you decided not to send this to the LKML? What happened?

Why do people keep doing this? Linus does NOT pull from GitHub!

@tigoesnumb3rs 
https://github.com/torvalds/linux/pull/17#issuecomment-5654674

and:
https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/

> Why do people keep doing this? Linus does NOT pull from GitHub!

Probably because they don't know.

Thanks for the information @FadeMind! Your comment was very helpful!

please someone dont be stupid enough to accept this, its empty

Ah, not to be rude, but this is not the correct place to submit code changes to the kernel - you'll want to follow the instructions in the link below to contribute. Best of luck!

https://github.com/torvalds/linux/pull/261#issuecomment-209192621

Okay. I apologize.

@nishankbhati can you close it?

This is certainly not a bug, it's working as intended (POSIX.2-compliance). Read section [Bash FAQ E10](https://tiswww.case.edu/php/chet/bash/FAQ) and [this](http://pubs.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap04.html#tag_04_11).

Why wasn't this merged?  

Thanks!

This pull request was an error. H3 emac driver is a work in progress [from here](https://github.com/montjoie/linux/tree/sun8i-emac-wip-v2) and isn't ready for stable kernel.

This PR should probably be closed

nice work, github. due dillpickle is the strong sued.
On Jul 3, 2016 23:13, "Tom Manderson" notifications@github.com wrote:

> This PR should probably be closed
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/torvalds/linux/pull/243#issuecomment-230201533, or mute
> the thread
> https://github.com/notifications/unsubscribe/AAmIgsvM8xg_j1XIJwazDeN4zWkg2fUTks5qSIiGgaJpZM4HB_d6
> .

@SemanShen

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

@YangAndWang 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

@nishankbhati 

@Crazylemon64 is right. This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

@petrenkoas83 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

Making function for 1 line is need to be created ? Could you let me know the reason ? 
Thanks. 

@lianwei 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

@fmhess 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

You should also not make useless changes that don't do anything... And the reason you want to contribute is something to put in a message accompanying the contribution, if you put it anywhere. (Not in the commit message or in the code)

@notquitesane

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

Sorry about that.  I was trying to go other way, sync against linus's tree.
 canceled as soon as I realized.

nqs

On Thu, Jul 21, 2016 at 3:54 PM, Silas Rech notifications@github.com
wrote:

> @notquitesane https://github.com/notquitesane
> 
> This repo is mirror-only - nothing will be accepted here for legitimate
> reasons. Please see:
> 
> #17 (comment)
> https://github.com/torvalds/linux/pull/17#issuecomment-5654674
> 
> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
> - _reddit thread
>   https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/_
> - _kernel.org documentation on submitting patches
>   https://www.kernel.org/doc/Documentation/SubmittingPatches_
> - _kernelnewbies explanation on submitting patches
>   http://kernelnewbies.org/FirstKernelPatch_
> - _blog post on submitting patches
>   https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/_
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/torvalds/linux/pull/306#issuecomment-234407876, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/ARDuY0ztD_xBfG-XAC0pCZKSfaY9ckLNks5qX_iPgaJpZM4JSOwz
> .

## 

"May Óðinn loan you intelligence, Þórr loan you strength
May Iðunn keep you healthy, Frigga make you wise
May Týr guide you in what is right, Forsetti guide you in what is just
May Bragi show you the beauty in life, And may Loki show you it's humor"

@fghoussen 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

http://marc.info/?l=linux-serial&m=146398710019191

OK, I understand your reasons ! 

I have never done such a thing (= suggesting a patch for linux/perf) before so I was not sure where and how to start. I will follow this guide lines : https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches. 

My understanding is that in the MAINTAINERS file I will find the maintainers, the repo (to clone) and the mail list relevant for the patch. Then I will follow the above guide lines to end up with something like : git send-email --to whoever@example.org --cc someoneelse@example.com 0001-Your-commit-message.patch. Correct ?

I will try to do this that way : do not hesitate to tell me if I missed something in the process !

Franck

LOL......

WTF

DELETE THIS

👍 

@cyberplant 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

😭 

Thanks for this, I'll see how to make the proper PR, or discard this at all.

dmesg
[ 1380.309578] usb 1-1.3: new full-speed USB device number 5 using dwc_otg
[ 1380.412944] usb 1-1.3: New USB device found, idVendor=079b, idProduct=0028

@RichVillage 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

@lenovouser Oh, I see. Thanks for replying, and have a nice day!

@RichVillage no problem, have a nice day too!

This repo is mirror-only, nothing will be accepted here for legitimate reasons. See:

[#17 (comment)](https://github.com/torvalds/linux/pull/17#issuecomment-5654674)

```
I don't do github pull requests.

github throws away all the relevant information, like having even a
valid email address for the person asking me to pull. The diffstat is
also deficient and useless.

Git comes with a nice pull-request generation module, but github
instead decided to replace it with their own totally inferior version.
As a result, I consider github useless for these kinds of things. It's
fine for hosting, but the pull requests and the online commit
editing, are just pure garbage.

I've told github people about my concerns, they didn't think they
mattered, so I gave up. Feel free to make a bugreport to github.

Linus
```

Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> ```
>               Linus
> ```

Well how to make a bug report when the issues Tab is not set on the Repo. consider Setting it up with 1 check in the Repo's settings.

Also I like the Linux Kernel but the only thing bad with it is that it does not have a simple way to connecting to the Internet just by simply clicking on the Internet Router Name and entering a password to automatically resolve all of the harder settings like windows does. Until that is taken cared of I am sticking to Windows 7 Ultimate x64.

Also I do not like how you cannot install python 3.4.2, 3.4.3, 3.4.4, 3.4.5, 3.5.0, 3.5.1, or even 3.5.2 without them overwriting eachother if it was possible to install all of those versions of that interpreter like you can on windows it would simplify my project's zip making without having to install python to those pecific versions just to build my zip files. So as such if they named everything with the `python{0.major}.{0.minor}.{0.micro}` for all of those versions of the interpreter including their standard library it would resolve this issue. But for now I am not amused (I would have to hack into the interpreter code to find the lines to change for the interpreter to read the things including it's stanard library right). But Yeah I would alert the Python devs they should do this in case people want to install multiple copies of the same version (3.5.x or even 3.6.x) without overwriting it all. (Like what can be done in Windows)

Also Linux that I currently have seems to ship by default with python 2.7.x I recommend only forcing it to ship with 3.5.x to favor asyncio. (For coroutines)

The following changes since commit a99cde438de0c4c0cecc1d1af1a55a75b10bfdef:

  Linux 4.7-rc6 (2016-07-03 23:01:00 -0700)

are available in the git repository at:

  git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/tty.git/ tags/tty-4.8-rc1

As far as I know Github pull requests don't get accepted. You may need to follow authors procedures for apply.

Hahah, close it.
First create quantum coprocessor, and add driver to linux.

Install Gentoo, here you can have all python versions at the same time.

Ok. I already read, that pull-requests through github are not accepted. I contacted the maintainer via email.

@jybaek, you do nothing(No optimizations, no integration, no more functions, no stabilization, nothing, only just renaming variables). And this repo is not dor receive any PR's, because this repo is a mirror of git repo torvalds/linux @ kernel.org.

That's intentional.

It's not duplicate. long long is a type.

haha I see another reason why Linus might not take PRs from Github!

new to github. I didn't get what really has changed. only a space is removed?

@BDHU 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

@AntonBoch1244 Thank you for your answer. I understand.

@shlemisto, Send this PR to torvalds/linux @ kernel.org repo instead of this repo, because it's mirror of torvalds/linux @ kernel.org repo.

@anthonytex, Send this PR to torvalds/linux @ kernel.org repo instead of this repo, because it's mirror of torvalds/linux @ kernel.org repo.

https://www.youtube.com/watch?v=uc2UEfWjvo8

Done, thanks @AntonBoch1244

OK

It's a data type...

Dude your request if funny, but as said before "long long" is a data type.
And asking for changing a documentation for just one or two words is useless.

You can change some little details in documentation alongside interesting change in source code.

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for hosting, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- [reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)
- [kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)
- [kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)
- [blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)

grow up..
kanker means cancer by the way, he's just mocking with it

@irogerthat 

This repo is mirror-only - nothing will be accepted here for legitimate reasons. Please see:

https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> 
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> 
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for _hosting_, but the pull requests and the online commit
> editing, are just pure garbage.
> 
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> 
> Linus
- **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
- **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
- **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
- **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**

What's your problem?

OK

Looks like Github pull requests aren't accepted.

shabi

@ancaemanuel if you don't want to accept a pull request, you should close it on your own.

GitHub Issues Tutorial: https://www.youtube.com/watch?v=TJlYiMp8FuY

Use the "Close issue" button below the comment box to close this issue. 

You're welcome.

@hron84 ancaemanuel is a contributor, not a team member.

Where is the mistake?

@Zenexer I missed the title, I thought he is a team member. Anyway, this is not a right way to handle issues. 

It would be better to mark the `long long` keyword, so its more clear that the duplication its intentional and its actually a source code mention.

A good PR would be marking all the README.md data types and keywords...

@battlesnake  If you humiliate somebody just starting to contribute, that person will not probably contribute again, you should teach them how to contribute, not humiliate them, open-source community should not tolerate this type of comments.

The Linux kernel is a complex project, and you can not simply throw Github PRs at it.

Please read:
- #25 
- https://github.com/torvalds/linux/blob/master/Documentation/HOWTO
- https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

@xavier-fernandez : meh, https://lkml.org/lkml/2012/7/6/495

I was remarking on how you interpreted my remark on the (observably low) quality of issues/PRs on Github as me "humiliating" someone - when there is actual abusive/humiliating stuff in the kernel mailing list.

As for "teach them how to contribute" - there are much better resources available for learning to program in C than could be fit into Github comments.

"open-source community should not tolerate this type of comments" - because your opinion of how people should behave is gospel?  I'd point you to http://marc.info/?l=linux-kernel&m=137392506516022&w=2

Quit playing SJW or I may have to actually start humiliating...

GitHub pull requests won't be accepted, because this repository is meant as a mirror.

@mbrehmer Out of curiosity, then where to/how do people contribute to linux? Is it on another profile/org?

The Linux kernel is a complex project, and you can not simply throw Github PRs at it.

To know what Mr Torvalds thinks of Github PRs, please read  #25

Documentation on how to contribute is self contained:
- https://github.com/torvalds/linux/blob/master/Documentation/HOWTO
- https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches

@bholagabbar Yes, its original repository is on kernel.org.

Besides you have to follow the Dictator and Lieutenants Wotkflow, if you want to contrubute to the Linux Kernel.

@xavier-fernandez no, why should linux developers dirty up the readme with frivolous nonsense that _most_ programmers would already know? And nobody on this PR has insulted anybody, you'd have to be pretty obtuse to think so.

Python 3.5 as default would break tonnes of install scripts, there's stuff like virtualenv for dealing with multiple versions

Also, I'm not sure what Python or UI for connecting to routers has to do with the kernel....

The update is must, not use "if name doesn't have". Actually, "if the name doesn't".

https://github.com/torvalds/linux/pull/308/files#diff-6e489a0861c45e4484b7ea5b409e223e

Is this really useful to create a pull request only for that such thing ?

+1 Close!
The Linux kernel is monolithic. It isn't even possible to properly operate state-of-the-art asynchronous CPUs with Linux as they need a totally different sort of programming paradigms for massively parallelised systems to depict their advantages over conventional 86-based CPUs. E.g. self-modifying code using reprogrammable CPU core commands (similar to FPGAs). 

It's almost the same with biological neural networks and quantum computers. Our programming paradigms used at present are simply insufficient for operating those kinds of CPUs efficiently. 

Oh yes, that is one more reason to add this to Linux roadmap, this should definitely stay open

Please, can someone remove this? @torvalds ??

Submit a patch to the Linux kernel mailing list @pierre42100. They don't accept PRs here.
@pierre42100 [who to submit your kernel patch](https://www.reliableembeddedsystems.com/2010_10_20/WE-2.1_Berger-paper.pdf)
I can do this if everyone is cool with it, im a software engineering student and I'm very good at all things regex, but the readme is important
For this change to be better / more correct, shouldn't both 'longs' be removed?
GitHub has nothing to do with this - people can still do big damage via email
Best pull request I've ever seen in my life.
@xavier-fernandez This is not a "safe space". This PR is absolutely laughable and idiotic.
Guys, Feminist Software Foundation is a troll account, not an actual feminist group. Don't believe every damn thing you see on the internet. Report the account and move on.
Hey guy,

Don't you know what are you doing?
those github community guidelines make it hard for me to not ridicule this guy but holy mother of god 
Omg why

On Oct 15, 2016 8:56 PM, "AlonsoIbarra" <notifications@github.com> wrote:

> Hi friend, I delete a duplicate word.
> ------------------------------
> You can view, comment on, or merge this pull request online at:
>
>   https://github.com/torvalds/linux/pull/335
> Commit Summary
>
>    - Delete duplicate word "long long" in Introduction
>
> File Changes
>
>    - *M* Documentation/HOWTO
>    <https://github.com/torvalds/linux/pull/335/files#diff-0> (2)
>
> Patch Links:
>
>    - https://github.com/torvalds/linux/pull/335.patch
>    - https://github.com/torvalds/linux/pull/335.diff
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/335>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AEK6MO5JGRanvY6LUmf_i0cOhMuZPKiDks5q0PDAgaJpZM4KXu1_>
> .
>

So long long Marianne. Best PR I've ever seen.
RIP
@AraHaan Are you really talking about the kernel? Check out [here](http://www.tldp.org/LDP/sag/html/gnu-or-not.html).
Was eager to see Linus' reaction to this...
one can hope still yet
Indeed
Who are from the beginning of the rookie
I have a variable named `long long ago`, would you still remove the duplicatie word? 
Is this a joke?
haha what a funny joke
:+1:  @pierre42100 
Please don't try this at home!!
That second '!' was intentional, don't delete it.
硬吹丝挺
@Yurunsoft 评论就服你
说出来干什么，你以为我会同情你？我差点笑出声...
wandefu~
lol
这周就靠这个 pr 保持心情了。
Ну а что, Нормальное изменение, зачем слова дублировать? 
"Found another typo in the source"

    - int block = 42;
    + in block = 42;

</s>
Huoqianliuming
@imadie you forgot to [link](https://twitter.com/i/web/status/803131370943823872)
It's so fat. LOL.
LMAO so hard
Lol best PR
is op a mexican intellectual?

On Nov 29, 2016 15:57, "THE-Swank" <notifications@github.com> wrote:

> Lol best PR
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/335#issuecomment-263712654>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAmIgrDjWaE4h-5rR0BLJNe0LuSWoRk5ks5rDJ_fgaJpZM4KXu1_>
> .
>

holy fucking shit this stupid ass thread stfu

next time a 'long long' comes along kindly close the fucking pr

wtunholyf

On Nov 29, 2016 16:51, "mtm" <marctmiller@gmail.com> wrote:

> is op a mexican intellectual?
>
> On Nov 29, 2016 15:57, "THE-Swank" <notifications@github.com> wrote:
>
>> Lol best PR
>>
>> —
>> You are receiving this because you are subscribed to this thread.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/torvalds/linux/pull/335#issuecomment-263712654>, or mute
>> the thread
>> <https://github.com/notifications/unsubscribe-auth/AAmIgrDjWaE4h-5rR0BLJNe0LuSWoRk5ks5rDJ_fgaJpZM4KXu1_>
>> .
>>
>

@shitenglish 你内涵了
![20160419034745372](https://cloud.githubusercontent.com/assets/2472557/20737472/e9fb9436-b6e7-11e6-9a08-f8b5d815478e.jpg)

Nice work

As a non C programmer I could probably have done this mistake as well. It is a funny mistake though, but not stupid or idiotic.
I hope , that it's a fat joke, otherwise it's sad =) 

it makes me laugh
You're cute
it is a sad story....?

???? iPhone

? 2016?11?30????6:45?Fonger <notifications@github.com<mailto:notifications@github.com>> ???


You're cute

-
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<https://github.com/torvalds/linux/pull/335#issuecomment-263841566>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AVL7kAnulBfMXeaSRsTOVFfMkH2MiYU6ks5rDVOwgaJpZM4KXu1_>.

I think, that guy, after that reactions; exited from community, software development and everything having microprocessor. I guess, leaving now from life too.

https://www.youtube.com/watch?v=hfHS7WCPc24

But my reaction; YOUR ARE MY HERO..! You did or just try, what we want to do...
http://img-comment-fun.9cache.com/media/aOqnyYN/aQ4M4Bwm_700wa_0.gif
太屌了，Github能這樣玩，我也是暈了。
what a funny guy
good job!
Gooood!
愿天堂没有long long
u r cute.
It cured my tooth ache. 233333
long long time ago, A very old programming language called C language.
蛤。
In a galaxy a long long away
可以。。这很Gayhub。。
long long laugh
+1 On add it to the roadmap. Or we may as well shut GitHub down. 
That would be great!
Took me a long long time to read this long long PR. 
Lol. 
This is without doubt, the funniest thing I've come across on GitHub. 

And to keep in line with the tradition  of open source code, I copied and pasted this to Facebook and made a reference to the source. 
You be careful if your usage. I wouldn't imagine selling a woman would yield much more than 200 Mb quota. 
haaa, that is funny, I can offer a good price
@PommyGit : Was that a long double?
Best PR and good work :|
linux tiro
this is literally becoming a meme
It's a funny joke or a PR from newbie, calling this idiotic is too much for me.

Remember this joke?
`long long ago; /* in a galaxy far far away */`
So since we can't copy-pasterino the story, we can only share the link?

Oh my god, where you from? Now the love of open source is a type of real sacrifice! 
![delichris](https://cloud.githubusercontent.com/assets/7642878/20854192/80be9f50-b8d0-11e6-9bcb-987b378bf52c.jpg)

![just-the-truth](http://orig02.deviantart.net/350c/f/2007/273/8/1/linux_communism_by_an1r0n.png)
AT somalimin

come live with me

i'll give you my nigerian inheritance and teach you cobol and ss7

On Dec 2, 2016 17:48, "Manoel Machado" <notifications@github.com> wrote:

> [image: just-the-truth]
> <https://camo.githubusercontent.com/74326fcb8feee8699623fc3cc50198604d4cca6f/687474703a2f2f6f72696730322e64657669616e746172742e6e65742f333530632f662f323030372f3237332f382f312f6c696e75785f636f6d6d756e69736d5f62795f616e3172306e2e706e67>
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/362#issuecomment-264593430>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAmIghfs_v6QiIBHrQURxvwVIjRVXHS_ks5rEK5hgaJpZM4LBNPW>
> .
>

THIS IS TOO GOOD
Beautiful.
Sorry :')
His commit saves everyone 1 byte ; he is hero.
This is definitely the funniest thing in whole GitHub :)))
In all reality, this should probably be merged now.
Merge it already :ok_hand: 
Joins GitHub to remove two spaces. Nice meme!
and so the petri dish became a culture

On Dec 3, 2016 20:09, "Jordan Demaison" <notifications@github.com> wrote:

> Joins GitHub to remove two spaces. GG
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/362#issuecomment-264679314>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAmIgsrzjuWCSzHfzmE5q4Ilu4itgVPGks5rEiDUgaJpZM4LBNPW>
> .
>

ha ha ha ha :)))))

I cringed harder than Reddit now


thanks man.
That's not cool! A very old and racist meme copy pasta as a pull request to linux.

https://www.reddit.com/r/copypasta/comments/3bshkn/pls_no_copy_pasterino_my_story/
www.thebestoftwitch.com/2013/09/somalia.html
looking forward for this to get merged
I mean , i've seen this joke 10 times at least , in couple of communities like csgo ,moba games or whatever
@andresusanto This repo is just a mirror, they don't accept pull requests here.
"Wow this meme isnt even new omg bblah blah blah links links blah"
Linus, lord of all kernels pls merge this

haha


oucaijun.happy@163.com
 
From: 李大虾
Date: 2016-11-29 19:43
To: torvalds/linux
Subject: Re: [torvalds/linux] Delete duplicate word "long long" in Introduction (#335)
说出来干什么，你以为我会同情你？我差点笑出声...
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub, or mute the thread.

你仿佛在刻意逗我笑
66666666
oh my god .., XD
Nice job brother
Seriously?
[](http://grammarist.com/spelling/behavior-behaviour/)
What release should your super-critical PR go into?
LMAO
Even if this pull request **was** merged (which it won't, because Linus doesn't take pull requests from GitHub), it wouldn't even change the meaning of the comment because both of the words mean the exact same thing. It's only the spelling that's different from British English (behaviour) and American English (behavior).

About PRs not being accepted here, [this is how you submit patches to the kernel.](https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches) No pull requests will be accepted here, [this is the reason why.](https://github.com/torvalds/linux/pull/17#issuecomment-5654674)
I'd have done the same :) Honestly
Sorry guys, I wasn't trying to be sarcastic or anything. I'm new to github and was trying to make a very minute first contribution that wouldn't be obstructive to anything. It was more of a test, to see how I could push real content in the future.

Plusreed, thank you for your feedback I was unaware that pull requests weren't to be accepted, thanks to you I now know why. Perhaps I should have checked the British spelling spelling...oops.  :)
+1 But also add "
* General Artificial intelligence support for positronic brains
* Solve race conditions using Tachyon based time travel.
* On shutdown, the message should read;-
"Daisy, Daisy, give me your answer, do
I'm half crazy all for the love of you
It won't be a stylish marriage
I can't afford the carriage
But you'd look sweet upon the seat
Of a bicycle built for two"
(Alternatively space the remaining astronauts to protect the mission)
+1 but recommend "distributed computation of solution to Heat Death of the Universe as
background process" and "closed time-like loop computation for
instantaneous computing." We will need drivers for the anti-telephone processor.

On Sat, Dec 10, 2016 at 1:17 PM, shayneoAtNorwood <notifications@github.com>
wrote:

> +1 But also add "
>
>    - General Artificial intelligence support for positronic brains
>    - Solve race conditions using Tachyon based time travel.
>    - On shutdown, the message should read;-
>    "Daisy, Daisy, give me your answer, do
>    I'm half crazy all for the love of you
>    It won't be a stylish marriage
>    I can't afford the carriage
>    But you'd look sweet upon the seat
>    Of a bicycle built for two"
>    (Alternatively space the remaining astronauts to protect the mission)
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/320#issuecomment-266230877>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AGo6_KL9tza4sHMXxLxvo5Cf_HnT55BVks5rGvrWgaJpZM4J3c_R>
> .
>



-- 
David J. Manglano
Software Engineer | MS, CS, University of Chicago
708-822-5909
linkedin.com/in/davidmanglano
stackoverflow.com/users/3565315/manglano
@shayneoAtNorwood  @manglano  why not Lol, maybe 100 years in future we could have a working prototype :) 

On a sidenote, we already have a prototype quantum computer, I think Google and IBM were already researching into that. We dont wanna see Linux die out in quantum computing. Well, only M$hit dreams it.
Submit a patch to the Linux kernel mailing list @CaiBirdZhang. They don't accept PRs here.
<img src="http://i.giphy.com/ofjlyZc5fnzm8.gif">
Hello from Github geek of infan
oops.
PRs don't get accepted here.
Where are they accepted? 
https://github.com/torvalds/linux/pull/17#issuecomment-5654674

> I don't do github pull requests.
> github throws away all the relevant information, like having even a
> valid email address for the person asking me to pull. The diffstat is
> also deficient and useless.
> Git comes with a nice pull-request generation module, but github
> instead decided to replace it with their own totally inferior version.
> As a result, I consider github useless for these kinds of things. It's
> fine for *hosting*, but the pull requests and the online commit
> editing, are just pure garbage.
> I've told github people about my concerns, they didn't think they
> mattered, so I gave up. Feel free to make a bugreport to github.
> Linus

 * **[reddit thread](https://www.reddit.com/r/linux/comments/4ltsxe/dont_submit_changes_for_linux_kernel_via_github/)**
 * **[kernel.org documentation on submitting patches](https://www.kernel.org/doc/Documentation/SubmittingPatches)**
 * **[kernelnewbies explanation on submitting patches](http://kernelnewbies.org/FirstKernelPatch)**
 * **[blog post on submitting patches](https://shkspr.mobi/blog/2014/04/submitting-trivial-linux-kernel-patches/)**
Please add this path to the mainline.
Want to punish the trolls?  Say you'll merge it if they resolve all the merge conflicts....
linus doesn't merge pull requests.

On Jan 2, 2017 16:37, "Jake" <notifications@github.com> wrote:

> Want to punish the trolls? Say you'll merge it if they resolve all the
> merge conflicts....
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/156#issuecomment-270027599>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAmIgsos7TonSc4uLI86zC2mOWwWaM9Cks5rOXwhgaJpZM4DTx7h>
> .
>

git.kernel.org is blocked by my proxy. Seems silly that i have to clone to my local machine an entire repo just to change one line of code.

thanks for links though.

Can i send an email to somone? can one of you please submit a patch for this issue?
@PatrickCoffey please look this  https://www.youtube.com/watch?v=LLBrBBImJt4

Thanks,
That's a video of the text I just read? It doesn't magically poke a hole in my proxy
ill get some time at the library pc and see if i can get a proper patch submitted. 

cheers for linking docs and vids.
Dude, seriously? wtf. this is complete vandalism.
The Linux kernel is a complex project, and you can not simply throw Github PRs at it.

Please read:

 * #25
 * https://github.com/torvalds/linux/blob/master/Documentation/HOWTO
 * https://github.com/torvalds/linux/blob/master/Documentation/SubmittingPatches
please drop the request . the patches are not working
Close since it was fixed by https://github.com/torvalds/linux/commit/14221cc45caad2fcab3a8543234bb7eda9b540d5
PRs don't get accepted here.
what the fuck
丢脸丢出国了啊！
我可能下载了假 Linux。
Bro wtf why would you do this HAHAHAHAHA
什么鬼？
哈哈，好欢乐
wtf! shame on you...
Why u did that?



Very sorry.
new comer admired u.
just for test to  make so large mistake




在 2017-01-17 18:05:28，"Victor" <notifications@github.com> 写道：


Why u did that?

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub, or mute the thread.
我可能下载了假 Linux。
I 服了You！
Ahahahaha....
PRs don't get accepted here.
he did this just like his name
don't understand but seems awsome
WTF?
卡位朝聖
Linus does not take PRs on here, see the rest of the PRs here and this:
https://github.com/torvalds/linux/pull/17#issuecomment-5663780

PRs don't get accepted here.

PRs don't get accepted here.
Sorry, I accidentally created a PR on the wrong repo. I was going to create a PR on an internal fork to show a coworker something but ended up sending it to this repo instead. I'm very aware of the PR policy, hope I didn't offend anyone :) 
Hi @colossus9!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Thanks!
Hi @RazManor!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @Li4ick!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
This may be a question for the Trivial Patch Monkey (@jikos, I believe), but although the process to submit small patches is well documented, it makes little mention from what I can see about how Sphinx should be configured.

Is this simply a `brew install sphinx-doc` along with some flags to support the various architectures?
That's an excellent question, and I don't know the answer off the top of my
head - I'll find out and get back to you.

On Fri, Feb 10, 2017 at 6:52 AM, Chris Finazzo <notifications@github.com>
wrote:

> This may be a question for the Trivial Patch Monkey (@jikos
> <https://github.com/jikos>, I believe), but although the process to
> submit small patches is well documented, it makes little mention from what
> I can see about how Sphinx should be configured.
>
> Is this simply a brew install sphinx sphinx-build along with some flags
> to support the various architectures?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/386#issuecomment-278752424>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BRlxhmP8R7LglDC6faEUsHWJs6OLks5ra26bgaJpZM4Lx_jw>
> .
>

So I don't have a macOS box handy to test brew, but it looks like
installing sphinx is a pretty good start.

I've been trying `make htmldocs` on my linux box, I found that I needed
graphviz and xmlto as well. I know graphviz can be installed with `brew
install graphviz`, not sure about xmlto.

Hope this helps, let us know how you go.

On Fri, Feb 10, 2017 at 7:49 AM, Daniel Axtens <daniel@axtens.net> wrote:

> That's an excellent question, and I don't know the answer off the top of
> my head - I'll find out and get back to you.
>
> On Fri, Feb 10, 2017 at 6:52 AM, Chris Finazzo <notifications@github.com>
> wrote:
>
>> This may be a question for the Trivial Patch Monkey (@jikos
>> <https://github.com/jikos>, I believe), but although the process to
>> submit small patches is well documented, it makes little mention from what
>> I can see about how Sphinx should be configured.
>>
>> Is this simply a brew install sphinx sphinx-build along with some flags
>> to support the various architectures?
>>
>> —
>> You are receiving this because you were mentioned.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/torvalds/linux/pull/386#issuecomment-278752424>, or mute
>> the thread
>> <https://github.com/notifications/unsubscribe-auth/ADJ5BRlxhmP8R7LglDC6faEUsHWJs6OLks5ra26bgaJpZM4Lx_jw>
>> .
>>
>
>

Hi @yankunsam!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @zhouhanjiang!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
best of best. lol
Hi @mozesslackware!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @Sureshraomr!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
提交kernel方法
原来不止我一个人是chinese
Hi @Sholes!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi! I am a big fan of Outreachy (and I'm pretty sure @ajdlinux is too) - we'd love to help you get this in. Let us know if you have any questions about the process or if we can help!
@daxtens @ajdlinux That would be great! I am working on an initial contribution for outreachy '17 in Linux kernel Documentation Project. I have worked with Qemu before but never with linux kernel. It would be a great favor if you help me with my initial patch. I was further working on fixing warnings in the Sphinx build for the next patch. Can we connect on IRC if possible?
Hey, welcome to kernel-land, it's a fun and exciting place! Documentation is a great place to start, as you've probably worked out!

I'm `ajd` on Freenode (not sure about @daxtens!), happy to come over and join whichever IRC network you prefer as well. Note that we're both in UTC+11 (soon to be UTC+10). Alternatively feel free to get in touch via email as well.
Hi @AnanSN!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
I'm dja on freenode, but I'm only ever on for a subset of UTC+11 'working hours', so email might work better for getting in touch with me.
There is a documentation section in Chinese - maybe that would be an
appropriate place for this contribution?
https://github.com/torvalds/linux/tree/master/Documentation/translations/zh_CN


On Thu, Mar 23, 2017 at 8:08 PM, songjiayang <notifications@github.com>
wrote:

> *@songjiayang* commented on this pull request.
> ------------------------------
>
> In arch/x86/boot/header.S
> <https://github.com/torvalds/linux/pull/396#discussion_r107616800>:
>
> > @@ -12,7 +12,8 @@
>   * addresses must be multiplied by 16 to obtain their respective linear
>   * addresses. To avoid confusion, linear addresses are written using leading
>   * hex while segment addresses are written as segment:offset.
> - *
> + *
> + * 在实模式使用64k段,所以,段地址 * 16 = 线性地址
>
> don't use Chinese , change to English please.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/396#pullrequestreview-28598302>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BRZwqkAgDV7hKxzgfw95cPStRUWfks5rojaMgaJpZM4MiI2O>
> .
>

Hi @ThePotatoGod99!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
It has conflicts with `drivers/usb/gadget/udc/net2280.c` , doesn't it?
Hi @puruscor!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @pixelrazor!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hey @puruscor, I'm not all that familiar with this particular subsystem but if you'd like a hand in figuring out how to get this upstream, let me know and I may be able to give you some hints.
We are taking steps to help lead devs enforce *good* commit messages. Hope you like this initiative guys! >>> https://goo.gl/bGfFBw
Hi @aristarh2704!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @gugu111!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @hustmsell!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Looks like spam.
Sadly the bot is not really equipped to detect spam. :(

On Thu, Apr 13, 2017 at 3:01 PM, LulzKiller <notifications@github.com>
wrote:

> Looks like spam.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/402#issuecomment-293781897>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BZ7tgScCUEqRpuOh7_cUyjr2o5zIks5rvaw1gaJpZM4M2X40>
> .
>

If someone will send me one I will ;)


2017-04-10 23:30 GMT+02:00 odykyi <notifications@github.com>:

> *@odykyi* requested changes on this pull request.
> ------------------------------
>
> In drivers/platform/x86/dell-wmi.c
> <https://github.com/torvalds/linux/pull/379#discussion_r110767908>:
>
> > @@ -229,7 +229,7 @@ static const u16 bios_to_linux_keycode[256] __initconst = {
>  	[18]	= KEY_PROG1,
>  	[19]	= KEY_BRIGHTNESSDOWN,
>  	[20]	= KEY_BRIGHTNESSUP,
> -	[21]	= KEY_UNKNOWN,
> +	[21]	= KEY_BRIGHTNESS_AUTO,
>
> pls test on Dell Lattitude E5570.
> thanks
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/379#pullrequestreview-31964421>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AEVG3wjQebK67TEv13lkNUK5iGm3MIrCks5rup92gaJpZM4LnMgt>
> .
>

Best commit ever!
Close this PR please, It's only a test, maybe a joke.
Hi @Kittybangers!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @ngalbo!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @RealMG!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @arcivanov!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
@pali @superm1 I'll cross post this into the mailing list per notice above but I will leave this here for your review as well to speed things up.
Does the Inspiron 1545 have this issue as well? If so, I can test those changes as I am currently useing that as well (I had to swap out it's T3400 CPU for an P8800 though).

I have also been looking for somone to help me make open source bios for it to that can replace the original and out of date intel bios that can also be buggy at times. (And I do for 1 of the plans increase the max amount of memory it can read (up to 16 or 32 GB's of RAM), increase max HDD space it can read and pretty much all I want to bios to do different than the intel bios for now and make it open sourced)
@AraHaan I wouldn't know regarding your specific model (Inspiron 9550/60, Precision 7510/20 and the other systems in the modern lineup are definitively affected) but if you were getting either one of these error messages or both then this patch definitely fixes the issue:
```
[    5.536399] dell_laptop: Setting old previous keyboard state failed
[    5.536434] leds dell::kbd_backlight: Setting an LED's brightness failed (-6)
```

Additionally you can verify that writing `0` to the `/sys/devices/platform/dell-laptop/leds/dell::kbd_backlight/brightness` while `root` will not result in a permission denied and should extinguish keyboard backlight.
Patchwork: https://patchwork.kernel.org/patch/9694529/
This patch supersedes mine: https://patchwork.kernel.org/patch/9695271/
Hi @robotrovsky, did you email the linux-input mailing list or the maintainer Henrik Rydberg directly?
Hi @orospakr ! Yes i wrote to Henrik Rydberg and he told me to submit the patch according to the guidelines. But i still don´t think, that the driver is complete this way. I would like to rewrite the driver alongside the Magic Trackpad I, but unfortunately i don't have time to do this right now.  https://github.com/tiziano88/magic-trackpad-2-linux/issues/4#issuecomment-256772251
Hi @jangraczyk!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
@mingjunyang I doubt they're even gonna waste half a second on this load of absolute crap. Closing this PR would take a grand total of one thought process, which is two more than is necessary for spammers.
Hi @AZO234!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @AZO234,

This looks like an interesting contribuition - do you need any help
upstreaming it?

Regards,
Daniel

On Mon, May 8, 2017 at 4:42 AM, AZO <notifications@github.com> wrote:

> Closed #411 <https://github.com/torvalds/linux/pull/411>.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/411#event-1071962590>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BcHplRbbLKUcPlsbGaNEuJ1V7egMks5r3hCVgaJpZM4NTAhp>
> .
>

@daxtens looks like there's already some effort to upstream it - https://patchwork.kernel.org/patch/9705979/
@robotrovsky Is there a way I can help you?
Hi @elbamos! Thank you very much for your offer to help out. If you like to, you could port the driver over to magic trackpad I (magic mouse) driver, to get bluetooth working. Otherwise i think i will find some time to work on this the next two months. I already organized a USB Protocol Analyzer, to reverse engineer the protocol further, and make the settings adjustable (click firm, silent, etc...).
Hi @dhruvka!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @malcolmcrossley!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Oh dang, sorry, wrong target tree.
Hi @mdeguzis!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
keep follow
Hi @keller0!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi Michael,

This looks like a good contribution; if you would like any help getting it
upstream please let me know.

Regards,
Daniel

On Wed, May 17, 2017 at 5:09 PM, Michael T. DeGuzis <
notifications@github.com> wrote:

> Closed #415 <https://github.com/torvalds/linux/pull/415>.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/415#event-1085429445>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BXJX3y-1LXhVKI-ZSnmqP6A6gBkRks5r6p0dgaJpZM4Nc6la>
> .
>

@daxtens , sure, I have never made a contribution yet to the kernel, even this small. Either comment here, or contact me via whatever channel suits you best. I will start trying to follow https://www.kernel.org/doc/html/latest/process/submitting-patches.html listed above.
I think I got it, configured git send-email, tested with my email first

```
Send this email? ([y]es|[n]o|[q]uit|[a]ll): y
OK. Log says:
Server: smtp.SERVER.com
MAIL FROM:<NAME@SERVER.com>
RCPT TO:<linux-mm@kvack.org>
RCPT TO:<trivial@kernel.org>
RCPT TO:<XXXXXX@XXXXXX.com>
From: FNAME LNAME <XXXXXX@XXXXXX.com>
To: linux-mm@kvack.org
Cc: trivial@kernel.org,
        mdeguzis <NAME@SERVER.com>
Subject: [PATCH] Correct spelling and grammar for notification text
Date: Wed, 17 May 2017 09:38:42 -0400
Message-Id: <20170517133842.5733-1-NAME@SERVER.com>
X-Mailer: git-send-email 2.12.2
```
Hey @mdeguzis,

It looks like your git send-email worked: http://marc.info/?l=linux-mm&m=149502833306198&w=2. Woot!

A few things I noticed:

1) You should configure git to use your name in commits - "git config --global user.name "Michael DeGuzis"" should work, I think. Otherwise, git send-email will add "From: professorkaos64 <mdeguzis@gmail.com>" to your patch and the wrong name will end up in the changelog when it's applied.

2) Per step 11 in the submitting patches document, you need a `Signed-off-by: [Name] <[Email]>` line at the end of your commit message. The easiest way is to use `git commit -s` to automatically add one.

3) Your commit title should use the right prefix to identify the subsystem you're touching. There's not really an official standard for this - the best way to figure it out would be to run `git log` on the files you're touching and see what other people have used. In this case, I'd recommend `thp:` (or alternatively `mm:`) based on past usage.

When you resend the patch with `git send-email` use the `-v2 --annotate` options, which will mark it as version 2 of the patch, and open up an editor for you to edit the message before you send it. After the "---" line at the bottom of the commit message, you should add a quick note saying what you fixed between version 1 and version 2.

Feel free to Cc me (andrew.donnellan@au1.ibm.com) and @daxtens (dja@axtens.net) as well.

Welcome to the kernel community. :)
I correct my ~/.gitconfig to include my full name. I fixed it from professorkaos64 (my older username) after this.  I'll add `git commit -s` to my notes, thanks!. 

>Your commit title should use the right prefix to identify the subsystem you're touching

Ok, so I did that for the subject, but I missed it in the commit title.  What is the "commit title" here?Would it be the "Merge Tag" line?

```
commit b23afd384801711ab6dbccd259cc14cb09a1dcaf
Merge: 2b6b38b04c2e 6f61dd3aa351
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 16 13:29:07 2017 -0700

    Merge tag 'pstore-v4.12-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux

    Pull pstore fix from Kees Cook:
     "Fix bad EFI vars iterator usage"

    * tag 'pstore-v4.12-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:
      efi-pstore: Fix read iter after pstore API refactor
```

>When you resend the patch with git send-email use the -v2 --annotate options, which will mark it as version 2 of the patch, and open up an editor for you to edit the message before you send it

Are you saying need to resend this particular patch? Should I just reply via Thunderbird/Mutt on any subsequent replies?

> Welcome to the kernel community. :)

Well, I only know Python well, but maybe I'll get into C someday soon :)
oh ok, I see to resend the patch with V2.. ok. i'll resend 
By "commit title" I meant the first line of your commit message, which git send-email converts into the subject line of the email. Sorry if I was unclear! 

Yes, resend the patch after fixing up those issues. When you're sending a patch, use git send-email, but you can then use your normal email client for any discussion which happens in response. 
I removed extra space so I can do another git commit -s on this. However, if I was sending again, would I just use git-rebase to edit the commit?

I documented this previously in my documents repo:
https://github.com/mdeguzis/documents/blob/master/linux-applications/git/changing-commits.md

What's annoying though, is git commit -s adds the sign off at the top, which is then used as the subject. I placed that at the bottom.
Yeah, use git rebase or git commit --amend to edit the commit.
什么鬼？？？？
cool
Hi @cyborg-x1!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
cool
Hi @wyqwxj!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @lnyng!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @JiangbiaoDeng!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @JiangbiaoDeng!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Leave a comment
Hi @JiangbiaoDeng!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Leave a comment
Leave a comment
Hi @etmatrix!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi, @robotrovsky! Really appreciate your effort! What is the best place to track progress on this? As soon as it's in mainline I'm buying the M. pad :)
Hi @AmirAbrams!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @DrShadow34!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
from Linux 4.11-rc1
Hi @davidzhang0o0!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @t2000!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @kwote!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
I'm sorry, this was made by mistake.
Any update on this?  I have an expensive MT2 collecting dust since I switched back to Linux full time.  How can we help?
Yes, I'd love to see this as well. I can help with testing too.

I'm currently using https://github.com/robbi5/magictrackpad2-dkms on arch for the time being, it's a bit clunky (only works wired) using DKMS (and linux 4.11 caused some issues) but at least I can use the magic trackpad :)
That's where I was headed next.  I'm going to be trying it on Manjaro so it's good to hear it works on Arch before attempting it.  Agreed, Bluetooth support would be great but I can deal with a wire for now.  

There's also a thread on that project that explains better what needs to be done. https://github.com/tiziano88/magic-trackpad-2-linux/issues/4 
This PR is now outdated...
I have time this weekend and will prepare the patch nearly as-is according to the guidelines and send it to the mailinglist. I know i should have done this a long time ago.

Ok. So i send in the patch:
http://www.spinics.net/lists/kernel/msg2551703.html

Hi @DaanDW!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @czlc!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
I absolutely love Apple's keyboards and mouse pads, but unfortunately I only use Linux. As soon as Magic TrackPad 2 works in Linux over Bluetooth with basic click, right click and scroll I'll buy one. I'd be happy to help test any unstable drivers.
Hi @mohamedalrshah!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @mohamedalrshah!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @mohamedalrshah!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @ahmetilgin!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Also, hope you are kidding with this one..  😅 
I'm eagerly waiting to be able to use my trackpad. Is there anywhere I can track progress of this change?

I'll gladly help testing aswell!
i think this should get merged in
^^ no, it shouldn't
@ItzLevvie Don't you think it's easier to read? It's now only one line of code!
:+1: Have been waiting for this for awhile. 
@ahmetilgin The kernel is written in C. C isn't an interpreted language like JS. Instead, it is compiled. Empty characters and spaces don't affect execution speed.

That being said: It looks much more readable than the current code.
Yes is dank agree
@Blaze349 The Linux kernel takes soooooo long to compile. This will increase compilation speed by removing all the unnecessary whitespace the compiler has to skip over.
@kylelamse Are you joking? Minifying a code doesn't make it 'readable'... In Javascript it's used to reduce bandwidth between server & the user, reduce page execution time & reduce file size

@ahmetilgin don't bother wasting your time on the PR. This won't improve anything except for decreasing file size. Also, there are a lot of comments in the 'minified code' that you've not bothered to remove. But again don't bother about it.

@Jonathan50 If a Linux kernel takes 'soo long to compile' then you need to invest in a better CPU like Xeon. Compiling Android or a kernel requires you to have more cores to speed up the compiling process. If you have less cores then it will take more time to compile.

No one loves the code unless it's a sarcasm 

@ItzLevvie I do have to agree, this won't get accepted anyways because of contributing guidelines. So you don't have to worry about it.

@dadur604 no he doesn't need any help.. he's just trying to make the community laugh by committing garbage code.

@Blaze349 C is already fast enough... there's no need to do all the stuff the compiler will do it for you automatically or you can add some flags to optimise it.

@thibmo I believe he's trying to make the community laugh. If it's serious then I would obliviously laugh even more. 
@7bf70ec5 Linus Torvalds uses a Macbook Air so...yeah. Also, the kernel isn't written in C# 🤣 . It's written in C and a little Assembly.
@DizAzTor Should be easier.  You no longer have to scroll through thousands of lines of code.  Having it on one line just makes sense.
Wow, now that's some beautiful code aesthetics. Congrats
@DizAzTor why maintain when you can not maintain
Hi @kylelamse!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Are you seriously kidding me?😂
yes this is beautiful 10/10
> No one loves the code unless it's **a sarcasm**

@7bf70ec5
I've never laughed at code so hard in my life. Thanks for that! Definitely a much needed contribution. Linus has nothing on this guy.

Perhaps this should go into a new Linux for Comedy branch.
Thats just, thats's hmm what is it?..... It's ART :D Put it in a Museum.
10/10 best commit ever made (other than adding `rm -rf /` to `~/.bashrc`)
This made me laugh so hard. I want Linus's reaction on this now.
Linus will say "f**k you" like when he told Nvidia ✌️ 
Good job!
Hi @sohu0106!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @sohu0106!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
🍌 
testing
Hi @mohamedalrshah!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @Hoeze!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Are you sure this can be compiled? Maybe this is a joke.
There are still too many lines of code. We should remove the comment at the top of the file. It will help the code compile even faster and we'll have less lines to scroll through.
code is **_## sonic_** fast :)) 👍 💯 
Believe it or not, some organized projects care very much about things like indentation and other formatting.

Not trying to be picky ;)

You might follow the email type instructions above...

Yes, I really understand the necessarity for clearly formatted code (I personally HATE unformatted code).
I'm just a little bit surprised that I was too silly to notice this mistake ^^
If you would like help getting this sent by email - if anything is unclear
or you have trouble with any of the steps - I or @ajdlinux can give you a
hand.

Regards,
Daniel

On Fri, Aug 4, 2017 at 5:27 AM, Hoeze <notifications@github.com> wrote:

> Yes, I really understand the necessarity for clearly formatted code (I
> personally HATE unformatted code).
> I'm just a little bit surprised that I was too silly to notice this error
> ^^
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/444#issuecomment-320066220>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BU0bA1NPz1_0Z0VJ2PoCCNesvceyks5sUh83gaJpZM4OoxrQ>
> .
>

This should be a GCC pull request. GCC must support partial prefix match of keywords for fast processing of C code. For eg: GCC should match the tokens #inc as #include et al. This will further reduce the compilation time and C file size
You can make it even faster by commenting out the last line.

It slightly alters the behavior, but it'll run almost instantly.
Hi @Ole2mail!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
@ahmetilgin You can make your country develop faster by removing yourself.
10/10 would compile 🚫 
Blown away, BLAZING FAST!

On Sat, Aug 5, 2017 at 7:59 PM, Michael Diarmid <notifications@github.com>
wrote:

> 10/10 would compile.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/437#issuecomment-320446685>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ANkje0ACmOQfz5R6d5bFgspdSoZXt763ks5sVHxWgaJpZM4OaL_8>
> .
>

You can improve the speed of the preprocessor by removing the includes.
hello Wojciech
thanks a lot.
I've pushed with tabs already.
I believe the next step is to cook the patch?
Oleg

> Sent: Friday, August 04, 2017 at 10:51 PM
> From: "Wojciech Maj" <notifications@github.com>
> To: torvalds/linux <linux@noreply.github.com>
> Cc: Ole2mail <ole2mail@mail.com>, Mention <mention@noreply.github.com>
> Subject: Re: [torvalds/linux] append Qualcomm GOBI 2K chipset ID for Panasonic CF-U1 Toughbook (#445)
>
> wojtekmaj commented on this pull request.
> 
> 
> 
> > @@ -76,6 +76,8 @@ static const struct usb_device_id id_table[] = {
>  	{DEVICE_G1K(0x1bc7, 0x900e)},	/* Telit Gobi QDL device */
>  
>  	/* Gobi 2000 devices */
> +	{USB_DEVICE(0x04da, 0x250e)},   /* Panasonic Gobi 2000 QDL device */
> +	{USB_DEVICE(0x04da, 0x250f)},   /* Panasonic Gobi 2000 Modem device */
> 
> You used spaces while all the other comments are separated from the code by tabs :)
> 
> -- 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/445#pullrequestreview-54474213

top kek
Aside from the sarcasm and everything - has anyone actually compiled and tested this?
@tilda My guess: fail
I mean, I hope you can see that this would never work.. 

> `staticintkernel_init(void*);`
@thibmo RIP
@thibmo I'm amazed that you seriously think that we think it would work.
@dschwartz783 As I am amazed that you think that I think that you think it would work. 😛
why isn't this merged in yet
this is urgent for linux success pls merge soon @linus 
Hi @andrewlucianlu!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Looks very fast to me
the best code I've ever seen in my life
This code was so good it made me laugh and then cry of joy

On Aug 11, 2017 3:08 AM, "Nicholas Yau" <notifications@github.com> wrote:

the best code I've ever seen in my life

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
<https://github.com/torvalds/linux/pull/437#issuecomment-321744584>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/AETfrlKR1-hYDq0fX_1SNS7RN4rcSLgjks5sW_3TgaJpZM4OaL_8>
.

Thank you for your support :)

I changed the patch according to Lee Jones' instructions:
https://lkml.org/lkml/2017/8/7/136

Am I missing something here?

**EDIT:**
If I would like to respond to this thread, the correct git command would be:
> `git send-email --to lee.jones@linaro.org --cc linux-kernel@vger.kernel.org --cc <...> --in-reply-to <message-id> 0001-Fix-missing-PCI-ID-V2.patch`

Is this correct? Do I need any "--annotate" here?
10/10
-IGN
@torvalds
I rest assured at the review board's unanimous approval 
I've found 2 of your patches on LKML - sent August 1 and August 4, and your
latest patch GitHub. You will need to send the new version to Lee and the
mailing list - no-one merges patches from GitHub. Before you do though,
there are a few final changes. Don't be discouraged, you've come a long way
and you're getting very close! :)

 - The Signed-off-by line needs to include your real name and a real email
address (not a users.noreply.github email) - see
https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin

 - The Thanks-to line would traditionally also include a full name and
email. If you don't have the person's name or email or if the person
doesn't want their email publicised, then what I would suggest would be
instead put in a sentence explaining how you got the fix. I assume it was
from a comment on another GitHub issue, or maybe a forum? I'd say something
like: "This fix was suggested by user CoolStar on the <forum> - <link to
post>"

 - For some reason your second email had '[PATCH 1/2]', but there was only
one patch?

 - Optional: If you include me as a cc (git-send-email --to=<blah>
--to=<blah> ... --cc=dja@axtens.net ...) I can help out on the mailing list
and give you a formal review.

Regards,
Daniel

---------- Forwarded message ----------
From: Hoeze <notifications@github.com>
Date: Sat, Aug 12, 2017 at 4:56 AM
Subject: Re: [torvalds/linux] Fix missing PCI ID (thanks to CoolStar);
Necessary for Lenovo Yoga 720-15 Touchpad (#444)
To: torvalds/linux <linux@noreply.github.com>
Cc: Daniel Axtens <daniel@axtens.net>, Mention <mention@noreply.github.com>


Thank you for your support :)

I changed the patch according to Lee Jones' instructions:
https://lkml.org/lkml/2017/8/7/136

Am I missing something here?

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
<https://github.com/torvalds/linux/pull/444#issuecomment-321892101>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/ADJ5Baaa7t2s4JTWZR3XCZuhcnn2qrUoks5sXKPjgaJpZM4OoxrQ>
.

Thanks for this.  It fixes a bug that's a show stopper for the new Yoga 720 15" 2-in-1.

The custom kernel I built with this patch works as expected.

There are other issues with this trackpad that could be addressed in separate PRs, or whatever you call them (emails).

I accidentally hit the key combination that disables the trackpad.  Turning the pad back on didn't yield a working trackpad.  Reboot was the only fix.

But this one means we can update to stock distribution kernel updates through apt or whatever.

Searching for any working solution yields nothing but failure until this fix was made public.

Kudos to those getting this out there and in the kernel.
@Hoeze - In response to your Edit, you normally send v3 in a new thread, not in reply to an existing email. If you are sending v3, I would use git format-patch with the -v argument to make a version 3, then git-send-email *without* in-reply-to.

@mschwartz - once this is merged, it will still take a while for the patch to hit distro kernels. If you're using Ubuntu, I can talk you through the process of getting the patch into the Ubuntu distro kernels as I have done that for some other bug fixes.
I am an Ubuntu user, so it would be excellent to get the patch into those kernels.

It's just one line of code, a new/missing initializer.  Shouldn't take that much scrutiny to approve it.  This only makes things better without having any likely adverse effects.

If @Hoeze wants to take the lead on getting this into Ubuntu as well, I'm all for it.  He deserves the credit, as well as @Coolstar.

If he wants someone else to get the patch into Ubuntu kernels, I am happy to carry that effort forward.

The laptop is a bargain at the price.  I paid $1250 US.  I7 7700HQ, 16G RAM, 500GB SSD, UHD/4K screen, a good assortment of I/O (no Ethernet tho).  With this patch, the machine running KUbuntu is comparable to my MacBook Pro 15".  A killer Linux laptop.

Cheers
@mschwartz - the first step to get the patch into Ubuntu is to open a bug against the Linux package in Ubuntu - https://bugs.launchpad.net/ubuntu/+source/linux/+filebug. Include a link to this bug in the description. That might be enough for the Ubuntu Kernel team to pick it up. Otherwise we can take a more active role, but either way that's the first step.
> The Thanks-to line would traditionally also include a full name and email. [...] I'd say something like: "This fix was suggested by user CoolStar on the \<forum\> - \<link to post\>"

- I could not find any "Thanks-to" tag in the kernel doc. Did you mean "Reported-by"?
- Lee told me: 
    > > See this bug report on Launchpad:
    > > https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1700657
    >
    > Drop external links to LP please.
    > > Many thanks to CoolStar, who found this solution!
    >
    > This should be a "Reported-by".

  Should I keep the link to Launchpad anyway?
- I wrote a message to @CoolStar to request his name / email address.
- Is there a deadline to get this patch into Kernel 4.13?
---------
This is what my commit message currently looks like:

> Fix missing PCI ID; Necessary for Lenovo Yoga 720-15 Touchpad.
> See also bug 1700657 on bugs.launchpad.net.
> 
> Many thanks to CoolStar, who found this solution!
> 
> Reported-by: CoolStarName \<CoolStar@hisrealmail.com\>
> Tested-by: Mike Schwartz <mykesx@...>
> Tested-by: Björn Dahlgren <bjodah@...>
> Signed-off-by: Florian R. Hölzlwimmer <git.ich@...>
> 
https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1710392

I hope that's sufficient.

I realize my report is a duplicate of the longer thread.  Hopefully the shorter bug report is enough to get their attention (no TL;DR factor).

I got an automated response.  I don't see the point in running the command in the email.  Is it required?

![image](https://user-images.githubusercontent.com/329637/29242685-0df11344-7f46-11e7-9366-1c7958afecff.png)

I set the status to confirmed :)

FWIW, I work for a company that makes a commercial JavaScript application framework (ExtJS) as a framework engineer.  We go through the bug report/PR process routinely.  Everyone's process is roughly the same, with some minor differences.  Obviously, the Linux Kernel is more widely in use and known and has many more contributors.  It's a wonderful thing to see how it's done.

I just changed the patch to include all names, emails and a short description.
I'll _git send-email_ it now.
hmm... the "From" line is still wrong...
Nevertheless, answering to it gets to my true mail.

@daxtens: I cc'd you :)
Hi @alexozer!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @tgexpress!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @786228836!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
 sorry 
vast improvment on https://github.com/torvalds/linux/pull/437 (i guess from the title of the pr) bravo! might take a while to review though
Hi @mishuang2017!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @cabelo!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hey @cabelo, this looks promising - let me or @ajdlinux know if you would
like any help in getting this upstream with the instructions.

Feel free to send me the draft version of your patch if you'd like some
off-list feedback (dja@axtens.net), and/or cc me in to any patch
submissions and I'll try to help you out on the lists.

Regards,
Daniel

On Mon, Aug 21, 2017 at 12:40 PM, KernelPRBot <notifications@github.com>
wrote:

> Hi @cabelo <https://github.com/cabelo>!
>
> Thanks for your contribution to the Linux kernel!
>
> Linux kernel development happens on mailing lists, rather than on GitHub -
> this GitHub repository is a read-only mirror that isn't used for accepting
> contributions. So that your change can become part of Linux, please email
> it to us as a patch.
>
> Sending patches isn't quite as simple as sending a pull request, but
> fortunately it is a well documented process.
>
> Here's what to do:
>
>    - Format your contribution according to kernel requirements
>    - Decide who to send your contribution to
>    - Set up your system to send your contribution as an email
>    - Send your contribution and wait for feedback
>
> How do I format my contribution?
>
> The Linux kernel community is notoriously picky about how contributions
> are formatted and sent. Fortunately, they have documented their
> expectations.
>
> Firstly, all contributions need to be formatted as patches. A patch is a
> plain text document showing the change you want to make to the code, and
> documenting why it is a good idea.
>
> You can create patches with git format-patch
> <https://git-scm.com/docs/git-format-patch>.
>
> Secondly, patches need 'commit messages', which is the human-friendly
> documentation explaining what the change is and why it's necessary.
>
> Thirdly, changes have some technical requirements. There is a Linux kernel
> coding style, and there are licensing requirements you need to comply with.
>
> Both of these are documented in the Submitting Patches documentation
> <https://kernel.org/doc/html/latest/process/submitting-patches.html> that
> is part of the kernel.
>
> Note that you will almost certainly have to modify your existing git
> commits to satisfy these requirements. Don't worry: there are many guides
> on the internet for doing this.
> Who do I send my contribution to?
>
> The Linux kernel is composed of a number of subsystems. These subsystems
> are maintained by different people, and have different mailing lists where
> they discuss proposed changes.
>
> If you don't already know what subsystem your change belongs to, the
> get_maintainer.pl
> <https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl>
> script in the kernel source can help you.
>
> get_maintainer.pl will take the patch or patches you created in the
> previous step, and tell you who is responsible for them, and what mailing
> lists are used. You can also take a look at the MAINTAINERS
> <https://www.kernel.org/doc/linux/MAINTAINERS> file by hand.
>
> Make sure that your list of recipients includes a mailing list. If you
> can't find a more specific mailing list, then LKML - the Linux Kernel
> Mailing List <http://vger.kernel.org/vger-lists.html#linux-kernel> - is
> the place to send your patches.
>
> It's not usually necessary to subscribe to the mailing list before you
> send the patches, but if you're interested in kernel development,
> subscribing to a subsystem mailing list is a good idea. (At this point, you
> probably don't need to subscribe to LKML - it is a very high traffic list
> with about a thousand messages per day, which is often not useful for
> beginners.)
> How do I send my contribution?
>
> Use git send-email <https://git-scm.com/docs/git-send-email>, which will
> ensure that your patches are formatted in the standard manner. In order to
> use git send-email, you'll need to configure git to use your SMTP email
> server.
>
> For more information about using git send-email, look at the Git
> documentation <https://git-scm.com/docs/git-send-email> or type git help
> send-email. There are a number of useful guides and tutorials about git
> send-email that can be found on the internet.
> How do I get help if I'm stuck?
>
> Firstly, don't get discouraged! There are an enormous number of resources
> on the internet, and many kernel developers who would like to see you
> succeed.
>
> Many issues - especially about how to use certain tools - can be resolved
> by using your favourite internet search engine.
>
> If you can't find an answer, there are a few places you can turn:
>
>    - Kernel Newbies <https://kernelnewbies.org> - this website contains a
>    lot of useful resources for new kernel developers.
>    - If you'd like a step-by-step, challenge-based introduction to kernel
>    development, the Eudyptula Challenge <http://eudyptula-challenge.org/>
>    would be an excellent start.
>    - The kernel documentation <https://www.kernel.org/doc/html/latest/> -
>    see also the Documentation directory in the kernel tree.
>
> If you get really, really stuck, you could try the owners of this bot,
> @daxtens <https://github.com/daxtens> and @ajdlinux
> <https://github.com/ajdlinux>. Please be aware that we do have full-time
> jobs, so we are almost certainly the slowest way to get answers!
> I sent my patch - now what?
>
> You wait.
>
> You can check that your email has been received by checking the mailing
> list archives for the mailing list you sent your patch to. Messages may not
> be received instantly, so be patient. Kernel developers are generally very
> busy people, so it may take a few weeks before your patch is looked at.
>
> Then, you keep waiting. Three things may happen:
>
>    - You might get a response to your email. Often these will be
>    comments, which may require you to make changes to your patch, or explain
>    why your way is the best way. You should respond to these comments, and you
>    may need to submit another revision of your patch to address the issues
>    raised.
>    - Your patch might be merged into the subsystem tree. Code that
>    becomes part of Linux isn't merged into the main repository straight away -
>    it first goes into the subsystem tree, which is managed by the subsystem
>    maintainer. It is then batched up with a number of other changes sent to
>    Linus for inclusion. (This process is described in some detail in the
>    kernel development process guide
>    <https://www.kernel.org/doc/html/latest/process/development-process.html>
>    ).
>    - Your patch might be ignored completely. This happens sometimes -
>    don't take it personally. Here's what to do:
>       - Wait a bit more - patches often take several weeks to get a
>       response; more if they were sent at a busy time.
>       - Kernel developers often silently ignore patches that break the
>       rules. Check for obvious violations of the the Submitting Patches
>       guidelines, the style guidelines, and any other documentation you can find
>       about your subsystem. Check that you're sending your patch to the right
>       place.
>       - Try again later. When you resend it, don't add angry commentary,
>       as that will get your patch ignored. It might also get you silently
>       blacklisted.
>
> Further information
>
>    - Working with the kernel development community
>    <https://www.kernel.org/doc/html/latest/process/index.html> - the
>    official documentation for new kernel contributors
>
> Happy hacking!
>
> *This message was posted by a bot - if you have any questions or
> suggestions, please talk to my owners, @ajdlinux
> <https://github.com/ajdlinux> and @daxtens <https://github.com/daxtens>, or
> raise an issue at https://github.com/ajdlinux/KernelPRBot
> <https://github.com/ajdlinux/KernelPRBot>.*
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/451#issuecomment-323633001>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BRfAHCcoIsmwxmXGs8PTlUbY9ynhks5saO4rgaJpZM4O80dY>
> .
>

@ajdlinux I sent the email right now, thank you very much ...

The result of the patch bellow 
http://www.netitec.com.br/alessandro/download/Intel3drealsense.png
Hi @kimocoder!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @yoginth!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Linux is GPLv2 not 3
Ok Thanks, I will change it!




-----Original Message-----
From: impala2 <notifications@github.com>
To: torvalds/linux <linux@noreply.github.com>
Cc: Yoginth <yoginth@aol.com>; Mention <mention@noreply.github.com>
Sent: Fri, Aug 25, 2017 8:45 am
Subject: Re: [torvalds/linux] Create LICENSE (#453)



Linux is GPLv2 not 3
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.

    




@yoginth Please read the message above about github pull requests. Also, the licence is already found in the file `COPYING`, being the traditional filename for copies of the GPL.
Ok, I Will Close this PR.




-----Original Message-----
From: Andrew Donnellan <notifications@github.com>
To: torvalds/linux <linux@noreply.github.com>
Cc: Yoginth <yoginth@aol.com>; Mention <mention@noreply.github.com>
Sent: Fri, Aug 25, 2017 8:54 am
Subject: Re: [torvalds/linux] Create LICENSE (#453)



@yoginth Please read the message above about github pull requests. Also, the licence is already found in the file COPYING, being the traditional filename for copies of the GPL.
—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.

    




Awesome work! I was actually trying to decode some `usbmon` traces myself, fortunately I've discovered this PR before I actually dived deeper into it.

So with the kernel driver available, what is needed to be configured in the userspace (Xorg server) to get the pointer behavior close to the one we're used to from macOS?

Okhh

On Aug 26, 2017 6:19 PM, "gpfly" <notifications@github.com> wrote:

> 1
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/454#issuecomment-325124070>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AXaRiyUoDOdSQVoVGtKtiV1FRVmKcl3xks5scBRBgaJpZM4PDeRP>
> .
>

Do something useful it's not funny anymore.
@linevich Really sorry for this, I'm accidentally checked and then I realized that I can't remove my approval.  
why is this still here?!??
Acknowledge my commit's ethereal fantasticness or go home
I'm not sure you want to close this.  I don't see it merged in master.

https://github.com/torvalds/linux/blob/master/drivers/mfd/intel-lpss-pci.c

![image](https://user-images.githubusercontent.com/329637/29877850-9dc365a4-8d55-11e7-91fe-241327641881.png)

uh.. yes ^^
I thought that "accepted by Lee Jones" is sufficient to close this pull request.
It should be enough - it is exceptionally rare for an accepted patch to be
removed from these trees, or not merged to master eventually. However,
there is also no harm in waiting.

Has it hit Lee's tree yet? (If it has, you'll still have to wait for the
4.14 merge window for it to hit master)

On Thu, Aug 31, 2017 at 1:32 AM, Hoeze <notifications@github.com> wrote:

> Reopened #444 <https://github.com/torvalds/linux/pull/444>.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/444#event-1227855848>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BV0urCdd0AhsgV3VHMM_s_9gf23Kks5sdYChgaJpZM4OoxrQ>
> .
>

I'm not arguing about the process, but it doesn't hurt at all to leave this open until we're really sure.

@Hoeze doesn't have to be the one to close it, either.  He might let a contributor with sufficient privileges do it when they deem it no longer needed.

JMHO

I have no real disagreement with what you're saying. However, apart from
the person making the PR, I don't think anyone with permissions to close
PRs ever looks at the PRs. (This was part of the motivation for the
KernelPRBot.)

On Thu, Aug 31, 2017 at 1:56 AM, Michael Schwartz <notifications@github.com>
wrote:

> I'm not arguing about the process, but it doesn't hurt at all to leave
> this open until we're really sure.
>
> @Hoeze <https://github.com/hoeze> doesn't have to be the one to close it,
> either. He might let a contributor with sufficient privileges do it when
> they deem it no longer needed.
>
> JMHO
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/444#issuecomment-326035494>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADJ5BTHKfscdlNB6b2MCmA6kBlvHIaJ1ks5sdYY3gaJpZM4OoxrQ>
> .
>

They are getting closed somehow :)

![image](https://user-images.githubusercontent.com/329637/29883333-d4487b50-8d64-11e7-9a39-dcb847e97544.png)

wut da f*** this is just IT'S NOT CODE GOLF HERE GUYS
yes  @GolfingSuccess its code very fast
maybe one day I will be as brilliant as @ahmetilgin, ive tried to contribute #447 in the same light
This way saves 1 byte by ending the comment with a newline instead of `*/` which will improve compilation speed.
@cannap its code very really fast
reasonable, have a good day
@Blaze349
There is no such thing as compiled and interpreted languages. Any language can be both compiled and interpreted.
Moreover there is nothing in the C standard that talks against being able to use an interpreter instead.
But for science, just how much faster compilation would be if the whole kernel would be seriously minified ? Would minifying + compiling take less time than just compiling ?
@Mikotochan In fact there *are* C interpreters.
@startas I don't think minification takes too long...
Hi @sasairc!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Wow! Now it's much scalable! Thanks
🤔
My mind refuses to believe that this actually happened.
Fucking hilarious.
@ahmetilgin

With Javascript the code is sent to the browser, which then compiles it and executes it on the client machine. Minifying Javascript makes it smaller, meaning that it downloads faster. In addition, part of compiling is parsing - this is where the compiler "understands" the code and having fewer characters (such as whitespace) will make a small improvement in parsing time.

Once code has been compiled, the original size of the source code is irrelevant (except with certain circumstances with Javascript).

C++ (the language that the Linux kernel is written in) doesn't work like Javascript at all. You take the code and compile it on your machine and then copy the compiled result to other machines in order to execute it. 

**Whitespace in C++ has no effect on performance, because that whitespace is never copied to the machines that are running the C++ program.**

The most important thing about making performance enhancements is taking measurements to see if your enhancement has worked. This is called [benchmarking](https://en.wikipedia.org/wiki/Benchmark_(computing)). If you had benchmarked your changes, you would have seen that this had no effect on performance.

Don't be discouraged and keep learning.
✍️ Signing off on this 
Just tried it and I agree that this code in fact very fast
![http://i.memecaptain.com/gend_images/N_8znQ.gif](http://i.memecaptain.com/gend_images/N_8znQ.gif)
dank
just delete the last line, will be the fastest code ever
this guy should be the successor of @torvalds
![](https://i.redd.it/brkv2bkypwiz.png)
hi there,
I really don't get it?
could someone explain?
does this infact speed up things?
or a gimmic?
thanks for your time! :)
Majid

On 01/09/2017, Mark <notifications@github.com> wrote:
> ![](https://i.redd.it/brkv2bkypwiz.png)
>
> --
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub:
> https://github.com/torvalds/linux/pull/437#issuecomment-326705606


-- 
kind regards,
Majid Hussain

I think this pull request isn't finished yet. There are still so many files to minify. Please continue your hard work to make this world better and Linux code faster. Cheers!
I keep getting compiler errors. Someone help:
$ ruby main.c > linux.exe
It is faster when doing code reviews in the future as well, as users who view the file in the browser have a faster loading time due to the reduction of whitespace. Users who check out this file will find faster download and file opening times as well in addition to the faster compiling time!
Ship it!
sorryyoudon'tunderstand.Hi@ahmetilgin!ThanksforyourcontributiontotheLinuxkernel!Linuxkerneldevelopmenthappensonmailinglists,ratherthanonGitHub-thisGitHubrepositoryisaread-onlymirrorthatisn'tusedforacceptingcontributions.SothatyourchangecanbecomepartofLinux,pleaseemailittousasapatch.Sendingpatchesisn'tquiteassimpleassendingapullrequest,butfortunatelyitisawelldocumentedprocess.Here'swhattodo:FormatyourcontributionaccordingtokernelrequirementsDecidewhotosendyourcontributiontoSetupyoursystemtosendyourcontributionasanemailSendyourcontributionandwaitforfeedbackHowdoIformatmycontribution?TheLinuxkernelcommunityisnotoriouslypickyabouthowcontributionsareformattedandsent.Fortunately,theyhavedocumentedtheirexpectations.Firstly,allcontributionsneedtobeformattedaspatches.Apatchisaplaintextdocumentshowingthechangeyouwanttomaketothecode,anddocumentingwhyitisagoodidea.Youcancreatepatcheswithgitformat-patch.Secondly,patchesneed'commitmessages',whichisthehuman-friendlydocumentationexplainingwhatthechangeisandwhyit'snecessary.Thirdly,changeshavesometechnicalrequirements.ThereisaLinuxkernelcodingstyle,andtherearelicensingrequirementsyouneedtocomplywith.BothofthesearedocumentedintheSubmittingPatchesdocumentationthatispartofthekernel.Notethatyouwillalmostcertainlyhavetomodifyyourexistinggitcommitstosatisfytheserequirements.Don'tworry:therearemanyguidesontheinternetfordoingthis.WhodoIsendmycontributionto?TheLinuxkerneliscomposedofanumberofsubsystems.Thesesubsystemsaremaintainedbydifferentpeople,andhavedifferentmailinglistswheretheydiscussproposedchanges.Ifyoudon'talreadyknowwhatsubsystemyourchangebelongsto,theget_maintainer.plscriptinthekernelsourcecanhelpyou.get_maintainer.plwilltakethepatchorpatchesyoucreatedinthepreviousstep,andtellyouwhoisresponsibleforthem,andwhatmailinglistsareused.YoucanalsotakealookattheMAINTAINERSfilebyhand.Makesurethatyourlistofrecipientsincludesamailinglist.Ifyoucan'tfindamorespecificmailinglist,thenLKML-theLinuxKernelMailingList-istheplacetosendyourpatches.It'snotusuallynecessarytosubscribetothemailinglistbeforeyousendthepatches,butifyou'reinterestedinkerneldevelopment,subscribingtoasubsystemmailinglistisagoodidea.(Atthispoint,youprobablydon'tneedtosubscribetoLKML-itisaveryhightrafficlistwithaboutathousandmessagesperday,whichisoftennotusefulforbeginners.)HowdoIsendmycontribution?Usegitsend-email,whichwillensurethatyourpatchesareformattedinthestandardmanner.Inordertousegitsend-email,you'llneedtoconfiguregittouseyourSMTPemailserver.Formoreinformationaboutusinggitsend-email,lookattheGitdocumentationortypegithelpsend-email.Thereareanumberofusefulguidesandtutorialsaboutgitsend-emailthatcanbefoundontheinternet.HowdoIgethelpifI'mstuck?Firstly,don'tgetdiscouraged!Thereareanenormousnumberofresourcesontheinternet,andmanykerneldeveloperswhowouldliketoseeyousucceed.Manyissues-especiallyabouthowtousecertaintools-canberesolvedbyusingyourfavouriteinternetsearchengine.Ifyoucan'tfindananswer,thereareafewplacesyoucanturn:KernelNewbies-thiswebsitecontainsalotofusefulresourcesfornewkerneldevelopers.Ifyou'dlikeastep-by-step,challenge-basedintroductiontokerneldevelopment,theEudyptulaChallengewouldbeanexcellentstart.Thekerneldocumentation-seealsotheDocumentationdirectoryinthekerneltree.Ifyougetreally,reallystuck,youcouldtrytheownersofthisbot,@daxtensand@ajdlinux.Pleasebeawarethatwedohavefull-timejobs,sowearealmostcertainlytheslowestwaytogetanswers!Isentmypatch-nowwhat?Youwait.Youcancheckthatyouremailhasbeenreceivedbycheckingthemailinglistarchivesforthemailinglistyousentyourpatchto.Messagesmaynotbereceivedinstantly,sobepatient.Kerneldevelopersaregenerallyverybusypeople,soitmaytakeafewweeksbeforeyourpatchislookedat.Then,youkeepwaiting.Threethingsmayhappen:Youmightgetaresponsetoyouremail.Oftenthesewillbecomments,whichmayrequireyoutomakechangestoyourpatch,orexplainwhyyourwayisthebestway.Youshouldrespondtothesecomments,andyoumayneedtosubmitanotherrevisionofyourpatchtoaddresstheissuesraised.Yourpatchmightbemergedintothesubsystemtree.CodethatbecomespartofLinuxisn'tmergedintothemainrepositorystraightaway-itfirstgoesintothesubsystemtree,whichismanagedbythesubsystemmaintainer.ItisthenbatchedupwithanumberofotherchangessenttoLinusforinclusion.(Thisprocessisdescribedinsomedetailinthekerneldevelopmentprocessguide).Yourpatchmightbeignoredcompletely.Thishappenssometimes-don'ttakeitpersonally.Here'swhattodo:Waitabitmore-patchesoftentakeseveralweekstogetaresponse;moreiftheyweresentatabusytime.Kerneldevelopersoftensilentlyignorepatchesthatbreaktherules.CheckforobviousviolationsofthetheSubmittingPatchesguidelines,thestyleguidelines,andanyotherdocumentationyoucanfindaboutyoursubsystem.Checkthatyou'resendingyourpatchtotherightplace.Tryagainlater.Whenyouresendit,don'taddangrycommentary,asthatwillgetyourpatchignored.Itmightalsogetyousilentlyblacklisted.FurtherinformationWorkingwiththekerneldevelopmentcommunity-theofficialdocumentationfornewkernelcontributorsHappyhacking!Thismessagewaspostedbyabot-ifyouhaveanyquestionsorsuggestions,pleasetalktomyowners,@ajdlinuxand@daxtens,orraiseanissueathttps://github.com/ajdlinux/KernelPRBot.
@nmani
>I keep getting compiler errors. Someone help:
>$ ruby main.c > linux.exe

Did you install the dependencies with npm?
Why stop at `init/main.c`? Do all the sources!
LGTM
Still looks better then git!
Sorrytointerruptthisfineconversation.Perhapstheresmoretothisnowhitespacenotation.verykawaii
In all seriousness, let's quit joking around.

We can't merge this on GitHub, need to make a real kernel patch and get it approved on the mailing lists.
An awesome one-liner!
I mean come on guys the submitter is definitely retard. Who could read the code look like a js compiled. He should read at least basics of the K&R book or read anything about C and C++ comments and empty lines as everywhere are ignored. There is no point spamming my inbox although the tread was a fun joke on a pull request submitter its annoying now. I woke up and go over 60 messages from github torvalds 437 I mean wtf guys. Stop it. :)
I'm going to mute whole torvalds repo if you keep doing this on other threads.
Things to do advice to all of you:
1. Do some contribution to Open Source or FSF project.
2. have fun outside of joking and trolling people.
3. Have a life.
@jcdickinson Oh man I thought that someone who would write an explanation would at least know the difference between C and C++ code when you see it and plus the design of the programming language difference. 

Sorry man you fail bad Kernel is written in C which is bad because C and every decedent of it suffers from memory surface attacks like buffer overflows, stack crashing dangling pointers just try to allocate memory outside of your stack and you get a segfault. :)

Plus the monolithic is much worse then good implemented microkernel so well we need to write or rewrite a new kernel in some functional programming paradigm language whether that is Ocaml or Rust would like to hear opinion of others on this.

And btw it is easy to write a fully functioning small kernel but to make it compatible with a lot of hardware that is a hard thing and addition of many lines in case of the Linux kernel because all of the drivers and handling of the devices in case of monolithic kernel is done inside of the kernel. 

So when you see 2 million new lines in the kernel even without checking the release notes you should know that over a 90 percent of that is for device drivers and some others are for support of whether filesystems or improving in handling of some hardware and very small amount is actually focused on what the kernel is and that is memory, disk IO, CPU handling and communication in between them improvement. So anyway I just wanted to add to this ranting thread something that have more technical description :P

@mhussaincov No in C C++ and almost language built on top of them and other languages like Java like python you name it the comment lines and blank lines or ignored at the compile and or there just to improve the readability of the code.

 So what you should learn is to use certain way of writing code consistently which mean if you are doing opening curly brace on the same line as the function do it like that through whole project, if you are using gnu 2 space indentation do it like that all the way etc.

 And always add blank lines between functions and block comments before the important or any function that explain what it does and also for a clarification add single line comments on places where you think that you would like to clarify what the step does. And do that consistently because if you don't you might not be able to understand your code or the why you wrote it certain way a 6 months from now.

There are a lot of books on writing a source code on the proper way I mean books like How to write a good source code, and if you don't like reading books then you could read PEP8 from python which speak about similar things that are not required but recommended as a good practice to improve readability of your source code.
@jcdickinson Btw one clarification more the main difference between C and C++ is the different programming paradigm they suggest although both being general level programming languages C++ introduces the OOP concept upon C. 

So the C++ is superset of you can write C code in C++ and use any of the functions and libraries of the same but you can also use C++ style and write in OOP paradigm. 

Although I'm not saying that C++ have the best OOP implementation nor even that OOP is necessary anymore Bjarne in his write ups about why he made a C++ always say that he made it for his own use and later people adopted. 

The main point of this is to say that C++ although being an easy language like C it actually make too many ways to do the same thing which lead to a lot of bad programming style, or bad class design and implementation. Multiple inheritance is nice and fun when you know C++ well but its really a problem if you don't know it well you make a very bad OOP design in that case Java is better and simpler for beginners as it allows only single inheritance. 

The other problem of C++ the power that use of pointers in language have because dangling pointers wrong dereferencing not deleting your memory allocation once it is out of scope, which is also problem of C can lead to lot of bugs. 

And actually most of the C and C++ bugs beside the bad logical implementation which would be a fault of a person who write the code is the problem with not dealocated memory or pointers that point to a wrong part of memory and make programs crashes.  In other words buffer overflows and stack smashing which all lead to segfaulting or even worse if they are not properly handled by the operating system like in case of Micro$hit windblows.
it could be faster :)
Wow!
@eemirtekin in the name of raki i hope you're joking.
@ahmetilgin do you have a cigarette?
@dragonGR   absolutely :D
:shipit:
Kindly excuse my impertinence by https://github.com/torvalds/linux/pull/447 
This should be combined and squashed with PR #175 to reduce memory utilization
Nice trolling commit. xD
@dimixar why trolling this code very very fast :p
I have no life. Please merge this.
Koden är snabb!
Yes, please merge!!!
1
2
3
4
+1 get
![](http://i0.kym-cdn.com/photos/images/facebook/000/663/692/ceb.jpg)
5
The best Greek coder @ahmetilgin
Thanks for made the biggest contribution to linux!
6
r/counting
Hi @marcb!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
A very good example 
- not to contribute to linux kernel
- to be internet famous real fast
@vardium for all the wrong reasons...
Quick question - how does this change the error messages? Could you provide a 'before and after' comparison?

Regards,
Daniel
@funcphp a greek legend who mastered software development only at 6 yrs old keeps innovating!

(beyler yunanlara atin cabuk :joy:)
People taking this seriously makes this.

Also, go Greek Developers!
I knew how smart the Greeks were. they are very successful in software now!!

(ittirin)
Test input
L0: ldh      [12]
L1: jeq      #04000           ,L2	,L18
L2: ld       [26]
L3: jeq      #0x7f000001      ,L6	,L4
L4: ld       [30]
L5: jeq      #0x7f000001      ,L6	,L18
L6: ldb      [23]
L7: jeq      #084            ,L10	,L8
L8: jeq      #0x6             ,L10	,L9
L9: jeq      #0x11            ,L10	,L18
L10: ldh      [20]
L11: jset     #0x1fff          ,L18	,L12
L12: ldxb     4*([14]&0xf)
L13: ldh      [x + 14]
L14: jeq      #0x16            ,L17	,L15
L15: ldh      [x + 16]
L16: jeq      #0x16            ,L17	,L18
L17: ret      #65535
L18: ret      #0

Error in line 8 (L7:) missing ‘x’ in #0x84. i.e.
-L7: jeq      #0x84            ,L10	,L8
+L7: jeq      #084            ,L10	,L8

output of unpatched run (no error, output indented):
[marc@ip-10-56-44-5 net]$ ./bpf_asm-unpatched -c test2
{ 0x28,  0,  0, 0x0000000c },
{ 0x15,  0, 16, 0x00000800 },
{ 0x20,  0,  0, 0x0000001a },
{ 0x15,  2,  0, 0x7f000001 },
{ 0x20,  0,  0, 0x0000001e },
{ 0x15,  0, 12, 0x7f000001 },
{ 0x30,  0,  0, 0x00000017 },
{ 0x15,  2,  0, 0000000000 },
{ 0x15,  1,  0, 0x00000006 },
{ 0x15,  0,  8, 0x00000011 },
{ 0x28,  0,  0, 0x00000014 },
{ 0x45,  6,  0, 0x00001fff },
{ 0xb1,  0,  0, 0x0000000e },
{ 0x48,  0,  0, 0x0000000e },
{ 0x15,  2,  0, 0x00000016 },
{ 0x48,  0,  0, 0x00000010 },
{ 0x15,  0,  1, 0x00000016 },
{ 0x06,  0,  0, 0x0000ffff },
{ 0x06,  0,  0, 0000000000 },

the line { 0x15,  2,  0, 0000000000 }, has the incorrect value ‘0000000000’ due to strtol stopping at the ‘8’ in the number ‘#084’. if correct input ‘#0x84’ the line will be { 0x15,  2,  0, 0x00000084 },

output of patched run (error, output indented):
[marc@ip-10-56-44-5 net]$ ./bpf_asm -c test2
error: syntax error at line 8

Regards,

Marc

> On 4 Sep 2017, at 1:32 am, Daniel Axtens <notifications@github.com> wrote:
> 
> Quick question - how does this change the error messages? Could you provide a 'before and after' comparison?
> 
> Regards,
> Daniel
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub <https://github.com/torvalds/linux/pull/457#issuecomment-326811881>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAAs2xdouoib5nt2ZEL7NvJOfQgxl0-Eks5sesapgaJpZM4PLD29>.
> 


@funcphp yeah they're very smart they even leave the comments in!
Hey bak, Yunanistan ilerleme kaydetti!
666
😂 awesome  commit
Looks fast to me.
best pr this year
fast enough for me : )
@funcphp so? you up for a fight or what?

btw the guy who made this PR looks like a turkish to me.
Didn't know you guys are pro in coding.
@dragonGR no, he is Greek. he is well known coder in you there,  you didn't know him? also he increasing the success about software in Greece.
@funcphp lmao. We should really get him a job in Google :P
One line to speed them up.😂
yeah! everyone can be linux kernel contributor 😂
Compiler will be so happy!😂
Next step, make the linux kernel a winer of the International Obfuscated C Code Contest
We should learn to be grateful !!!!!
So...I just did this, proud of myself.
[https://github.com/ahmetilgin/delta-learning-rule/pull/1](https://github.com/ahmetilgin/delta-learning-rule/pull/1)
It is just a kidding!  performance should not hurt readability. 
@passionke Exactly! This code looks fantastic.
I don't think you understand. I need this commit to be merged into the Linux kernel. Merged into the kernel this pull request needs to be. I've abandoned all hope in my life and feel the chills of the thrashing rapids of existence once again as I, paralyzed and passive, slide into an indescribably subtle yet indescribably engulfing misery.

Please merge this into the kernel.

What better is there to realign towards the lights of life than to witness the sweet, sweet polish of this C whitespace removal.

Please merge this into the kernel.

Please.
** To tell the truth, this is stupid. **

## Everybody knows spaces & lines doesn't effect the performance

- Kernel code compiles to binary codes and don't need any network tasks to load it.

## Nothing useful.

- There's nothing new(modules, functions, performance improvement) but doing useless jobs.

## Why you guys keep on entertainment.

- If must so, why not zip all the codes like what `uglifyjs` does to javascript codes? >Seriously, don't do that please.

> I guess Linus won't be happy and will come out to close this pr on his sight of this.
Gool work!
Hi @dabrace!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Here i made you faster with just one line

> This picture very fast
![ahmet2](https://user-images.githubusercontent.com/6182106/30082943-3d580aa4-9295-11e7-8bb1-a50251659cac.jpg)

cool~
awesome PR.

I am able to graduate in one year by minifying my textbooks.  ( •̀ ω •́ )y


maybe useful for tinycc
hey this is so brilliant
在一旁吃面的 Linus 大爷表示这是他这辈子见过的最无聊的 PR
This is unuseful
@schummacher how so? Can you be more specific? Constructive comments only please.
cool, effective programming skill...
66666666
Oh, no! There is a conflict on init/main.c! I wonder what could have caused that!

@ahmetilgin: Could you please fix the conflict so we can merge it?
I will give 7/5 for this.
When can we expect this to be merged in the kernel tree ?
bravoo(￣▽￣)d
cok tessekkurler @ahmetilgin 
Nice work! The code is so readable and soooooo fast to compile.

@ahmetilgin plz fix the conflict
Looks good to me. Let me know if I can help with getting this sent to the mailing lists.
hey will we finally fix the conflict @ahmetilgin? i want code very very fast
Can`t believe this . Can you guys stop playing around about this .

Plz be serious.

________________________________
From: Adam Yi <notifications@github.com>
Sent: Thursday, September 7, 2017 7:52 PM
To: torvalds/linux
Cc: Subscribed
Subject: Re: [torvalds/linux] this code very fast (#437)


@adamyi approved this pull request.

Nice work! So fast

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<https://github.com/torvalds/linux/pull/437#pullrequestreview-61401795>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ALUy8BMAPKXydhjxUmohJmDM0K12-5WFks5sgKvpgaJpZM4OaL_8>.

I agree. This pull request needs to be taken more seriously.

(Ok)
Very elegant, I must say.

On Sep 9, 2017 1:27 AM, "Jonathan50" <notifications@github.com> wrote:

I agree. This pull request needs to be taken more seriously.

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
<https://github.com/torvalds/linux/pull/437#issuecomment-328236012>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/AVY7OwUeHmqHPCHOnBiQzqi-rX5U929bks5sgc1rgaJpZM4OaL_8>
.

@ahmetilgin 你真有想法！:joy_cat:
The thought   is  very   beautiful  and  interesting  ,  Maybe  can create a  new kernel . 

                                                                                         ------------of course ,just a joke 
@AntiMoron You mean Linus might be unhappy if he sees this? He's usually all sunshine and rainbows. /sarcasm
Hi @joe4379!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Great, but where is webpack.conf and package.json???
Linus:"F**k web coder"
Probably the most approved PR ever to get R'd.
Hi @sasairc!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
+1!!!!
So fast for me
lmao
Hi @ramonfontes!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @tongjinlv!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hahaha....Funny!
Hi @jianguocn!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @mihir3445!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @Axl-zhang!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
To make PR close automatically, you have to merge same commits. But, taking as an example e4b91470bd79b988253ec00590e5b554042af4a7 which is simply correctly formatted version of 5b009bbab149a3dedf48a1da10ea6ed105391d32 - GitHub has no information to tie those commits together. So someone (either human or bot) has to close PR manually.

P.S. It's sad that Ubuntu 17.10 gonna be released with 4.13 kernel and we would have to wait for 4.14 (to obtain this fix)
P.S.2. It's so crazy that touch-screen works, but touch-pad does not :)
Isn’t this PR merged into 4.13 already?
> Isn’t this PR merged into 4.13 already?

at least, it's not present under 4.13 tag: https://github.com/torvalds/linux/blob/v4.13/drivers/mfd/intel-lpss-pci.c#L223
only on 4.14-rc1: https://github.com/torvalds/linux/blob/v4.14-rc1/drivers/mfd/intel-lpss-pci.c#L224

Probably, it would be in Ubuntu 17.10.1 update because it does not makes much sense to release desktop OS without support of 2017 hardware
I read 14.4 kernel is due in November.

Without this patch, I see no reason to upgrade to 17.10 until then.
@mschwartz Repeat after me, the kernel community doesn't use GitHub PRs.

The patch has been merged upstream and it's all done.
Close it by all means.
gosh, such a heated discussion :)
The thing is - only PR creator, repo owner and collaborators allowed to close PR.
So @mschwartz has no such permissions and we would have to wait for @Hoeze
@mschwartz: The target would be to get Ubuntu to backport this patch to 4.13
Sadly, it does not seem like Ubuntu is reading your bug report :(
Hi @parduscix!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @Megalight09!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
+9000!
Hi @Optimizingroman!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Update from Source Repository
Whoops.  Wrong direction. :/
Hi @Progyan1997!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @DaanDW - have you made any progress on getting this patch submitted upstream? Please let me know if you need any help with formatting this correctly as a patch and mailing it. I notice that @t2000 also submitted a GitHub pull request adding a device to the same file, and they have managed to get their patch accepted upstream.
Hi @389abhaysingh!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @ubbn!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* If you'd like a step-by-step, challenge-based introduction to kernel development, the [Eudyptula Challenge](http://eudyptula-challenge.org/) would be an excellent start.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
-1
lgtm, nice work ;P
can we get this merged? I've clocked the speeds and this is huge
Hi @AlvisPatel!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
You've managed to close this then reopen it. Please close it
Hi @numbqq!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Might want to consider rewriting this in LOLCODE. It'll be much faster.
@ahmetilgin Ты блядь ебучий долбоеб, пиши себе на ангуляре и не еби людям мозг. Не твое это!
It's called design pattern
Hi @bdrehmer!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @ronlaws86!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @louletian!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @jeanCarloMachado!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Hi @BL4CKvGHOST!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Now I know why the kernel development happens in mailing lists, this _performance fix_ is a joke, right?
I agree with you
This is a masterpiece 👍 
This should be merged!
Hi @cthpw103!

Thanks for your contribution to the Linux kernel!

Linux kernel development happens on mailing lists, rather than on GitHub - this GitHub repository is a read-only mirror that isn't used for accepting contributions. So that your change can become part of Linux, please email it to us as a patch.

Sending patches isn't quite as simple as sending a pull request, but fortunately it is a well documented process.

Here's what to do:

* Format your contribution according to kernel requirements
* Decide who to send your contribution to
* Set up your system to send your contribution as an email
* Send your contribution and wait for feedback

How do I format my contribution?
--------------------------------

The Linux kernel community is notoriously picky about how contributions are formatted and sent. Fortunately, they have documented their expectations.

Firstly, all contributions need to be formatted as patches. A patch is a plain text document showing the change you want to make to the code, and documenting why it is a good idea.

You can create patches with [`git format-patch`](https://git-scm.com/docs/git-format-patch).

Secondly, patches need 'commit messages', which is the human-friendly documentation explaining what the change is and why it's necessary.

Thirdly, changes have some technical requirements. There is a Linux kernel coding style, and there are licensing requirements you need to comply with.

Both of these are documented in the [Submitting Patches documentation](https://kernel.org/doc/html/latest/process/submitting-patches.html) that is part of the kernel.

Note that you will almost certainly have to modify your existing git commits to satisfy these requirements. Don't worry: there are many guides on the internet for doing this.

Who do I send my contribution to?
---------------------------------

The Linux kernel is composed of a number of subsystems. These subsystems are maintained by different people, and have different mailing lists where they discuss proposed changes.

If you don't already know what subsystem your change belongs to, the [`get_maintainer.pl`](https://github.com/torvalds/linux/blob/master/scripts/get_maintainer.pl) script in the kernel source can help you.

`get_maintainer.pl` will take the patch or patches you created in the previous step, and tell you who is responsible for them, and what mailing lists are used. You can also take a look at the [MAINTAINERS](https://www.kernel.org/doc/linux/MAINTAINERS) file by hand.

Make sure that your list of recipients includes a mailing list. If you can't find a more specific mailing list, then [LKML - the Linux Kernel Mailing List](http://vger.kernel.org/vger-lists.html#linux-kernel) - is the place to send your patches.

It's not usually necessary to subscribe to the mailing list before you send the patches, but if you're interested in kernel development, subscribing to a subsystem mailing list is a good idea. (At this point, you probably don't need to subscribe to LKML - it is a very high traffic list with about a thousand messages per day, which is often not useful for beginners.)

How do I send my contribution?
------------------------------

Use [`git send-email`](https://git-scm.com/docs/git-send-email), which will ensure that your patches are formatted in the standard manner. In order to use `git send-email`, you'll need to configure git to use your SMTP email server.

For more information about using `git send-email`, look at the [Git documentation](https://git-scm.com/docs/git-send-email) or type `git help send-email`. There are a number of useful guides and tutorials about `git send-email` that can be found on the internet.

How do I get help if I'm stuck?
-------------------------------

Firstly, don't get discouraged! There are an enormous number of resources on the internet, and many kernel developers who would like to see you succeed.

Many issues - especially about how to use certain tools - can be resolved by using your favourite internet search engine.

If you can't find an answer, there are a few places you can turn:

* [Kernel Newbies](https://kernelnewbies.org) - this website contains a lot of useful resources for new kernel developers.
* [The kernel documentation](https://www.kernel.org/doc/html/latest/) - see also the `Documentation` directory in the kernel tree.

If you get really, really stuck, you could try the owners of this bot, @daxtens and @ajdlinux. Please be aware that we do have full-time jobs, so we are almost certainly the slowest way to get answers!

I sent my patch - now what?
---------------------------

You wait.

You can check that your email has been received by checking the mailing list archives for the mailing list you sent your patch to. Messages may not be received instantly, so be patient. Kernel developers are generally very busy people, so it may take a few weeks before your patch is looked at.

Then, you keep waiting. Three things may happen:

* You might get a response to your email. Often these will be comments, which may require you to make changes to your patch, or explain why your way is the best way. You should respond to these comments, and you may need to submit another revision of your patch to address the issues raised.
* Your patch might be merged into the subsystem tree. Code that becomes part of Linux isn't merged into the main repository straight away - it first goes into the subsystem tree, which is managed by the subsystem maintainer. It is then batched up with a number of other changes sent to Linus for inclusion. (This process is described in some detail in [the kernel development process guide](https://www.kernel.org/doc/html/latest/process/development-process.html)).
* Your patch might be ignored completely. This happens sometimes - don't take it personally. Here's what to do:
	* Wait a bit more - patches often take several weeks to get a response; more if they were sent at a busy time.
	* Kernel developers often silently ignore patches that break the rules. Check for obvious violations of the the Submitting Patches guidelines, the style guidelines, and any other documentation you can find about your subsystem. Check that you're sending your patch to the right place.
	* Try again later. When you resend it, don't add angry commentary, as that will get your patch ignored. It might also get you silently blacklisted.

Further information
-------------------

* [Working with the kernel development community](https://www.kernel.org/doc/html/latest/process/index.html) - the official documentation for new kernel contributors

Happy hacking!

*This message was posted by a bot - if you have any questions or suggestions, please talk to my owners, @ajdlinux and @daxtens, or raise an issue at https://github.com/ajdlinux/KernelPRBot.*
Nice changes! Have you benchmarked yet?
yes              and it s 🥇 
That's not a typo you chav
I feel like you already know, but if you don't - one is that it won't
compile, and two is that there's no fucking code. I know this has been fun,
but it's getting really old now and needs to stop. A maintainer will assist
you in removing your troll shortly.

On Nov 3, 2017 5:55 PM, "cth103" <notifications@github.com> wrote:

> yes and it s 🥇
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/486#issuecomment-341836662>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AETfrm2cV-SuA2SOFJwCE6T3JDY24ld9ks5sy4u0gaJpZM4QRsJV>
> .
>

okay then 
okay then

On Sat, Nov 4, 2017, 7:56 AM cth103 <notifications@github.com> wrote:

> okay then
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/torvalds/linux/pull/486#issuecomment-341891079>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AB-m0pXpMHhBynmvEq99gjNsJjDH1pOhks5szFEHgaJpZM4QRsJV>
> .
>

okay then
okay then
okay then
What the debate about, this seems pretty serious to me? It's a simple change for a simple improvement.
