Shoot, didn't realize I already made this conflict :( Using `ExtractTextPlugin` sounds good, though we need to figure out how this will work in the Firefox environment.

I just made significant progress with a WebSocket proxy to a live remote debugging environment. I'm going to go ahead and push it out because I'm going to send an email to the team right now and will point here as an example. Sorry for not merging this earlier, I kept meaning to discuss CSS more with you first.

Sweet!

This has conflicts now, presumably because of the other merges? Can you rebase?

Nice!

Yeah, good point. I'll update the rest of the files, just renamed the project

Awesome!

looks great!

One comment, I'm not sure if images should be inside of components. That makes me think that there is an images component. :wink: I'm not sure if it's an option to move images outside of `js`, if so that would be idea, if not, maybe it makes sense for images to be next to components.

I rebased after Helen's PR and incorporated some of the styles. Looks much better.

Let's definitely move the images out. Some things in here are done quickly without too much thought, and we'll clean it up.

I was able to add the accordion that I wrote a few months ago but that probably needs some tweaks too.

Sorry about the images :sweat_smile: that was definitely a, "uh uh uh where should these go okay here seems good"-sort of deal. 

:smiley_cat: 

can we lint for this stuff going forward?

I don't know much about CSS linting, but the devtools doesn't have that. We can do it for our project thought

Those should be fixed with Helen's PR, and I need to change my Emacs to default to 2 spaces. I'm fine with a linter! I'm not convinced about alphabetizing the rules but if you and Helen want it it's fine. I don't have a way to automatically do that in Emacs.Shoot, didn't realize I already made this conflict :( Using `ExtractTextPlugin` sounds good, though we need to figure out how this will work in the Firefox environment.

I just made significant progress with a WebSocket proxy to a live remote debugging environment. I'm going to go ahead and push it out because I'm going to send an email to the team right now and will point here as an example. Sorry for not merging this earlier, I kept meaning to discuss CSS more with you first.

Yeah, good point. I'll update the rest of the files, just renamed the project

Sweet!

This has conflicts now, presumably because of the other merges? Can you rebase?

Nice!

Awesome!

This looks good, but needs a few tweaks. The main thing is to avoid setting up listeners in the action. The rest are just minor nits.

I rebased after Helen's PR and incorporated some of the styles. Looks much better.

should we rename thread-client to client.js or move it back to main.js?

I'll rename thread-client to client and we can figure out the better approach next week.

Let's definitely move the images out. Some things in here are done quickly without too much thought, and we'll clean it up.

I was able to add the accordion that I wrote a few months ago but that probably needs some tweaks too.

looks great!

One comment, I'm not sure if images should be inside of components. That makes me think that there is an images component. :wink: I'm not sure if it's an option to move images outside of `js`, if so that would be idea, if not, maybe it makes sense for images to be next to components.

Sorry about the images :sweat_smile: that was definitely a, "uh uh uh where should these go okay here seems good"-sort of deal. 

I don't know much about CSS linting, but the devtools doesn't have that. We can do it for our project thought

Yay! 

:smiley_cat: 

can we lint for this stuff going forward?

The reason I understood we don't have CSS-linting in devtools isn't that it's not a good idea, but hat it would both take time to implement and that it would be going off like crazy in our highly specific, XUL/CSS world.

Projects like this will make CSS-linting more and more possible, so I think we should use it.

Fixed in #25

Those should be fixed with Helen's PR, and I need to change my Emacs to default to 2 spaces. I'm fine with a linter! I'm not convinced about alphabetizing the rules but if you and Helen want it it's fine. I don't have a way to automatically do that in Emacs.

I noticed that you're formatter would automatically alphabetize them as well. Mine automatically "formats" it but it doesn't rewrite the whole thing to alphabetize it.

THE ONE TIME

Merging!

Is this the one time Emacs has failed us??

Done in https://github.com/jlongster/debugger.html/pull/43

@jasonLaster As far as I know we can close this issue, right? If we need it later we can convert queries to it without much work. For now it sounds like we're going to keep doing what we already have.

That's true. 

#30 fixed the information shown

#47 is going to handle the last piece here.  The rest is finished.

First part was done in #4 and #5 

 #37 is handling the second part.

Done!

This was done in https://github.com/jlongster/debugger.html/commit/2c6301861b4af22002b6953e765a5dce637ff3ee. This task was not about actually writing tests but setting up the environment so that we can actually run them. This is done. I've successfully run a test that imports our files.

The next step is to figure out how to write tests, see #42. Most likely we will write a small protocol stub that returns dummy data, and unit tests all the actions and various workflows. That will get us really far. Eventually we will also want to write mochitests, but we can do that later.

#24 is handling this issue

@jasonLaster this is done, right?

This was finished in https://github.com/jlongster/debugger.html/commit/45c68a84d2f0cdce5da76be4a53ad7b84b57a809 right?

Marking this as done. We've been using linters for a while.

Need to remove the 'use-static' rule change.

Awesome, thanks!

Thanks! I'm trying to think of ways to talk about it. Will blog and probably do other things too.

Excited to see how the new frontend develops!

We already have an eslint file in the devtools directory in gecko-dev. We should definitely use that, we've already put a lot of time deciding the exact rules that we want, and much of our code already uses it. 

Good call. 

Closing in favor of #28.

Looks like these tasks pass now, correct? I will hook this up!

This conflicts now, mind rebasing?

removed `start-firefox`.

I'll be working on improving the getting started docs based on today's meetup soon

merged

Ready to merge!

Run `./bin/test <path>...` to test code. We could add an npm script too I guess, but I'll probably never use it...

nice work. 

Cool!

I believe this is necessary because CodeMirror considers the first line in the document to be 0.

Thanks @jay3686! Looks good to me.

@jlongster merging to avoid any conflicts. Feel free to add comments and I'll open a new PR with the fixes. 

May want to merge #24 first to get a travis check. And this PR can cover #23.

Thanks a lot for doing this! I will go ahead and merge this but revert the variables changes by hand.

@matt-oconnell the wiki is out of date, could you remove those changes so that the styles are the same as what was in firefox?

@jasonLaster I've addressed your line notes in the most recent commit.

The deleted `common` and `toolbars` imports will be necessary eventually but I think they're beyond the scope of this PR.

I've synced up the theme colors to the [DevTool color docs](https://developer.mozilla.org/en-US/docs/Tools/DevToolsColors). I've kept the dark theme in there just in case. Adding the `devtools-dark-theme` class to `html` will toggle this theme on, otherwise it will default to the light theme variables. 

@jlongster Cool, glad I could help. 

Thanks @NColey - merging now!

I'd rather not because we'd have to pull all of it in when we merge to devtools. If we want to look into this we should bring it up with the whole team. While we are operating as a separate project technically, as you know we're still heavily tied to whatever gecko-dev/devtools provides.

The other reason is that the utility will be reduced a lot when we switch to immutable.js, which I'm very convinced we need to do. We won't be able to use it with immutable.js, and is why things like transducers are better (they aren't tied down to the data structure like lodash is).

The current code was focusing on shipping (which may or may not be a bad thing). There are certainly places that need to be cleaned up and we will do that. I don't think we need lodash for that, personally. Much of the utility we would get will be provided by immutable.js' API.

I think we should put our efforts into migrating to immutable.js first and just augmenting any util functions we need.

Thanks, that makes a lot of sense. I agree, that this decision would be a team decision. Also, after reviewing today, I think we can clean up our code with a couple small utility functions. See my recent PR for a couple examples of `groupBy` and `values`.

Lastly, looking forward to seeing how Immutable.js and re-select helps us. That seems more inline with our redux state architecture.

Pushed the existing commit to master so that we can avoid further merge conflicts and will cleanup the 'use static' stanzas in a bit.

Whoops, didn't mean to push this but I forget it was on the master branch. Small tweak though.

Doesn't work well with travis, need to find another way.

merged

I'm about to land the immutable.js integration. You don't need your extra utility functions then. Do you want to rebase this on top of my work?

I'll be checking my mail tomorrow.

merged! 
:beer: please 

Looks good, just rename that function and you can push it to master

Pulled as https://github.com/jlongster/debugger.html/commit/75f01cb0af17b58f9d4fa82496253b6644442598

Sounds good! Is just adding `-P development` to the command to run Firefox enough? That's what I do.

We can go ahead and merge this though and just keep tweaking it

I'll go ahead and merge this while I'm here. I'll go ahead and add a note about the `-P` parameter too.

as a sidenote, it might be nice to encourage people to use a profile for the firefox browser, this would make it easier to keep settings, tabs, and have multiple firefox instances open at the same time. Perhaps this is in the Advanced section, so that it's not another step early on?

@matt-oconnell exactly.

@jlongster what do you think?

@jasonLaster I'm unfamiliar with Firefox profiles. Do you mean configuring it through `/Applications/Firefox.app/Contents/MacOS/firefox-bin -P`? 

> Let's get that one in first

Agreed, I'll rebase once the other one lands.

Yeah very cool. If I merge this it will likely conflict with the other PR. Let's get that one in first because it's from a contributor?

Looks like this can still be merged actually. I'll merge it.

Thanks, much better.

esline rules are up-to-date. It's very hard to read the diff to see what is actually changed here. I prefer to not have `toggleBreakpoint`, and to be explicit. It's up to the caller to call add or remove explicitly. I made a few other nits too. If you could only make smaller changes to fix specific bugs, that would be great.

This project is _extremely_ early on so I'm hesitant to merge a big change as it is. If I see a more specific fix, that's fine. But various things are already broken and I want to make sure we aren't introducing new bugs. I'm already very familiar with the current code so I'd prefer to not change it too much until things are more stable.

Thanks for making the tweaks!

The editor is going to have to pull in the breakpoints state. It really should be showing the existing breakpoints from the state, not from the internal CodeMirror gutter state. We're doing it wrong now.

This code is _highly_ in flux. Since we're about to change this code a lot, I'm not sure if we should land this PR, as it goes in a different direction.

I hope this doesn't come off the wrong way, I love contributions and it's much appreciated! It's just a bit hard on this project right now which is changing a lot daily and I have a lot of changes already planned.

> No problem.
> 
> I've become somewhat invested in the project. What can I work on now?

There's a lot of moving parts and we are still figuring out the best places to work on. Keep an eye out and we'll have something soon. I think it's best to give it some time to stabilize so you don't waste work on something and we realize that it's not applicable anymore.

@jasonLaster - here's the fix for the breakpoints not being removed from the list when they were removed from the editor gutter.

OK - eslint fails -- is this real, or are the eslint checks in flux?  I'd like to be sure it's necessary before I make eslint pass for these rules.

This was meant to be a small change to fix a specific bug.  Breakpoints were not being removed from the list when they were toggled off in the editor.  And really, it's a small bug fix, once you understand what I've done.  _(I fixed the nits you mentioned.)_

I created toggleBreakpoint because the Editor's on "gutterClick" callback is itself a toggle, so it made sense for the action to be a toggle.  Otherwise you have to check for the existence of a breakpoint in the Editor component - which requires adding the breakpoints to the props.  I had some problems making that happen - and once I thought about it, didn't think that was really the right approach.  I left the original add, disable, and remove functions in place - so they can still be called as needed.

As to what I actually did: 

```
function toggleBreakpoint(location, condition) {
  return (dispatch, getState) => {
    const exists = _breakpointExists(getState(), location);
    if (exists) {
      // if it exists delete it
      return __removeOrDisableBreakpoint(location, false, dispatch, getState);
    }

    // otherwise add it
    return _addBreakpoint(location, condition, dispatch, getState);
  };
}

function addBreakpoint(location, condition) {
  return (dispatch, getState) => {
    return _addBreakpoint(location, condition, dispatch, getState);
  };
}
```

I created an `_addBreakpoint` function with the guts of the addBreakpoint function, so it could be called from both the `addBreakpoint` and `toggleBreakpoint`.  I did the same with  the `_removeOrDisableBreakpoint` function.  Since it already has a leading underscore, the new function's name begins with a double underscore.  

No problem. 

I've become somewhat invested in the project.  What can I work on now?

Thanks for the help @marfarma! I am going to close the PR for the time being, but when we get to it, I will try and incorporate your work. Thanks again!

I believe we figured this out when we paired on wednesday

I rebased this so it can be merged. I added the react-immutable-proptypes package and it's really nice because it makes it clear what is immutable.js and what isn't. Feels good.

I will squash these commits if you r+

Squashed and :ship:'ed!

r+. squash and :ship: 

We're getting close. 

Scrolling on a pause event works in firefox, but not in chrome because the editor height is screwy in chrome. (being addressed in #63)

done

Done!

> we would need to point the runner to that whole "obj dir" so it can find all the dynamic libraries it needs

Ah, that is making sense.  I don't know how to run the `xpcshell` command so I'm just getting this error.  But I think we're on the right track here.

```
$ ./run-mozilla.sh ./xpcshell
dyld: Library not loaded: @executable_path/libnss3.dylib
  Referenced from: /Users/clarkbw/Downloads/mac-fx-sdk/sdk/bin/xpcshell
  Reason: image not found
Trace/BPT trap: 5
```

We could put this in `environment.json`, and on startup we set `AppConstants.DEBUG_JS_MODULES`  to that value. That flag will turn on all the stuff inside ff-devtools-libs like asserts.

merged!

This looks really good, r+ :+1: You can merge this after rebasing!

Yeah, I was thinking this too. Yesterday when we were working on tests it was clear that even with all my work to smooth it over, there are still serious issues. My test harness is really simple and we'll probably have to keep investing in it. And it's doubtful we'll be able to hook it up to travis; if we do, it will be a lot of work.

Mocha on try has been done before. The Hello team has done it. We will have to work that out when we merge back in, and we definitely are breaking the workflow of normal devtools, so I don't know. Breaking the workflow is the biggest deal; technically we can do this but other people on the team will have to learn how to run our tests. All of our docs and getting started guides won't apply to us.

But I think it's probably worth it. Worst case, we will have to convert our tests to xpcshell/mocha tests but that can be aided with code transform tools. But if we pave the way for mocha, most likely we'd rather go the other way and convert xpcshell to mocha.

Didn't read every rule, but I don't care much about CSS so if Helen thinks this is OK you can merge it!

Marking this as done. We've been using linters for a while.

@jasonLaster As far as I know we can close this issue, right? If we need it later we can convert queries to it without much work. For now it sounds like we're going to keep doing what we already have.

I'm going to add a couple sub-tasks here because it's a lot of work, but I want to capture the additional steps so they're not missed:
- [x] travis support
- [x] web runner (i want to debug our debugger tests in the debugger ofcourse)
- [x] karma runner (lets start running our tests in multiple platforms) #58 
- [ ] watcher (run tests as we work) _stretch_
- [ ] coverage (it might be nice to get some coverage stats on the project early on) _stretch_

Very nice!

I thought mocha had a way to "build" source so we didn't have to go through the webpack shenanigans? The unfortunate thing is that errors will still show up in the built files. Although, I suppose we can `require("source-map-support")` now and it should sourcemap node's stack traces.

It'd be nice to avoid the webpack step, does mocha not provide anyway to compile before running?

I'm going to change `./bin/node-test` to `./bin/test`

Also, I'm thinking about changing the webpack entries field to build one output. 

There are two reasons for this 
(1) performance, adding babel added a lot of weight and i don't want performance to degrade linearly. 
(2) web runner, the web runner will be simpler if it expects one js bundle

You'll have the ability to pass in a path to a test so you can always speed up your test runs that way.

You can pull out the common chunks using the a plugin (`CommonChunksPlugin` I think?), but do whatever you feel is right. Surely this is a comment path for any project running es6 mocha tests. What do other people do? It'd be great to avoid this whole webpack step...

manually merged!

@jlongster yea, it would be really nice to avoid webpack. I'm going to push this version when it is working and add de-webpacking it as a next step so that other work is unblocked.

Currently, we're using webpack to build for node, which is unecessary because we're using commonjs. This should be fixed soon.
- [ ] remove webpack dependency

merged manually

Just spent tried to remove webpack and it's definitely possible, but it's not trivial.
Basically, there are two things that you need to do to run our tests:
1. transform code to es6 and stage-0
2. alias ff-devtools-libs to devtools

To transpile, you need to use babel presets as well as babel-register. babel-register, is babel's hook into require and import to be able to transpile on the file

To alias, you need to use babel-plugin-module-alias, which provides a similar system to webpack aliases

One way to do this is to have a test/index.js file, which requires tests

``` js
"use strict";

require("babel-register")({
  ignore: false
});

require("../js/actions/tests/sources.js");
```

and a babelrc file.

``` json
  "presets": ["es2015", "stage-0"],
  "plugins": [
      ["babel-plugin-module-alias", [
        { "src": "./node_modules/ff-devtools-libs", "expose": "devtools" },
        { "src": "./node_modules/ff-devtools-libs/sdk", "expose": "sdk" }
      ]]
  ]
```

This approach, works but is lame for two reasons:
1. there's a project level babelrc config for just node tests. It'd be nicer to pass these options to babel programmatically
2. The test paths are hard coded in index.js and it would be nice to pass them in via the command line e.g. js/actions/tests or js

I think one way to overcome this is to use a mocha compiler, which we could write with the correct options.

Sorry, @helenvholmes, I merged this preemptively. Do you have any objections to these rule? It'd be easy to change.

this might address some of the firefox, chrome inconsistencies
http://stackoverflow.com/questions/33636796/webkit-not-filling-the-100-height-of-a-flex-parent

#66 will address this

I believe we figured this out when we paired on wednesday

That's true. 

manually merged

Addresses #63 

@jlongster did your splitter work last friday fix this?

closing as this is a dupe of #47

Started looking into this [patch](https://gist.github.com/jasonLaster/7220a6fea9adfe697b54f02aa29f6418). Adding a pause button that breaks on next execution is easy.

What we need to figureout before we start is how we are going to maintain paused state:
1. willPause
2. paused => {location, why}
3. frames
4. ...

[chrome devtools](http://recordit.co/7kfHddzTUl) crash.

Steps to reproduce:
1. add a breakpoint in [thunk-middleware](https://github.com/jlongster/debugger.html/blob/master/js/util/thunk-middleware.js#L15) 
2. select a source, which is an async action that invokes an async action
3. step into the second async action call. Chrome DevTools will crash accessing the threadClient property in the function params

... have you tried Firefox? Use our devtools :)

Yes, it definitely should have. The panes should be much more stable now since 1f39e0fd27f245ce4cb699243c1636fcd322c873

@jlongster Firefox devtools work beautifully here.

Here's a _fix_ 
https://gist.github.com/1f18b7fb5882cb0635596dd3651cb862

I bet it's a bug on how devtools handles stepping with these object accessors. Will file a crbug

I'd really rather not make our code uglier to cater to Chrome's devtools. :)

Nice!

from meeting: this is the desired behavior, when the debugger detaches it removes breakpoints. just like the FF debugger closing. 

Done!

Closing this out now that #60 has landed and we're going away from xpcshell.

merged. I plan on cleaning up the two test scripts (node and browser).

With the browser test runner merged, karma is much smaller.

Merged. I don't think there's much contention in how karma is configured. Feel free to comment though and I can take a look

done!

Closing this issue because we now have the node test script working. Added two smaller issues for enhancements.

T_T 

This works for now. I think we will want to inject more things in the future (the regular `client` instance) but we'll figure that out then.

After thinking about this a bit more, I'm planning on changing the field from `shouldTranspile` to `transformParameters` and removing it from the README. I don't want to give the impression that it is common to transpile.

Good idea, I like this way better than forcing code patterns on it. The destructuring in React components is certainly a big deal and we shouldn't lose out on that just because of a Chrome bug.

cool. babel ftw

Still working on this. This wasn't really part of the current sprint, but Jason is working on the paused stuff like stepping and it would be good to get breakpoints in a better state. I think we should be able to finish everything in this sprint. I will fix the breakpoint styles in here as well which is part of this sprint.

The last thing I want to do is make the editor render the current breakpoint list whenever it changes. Don't add breakpoints to the editor directly, but add them to the state and the editor automatically updates. This will make things a lot more consistent. There are some perf considerations that I'm thinking through though.

@jlongster looking good so far. Glad that you're addressing the editor state now :+1: 

Hah, this definitely conflicts. It would be nice if you removed your breakpoint changes so I can land mine easier. I'm already working on that part of the code. Any reason you needed it here? It seems like you can land all the other stuff without touching breakpoints. It would be great if you could do that.

Meh, you know what, let's just merge this (after my other comments are addressed) and I'll manually copy over my changes. I'll ping you on IRC about it.

This was addressed with a babel plugin for function params

I believe this one is done

Actually, not fixed yet

We're getting close. 

Scrolling on a pause event works in firefox, but not in chrome because the editor height is screwy in chrome. (being addressed in #63)

Sounds good to me, we've needed to do this.

Is @helenvholmes going to take this on?

looks like chromium 37 is failing. Given that it's 2 years old, i'm in favor of dropping it from karma for now and filing a bug for runnning a more up to date chrome, possibly with circle ci or another CI tool.

 I was going to fix the breakpoint styles in by breakpoint patch, but I'm still rebasing it. I'm not sure about matching the current syntax highlighting; that might we something we should push off to a later sprint.

This comment offered a solution/hack around a codemirror parent / grandparent https://github.com/codemirror/CodeMirror/issues/3679#issuecomment-171533964

I'm going to go ahead and merge this because we need to get this in and the changes are not big. Breakpoints should now be deterministically rendered from the app state.

Can you focus on tests tomorrow? I'd rather see a lot more tests being written than new features at this point.

I think I enabled it in CircleCI

> matching the current syntax highlighting

Ok, lets bump this out for now.

haha - yea, was thinking that too. Just saw your comment. 

Thanks for bringing this up @clarkbw. I'd like to try greenkeeper and see if it helps us.

I've been bitten in the past by stale dependencies and at the very least, this could give us a signal of how we're doing. Also, it's definitely helpful to pay down the dependency debt incrementally before it builds up.

:heavy_check_mark: 

Fixed

Fixed! Yessssss

> breakpoint styles

There's a PR for it

> syntax highlighting 

Helen is updating gecko DevTools colors now and will be able to do this after that. 

Ok, #85 is handling the break point styles.
I've put the syntax highlighting into a separate card in the Aha backlog

merged!

I don't think we're going to get to this into Sprint 3, might want to leave it for the next sprint.

I was curious what adding Task would look like, so I refactored the test, which had the longest then chain. 

agreed.

Nice! `last-child` will break if we ever change the structure, but I don't think we'll do that, and it's easy to change this if we do. 

I'm confused about the problem. What is the problem exactly? (EDIT: I think I get it now, you can't easily add other directories like `img`)

We could restructure the directories. When you have a server, usually you have a `client` or `static` directory that contains all of the `js`, `img`, etc directories. I'd like to do that since we are using a server now, and that probably solves the problem you were hitting because you can easily add and subdirectories.

Cool!

I dropped the `svg` commit from this branch because that conversation should not block this PR.

Nice!

Still needs some work.

Looks like we need to update some of our npm tasks (look at the circleci failures)

wilco

This will be fixed in https://github.com/jlongster/debugger.html/pull/94

Gabe mentioned: "you should describe that the browser that is open with that command becomes the sources that you can inspect". I think this makes sense

Looks good. Feel free to merge after squashing and linting. Karma also had an error, but I believe that will go away...

I don't fully follow all the new testing stuff, but the code itself looks OK to me! I'm fine merging this in however it works. I'll let you push the button in case you were going to add anything more here

Sounds good!

Okay. I'm sure you'll have more opinions when you're writing tests

I think you are on to something, but I would prefer to just call them "selectors" which is what the general redux world uses. You're basically citing the reasons that reselect exists. I'm fine delaying pulling in that dependency, but we could go ahead and change `queries.js` to `selectors.js` and call it a day. I'm not convinced we need to differentiate between queries/presenters.

One reason you might feel that it does not belong as a query is because it's purely presentation-related. I think some of the ones you added here should just go directly in `Editor.js`. It's common in the redux world to define selectors straight in the component file, since those relate only to that component. Commonly used ones can go in `selectors.js` that everything can use. I'd prefer to only pull things into there that need to be used by 2-3+ components. (There's an exponential number of various ways to combine the data, and components should generally combine it the way that they need specifically).

I don't think it's code smell for the breakpoint list to depend on sources. You still depend on sources, but instead of combining the data in the component, you're doing in what's basically a selector. That is a better way to do it, but I think that should happen directly in `Editor.js` as a selector. Maybe we should just go ahead and pull in reselect. I haven't looked at their docs, but I bet they show examples of defining selectors straight in the component file to create data that the component renders.

What might also be confusing is inconsistency in the debugger protocol. It might not be consistent with what a `location` object means, etc. The other place to "normalize" data is in the reducers; if something really should be consistent across the entire app, the reducer should normalize the data and store it in a way that makes sense.

I'd like to change `queries.js` to `selectors.js`, and still just keep very generic selectors in there. Start defining component-level selectors. And lastly, normalize data in reducers where things like `location` objects are inconsistent.

Looking at your paused state, I think what you are mostly going for here is normalizing the paused state. You should just do this in the `pause` reducer. For example, if it's common to need a `isInterrupted` property, just make that part of the `pause` state. The reducer can take the raw pause packet and normalize it however it wants, it doesn't even need to reflect the raw pause packet at all. That's actually better because then you know that it always happens once no matter how many times it's selected.

@jlongster happy to. Looking forward to getting your perspective when you're in there

I just enabled it. We'll see how it goes. I worry that it will be too much distraction this early. I wish there was just a simple CLI program that I could run to manually see which things are out-of-date. Many packages don't have security risks and don't really need to be updated frequently.

Soooo we don't even have tests yet. Now that I think about it, it's silly to try to use this without tests at all. This upgrades to React 15 which is potentially a big deal (nothing crazy I'm sure, but I'd rather focus on building the product).

I say let's turn this off and wait until we actually are "maintaining" this product. We're not really in that phase and this will be more useful in a couple months.

I just checked out the branch locally, npm installed, and ran through the main use cases. Given how React adds warnings for upcoming breaking changes, I believe we're okay [release docs](https://facebook.github.io/react/blog/2016/03/07/react-v15-rc1.html). 

In general, I'd prefer staying up to date now, as that will keep us from adding bugs that will bite us later.

Thanks. It's easy to miss one of the cases

done

After discussing this some more, upgrading to React 15 right now adds another potential problem when merging back in (because the tree has 0.14) and I don't want to assume we're going to be completely isolated (we shouldn't be in the end).

Also, we don't have very many tests yet. I'm going to disable greenkeeper for now and when we have appropriate tests I'm fine re-enabling it; it's easy to turn back on. It just doesn't seem useful if we can't guarantee that updating something isn't going to break something. And I don't want to freely upgrade things and slow down development because a random bug derails a feature.

I will work on this

Sounds good. We can just remove seamless-immutable as well, you can do that here if you want?

LGTM, you can merge! (not merging becaus unsure if you wanted to add more in here or another PR)

Looks good! The only thing I would suggest changing is using `Object.assign`, unless you feel like that's too much work. Otherwise feel free to merge!

Yea - there will probably be an adapter layer between the client and actions... This will be a good thing as it will force our components / actions to be generic

done!

There should be an environment.json flag for turning on network logging DevToolsUtils.wantLogging or something like that. The goal is to see messages like `attach` `detatch`, ...

+1! Thanks for doing this!

(I'll make some PRs tomorrow, probably not today, still playing with testing and coworking. I'll let you know about anything Helen and I talk about)

done

Nice -> Tests doing what they're supposed to do:
https://circleci.com/gh/jasonLaster/debugger.html/67

Hmm... forgot to re-run the tests when I rebased. I've got an error here.

Actually that error is on master. I think it might be related to the error I mentioned above.

Yep the tests are currently broken. We will fix it today.

This is good to go. There's a faulty test on master that is unrelated to this. We will fix that soon, but that shouldn't block this.

This LGTM. I think at some point we'll want to re-think our state shape, but no need to worry about it right now. Let's figure out all the various needs first.

Cool, I think have some kind of finite state machine would be more useful that flags. The [memory tool has something similar](https://dxr.mozilla.org/mozilla-central/source/devtools/client/memory/constants.js#290-310).

I drew this out, but I realized that there is no way to detect the "getting next" state as far as I can tell. Observing the existing FF and Chrome debugger it looks like they don't detect the "getting next" state either.

![debugger-buttons-fsm](https://cloud.githubusercontent.com/assets/1588648/14921793/a20e1e88-0df9-11e6-8192-8921b62c18ba.jpg)

Thanks @TatumCreative. Looks good!

@TatumCreative yeah, stepping is just "resuming" and then getting a paused packet at some later time. As we switch between paused/resumed states we update the UI. You can step from the last line of code and never get a pause packet because the code finished running, which is a valid thing to happen.

Having some kind of state flag is probably helpful though. There are various things that would be good to know about, like "paused at breakpoint", "paused on exception", etc. We'll think about this more.

+1 mergable!

For my reference, existing Firefox Tree View components:
fitzgen's: https://github.com/mozilla/gecko-dev/blob/master/devtools/client/shared/components/tree.js
honza's: https://github.com/mozilla/gecko-dev/tree/master/devtools/client/shared/components/tree

Was thinking about adding it for selecting frames in the call stack as well.

The `selectSource` action is what things call to show a source at a specific place, yes, both this and the frames will call it. I will add it to the frames as I am working on it. This looks fine, you can merge once tests pass.

Looks like a great start.

merged!

#118 handled this, there's a bit more work that could be done to style it but we've satisfied the simple implementation for now.

#121 has some of this work

I'll have some time later today to start working on this

I have a couple of ideas for running end to end tests with a debuggee and debugger.

Lets call it done and add more polish tickets. @clarkbw, would you have time to play with it and create some polish tickets for this week or next sprint.

> would you have time to play with it and create some polish tickets for this week or next sprint

Definitely!  I'll take a look at it later today and file some tickets.

Fixed

The hot reloading story of React today is a little shaky. A new version of react-hot-loader is being worked on but it's not stable enough yet. We could use the old version, but it doesn't support functional components.

It also involves more boilerplate setup code. I'd love to get this working, but it just doesn't seem stable enough yet. My code got it working, but components seemed to lose local state (making a change to the accordion would make it lose state and collapse, while it should preserve state).

Here's a starting point if anyone picks this up in the future: https://github.com/jlongster/debugger.html/tree/hot-reloading

Sounds good to me. I'm surprised devtools doesn't have it in theirs by default.

yea, i guess that would upset eddy if we did that right now :)

the `development` flag in `development.json` could be replaced with something like this: `https://github.com/jlongster/debugger.html/issues/55#issuecomment-209563759`

Nice! I'll merge it.

#128 is a step forward for development configs, which will be a useful place for flagging logging / assertions

Building `ff-devtools-libs` fixed this

Using mocha with babel compiler fixed this

Got something closer to a final version working. Still need to clean up the code and think through a few places, particularly the editor. They way we were highlighting a specific line wasn't really working the way it should. Just wanted to get this working before I leave today, it's not final code though.

The next commit changes a few things, like how the utility function `createStore` that the stories use. I need to create a store with frame data, and I wanted it to be more generic. We can talk about it tomorrow.

You can now see a call stack and select various frames, and will be taken to that location:

<img width="911" alt="screen shot 2016-05-02 at 5 21 37 pm" src="https://cloud.githubusercontent.com/assets/17031/14968450/eaf7bcba-108a-11e6-8c47-43d739fef8f8.png">

That screenshot was an earlier one actually, forgot to add some class names. Here is what it looks like with a thin pane:

<img width="747" alt="screen shot 2016-05-02 at 5 28 00 pm" src="https://cloud.githubusercontent.com/assets/17031/14968549/561206d6-108b-11e6-9b54-56e31977f015.png">

If you make it wider it all fits. Will polish this some more...

<img width="737" alt="screen shot 2016-05-02 at 5 28 09 pm" src="https://cloud.githubusercontent.com/assets/17031/14968562/5f9c6ff2-108b-11e6-99eb-58f44a0e0977.png">

Looks great! I'll review more closely tomorrow

Cancel the r? for now until I pass the eslint

@gabrielluong just fixed the eslint bug. it was a bug with a lint rule we added this morning and hadn't adjusted that pending PR.

I'm a little unsure of the `<>` icon, what is that supposed to mean?

If these are coming from Helen's designs, I don't think those were very final. Just worth mentioning. Feel free to merge.

Also, I was thinking of not having the filtering UI at all and maybe just a "Sources" header because we weren't going to do filtering. And if we are, I'm not sure we should dedicate that whole area to it... We should probably just do the Cmd+P thing

> <> icon 

that's coming from the designs. I think that can be added and then tweaked

> filtering UI

I'll take that out so we can think through the UX

> <> icon

my guess is that we'll likely want to show a file icon like "atom", "sublime", "chrome dt" in the future

merged

What about moving to a more powerful config tools like [`nconf`](https://github.com/indexzero/nconf) instead? It's very flexible and allows all the code to access the config with just `nconf.get("logging")`. It supports the ability to have a "base" config and then override it, etc.

hmm - will investigate `nconf`

Looks like circle is just upset about the linting: https://circleci.com/gh/jlongster/debugger.html/63

after this lands it might be nice to add some unit tests for actions.

I'm fine with this PR too if you want a simple solution.

> Looks like circle is just upset about the linting: https://circleci.com/gh/jlongster/debugger.html/63

Yeah I haven't polished this up yet. I will now and get it ready to land.

this is being handled elsewehere

I think when we get the tree view we'll use a tree view instead. Each scope will be a top-level entry.

This has been fixed, and we are looking into a tree view next

I vote we close this bug and break it up into something more specific to which icons. I know she's going to give up new pause/step icons soon, but it's not clear which icons this issue is talking about.

r? @jasonLaster 

I'm not sure about that, I think it's more confusing. When I'm trying to inspect a frame, having to look back up the frames to find the last one to find the source is a little annoying. I think the best way forward is just more polished styling of the stack so that the repetition doesn't look as bad. I don't know any other debugger that works like this.

Personally, I'd rather stay with convention for now and work with Helen to solve UX problem like this.

Looks great 

Cool idea. I think Xcode does something similar. 

I agree, we should consider the UX of scanning the stack and selecting a frame. 

:boom: nice

Thanks!

Yeah, I don't think I have the right UX here but I think I'm inching closer.  I'll definitely defer to what @helenvholmes thinks is right.

I noticed this as I was playing with the storyboard to make instructions for the CONTRIBUTING doc.  I'll close this PR for now as its not pressing but one of those polish items I think we can improve on once we've discussed a better path forward.

I don't think that you can use colors or typography to simplify the repetition here.  But I don't want to create another issue where you're unsure what file the frame is coming from.  Might be a better way to lay it out than I did.
![screen shot 2016-05-03 at 7 05 55 pm](https://cloud.githubusercontent.com/assets/2134/15003605/4c0d3d90-1162-11e6-9787-db4e67147360.png)

What might be helpful to move forward is a better sense of the possible outcomes.  One thing I noticed in the storybook was that one of the locations was empty and I wasn't sure what that meant.  Perhaps we should have more variations in the storybook fixtures.

Please.  This is one of the core reasons why I currently use Chrome DevTools as my primary debugging environment.  (Also the fact that the FF DevTools don't seem to have a single "Breakpoints" pane like Firebug used to, but rather breakpoints are hidden by what file they're in.)

Also: there's several React-based treeviews out there.  I spent a chunk of time cataloging them for my own project at work, and have a bunch of them bookmarked at https://pinboard.in/search/u:acemarke?query=widget%2Btree .  However, I actually wound up writing my own.  The current implementation is specific to my app, but if there was interest I might be able to extract a more generic version and throw up a sample project.

Hmm.  Actually, my comments maybe shoulda gone on #103.

> Hmm. Actually, my comments maybe shoulda gone on #103.

Yes, we should have linked those two together previously.

Also, thanks for you comments @markerikson 

We have a unified break point list now, take a look at a recent screenshot:
![screen shot 2016-05-03 at 20 21 10](https://cloud.githubusercontent.com/assets/2134/15004505/bf8011a8-116c-11e6-9adf-b2df451134bd.png)

@TatumCreative make sure to take a look at the comments by @markerikson in https://github.com/jlongster/debugger.html/issues/104#issuecomment-216732509 

The previous text logic is here: https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/content/actions/breakpoints.js#69 but needs to be adapted. 

We definitely should but we're not in the polish stage yet. I want to implement the basic features first and then we'll go through each component and think through it. There are all kinds of things we need to think about with sources: eval sources with no filename, blackboxed sources, etc. Each component that deals with sources (most of them) will need to be thought through in regards to all those states. We'll get to it, but let's focus on basic features first.

Just to note that #132 is related to this for showing the scope property values.
And #103 is the higher level tree view component investigation

sgtm

Currently working on a webdriver for the debuggee. The goal is to be able to progromatically open firefox and issue commands like, click this element, evaluate this code, etc.

There are two pieces to this:
1. webdriver configuration
2. Firefox Profile

##### Webdriver

At this point i'm leaning towards `webdriver.io`, which has great docs, seemingly strong community, and also an active gitter channel which helped me yesterday.

Here's what I have so far for webdriver

``` js
var webdriverio = require('webdriverio');

var options = {
    desiredCapabilities: {
        browserName: 'firefox',
        firefox_profile: profile,
        binary: "/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin"
    }
};

webdriverio
    .remote(options)
    .init()
    .url('http://www.google.com')
    .getTitle().then(function(title) {
        console.log('Title was: ' + title);
    })
```

##### Firefox Profile

``` js
var FirefoxProfile = require('firefox-profile');

var myProfile = new FirefoxProfile();
myProfile.setPreference('browser.newtab.url', 'http://saadtazi.com');
myProfile.setPreference('devtools.debugger.remote-port', 6080);
myProfile.setPreference("devtools.debugger.remote-enabled",  true);
myProfile.setPreference("devtools.chrome.enabled",  true);
myProfile.setPreference("devtools.debugger.prompt-connection",  false);

var encodedProfile = new Promise((resolve, reject) => {
  myProfile.encoded((profile) => resolve(profile))
});
```

Merged this PR because I think it's an improvement over the environment.json work, which has a complicated README. I'll make a new issue which tracks `nconf`, moving configs to a top level directory, and enabling logging.

Logging is especially important because i want to figureout why the debugger does not detatch on refresh.

It's been annoying me that it doesn't properly track sources if you navigate to different pages. Now it will clear the UI on navigation (there are a few cleanups after this, like managing the editor state).

I tweaked the code in `client.js` as well. Because we connect a tab/thread outside of the components (if one is already selected), I moved the actual call to `connectThread` (which used to be `connectToTab`) outside of the tabs actions. This makes it easier to follow the `debugTab` function, which just calls `connectThread` directly. The tabs reducer is purely for maintaining the UI of the tabs.

This made it easier to get access to the tab form and get the target for it in `debugTab`, which I need to install navigation handlers.

I meant to add some comments in `debugTab` also, which I will do before landing.

A couple minor nits, but looks great. Does this fix the refresh bug? https://github.com/jlongster/debugger.html/issues/113

> A couple minor nits, but looks great. Does this fix the refresh bug? #113

Unfortunately no. I think that's going to be some interaction with the connection closing & the proxy. I can help look at that if you want.

Just updated the driver to use `selenium-webdriver`, which has the official bindings and access to low level primitives such as `firefox.Binary` and `firefox.Profile`. This is still a WIP. Currently, the driver demonstrates that it can open todomvc and add a couple todos. The next step will be to connect the debugger integration tests I've written with Cypress to the driver so that the debugger tests can drive the debuggee.

r? @jlongster 

@jlongster r?

I was initially going to do more work cleaning up the stories, but i think it's fine for now

r+ once circleci passes. It's not clear how to actually run this, can you add either docs or a package.json script? Also, eventually I think we should share the CSS selectors used instead of embedding them in the test.

r+ I like consolidating the fixtures, good idea. I think you answered my one question in an outdated commit actually. Feel free to merge.

@jlongster I'll write docs / steps when part 2 lands.

merged

![](http://dl9fvu4r30qs1.cloudfront.net/f9/69/b1f0b85e4392a8fa264801a86374/force-awakens.jpeg)

Yeah, this is worth looking at again. I've noticed the gutter problem before, but we may be prematurely fixing it. By the time we launch the debugger it may be fixed. Anyway, I'm fine keeping the code in editor.js there, but for now maybe we should disable the 1-line in the editor component that calls it.

tempted to be more literal with `clientLogging` and call it dumpn.wantLogging or something like that, but part of me thinks that new contributors don't care about that... torn.

Getting closer [error](https://circleci.com/gh/jasonLaster/debugger.html/123).

I believe the problem is with setting up one of the local servers or proxy. It's pretty close

closing this as i'll be away next week. I'll re-open when i have a chance to finish it.

I'm working on adding CI support and ironing out some of the kinks in selenium:
https://github.com/jasonLaster/debugger.html/tree/cypress2

CI support:
- [ ] cypress run headlessly in an older version of electron, which does not support es6. Cypress will upgrade electron when one feature lands (hopefully soon). In the mean time, I'm adding a babel bundle endpoint so that the tests run headlessly.
- [ ] circle support. the proxy, server, and firefox driver need to run before the tests run. 
- [ ] circle could not find todomvc. fixed by running todomvc locally.

Selenium edge cases:
- [ ] selenium action promise scheduling breaks when firefox is paused. (added a timeout fix)
- [ ] the driver was attempting to open a new firefox instance after each test run. Now, it opens and quits firefox each time. It also won't open one if there's one open already.
- [ ] i'm not sure why, but todomvc was not refreshing after tests because the page was paused (without breakpoints). this was fixed by first refreshing the debugger which detatches.
- [ ] there was a race condition between opening the debugger and refreshing todomvc. fixed by opening the debugger w/o a selected tab and clicking on the first tab.

Sorry if that last comment was too implementation specific. I wrote it yesterday because I didn't want to lose the context if I'm away for a week. 

I forgot the most important point - the integration tests are running successfully on circle and heedlessly in the terminal. When I get back I'll polish and PR. 

The behaviour we added in 9164c08 is really only relevant for firefox because of APZ. We should really only have a check if the browser is firefox when adding scrollBy.

Sounds good @gabrielluong.

We could probably add an `isFirefox` function in `configs/feature.js`

``` js
function isFirefox() {
  return /firefox/i.test(navigator.userAgent)
}
```

Let's merge this with #104. We've done the investigation, now we just need to tie it back to the sources view.

@TatumCreative I'll ping you tomorrow because I should have a basic sources tree working with Nick's tree view then. We should compare notes.

Been working on this most of today. I should have something based on Nick's tree pretty soon, and Greg has implemented a basic tree with Honza's. I'll coordinate with him to get this resolved.

<img width="291" alt="screen shot 2016-05-10 at 5 16 56 pm" src="https://cloud.githubusercontent.com/assets/17031/15162883/5c2f41de-16d3-11e6-8ea7-b33d01f87369.png">

I kind of like that they are separate.

> The rationale is that both the firefox-proxy and server are useful for the local development environment, but not necessarily useful when the debugger is in the FF toolbox.

How does does that relate to this PR? Both are things for development, neither which are needed when we integrate with FF. Whether they are separate or not doesn't really matter for that.

I like it being separate so other projects can easily see those two pieces, and they'll likely re-use firefox-proxy but not our server.

But I don't really care that might right now, we can always separate it out later if we think that's clearer.

Works for me :) we'll probably work on better logging at some point and we can always change it later

Yay!

I have the code in a [branch](https://github.com/TatumCreative/debugger.html/tree/tree-view-honza) with honza's component over here: https://github.com/TatumCreative/debugger.html/commit/12e5762437159584cbd9367889002f7a4ca3b8df

Sweet, looks great! Some linting failures though.

Here's what I've learned so far experimenting with running inside Chrome.

## Chrome Extension

Chrome allows for most of the pieces we need but ultimately prevents us from running as a real debugger within a devtools panel.

Chrome allows for extensions to access the Chrome RDP via an API: https://developer.chrome.com/extensions/debugger and it also allows for us to create our own panels https://developer.chrome.com/extensions/devtools_panels However it does not allow for an extension to attach the debugger to a tab which has the developer tools open.  Meaning we can't have a competing debugger running in a panel within the developer tools; their debugger always wins.

![screen shot 2016-05-11 at 3 25 45 pm](https://cloud.githubusercontent.com/assets/2134/15198521/ade59514-178c-11e6-9045-44c7ff723289.png)

Therefore if we want to remain an extension we need to find another way to present our debugger to Chrome users that doesn't require their devtools to be open.  I'm not sure that we want to remain an extension given this limitation but here are some ideas for how we could do this.

### Alternate extension approaches

One major limitation to keep in mind with any extension approach is that if the user opens the existing developer tools at anytime, our connection to the debugger will be terminated.  Our extension will receive a notification about the termination however there is nothing we can do to reconnect until the developer tools are closed again by the user.  i.e. we'll have to put up a notice saying "Please close the Chrome devtools to continue"

#### Separate Window

As an extension we could offer a toolbar button that opens a new window with our tools in it, from this window we could offer the list of tabs in the browser and attach to any available tab which doesn't already have a debugger attached to it.

#### Separate Panel

Very similar to the window approach we could create a different window type, called a panel which would eliminate most of the window chrome making us look more native.  Its available from the [Chrome Window API : WindowType](https://developer.chrome.com/extensions/windows#type-WindowType) However this approach requires our users to turn on a flag in the chrome://flags/#enable-panels page.

## Separate App

The advantages of being an extension, ease of installation and devtools panel, don't see to outweigh the disadvantages we are facing in terms of not being able to run our debugger inside a devtools panel. I'd recommend looking at running our debugger as a separate application that connects to Chrome remotely.  Much like the [VS Code Debugger](https://github.com/Microsoft/vscode-chrome-debug) we'll need to spend time making sure people have opened Chrome with the correct command line flags but once they are connected we could possibly offer them a much more compelling experience than what is available via an extension.

There could be hybrid approach where we offer a helper extension that opens our separate app and lets you know what tabs our app is connected to.  The extension avenue isn't a total waste, just not a good one right now.

Going ahead and merging because I don't like leaving PRs open, and this works for me.

Greg and I talked and while both trees could be sufficient, the one the memory tool uses is much simpler and lower-level and easier to leverage. That also means it is much simpler to use in our separate project (just copy the 1 file). While it needs some love to be more user-friendly, once I figured out how to use the low-level API it was easy to wrap a SourcesTree around it.

I'll be working with others on the team to standardize trees, but for now I think moving forward with the memory tool one is good. If we want to show a good use case for using npm modules, we can show how easy it is to use [react-virtualized](https://bvaughn.github.io/react-virtualized/) to integrate virtualization with this tree component. I've already done this, because the memory tool had previously embedded virtualization in their tree but I removed it because we don't need it (for now at least).

I should be open up a PR tomorrow. Working out how best to handle the data in the reducers and when to compile the sources data into nested data. But the tree is working well, and the memory tool's tree already has stuff like keyboard navigation which is great.

Thanks Bryan for investigating. 

Also, I'd like to merge this in, **not squash it**. These commits represent the points in history of my 3 ideas and I'd like to keep that in the history. I might want to refer back to various things I implemented in each of them (the way I generated the tree structure also changed in each of them).

Thanks for the write up. I appreciated getting your thought process. I agree that maintaining local view state is a good balance. Also, I doubt mutating the tree will be a bottleneck. 

I didn't study the tree logic too much, but it seems fine. It'd be nice to add some unit tests here soon as well. 

Feel free to merge when you're ready. 

Mutating should not be the bottleneck, yeah, but when I was using persistent data structures it was a little more worrisome. Although several things were going on at that point, particularly this: in `debugTab` it was `yield`ing on `actions.loadSources()` which means it blocks the entire UI until the sources are finished loading. I was testing cnn.com which had thousands of sources and it took a long time for the UI to show up. I think most of the perf problems I was experienced was due to this. Eventually I removed the `yield` so the UI shows immediately and the source listing updates over time as new sources come in.

I used our performance tools and when there are thousands of sources, the thousands of `newSource` events really clogs the websocket. But I guess there's nothing we can do about that. Showing the UI immediately makes it feel much more responsive, even if it takes a while for the listing to completely flesh out.

I will write at least some basic tests before merging this.

I moved the source tree data structure into a utility lib to clean up the `Sources` component file, I've been meaning to do that. Now it's easy to test also. Added some basic tests for the tree structure. Things are passing so I'll merge this now.

I will work on more tests. I also might tweak the tree structure a little now that I'm more familiar with the problem. 

Jason, although this is assigned to me, feel free to explore this area too. I got node connecting last December and I have some ideas about it, but you'll be working on Chrome which is similar work, so feel free to work on this too. Let's talk next week about it.

@gabrielluong will take a stab at this

Are you planning on doing this in this sprint? This isn't technically part of this sprint, and I think it's more important to start working on making the app state more generic so we can connect to chrome/node (#154).

Closing this as we have a tree view now and I think the styling is good enough for a demo, and there are more important things to do. I'm going to file some bugs for the tree view behavior that a beginner could do if they want.

This can all be done in the `addToTree` function here: https://github.com/jlongster/debugger.html/blob/master/public/js/util/sources-tree.js#L62 If that function gets any more complex, we should probably split it up some.

Note that this is complex because we incrementally create the tree. It should collapse it at first, but if another source comes in (like `foo/file.js`) it will have to "uncollapse" it.

Might also be useful to take a look at http://remotedebug.org/ / https://github.com/RemoteDebug for existing information already gathered on a more generic debug state.

Nice! This would be great to have early on.

r? @jasonLaster 

looks good. just CI

That's a good point. I'll probably sandbox it at an hour as an experiment. 

Cool, that's totally fine, just wanted to get it in aha if you were going to work on it!

I'll fix on monday (About to head to the plane). 

I'd like to wait on merging snippets until the integration tests land. Snippets change how breakpoints are shown, and will cause the integration tests to fail.

#157 landed so I believe this is done.  There is lots of polish work left, like #160 is one of our original requirements but I think we can go without that for now.

Awesome! Gotta run for now put I'll review this over the weekend or first thing Monday

I created a new tool and threw the js and css bundles in there, and it partially works! I did have to rework our `main.js` entry point to allow this toolbox to install the RDP connection that it already has, but that wasn't too bad. I'll create a PR for that next week.

There are also some weird issues about the old debugger catching events (like paused, etc).

But it _looks_ pretty good!

<img width="1077" alt="screen shot 2016-05-13 at 4 46 15 pm" src="https://cloud.githubusercontent.com/assets/17031/15261675/d7ed65bc-192b-11e6-995e-b649c61ae689.png">

I'd say so. Looks really nice in its natural home. 

Lets also include a screenshot of what the debugger with local tabs looks like

![screen shot 2016-05-16 at 11 02 03 am](https://cloud.githubusercontent.com/assets/254562/15293339/8522dd36-1b55-11e6-9b92-a22ea1da6a83.png)

It would be nice to have a pref that shows the new html version over the old version.

I'll PR this commit https://github.com/jlongster/debugger.html/commit/0f272d97e439a51578306be296f79a85694a1024 after the integration tests land, as it's dependent on that work.

Yeah, I've been thinking about this too, good work. Please don't use Chrome in the screenshot!

oops

![screen shot 2016-05-16 at 1 24 29 pm](https://cloud.githubusercontent.com/assets/254562/15297643/34575ca6-1b69-11e6-9703-8ba0a029d4f9.png)

This looks great. It feels like a lot of moving parts, so I'd say lets try not add any more tooling until we get a good feeling about all of this. But it will be good to try it out so we can show the team this workflow in June.

r+

I glanced over this and it looks good. Commented on one thing. Also, I think it'd be better to show Firefox in the screenshot instead of Chrome. Otherwise, r+

Very good point! We should turn this on in the linter. (Hm, just looked, looks like it should be a warning, not sure why that's not applying)

There's a chrome extension. we can also have a docked app logger (in development mode)

Here are the blockers for the Redux DevTools Extension in Firefox:

https://github.com/zalmoxisus/redux-devtools-extension/issues/9

r+

There are various "monitors" and some of them are really slow. I'd like one that just does rich console.logging, but the overlay is nice too. It would be nice if we could customize which devtools to use in the config or something.

There's no `fs` module here for checking the existence of files. I'm not sure there is an easy fix for this. The only thing I can figure out is creating a separate npm run script for local development options using environment variables.

> re: adding more tooling. 

I believe we're in a good place in terms of testing. I expect the integration testing to stabilize like the unit tests as we use them in the coming weeks.

@TatumCreative What do you mean by `npm run script`?

We might need to do something with webpack or the development server.

Updated PR:

I limited the scope of the PR to "just show chrome tabs". 

![screen shot 2016-05-17 at 11 59 01 am](https://cloud.githubusercontent.com/assets/254562/15330765/43ce4488-1c2c-11e6-8586-5375f2fbdce1.png)

Couple things that are worth noting:
- I moved client.js to a clients/firefox.js so that there could be some parity. 
- Adapters, for the time being I am just massaging the client response for tabs in `presentTabs`. I'm not sure if i like that pattern yet.
- Unify app state, for the time being I am lifting shared fields and using a browser field for the data. Here's a gist of tab state [gist](https://gist.github.com/jasonLaster/b1985415a1425b3ca09e41e3d7efccd4). This is the path of least resistence and i'm reserving judgement until I have more data points and we can think it through

Do you want me to r? this or wait for more changes?

I'm pretty confident that this is going to come together nicely. We're in a good place now with an existing client to fetch the properties, a tree view to view them, and the reps components to format values. Got this far today, will probably spend another half day or so on it and then work on the Firefox bundle again.

<img width="266" alt="screen shot 2016-05-17 at 5 52 06 pm" src="https://cloud.githubusercontent.com/assets/17031/15340594/2747bd86-1c58-11e6-8175-0eb1366964af.png">

oh sorry, r?

nice!

done

we'll use the tree

landed

done

after investigating there will be a couple breakdown tasks
- [ ] show chrome tabs
- [ ] setup chrome front api
- [ ] connect to tab

This is a little vague. I'm assuming by "selected file UI" you mean the bug where the full text isn't highlighted if it's wider then the container? Can we explain that here in detail? And I'm not sure it's worth having the 3rd item "layout". That's pretty subjective and we'll do whatever Helen designs. I think it's fine for now.

Also, fwiw I'd rather focus on the feature in https://github.com/jlongster/debugger.html/issues/160 first before any of this.

I vote that we just add the static files. It just seems less subject to change.

Sounds good to me, I'll work on #160 first.

@jlongster mind giving this another read through?

Summary:

First step towards debugging a chrome tab.
- adds `chrome/ap.js`, which is a lot like our client/shared/main.js
- adds a `debugTab` function to the chrome client for debugging a tab. It knows how
  to start the inspector backend, connect the websocket, and enable the
  debugger and runtime.

I'd vote for pinning the node_module version. It's basically the same thing, but not committed. I don't care that much though.

merged. the test failure was a linting thing which was fixed.

I wouldn't be surprised if we want to change the page at some point to make it easier to write a specific test. I guess I don't care that much right now, but I predict that we will want to do it in the future :)

That makes sense. I'll probably feel differently when we have other test files too. 

I think you just force pushed here but my two comments still stand I think. Most of this is just pulling in chrome's library files, so looks good. r+

Awesome!

> which is run when we're setting up the chrome client.

I don't see where that happens? I don't see where that file is run anywhere, or did I miss it?

Whoops, bad commit ordering, let me fix.

Those changes make sense.

I was going to drop the open url change as well. I didn't expect to be changing `development-server` as much as I was.

+1 on the chrome change as well. 

Have you considered doing memoization on the query / selector level? This seems slightly better than in the reducer. 

I agree that the reducer makes less sense. One more use case to consider is the filter use case where you want to filter the variables and just see some that match.

Not really a commit comment, but out of curiosity do you think that storybook could help you develop this faster?

The pros:
- you don't need to manually pause
- you can work off of fixture data for different cases (initial load), (some objects partially fetched)

Cons:
- we don't have a good way for stubbing the client here. Might be nice to prototype something like that...

Haven't looked closely at the code, but from what you say, my work in #182 goes a bit in a different direction than this. I don't think `debugTab` should be an action, in fact I think it should be broken up into smaller bits that the "bootstrapping" code can choose to run. The `selectTab` action is the thing that records it into redux, I don't think we need any more than that.

Let's talk about this more tomorrow, I'll be in a coffee shop so can't vidyo as easily but will be on IRC.

NOTE: I haven't really cleaned this up yet but just posting it because you are working on similar stuff.

Overall, I like the direction this is headed in. I like how the firefox client is continuing to mature.

This definitely conflicts with my debugTab work, but I'm sure I can reconcile it after this lands.

merged as I believe you r+ it.

let me know if you have any questions.

here's the work for updating tab ids and debugTab https://github.com/jlongster/debugger.html/pull/180/commits/c0f2ddb43b92fcd378e348b20d69d56c74b2a695

here's the commit for adding scriptParsed: https://github.com/jlongster/debugger.html/commit/7f9b2fa964de60318b3e46129ef4d12c099f9a60

closing for now. we can re-open it next week and we re-visit chrome

> This definitely conflicts with my debugTab work, but I'm sure I can reconcile it after this lands.

Ok! I wasn't sure which order you wanted to land stuff. I will work on this more today and get it merge-able. (mergable?)

That component is pretty special though, it's never meant to be reused. I view it as an internal component for the editor, because it solely exists as a hack to translate changes into something the editor can work with. I'm fine with doing this but I'd rather rename the component `EditorBreakpoint` instead of putting it in an `Editor` folder, or you could create an `editor` folder and put both Editor and Breakpoint in there. It feels weird that `Editor.js` would live outside that folder.

merged

A contrary idea: are we sure we want to do this now? This is one of those features that I was thinking was out of scope because it involves a good bit of UX design, and adds complexity. I'd like to keep things simpler and more focused for the first version of the debugger and slowly adds things with care.

However, we are working with Helen in person next week, so we could spend some time on this. I just don't want to add things unless we're going to spend time doing it right. I'm fine if this becomes in scope and we spend time on it; we are pretty ahead of schedule. Since you've already done work on it we can do it, let's make sure to work with Helen next week on the UX though.

There's something wrong with the cypress key. Merging because mocha and linting are fine.

> are we sure we want to do this now?

I agree we don't want to rush into making assumptions about a given workflow. We can also say that this does not fall into scope for an MVP.

Lets discuss the scope on monday. Some of the UX questions I have are:

1) can you create a conditional breakpoint via a context menu on a line or gutter
2) can you create one before a breakpoint or is it only available after a bp is added
3) can you have multiple panels open
4) this is maybe out of scope, but conditional breakpoints are a great way of running _any_ expression on a line, logging or doing something else. do we want to highlight that fact. I can see several ways to do that
- different copy
- offer the ability to add another expression
- offer multi-line expressions.

did an initial prototype. 

<img width="793" alt="screen shot 2016-05-20 at 7 39 44 pm" src="https://cloud.githubusercontent.com/assets/254562/15444767/5df80a54-1ec2-11e6-9beb-99b43f82edfb.png">

Turned out to be pretty simple

The Electron App lives here:
https://github.com/jasonLaster/debugger.html.app

It uses a new Debugger.html npm package
https://www.npmjs.com/package/debugger.html

It works by spinning up local server that serves the bundle.js and styles.js. 

It's currently missing the svgs

Great work. Can you explain why we need to publish to npm again? I missed that, so I'm just curious.

r+ btw

@jasonLaster I'm referring to https://github.com/jlongster/debugger.html/blob/master/package.json#L4-L14 for an npm run script.

> why we need to publish to npm

(Just for posterity) I believe this is in support of #156, also see the comment that describes where everything lives https://github.com/jlongster/debugger.html/issues/156#issuecomment-220743453 

I think this was closed by #190 

I believe this was closed by #188 

Agreed that I think this is out of scope for the MVP.  I'm curious what you guys worked out on Monday. 

I'll layout my feelings on the conditional breakpoints here just so they are captured.
- They are really useful / powerful
- They are likely rarely used ( by the average developer )
- Setting them with a hand written expression is error prone
  - an auto-complete entry could help reduce the error prone nature
- I see them as a higher level breakpoint, will explain below

Maybe I can capture the higher level usage in a user story.

As a developer who is debugging her application I want a way to convert the breakpoint I've set into one that will only trigger at a certain condition such that I am not pressing the resume button over and over again to get to the situation where my breakpoint will be useful.

I do think developers should be able to set a conditional breakpoint immediately, but my hunch is that most developers don't use them despite the fact that they would be extremely useful.  So I think we want to offer them to people who are using breakpoints.  This should be an experiment that we try, but my hunch is that we could get people using conditional breakpoints if we made them simpler and if we did that our developers would be much more effective.

Helen will have better ideas here but I'd suggest we insert an extra line after any breakpoint (perhaps only when we are paused on that breakpoint?).  In that extra line we can offer conditions to help improve the breakpoint itself.  

here's an example of the extra line with a suggestion:
![conditional breakpoint](https://cloud.githubusercontent.com/assets/2134/15509240/a03657c8-2187-11e6-93ef-cb7dc983ca4b.png)

Actually if we're paused on the breakpoint this extra line could be a lot more useful by knowing the variables available within the current scope.  Perhaps that's the best time to show this kind of a setup.

Under the hood we'd probably have to convert the old breakpoint to a conditional one but I don't think that would be a big deal.  We could just treat it like a regular conditional breakpoint from that point on.

So the base story here is that writing a conditional breakpoint from the beginning is a master level type of debugging and I think we want to teach people how to level up to that while they are working.  

I have this string aliased using Sublime Text to a snippet. You can grab that snippet [here](https://gist.github.com/helenvholmes/fdce21d5e8ce62d29dac).

<img width="793" alt="screen shot 2016-05-24 at 3 03 26 pm" src="https://cloud.githubusercontent.com/assets/1720093/15516511/0a86ef46-21c1-11e6-946b-9a2bc453c67e.png">

Since some of the icon work was captured in #196, I'm voting we repurpose this to handle cleaning up the Debugger action icons which are looking a little wonky.

I'm going to close this based on #197 + #86.

Thanks @clarkbw. I really like what you're discussing as an incremental enhancement once the debugger is released. I would love to make conditional breakpoints / watch expressions more common.

@jlongster I'll close the PR and we can come back to it post-london. Ultimately, I'd like to focus on a simple conditional breakpoint UX. We'll have plenty of time, post-launch to experiment with more intuitive designs.

Sounds good. Whatever we do I don't think we should stray from the basic debugger use case: you click on a line to set a breakpoint that always pauses. We don't want to alienate the large number of users that do use a debugger normally.

But there are tons more involved use cases and we'll figure out a consistent story for the UX of them. There are kinds of things, like "ignore this debugger statement", "ignore breakpoints in this file", etc. Being able to control the execution is really the core part of the debugger so it would be cool to figure out a consistent "language" in the UI for doing this. Autocompletion sounds neat and we should explore that.

Not sure about the cypress key change, but I wonder if that is the fix for failing cypress tests (it fails with a bad key error).

Actually, I noticed that the cypress key commit is already on master, so not sure what's going on. Also, I need to fix linting errors. This is bad but I immediately force pushed on master to revert this. Jason and I are the only ones using this repo actively so it should be ok...

I will open a new PR that should not require a squash.

I have no idea what github is thinking here; I think it's really confused because I'm using the same branch name that was merged but backed out before. Going to start a new branch.

Looking good. 

+1 extracting loaded frames

Cool! Seems like we'll get a good feeling about all of this pretty quickly.

@TatumCreative I'd like to have the options bunded, but this should be possible with webpack

Liking this so far, with tcomb we're able to type the entire protocol data:

``` js
const t = require("tcomb");

const Source = t.struct({
  id: t.String,
  url: t.String
});

const Location = t.struct({
  sourceId: t.String,
  line: t.Number,
  column: t.Number
});

const Frame = t.struct({
  id: t.String,
  displayName: t.String,
  location: Location
});
```

The only problem I hit is that immutable's default `fromJS` doesn't convert these objects anymore, but writing our own `fromJS` is super easy. A bonus: I might be able to automatically generate immutable [`records`](https://facebook.github.io/immutable-js/docs/#/Record) from these as well so we can just access them like `frame.displayName`.

This looks nice.

I like typing the action boundaries.

Was just going to ask if these compose nicely, and then I saw the Location example again.

Keep going. 

You're probably thinking this already, but it would be nice to have a structs/types file that we can require

We've had four issues this past week:

1) incorrect project ID - this is fixed. I accidentally changed the key when looking into the header issue.

2) Header - this is fixed. It was a short lived regression when cypress went from 0.15.x to 0.16

3) no tabs - this is fixed. There's an infrequent race condition between loading todomvc in firefox and loading the debugger. I fixed it by adding a one second sleep. The issue is in selenium knowing when todomvc is loaded and we can have a better fix.

4) source tree is not populated. This is not yet fixed. I believe the problem occurs when firefox sends network events, which might slow down the new source events. I'll look into this more, but it should be infrequent.

I believe the issue is how the paused `debug-line` is set. The `Editor.componentWillReceiveProps` function currently has a `setDebugLine` and `clearDebugLine` that expects line to be set in selectedSourceOpts and not come from the pause location. If we add the debug line in `selectSource` when we pause that should fix the problem. Also, we will have removed the editor depenendency on pause info which is a nice win.

https://gist.github.com/jasonLaster/bcd091004495ac4ab7faeb921dcd4fde

``` diff
diff --git a/public/js/actions/pause.js b/public/js/actions/pause.js
index edb7e25..dbb8649 100644
--- a/public/js/actions/pause.js
+++ b/public/js/actions/pause.js
@@ -20,7 +20,12 @@ function resumed() {
  */
 function paused(pauseInfo) {
   return ({ dispatch, getState, threadClient }) => {
-    dispatch(selectSource(pauseInfo.frame.location.sourceId));
+
+    const location = pauseInfo.frame.location;
+    dispatch(selectSource(location.sourceId, {
+      line: location.line
+    }));
+
     dispatch({
       type: constants.PAUSED,
       pauseInfo: pauseInfo
diff --git a/public/js/components/Editor.js b/public/js/components/Editor.js
index 8acfa98..35f882d 100644
--- a/public/js/components/Editor.js
+++ b/public/js/components/Editor.js
@@ -28,8 +28,7 @@ const Editor = React.createClass({
     selectedSourceOpts: PropTypes.object,
     sourceText: PropTypes.object,
     addBreakpoint: PropTypes.func,
-    removeBreakpoint: PropTypes.func,
-    pause: PropTypes.object
+    removeBreakpoint: PropTypes.func
   },

   componentDidMount() {
@@ -100,12 +99,6 @@ const Editor = React.createClass({
       this.setSourceText(nextProps.sourceText, this.props.sourceText);
     }

-    let pause = this.props.pause;
-
-    if (pause) {
-      this.clearDebugLine(pause.getIn(["frame", "location", "line"]));
-    }
-
     if (this.props.selectedSourceOpts &&
         this.props.selectedSourceOpts.get("line")) {
       this.clearDebugLine(this.props.selectedSourceOpts.get("line"));
@@ -114,9 +107,6 @@ const Editor = React.createClass({
     if (nextProps.selectedSourceOpts &&
         nextProps.selectedSourceOpts.get("line")) {
       this.setDebugLine(nextProps.selectedSourceOpts.get("line"));
-    } else if (nextProps.pause &&
-               !nextProps.pause.get("isInterrupted")) {
-      this.setDebugLine(nextProps.pause.getIn(["frame", "location", "line"]));
     }
   },

@@ -152,8 +142,7 @@ module.exports = connect(
       selectedSource: selectedSource,
       selectedSourceOpts: getSelectedSourceOpts(state),
       sourceText: getSourceText(state, selectedId),
-      breakpoints: getBreakpointsForSource(state, selectedId),
-      pause: getPause(state)
+      breakpoints: getBreakpointsForSource(state, selectedId)
     };
   },
   dispatch => bindActionCreators(actions, dispatch)
 @jasonLaster
```

I'm not sure about this. `selectedSource` sounds like it's the source object (that should have id and other properties). The `selectedSourceOpts` is basically editor state, so maybe we should just rename it.

Obviously, it's just a refactor and not a big deal

Yeah, I was thinking about this as well. 

We might want to rename `selectedSource` to `selection` or `selected`

The pain point came last night when i was pairing with another person and he got tripped up on `selectedSourceOpts` and `selectedSource` and it seemed like this could be simplified.

It would help your argument if you explained what he was trying to do and what he was confused by. I think you're right, but hearing more about that would be good.

Because the downside is that the selected source is used very frequently, especially in tests, so it's nice that's it's a first-class part of the app state. I look for it when debugging and logging the app state, etc.

done. If we want to do more work connecting to chrome we can open a new ticket

I don't think we will get to this pre-london, so closing for now. Feel free to open when you're ready to work on it.

@helenvholmes are those debugger icons done and ready to be added? Or do you still need to clean them up before they are added?

We are not going to get to this pre-london, so closing for the time being. Lets re-open when we're ready to tackle.

I'll take a look at this next week. 

@jlongster do you think we can do this pre-london? 

I think it's a nice polish piece for our infrastructure.

@helenvholmes are the color / themes updated in the current debugger and ready to be applied?

This will be handled by james' scope properties work

This is an old bug and the concerns have shifted slightly. I'm closing because it's no longer accurate. I still think we should improve configs, but this is not quite right any more.

I believe we said this is done and the investigate node bug would be our next item.

@helenvholmes mind adding your file search design.

The big change is that it won't be a modal, but a view that replaces the editor.

So, yeah this is working out really well so far. I love tcomb's API. I agree: we'll most likely end up with a `types` folder that lays out all of our types.

After working with this, I realized that we really do want to apply the types in many places. For example, we have a `Location` type, and we should apply that in the protocol, the app state, and React components (prop types). But this is hard because all 3 of those are different: protocol uses normal JS objects, app state is immutable, and React has its own prop types.

I played around with typing immutable.js objects with tcomb and it worked surprisingly well: https://gist.github.com/jlongster/3010fd2976f8ace4d4378c296b099a1d. We also just need to figure out how to export a React prop type, and we can use our types everywhere.

I'm not going to go too far with this right now, but this makes me feel confident about being able to extend tcomb later when we want to type our app state as well.

Another _big_ benefit that we get from typing all the state is that we will rarely use `fromJS` anymore. The types know how to "hydrate" themselves, meaning that can take an ordinary JS object and recursively convert it to the appropriate types automatically. If we pull off integrating immutable.js with tcomb (which my experiment validates), we'll get automatic conversion from JS->immutable where necessary.

This solves my biggest worry about our app state: mixing immutable and non-immutable values. Our types will solve all the ambiguities.

Let's merge this into #202

Looks good. 

What's instruct?

Why do we need fromJS? 

I might have missed this but is there a development flag?

It's `imstruct` :) stands for "immutable struct". tcomb has a `struct` type builder which is the standard way for typing objects. `imstruct` allows you do exactly the same thing, but for Immutable.js Records (which are basically `Map`s with predefined fields.

``` js
const Person = t.struct({ name: t.String, age: t.Number });
const ImmutablePerson = imstruct({ name: t.String, age: t.Number });
```

These are the same thing, except creating `ImmutablePerson` objects will return normal immutable objects. Creating a `Person` will return a normal JS object.

I think this is a good chance for us to spin off a library at some point for typing immutable JS objects (in the far future, I don't want to deal with that right now). I think most people use Flow, but I don't think we're ready for that until we resolve bigger decisions. If this works out, we'll get most of the benefits of static typing.

I added comments in `fromJS` (you probably looked at an older commit). Immutable's `fromJS` won't convert objects returned from `tcomb` because they aren't "plain" JS objects, meaning that they do some stuff with the prototype chain. This allows us to continue using our current code, but using typed objects in the protocol layer. As mentioned in the other issue (and the comment), eventually once we type all the state we shouldn't need `fromJS` at all because the type system will automatically convert things into the right types.

I will make sure to quickly follow-up with `imstruct.js` (it probably need a better name). Merging this in for now and will do another follow-up.

Here were the designs we worked on on Tuesday:

<img width="851" alt="screen shot 2016-05-26 at 4 35 23 pm" src="https://cloud.githubusercontent.com/assets/1720093/15589218/e22e3f90-235f-11e6-917d-b91af710dbb4.png">

Yep, the syntax highlighting in gecko-dev/fx-team should be good to go here.

Mind sharing a test file?

I noticed this before at one point, it's probably out URL parsing. Should be easy to reproduce.

@jasonLaster http://gregtatum.com/tmp/sources.zip

Just removed the chrome driver work and added some polish.

Looks good. Feel free to merge when you feel comfortable tomorrow

This looks like a nice cleanup, good job! r+

This is going to conflict with your PR, sorry :( I don't think the merge should be too bad though

FWIW Chrome does not do this. If we are mimicking "tab" functionality, showing a source just opens a new tab but by default does not touch the tree. It's similar to other editors as well that don't automatically move around the tree. We should have an option for "open in tree" though.

I'm fine if we want to do this now, though, until we actually have tabs.

I like these changes a lot. I am going to work on this. I think the cause for Chrome's debug line being off is related to this.

Oh interesting. I'll close the issuer and later we can open a new issue for "reveal in tree" or something like that

Thanks for reviewing so fast! Again don't feel like you have to!

The highlighted line is still wonky, in that it's not cleared when it should be and such. That may be the last thing I try to improve today.

I _think_ previously that the hash was part of the filename. If not that's how it should work. There's a worse case though: when the same JS file is loaded twice. We have a horrible story for that right now in the current debugger: you never see the new sources, you always see the first one. In the next few months it would be cool to figure out a good way to show multiple sources with the same URL, but we don't need to do that now.

The hash case should be solved by including the hash when parsing out the filename. If you tried that, was there a problem?

This is amazing. I just tried it out and I don't see any noticeable performance degradation. cnn.com has always been really messy and sometimes grinds Firefox to a halt for a little bit when debugging. I noticed the same thing before this work, so it's not your changes. I don't think it's the source tree, but it could be. When I looked into it before it was more about how many sources cnn.com was creating and flooding the WebSocket with `newSource` packets. We'll have to look into that at some point, but definitely shouldn't block this work.

I noticed one place when I went to cnn.com that seemed like it should have been collapsed:

<img width="258" alt="screen shot 2016-05-27 at 3 43 21 pm" src="https://cloud.githubusercontent.com/assets/17031/15619414/1e45acbc-2422-11e6-9221-62c5b58c8db5.png">

But it's not really a big deal. This is way better then how it currently works so I'm fine merging it in. I'll look over the code again and see if I have any other comments about it.

I measured timing on the addToTree function, and it wasn't noticeably slower for my code changes. I think it was the eval loop you had pointed out before on cnn.com that was causing the issues. In addition I found the duplicated node name. Those sites have crazy sources :-0 it's basically throwing fuzz at your code.

> Those sites have crazy sources :-0 it's basically throwing fuzz at your code.

Haha, yep. It's critical that the new debugger works with the "crazy ones" because if it works with those, it should work for the majority of people.

Looks good 

I'm working on the editor state some more and I think we do need to depend on the paused state. I will open a new PR and explain there.

Oh, also I went ahead and removed `selectedSourceOpts` because the only reason it existed was to indicate the highlighted line. This is a much more robust approach though.

In the existing debugger, `selectedSourceOpts` is also used to move around a source when searching though it. Eventually we will need to re-introduce something like it to be able to move around the cursor within the editor. For now let's drop it though.

This feels so good. These are the changes I've been wanting to make in the existing debugger for months.

merged. Looks great.

merged

@jlongster: we'd talked about possibly changing pretty print, correct? Did you have other thoughts on what that could be?

I believe this was fixed recently

@helenvholmes not that I remember? The only ones I wanted to change was step in and out. They should be the same as our current debugger (the general shape at least). The pretty-print one is fine with me!

I like pretty print too 

Yay! @helenvholmes looks good.

r+ 

Wow. That was a lot of fixes. Great job

I added breakpoints types, but the actual `Breakpoint` is not being used yet, it will be used in the reducer. The protocol uses the type `BreakpointResult` which only contains information to indicate if the breakpoint was moved.

Fixed in https://github.com/jlongster/debugger.html/commit/c12595084ccab3c33f39a532e74d809bf7159d3c

Looks great! It's a little unfortunate that we have to create our own API, but I don't know what else we could do. Seems like great research and we'll see how it feels.

r+ (EDIT: well, I will review it again once it's not a WIP and you make some of the change you mentioned)

@jlongster I'm planning on addressing your comments on `parts.slice(0, parts.length - 1)` in a follow-up.

@jlongster mind doing a second review.

Couple of updates:
1. Firefox has been converted to using the injected client commands (debuggee commands). Converting Firefox means that we can drop the test server, which was responsible for executing the web driver commands. The client side version also feels more stable.
2. Chrome tests are disabled off by default, but can be turned on if the config enables chrome and chrome is running. They're currently disabled, because I need to see how to launch chrome on circle, should not be hard.
3. I inlined todomvc. This will stabalize todomvc. Also, it will make it easier to write new test examples. The examples are hosted on the development-server.
4. I added a couple of client methods (evaluate, navigate). They were both important for integration tests. It is not ideal to add client methods just for testing, but I think the advantage outweighs the drawbacks for now while we're experimenting with testing.
5. Test cleanup - i dropped all but one test to simplify the suite. The final one tests adding a todo, with a breakpoint, and was the main test.

Never responded, but re: memoization, yeah we should probably do it on the component like the sources tree. I will re-work this post-London.

I will also work on Storybook integration. The majority of this way exploring the data shape and playing around with it, and it was easier to do it straight in the page because I could quickly load all kinds of different JS sources and paused data

Looks good, let's land this! Some of the integration tests are failing, but I think we should work with Jason to fix that as he's working through those right now.

@jlongster yep! The source tree changed, so the tests are failing to select a file

I did the first part of this, which was getting the integration tests to run with chrome. 

I'll do the second part soon, which will be getting the integration tests to run on CI with chrome. 

@clarkbw, do you think this will get completed by the demo? (I suspect people will want to contribute after seeing the demo, it'd be great to have a contributing doc by then.)

hey @jasonLaster, any reason this isn't a good Beginner Bug?

I'm no longer able to replicate this. Is anyone else seeing this issue?

Cool!

I haven't been able to repro either.

I skimmed the Scopes.js as it's self contained and I assume will be re-worked with Reps. 

One thought on the selector `getScopes`. It might be nice to extract that into `js/selectors/scopes`. That way, it would be easy to write unit tests for it and create small helper functions so that it is more manageable.

The actions/reducer/client looked good and that's what I mostly cared about.

Great job. Will be a great win for london

Thanks! `getScopes` is more aligned with `util/sources-tree.js`. It's not really a selector, because we might add more information to the scopes later by fetching an object's properties, and we don't want to rebuild the entire tree every time. If we rebuilt it every time, it would be a selector. But version 2 will be more like the sources tree: it keeps a local version of the tree and adds to it as object properties are fetched.

I'm not sure exactly what that will look like, but `getScopes` will be moved somewhere else for sure.

I asked Helen to look at this too, so let's not merge until she's had a look

Here's a huge debugger breakpoint (hopefully this is correct): http://cl.ly/0L0P1i2v1A1a

Here's a screenshot of the issue at very large files: http://cl.ly/3S0q1a3G3P2X

bgrins' test page: http://bgrins.github.io/devtools-demos/debugger/scripts.html

Fixed the wide breakpoints, and also fixed the mis-aligned line on my computer. I didn't have "SF UI Text" installed and the line number gutter was trying to use that, but it should be using the monospaced font. Everything looks so much better now!!

I believe this was done in #178

Looks like this work is taking place in #234

oops - linting failed. fixing now

Need to fix up some stuff here but you get the idea

+1 looks good!

Nope, re-adding it. 

Mentioning this because it wasnt obvious to me. The pretty print button is currently in the top right of the sidebar.

We should add a footer element below the codemirror editor, that can hold the pretty print button. The footer will be similar to how source tabs are shown as well.

nice. was thinking that too

BTW, this takes rendering node's sources (about 560) from taking 20 seconds to render to almost immediate.

I'm fine if you want to merge this now and clean up as we go along.

R+ this is clearly a perf win and we can improve going forward. 

I had actually imagined this a little differently:

Instead of a footer, I was imagining the pretty print button to hover over the editor in the bottom right hand corner. This will definitely obscure some code at any one time, but not a lot. In order to ensure that people can always see all of the code, I want us to add a few extra lines to the editor so that one can scroll past ones' code and see the editor below the pretty print button.

@jasonLaster I think this will ultimately make for a cleaner UI, but is this problematic in any way I haven't thought of?

I like the idea of not having a whole footer (for now at least, since there's nothing else we'll put in there), and we should diverge from Chrome where we can. I don't care about copying general good UI patterns, but it's going to be easy to just look like we're copying them completely.

Thanks!

@jasonLaster I reworked how the tabs list worked. The thing that triggered this was that I've noticed several times that the tabs list page does not scroll. This is due to it actually being rendered under a container which assumes it's the app, and thus sets flex and `overflow: hidden` properties. Having `Tabs` and `TabList` is confusing as well, as is having `TabList` be the root component.

This gets us closer to a separate toolbox component. Now the tabs list is its own page, and clicking on a tab literally navigates to a new page. This also means that you have your back button; just press back to go back to the tabs page.

It also removes the 2 places for connecting a tab: now, clicking on a tab does not have that logic at all. It just changes the URL. Connecting a tab only happens in a single place: at the bottom of `main.js`. 

The only thing left I'd like to change is that this still connects to Chrome and Firefox even if you already have a selected tab. We should add more checks in  `main.js` if `tab` exists in the query params and only connect to the needed target.

This way, the debugger becomes an isolated app that just takes targets through query params.

I went ahead and made it so that when you have a selected tab in the query params, it _only_ connects to the target. So if you have a firefox tab, it only connects to Firefox. This will improve perf when refreshing the page if you have enabled chrome debugging. It also allows us to remove the hack where we need "fake" tabs in the chrome and firefox bundle environment; now we can just directly use the connection we already have (because `getClient` in `clients/index.js` does not need `selectedTab` anymore)

@TatumCreative is going to keep working on the tree stuff, but take time to do it right. Let's not plan on having it in our demo. In that case, we can merge this and I'll help him rebase. I only refactored one function in `sources-tree.js` so it shouldn't be hard.

Jason I know you are out today and Monday but this touches the client stuff so it's important that you review it. I can wait.

This will be fixed with node integration, which requires file:// support. https://github.com/jlongster/debugger.html/pull/236

This was fixed in https://github.com/jlongster/debugger.html/pull/225. The gutters weren't using the monospaced font, and I was getting a different variable-width font that wasn't aligned. Forcing it to the same font as the line fixed it.

This is fixed (can't remember which comment)

I think the majority of the slow-down is the logging in the proxy server. It logs all messages to and from the debugger server, so it logs the entire 12mb source to the terminal as it comes across. Disabling logging seems to significantly improve performance (though there are probably still things we can do).

With this in place, installing the bundle as the new debugger works pretty well:

<img width="1110" alt="screen shot 2016-06-03 at 2 53 53 pm" src="https://cloud.githubusercontent.com/assets/17031/15790536/cee00f72-299f-11e6-8343-8f71ef315bf5.png">

Looks great to me! I'll let you merge it in case you want to change anything from my comments. Feel free to merge whenever you want.

Great work. I agree with your decisions on tablist. I was going to do something very similar. 

I especially like the back button support. Further separating the two experiences. 

Merging it as it's a large patch that will easily cause conflicts. Also adding node support is a great win. 

As a follow up item it'd be nice to have getting started docs for running / debugging node. 

Merged 

@tatumcreative do you think this can be merged now that we batch update sources?

Last I know he was still working through some bugs in it (not grouping things correctly) and he said he wanted some more time to work on it, so we shouldn't bet on it for the demo. I'm ok with that, it's a nice feature but not critical for the demo.

Docs would be great, yes! I'll file an issue about that, as we should do it soon. I meant to add a few screenshots of what this looks like:

<img width="705" alt="screen shot 2016-06-03 at 10 26 25 pm" src="https://cloud.githubusercontent.com/assets/17031/15797071/3f9d71ca-29da-11e6-8be9-6109dc652d73.png">

<img width="759" alt="screen shot 2016-06-03 at 10 26 12 pm" src="https://cloud.githubusercontent.com/assets/17031/15797072/40d4d27c-29da-11e6-800d-7f494747dd8d.png">

(EDIT: I'm open to changing this wording)

Right now it just assumes you're running node already, which I think is fine for the demo.

I'm always impressed how fast you review stuff. :)

Ahh, I didn't realize that. 

I like the idea of pretty print floating in the bottom right. 

I can see us using the right side of the editor down the road, but I don't think that should stop us now. 

We might also want to reconsider if we want more current source actions like pretty print, but I think we're okay. 

I am not too worried about cursor info in most cases, the one case I can think of is minified code where column info is important. 

One thought, it would be nice to support "go to line". Maybe we could reuse the file search top bar. 

This should be fixed with PR #241 so I'm going to close this issue.

Yay!

Awesome! There's a minor lint error, but I will merge and fix that on my own.

Oh, actually this conflicts after merging the other PRs. I will try to merge this locally instead.

Thanks.  Those are carry offers from the source list days. We should probably make sure it's updated to source tree :)

Thanks! Mind attaching screenshots in the future so I can  provide timely feedback. 

It's tough to look at CSS and svg changes and see what changed

Nice point. 

Closed via #241.

We are using the same rules, yes, although I think we had to tweak a few of them for some reason. Generally they are the same. You can run the linters with `npm run lint-js` and `npm run lint-css`. It's not a huge deal; our CI will catch it. I just wanted to get this in quickly and was easy for me to fix, but generally we just request the submitter to fix the errors before merging.

Great job. Lets also link to this in the README

Nice job.

It'd be nice to add tests for `fromJS` when you have a chance.

I figured. Awesome, thank you!

It happens because the editor's height is calculated unfortunately by hardcoding the height of the header, so if you change the height of the header but not the `calc` used in the editor the editor is too tall.

@jasonLaster you're using a pretty outdated version though, I made a bunch of tiny fixes yesterday. Can you merge from master and try again?

I'm going to get rid of `fromJS` as quickly as I can by using tcomb, but probably not before the demo.

I don't see it anymore :)

A basic version of this works, and is good enough for now, so closing this. We should file a new bug eventually when we want to make it better.

These have been removed.

I have a pretty solid demo working, see the screenshot in this PR: https://github.com/jlongster/debugger.html/pull/238#issuecomment-223671827

This is done in https://github.com/jlongster/debugger.html/pull/236

I can't repro. This used to happen, are you sure you're using the latest version? Please test it with all the latest fixes :) Or maybe it's happening in a certain context, which we need more info about.

Neat, looks good to me! Although cypress is having some troubles on CircleCI.

Oops, the fixtures were running on CI.

By the way, i changed the way the fixtures were written from a node script with an exec to a test-server, that receives a post request. The server does not need the chunking and will be more general purpose.

@jlongster r?

Yup. It's basically done

Neat, and the output of the test runner is the same? Looks good to me! r+

@jasonLaster might need some help looking into these testing issues, I can't reproduce the cypress one and the karma one is a little mysterious to me

Yup. One last point here. There are plenty of potential components to document in storybook. Feel free to try other conventions. This is a good time to explore options.

Yup

Merging it. Feel free to make changes/improvements going forward :)

@jlongster r? 

mostly cleanup from yesterday as I was doing a pass through the tests

I'm noticing some issues with cypress on circle. It looks fairly consistent recently. The error logs indicate that it is probably Firefox starting that is causing the issue. I'll investigate a bit more next week.

Looks good. 

Sorry, I didn't realize this PR was ready for review. 

Merging as circle is failing to launch Firefox. I discussed this in the other PR :/ we can investigate later. Also this is a merge conflict waiting I happen

Actually can't merge because there are conflicts. 

Same errors as before, so merging now. 

Looks fine to me. We probably should hold off on writing a lot more tests until I implement immutable tcomb types and type the app state. I feel like that may impact how we are doing things like hyrdating the store, but maybe not.

Merging as you are traveling today and since you asked for review I'm assuming it's ready

Merged in ff-devtools-libs in https://github.com/jlongster/debugger.html/commit/37896b89f2d960f1cb52b1e11fd00e9952f08732

Closing as I can't repro and I think you were using older code.

Thanks. Meant to close. The integration tests now test this as well. 

Fixed by #256, but was reverted because it broke node.

Sounds good!

Why is karma broken? I can't remember if that's something we talked about, but I don't remember specifically.

Karma is failing for a similar webpack issue. It's tied to the devtools-sham change. Should be an easy fix. I filled a big for it too 

Feel free to merge this. I'm on my phone and can't with the karma  fail. 

Nice. It's a known issue with karma. It ain't you

I'm in favor of removing it. 

I like both. 

We've discussed a flash in the past and agreed it would help. 

Im not a big fan of green. Is it just me? It doesn't seem consistent with our colors. 

Could we also add a gutter marker like a triangle on the right?

Meta but keep the design issues coming @helenvholmes!

<img width="755" alt="screen shot 2016-06-17 at 8 39 51 am" src="https://cloud.githubusercontent.com/assets/1720093/16143815/1b662f1c-3467-11e6-8cfd-c9f8c39a90eb.png">

Current design, just to be able to talk about them

@jlongster, any opinions? If you're in favor as well let's switch this to removing the area until further notice.

I actually like that you can see everything it connects to right in `main.js`. To me, that's sort of the point of that bootstrapping file. But we're going to keep thinking about this as we deal with more types of connections (i.e. workers) so I'm fine going this way and seeing how it feels.

fixed karma this morning. there were several edge cases
https://github.com/jlongster/debugger.html/commit/939e9e6cbbd8217b198ac2e0384aedbc47b836ab

Closing as we have unit tests and we just need to do the enhancements

Closing as this is old and running on CI is a nice to have

This has been fixed

Removed development.local

We have had two reports of this, but none recently. Will keep it open a little bit longer.

Merged

was removed

Added!

DevToolsUtils.assert fails for karma

Merged so Helen can polish.

@jlongster please leave comments on this PR and I'll update in a subsequent PR

It's safe to ignore karma right now, it's passing locally... i'm betting it's a chrome 47 thing

Cool, looks good! r+

I'm going to change how we handle the tree structure completely, so yeah that code was prototype-quality.

Nothing stands out to me, except maybe we could avoid committing the React file in vendor since we don't use it and to avoid committing a big file? Otherwise r+

Agreed, i'll try and drop that.

I'm a little confused about something: modules in devtools-sham that depend on other devtools-sham modules. For example, `public/js/lib/devtools-sham/transport/transport.js` has all of these:

```
const DevToolsUtils = require("devtools-sham/shared/DevToolsUtils");
const { dumpn, dumpv } = DevToolsUtils;
const StreamUtils = require("devtools-sham/shared/transport/stream-utils");
const { Packet, JSONPacket, BulkPacket } =
  require("devtools-sham/shared/transport/packets");
const promise = require("devtools-sham/sham/promise");
const EventEmitter = require("devtools-sham/shared/event-emitter");
```

and yet I don't see those in your list and I don't see any changes in transport.js.

I think I understand now, it's not that you got rid of files like `DevToolsUtils` you just split them. So now there are two files, `public/js/util/DevToolsUtils.js` and the one in devtools-sham. That seems a little confusing... I'd rather make changes like this on m-c first and update our `devtools` files accordingly and start using them. But if you're willing to help pull in changes from m-c (I'm about to work in DevToolsUtils) and consolidate all of this, it's fine.

@jlongster I'm fine with being an intermediate step. Hopefully, we can have a DevToolsUtils (or something similar) in m-c use.

I'd like to merge this in as it seems like a helpful step forward.

Not sure what you mean by "hopefully we can have a DTU in m-c", as there already is one and we just need to de-chromify it. Once we do that, we should be able to pull it in directly and use it, and we shouldn't need anything in our `utils`, which is why this felt like an extra step that will go away soon. I guess it just feels weird to call our local file `DevToolsUtils`, when we already have `utils.js`, so now we have 2 util files. I'd rather just add the functions to our local `utils.js` and over time we'll pull more and more from the standardized `DevToolsUtils`.

@jlongster summarizing what was discussed earlier -

utils/DevTools (reportException) utils/utills (zip, entries) should be temporary. 

done

I'm not in love with the green either. We need something to stand out, so that's probably why it's a different color.

I like the idea of flashing, but we also need to remember the use case of someone stepping through code quickly. I think the current design works well for that: it's quick and simple. Any flashing/scrolling would be jarring if stepping through code intentionally. And there's no clear disambiguation between stepping quickly through code and the "initial pause".

I think a simple improvement could just be better highlighting of the pause line. Maybe a better color, and make it stronger with a border or something. Is there any other part the UI we could say "paused" with a bright color or something? That would drive it home too.

Yeah we can remove it! I did that once and it looked a little weird, but maybe that's just because I'm used to it.

Alright, I think this should be fixed:
https://github.com/jlongster/debugger.html/commit/15eb6d767b2fbff9ef8cfdc89cbc3bf69b693c4c

In addition to turning off the flakey test, I cleaned up the many warnings we were getting. I'll look into how to handle the flakey test "Load Source Text Failed" later. 

Yea, I agree that highlighting the pause line is the main thing. Would a badge on the right help?

@jlongster I noticed that you are using `t.struct`. If you don't plan to attach methods to those `struct`s, you may want to replace `struct`s with `interface`s:

``` js
const Location = t.interface({
  sourceId: t.String,
  line: t.Number,
  column: t.maybe(t.Number) // <= t.maybe instead of t.union
}, "Location");
```

the main benefit being that `interface`s don't build new instances (e.g. `Location` in production mode will be an identity function https://github.com/gcanti/tcomb/blob/master/lib/interface.js#L49) so they should be more performant.

Thanks @gcanti 

I would separate out the initial pause and the paused / stepping through code as two different stories.

For the initial pause story I think we want to tell people the what, where, why story.  That might mean that we flash (though I think the inspector flash is a little too contrasty) the break point in the break point list and then the line in the code mirror page.  To me that would mean, "this breakpoint, at this line of code in this file".

Then for the paused state and stepping I think we want to make sure people know that they are paused and why (where the breakpoint is).  But because people are more closely watching the interface at this moment we don't want to be flashing the whole lines anymore.  More likely I think we want to subtly tell the story of the motion of the steps, i.e. when the pause state moves from one line or file to another it shouldn't feel jarring.  Also I think this story starts to expand when try to explain to people how the variables are changing as you step through; both in the variables view as well as something more inline like Chrome is doing.

Good thing I went over the list of issues, since this was the first enhancement issue I was about to file.
It's really the first thing you need when starting to debug since there are so many files in an average project.

I'm wondering - what's the reason to replace the editor rather than open a modal?

I just opened the debugger for the first time, and when I saw this space I immediately tried to focus on it for filtering files :)
So filter is oh so natural there, however that might have happened because I was looking for this functionality, and couldn't find it elsewhere. Plus, the space exists so it made sense for me to look for functionality there. If it didn't exist, maybe I wouldn't look for it there.

Can you change it to a dev dependency? It's only needed when developing. I bet this got dropped when the dependencies were restructured.

This also has linting errors. I will be working on scopes today and heavily refactoring this code (for better tree handling so we might need to just close this PR). Let me see what my work looks like though.

Can I just fix this (or other beginner bugs) and do a pull request? Is there somewhere where I can see who's working on each issue?
(Sorry for the beginner questions.)

Hi @ilsncohen. Go for it!

I'll be on PTO till Tuesday. So do whatever feels right. 

Glad the scopes page is getting some love 

What do you recommend? Not sure if I follow. 

@helenvholmes ^

This is as fairly large issue, but couldn't be split up nicely if you're interested in taking a stab. E.g. Fuzzy search can come later. 

I think replacing the editor was suggested as it's cleaner. I'd be open to trying a modal. 

Three use cases are searching files, functions, text. Full project search might make sense either way. I like how many projects show results in the editor with a new tab

- could be broken up. (Stupid mobile input)

Awesome, thanks!

I need this to turn on the new hot module reloading feature, so I worked on the config for a bit :p

I have no idea what's going on with Cypress. It's acting as if the development server isn't even running, and I cannot reproduce it locally. It was errors out with "can't reach the page at localhost:8000", and I've been trying to fix it for a while.

In order to make progress in the next few days that Jason is gone, I disabled cypress. We don't have that many integration tests yet anyway, and I don't think it's a crucial part of our workflow yet.

I'll work with Jason when he gets back to fix it.

I bet I know what happened: you might be using an older version of node that doesn't flatten dependencies. Looks like minimist is installed for me, but it comes from another dependency of mine. Later versions of node flatten dependencies and stuff like this happens.

I'll move it to dev deps and go ahead and merge this, thanks!

I think I know what he means. I've seen the scrolling behavior get a little wonky before, but I'm not sure if that's what he saw. Can you tell us which browser you are using and more info? In Firefox, the tree does try to implement scrolling behavior.

:thumbsup:

No worries. Happy to investigate on Tuesday. The easiest place to debug is in circle with rebuild w SSH. You can look at the circle config to see what is being executed as well 

Nice cleanup. 

Sources+SourcesTree looks nice. 

What's the benefit of adding actions to window? It's that for hot-reloading as well. It could also help with integration tests I suppose as well. 

You mean an older version of npm, yes. I was on npm 2 and was planning to upgrade to 3 for some time. I finally did it now and verified that it works without the dependency. But I agree it's good to have it for the sake of npm 2 users. 

BTW, with npm 2:

```
$ du -sh node_modules
776M    node_modules
```

and with npm 3:

```
$ du -sh node_modules
199M    node_modules
```

> What's the benefit of adding actions to window? It's that for hot-reloading as well. It could also help with integration tests I suppose as well.

Good catch! I was down a deep rabbit hole trying to figure out why hot reloading wasn't working correctly, so I exposed it so I could manually fire actions. I agree that we should think about ways to inject things like that. We already have a function that injects something for tests, we could make that expose things like actions to the window as well.

We might need to do that for mochitests, actually... they won't have direct access to the modules, as far as I know. But we'll talk about this more when you get back.

I'll remove that code for now.

Not totally related to this, but: I know I've changed a few things that back from what you've changed, so I'm sorry about that. When you get back we'll talk about the config system and reconcile what we're thinking. I like how you are using it for feature flags. Just need to figure out how config works on server & client and how we'll integrate with firefox.

Oh, thanks for pointing this out. I was wondering how `babel-register` was working before because it's at the top of the main file, but babel is only registers for subsequent requires. Basically: it doesn't compile the current file it's in, and it looks like some destructuring was added there.

For now, I'll remove that destructuring. What I've done in other apps is have a `run.js` file that does the babel-register and requires the main file, but that feels like a hack. I'll see what Jason thinks when he gets back. I'd rather not have another top-level file.

I'm referring to the scroll starting when the selected file is still around the middle, rather than it being the last. See this video to better understand: https://youtu.be/kgodmlaNgtc

I would expect it to just reach the last file and if I press down arrow, then it scrolls with me. Very standard, I think

Got it. I didn't know about babel-register. Thanks.
At least this got me to 6.2.2 finally :)

Oh neat, thanks! I immediately found the problem: I was using destructuring and development-server.js is not compiled by babel so it was failing on circle's version of node 4... Yeesh, totally my fault. Fixing issue https://github.com/jlongster/debugger.html/issues/284 should fix this.

We should be able to compile this file, but we can figure that out later.

This is actually the reason cypress was failing on CI because CircleCI uses node 5. Sorry for breaking this!

Wellp, I'm an idiot and didn't realize #284 made it so the site wouldn't even run on Circle, thus integration tests were failing.

@jasonLaster Looks **great**! That's exactly what I was thinking, but I didn't feel like going through all that quite yet. Once we do that, we can use `fs` methods in the config and be smarter about checking if config files exist.

The query params are not config flags to me. They are just runtime options, and all 3 codepaths can be used in the same session. That's why I'd prefer to keep that code close to where it's actually used, as it makes it clearer how things get set up.

But the DEVTOOLS_PANEL flag probably should be abstracted out.

Just renamed this bug for the third time. Some explanation if you don't want to read everything already in the bug:

The area above the source tree was originally a filter, which seemed redundant. We weren't sure if we wanted it or not.

<img width="631" alt="screen shot 2016-06-30 at 11 10 37 am" src="https://cloud.githubusercontent.com/assets/1720093/16493401/553f0384-3eb3-11e6-87c5-37d9a4840d60.png">

We removed it in #262, although now the space seems like it's floating. (See comment 0, ["purely visual reasons"](http://cl.ly/0a1n2h2N402P).

<img width="395" alt="screen shot 2016-06-30 at 11 12 51 am" src="https://cloud.githubusercontent.com/assets/1720093/16493480/9cb0ae16-3eb3-11e6-9bcc-e4e7aaf5b68d.png">

Working suggestion for this is that we bring the Sources header area back and put "Sources" in it. Just a label, with the idea that the space will eventually become tabs, or a filter input, or something else. 

@helenvholmes - I'll put that header (back) in.

@helenvholmes no, I'm happy to get the backstory! I just got into this project through Jason, and it's bnice to understand where things are coming from/going to.

Yep, that would do it :)

You're doing great dev ops work this week. Bundle+task runner, then hot reloading! 

Thanks @amitzur. 

Nice catch. 

Haha yea that is strange. 

We're using another tree library, so this fix might have to land in gecko. I don't want to discourage you, but just give you a heads up. Either way, it'd be nice to see where the behavior is coming from. 

Haha wow, i guess top level dependencies are better for my computer. I still hate we have like 800 deps :/

So many possible left pads

Feel free to ping me tomorrow!

We should work with Helen to figure "selected" states in general. The state for a breakpoint that is currently paused is that it is "selected". The problem is that several things in the UI can be "selected": the current source, frame, breakpoint, scope item, etc. We should figure out the right way to highlight everything that makes sense. Some of those may not need to be highlighted at all, like the "selected breakpoint" which doesn't seem very useful to me.

@clarkbw looks good. Sorry I can't help more on the click handler. Commenting from my phone. 

We've already made local modifications to the tree. Before landing, we'll need to reconcile them with mozilla-central. I plan on diffing the files and figuring them out. I'd avoid making big changes to tree.js, but small tweaks are OK.

That's it from me, mainly a few questions.

Added more comments and switched to `Array.isArray`

All of this code was refactored in #288, with any feature in here integrated there, sorry!

If you fix the linting error, I'll merge this

Also, I wanted to run Cypress tests but I didn't have it installed. I went to their website and saw it was only for early adopters. I unwillingly gave my email address, but then came a huge form that they asked me to fill out.
Isn't there an easier way to get it?

Haha yea, cypress does have a big form. I'll update the readme soon, but we have a relationship with them so they'll give you access if you ask in their gitter channel. 

Another thing to keep in mind is that conditional breakpoints also show their expressions. 

Yes, you're definitely right. We gotta get the file name in there.

It looks like the Breakpoints components already merges in the full source object, so you should be able to get the URL with `breakpoint.getIn(["source", "url"])`. I could be reading it wrong though.

I think showing the condition for cond breakpoints might be too much noise, and I'd like to figure out a way to show it if the user clicks on the bp or something (not sure).

Merged. Thanks for the cleanup

Merged this PR as it looks good and created a new issue https://github.com/jlongster/debugger.html/issues/291 for discussing the UI

Created a new issue for discussing the breakpoint UI https://github.com/jlongster/debugger.html/issues/291. I think what you have is good and we should keep it, but worth discussing more in depth as well.

I didn't mean to --amend the commit but I did, sorry. I added a section about Chrome, what do you think?

Merging as it's really easy to do follow-ups if there we decide on anything different.

Just added this to the readme.

@gcanti Interesting, thanks! I will look into that. I'll be working on this today.

I started this work here: https://github.com/jlongster/debugger.html/compare/master...jasonLaster:editor-btns?expand=1

Happy to let someone pick it up and see it through.

I noticed while playing with it that overlaying the buttons as a bottom bar looked awkward while scrolling through a file. It was not clear how much opacity to add or how wide the bar should be.

It might be easier to move the footer below the editor so that it is a little more readable. 

That's my fault. I forced the scopes to never wrap and broke the scrolling in that work. I'll fix it asap. I thought it was still scrolling but some of my last-minute changes must have broken it.

I'm just waiting on the Cypress account to finish this up.

Looks good to me! Just a few comments, but nothing crazy. r+

merged

@jlongster I couldn't get to the file name with `["source", "url"]` either.
It looked to me like `["location", "source"]` could work since it has an entry, but its value is undefined.

@jasonLaster thanks for merging!

Nice catch @amitzur here's the fix https://github.com/jlongster/debugger.html/commit/f85e63bd6a5dd89bbd5eb8859accd6f6cae8d290

no worries - thanks. you fixed it so fast i thought i had lost my mind. couldn't reproduce this morning

Sounds good

I'm confused. I already merged this? https://github.com/jlongster/debugger.html#screenshots

Looks great. I was just thinking that it would be good to write guidelines for redux and react development, as there are several ways to do things but we desire to have one specific workflow. The local dev doc is really helpful especially.

oh ha - thought that was against my fork.

Cool, looks good! r+ with minor nits/linting fixed

@jlongster for any doubt or clarification, feel free to contact me or write here, I'll be glad to be of some help

That would be great. I like the pattern of having a README, top level docs for guides, and then more topical docs inline that we can point to

merged

I'll have something soon and would love to have you look over it. Thanks!

Looks good!  @jlongster r?

Looks good! I wish the fixture updates didn't change the IDs every time, but that's a separate problem.

> I wish the fixture updates didn't change the IDs every time, but that's a separate problem.

Yeah, it makes the diff really hard to comprehend.  Would be nice to have that fixed.

@gcanti This is where I ended up: https://github.com/jlongster/tcomb-immutable-experiment

Unfortunately, I need to make sure that immutable.js' API always returns typed objects. This actually wasn't as hard as I thought, but there are holes. For example, `mergeIn` does not work with maps where it automatically created nested maps.

It was a successful experiment though, and I'm going to play with Flow right now. Not sure where we will land.

What are those karma errors? I'm sure it's not related, but I haven't seen them before

i'm not sure. i might have seen it after london once or twice...

For some reason I don't seem to be able to trigger a rebuild. Do you mind doing that (even by force pushing) and seeing if it's an intermittent?

I pushed this work with the pretty print work yesterday. The current version needs some polish, but I think it's good enough to close this issue and open new ones later

Once we decide what we want from DevToolsUtils we should be unblocked

#274 is a duplicate

Cool, I like this direction a lot, just a few things to think about. This looks good generally! 

looks intermittent

https://www.npmjs.com/package/invariant 

The configs are now managed server side and injected with webpack. This will make it easy to use nconf or another solution. 

Also probably worth thinking about any actions that are available from the breakpoint list.  Should the entire line toggle the breakpoint on / off?  Or should some part of the element navigate the editor to the breakpoint?  Or maybe some hybrid of those options?

Interesting, I think the more standard behaviour is actually a less desirable UX.  I agree 100% that I don't like how the scrolling looks jumpy on every navigate, it would be better if it made a larger scroll once for every couple moves.  However I think the "standard scroll", where you reach the end of the viewport and then it scrolls the next item, is worse UX because it prevents you from being able to see how much further you might want to travel.  I don't think there's a good argument for hiding the next item until you navigate to it other than that's what computers have been traditionally doing.

Going to close this out, the pastebin expired and I don't know that we have any more reports.

Most people's concerns with Flow is that it doesn't work on Windows, but the have tests running on windows (see the badge in the [readme](https://github.com/facebook/flow/blob/master/README.md)) and are going to announce official Windows support very soon.

That's a compelling argument and an interesting discussion. My thoughts - 
1) I wouldn't downsize the importance of what users are accustomed to when estimating UX.
2) I don't think inventing the wheel is the right thing to do in this case.
3) In our case I don't think navigating the tree should even be the mainstream way to browse between sources. That should be done with a file opener like in issue #158 . Running through sources in the tree is more a "get to know thy tree of sources" kind of interaction.

I like it! We may want to remove the space after `:`, as it's a common format to have `file:line:col` as a location. But I'll go ahead and merge it!

#310 Adds a V1 version

This is a significant time investment. It probably is not worth pursuing now. 

not sure why cypress is failing here...

We already have several changes that allow us to run files directly from m-c. These files live in public/js/lib/devtools. There are still some important files in devtools-sham, which are the hacked up versions. client/main.js is an important one.

We've discovered that we don't really need that many files from m-c. The protocol client is the only thing we really need. We can easily use other utility libraries instead of DevToolsUtils, and I think that's ok.

Given the above, the only thing really left here is to work on client/main.js in m-c and make sure we can copy it over with no changes. 

looks like it's karma being flakey... not my day w/ ci :/

Nice find @clarkbw 

We discussed in channel having a `translate` function which in development is a no-op, but in the toolbox uses `l10n`.

We can test this technique when we have a bundle.

Would be nice if there was a new tab button (next to the tabs) that would display the blank screen with just the searchbox.
It would make the searchbox more discoverable.

We might not be getting enough out of karma yet for it's flakiness right now. Maybe we turn it off for a few weeks until we have better tests? I'm focusing on tests now in addition to my work with flow.

This PR looks good, but maybe tweak the names (see comments)? r+ otherwise

https://bugzilla.mozilla.org/show_bug.cgi?id=1286390

I'd like to keep `karma` on, but just handle the flakiness by running the test twice and seeing if one passes. That's what i've been doing with cypress and its been fine. 

@nt1m that's a nice idea. @helenvholmes ?

Very cool! My only nit is that it says _exactly_ what Chrome says, and it's an easy thing to word differently to avoid looking like we're copying them word-for-word. If you tweak that you can merge it

Cool. I'll go ahead and merge this. I think we should turn off karma until we figure out what's going on.

Here's what needs to get done:
- [x] Bug filed
- [x] Needs Patch
- [x] Need Patch Reviewed
- [x] Try Build
- [x] Check into m-c
- [x] Request uplift to Beta

@jlongster I wonder why we can't display the searchbox directly instead of that message. 

We don't have very many unit tests yet though, and what's being tested really shouldn't behave differently between browsers (although I def think we'll want karma in the long run), so personally I think node is OK for now. Just for a little bit while we figure this out. It's really annoying not knowing if a failure was your fault or not.

> I wonder why we can't display the searchbox directly instead of that message

I was just wondering that as well.  We can do this as a follow up to improve upon this.  Would be a much simpler issue for anyone to take on once the rest has been done.

I think we want to teach people the keyboard command to always bring up the search so we'll want to show it no matter what, but I think we could display it directly under the input.

@helenvholmes ?

We already have a rule in the [.eslintrc](https://github.com/jlongster/debugger.html/blob/master/.eslintrc#L51) file 

We need someone to investigate if the rule is still accurate and / or why it isn't showing a warning.

Once fixed you can either file a new issue for any errors that appear or fix those errors in a separate commit. 

Yep, I'd say we need some instructions on getting Node installed / updated to a recent version like 6.3.0 that includes the `inspect` option.

Something like:

```
$ brew update
$ brew install node (or brew upgrade node)
$ node --version
$ 6.3.0
```

If upgrading node is an issue possibly include using `nvm` (node version manager)

```
$ brew install nvm
$ nvm install v6.3.0
```

Then instructions for running node with inspect turned on:

```
$ node --inspect server.js
```

I think Bryan's put it well that there are two stories here.

Is it possible to separate out initial pause and subsequent pauses? If such, we might design differently for each use case.

As we discussed, flow could present a problem for new contributors.  However we believe that flow is actually fairly easy to read and understand as the typing only creates greater clarity.  Writing in flow is not much more difficult than standard JavaScript and given the benefits of a type checking system (which we desire) where flow seems the best suited we have decided to move forward with this system. 

For future contributors we should strive to make sure that the tooling is just as simple as it is now.  Assuming commands like `npm start` continue to trans-pile code in the background I don't think we'll be adding any undo burden to contributors internal and external.  

We should certainly followup this change with improved documentation that links to the excellent flow docs and quick snippets of how to write in flow.

One last thing worth considering is if other devtools.html projects are going to use flow as well.  Being the only project to use flow could make things difficult for contributors internal and external.  However if something like the console.html project also used flow I think that would be more than enough to tip the scales of momentum in our favor.

This looks good. Maybe add a step about selecting the node process from the tabs page. 

Long-term, we should definitely be in sync with other tools and either all or none using flow. I agree that's important. For the next month or so, I would consider our Flow usage experimental and learn enough to be able to decide whether to try and convince the team to use it or not. It's worth noting that it would be very easy to remove Flow: the remove all type annotations (and there aren't very many thanks to its inference system).

I believe we could do it. I'd like to see what you design in each scenario

Very cool @jsnajdr. Mind wrapping this work in a debugger.html feature flag? 

Our flags are in [development.json](https://github.com/jlongster/debugger.html/blob/master/config/development.json)
and are called with `feature.isEnabled`.

https://treeherder.mozilla.org/#/jobs?repo=try&revision=b4f145898118

> I wonder why we can't display the searchbox directly instead of that message

Could be nice. I'd like to see how this plays with other project level searches like functions or text and see what we can do

The hardest part about this was trying to type immutable.js, which is certainly possible but required me to learn enough flow before I could get something working. You'll see `makeRecord.js` which is only partially used, which will fully type immutable records. We can't use it fully until 0.29 comes out with a serious perf fix (should come out this week). Right now, the state in `reducers/sources.js` isn't type-checked much because the Record type returns `any` from it's methods.

It also encourages us to use records so that we _can_ type check it. Switching the sources state to be a record introduced other problems, like not being able to use a naive `fromJS` anymore (which we keep running into). I wrote a `dehydrate` function which explicitly knows how to dehydrate a JSON-based app state into our immutable one. We were already using our own `fromJS` before anyway. There is probably a better long-term solution for this.

karma and cypress are still broken, and I bet storybook is too (all that storybook should need is to use `dehydrate` instead of `fromJS`.

There are 2 commits and if you look at the first one you'll see the most interesting bits. The second one fixes all the linting issues and other nonsense.

it looks like karma has some functions like `getSources` which are undefined. Is that related to dehydrate and/or selectors?

Overall, this looks great. A couple small style nits. I'd prefer and start small and use the features that are clearly helpful. There were some examples where flow added annotations that were verbose, and it was hard to see the benefits being worthwhile.

I'd like to merge this soon, but I also don't want to add it if we break karma and cypress. It looks like the cypress fix is easy though. I'm looking into karma now on master so i'll have a better idea where the flakiness is coming from.

Nice start, just a few nits but this looks good.

r-. Need to avoid eagerly loading every single source's text. You'll need to figure out where to store the sourcemap, and only dispatch `newSource` actions for each source in the `sources` property of `SourceMapConsumer`, and when one of those sources is clicked it loads it from the sourcemap.

It's great to be figuring this out though. As I mentioned on the other PR, I'm not sure where the best place to store sourcemaps is. We could probably put it in redux, and when we create fixtures/serialize it, ignore the sourcemaps field to reduce the size of it. Not sure.

> it looks like karma has some functions like getSources which are undefined. Is that related to dehydrate and/or selectors?

I'm not sure, but I bet it's my fault, I don't think I saw those errors in the previous flaky errors. I will look into those.

> Overall, this looks great. A couple small style nits. I'd prefer and start small and use the features that are clearly helpful. There were some examples where flow added annotations that were verbose, and it was hard to see the benefits being worthwhile.

Yeah, we'll figure out a balance over time. I think it's a good goal to type check as much as possible. The problem with holes is that they tend to "bleed out", but there are places where it's OK. The worst parts here was in parts of `breakpoints.js` where I did things quickly and didn't think much of it. There are probably more elegant solutions.

> I'd like to merge this soon, but I also don't want to add it if we break karma and cypress. It looks like the cypress fix is easy though. I'm looking into karma now on master so i'll have a better idea where the flakiness is coming from.

Yeah, let's not merge it until I fix it up a little more. I'll look into karma too because I'm pretty sure this error is my fault.

found the cypress bug, was a nice catch. There was a bug in connect clients that i wasn't catching because i was debugging chrome with source maps and not firefox.

will open a more focused PR

Added a feature flag as discussed above:
- `firefox.webSocketConnection` to enable the direct WebSocket connection without a proxy
- `proxyPort` and `webSocketPort` prefs to configure the ports separately
- `--websocket` cli option for the `firefox-driver` script

Also, I'm now using a new `WebSocketDebuggerTransport` to connect to the remote server. It doesn't use the length prefix and sends the JSON strings directly as WebSocket text frames. See how simple it is compared to the classic `DebuggerTransport` when it doesn't have to deal with all the messy details and just leverages the WebSocket capabilities.

You need to use an up-to-date patch from [bug 1286281](https://bugzilla.mozilla.org/show_bug.cgi?id=1286281) that supports the new transport.

Thanks @jsnajdr.

The test failures are coming from our integration tests that do not have latest patch. 

I think this feature makes sense off by default. That way contributors can opt-in if they want to run off of head.

Of course, I forgot to disable `webSocketConnection` before committing and pushing. Coming soon in the next commit.

It's looking nice, there are things to discuss but this can merged. I'd like to see two things before it's merged: cache the actual `SourceMapConsumer` instance (so it'll only be parsed once), and rethink the "original" terms. I want to make sure we don't get stuck on original/generated again.

Thanks. This work is largely improved by the next PR, which touches the editor. Lets discuss terms there.

Looks good, it probably would have been nice to merge this with the previous PR so I reviewed it together :) But this is coming along nicely. The only thing I don't like is the internal state of consumers, and needing to clear that out on navigation.

Another idea is to do what you are doing now, but instead of keeping them in a Map, keep them in a WeakMap keyed on the source object. The source object isn't something we ever update, so it should always exist as the same instance. This way you wouldn't have to ever care about managing the `Map` itself, i.e. clearing it.

This work is being tracked in #325 

I give my permission to license under the MPL 2 any contributions I have made to the debugger.html code base.

The original bug for those changes is here: https://bugzilla.mozilla.org/show_bug.cgi?id=1246313

Other useful resources:
- [theme variable colours](https://dxr.mozilla.org/mozilla-central/source/devtools/client/themes/variables.css)
- [light theme CSS](https://dxr.mozilla.org/mozilla-central/source/devtools/client/themes/light-theme.css)
- [search devtools theme directory for codemirror CSS selector](https://dxr.mozilla.org/mozilla-central/search?limit=100&redirect=false&q=.CodeMirror%20path%3Adevtools/client/themes%2F)

Looks good, I hope we don't use UA-based checks often but it's fine for this fix.

Thanks!

See #308 for a continuation of this issue. We've decided to give Flow and try, and while we haven't converted everything over yet, we will do so in increments. tcomb still exists in the tree but we will remove it soon. I think we have a good story for typing everything, including the app state.

#325 has been merged. Flow is integrated into our workflow and we can introduce types where we want.

> press cmd+P again to hide it

ah ha! I couldn't figure out how to hide it!

There is a work in progress here #333 

haha - there are clearly some UX things here. We should open some small tickets for file search UX.

Thanks @jsnajdr! Out of curiosity, how was the getting started steps? Were there things we could improve to make it easier to contribute?

Don't have many thoughts on this, but the magnifying glass is aligned for me in Firefox...

yeah, although this might be something people would just expect... not sure how far accessibility has come in setting expectations :)

oh strange

> but the magnifying glass is aligned for me in Firefox...

Same here.  Otherwise looks like a good list.

closing. talked with @fitzgen in IRC. generated/original are terms used in the spec, so we should be consistent. 

I'm about to write tests for things but I wanted to land a few features in this sprint. We should talk a little bit about component unit tests next week because I have some ideas.

Sounds good

https://egghead.io/lessons/javascript-redux-colocating-selectors-with-reducers?course=building-react-applications-with-idiomatic-redux

The only slight annoyance is that we don't use ES6 modules so it's a little harder to export the reducer as the "default" import, but we'll just need to tweak what was pass into `combineReducers`. I played with doing this already (because it was easier to make Flow type a few things) but it got a little awkward with how we import/export stuff.

It's no rush to do this, but reducer tests might encourage us to do this because we can import a reducer module and directly get all the selectors as well. I may look at this next week.

Work is being done in #341 

awesome!

Yes, that is a separate project that a few others are working on (not as a separate repo like we are yet). This repo is focused on the debugger itself; the integration will happen at the toolbox level. We aren't sure what that looks like if people want to embed this debugger in other places, but we'll figure that out down the road.

Thanks @svenvNL

Technically it is, but only as part of the Firefox codebase. Firefox is mirrored at https://github.com/mozilla/gecko-dev/, and parts of the console are being rewritten in a fork: https://github.com/devtools-html/gecko-dev. But it isn't fully using github like we are yet.

Closing as the console isn't in the scope of this project. We'll file a new issue about integrating a console in a later sprint.

Looks good. 

that's true. 

I'd be happy to codemod our modules to [es6](https://github.com/nolanlawson/cjs-to-es6). I've been thinking about default exports for some time. 

New implementation. This removes some of the burden of the reducer, making it easier to share `ObjectInspector` with other projects. We will probably rename this fields when we make this state more generic.

This is looking really nice! 

looks good. i like that the reducer is simplified. 

Jason and I decided that this won't get done until next sprint, since there's only a few days left.

I think this should be configurable. The `configureStore` function should take another argument like `devtools` that defaults to false. I'm not going to use this much of the time, and it has a pretty significant performance impact.

fixed in https://github.com/jlongster/debugger.html/commit/93a7cde13783359917d752d7e4913f5034b5437a

This is something that we have marked as a need-to-have for the console too.

Do you have thoughts on how to display values for the RemoteObjects that are coming in? The Rep system is hardcoded to expect a grip structure, but can be extended to include Reps to handle Chrome RemoteObject structures.

This is awesome! A lot of good stuff that we can do. To bring another viewpoint though, I have two things:

It sounds like you want the readme to be a contributor's doc basically. I'm not sure I agree with that. A readme should be a succinct description about how to get the project running for a variety of people, including advanced people. It is a very basic part of the workflow to start Chrome on a debugging port, and dedicating 1 paragraph's worth of space for these commands is extremely useful IMHO. I don't want to turn away advanced people either. There are projects where I look around and constantly think "just freaking tell me how to run stuff!". I love readme's that are more of a cheat sheet to get thinks working quickly.

We should make another doc which is the "getting started" or "contributing" doc (you already started one), and the first section of the readme should explain that and link to it.

The other point is that we should balance our investment in docs. There are still things that are changing drastically, and it's too early to have things like screencasts for some things (like testing, lots of things are changing). We have a **really** tight deadline. Let's not get too distracted with documenting things that will be out-of-date by the time we finish documenting them.

Eventually we will want to move any documention to https://github.com/mozilla/devtools-docs, because we will be sharing the same things across multiple tools.

Generally I love these ideas though, especially managing issues better.

@linclark I haven't looked at how Rep's handles grips, but theoretically it doesn't do too much. It just uses the "preview" object that a grip has, which is an object that has a few key/vals from the object already. So we could either move that logic into the `ObjectInspector`, or make a new Rep that handles whatever Chrome has, and hopefully all that does it traverses the structure to get the "preview" object.

I don't really know yet, just thinking off the top of my head. Need to look into it more.

> It sounds like you want the readme to be a contributor's doc basically. I'm not sure I agree with that.

No, that's not the intent for the readme; I agree with what you're saying.  And we already have a contributing doc to use for getting people started with longer docs.  I want the readme to have the get up and running docs and actually the Chrome section was a bad example to use because that probably does belong in the readme.  

I'll file a separate PR for the readme so we can work through this but the goal here most certainly isn't to hide things from advanced users, we are building a debugger so many of our contributors will be those types.  Its mostly trying to look at the readme from an information hierarchy POV.  The greatest number of people will just look at the readme to understand the project, that area is poorly undeserved right now.  Next is people who just want to run the project to play with it against Chrome, Firefox, and Node; we need quick run docs for that and links to further docs in other places.  Next is the much smaller set of people who are looking to contribute and I think its actually pretty hard to get "quick run" docs for these people; maybe I'm wrong there.  But there are a lot of instructions involved no matter what you're trying to do to help.

I hear what you're saying about docs and I agree that our priority focus needs to be on shipping.  Certainly much of the docs we write now will be outdated soon enough but we're never finished so waiting until that moment to write docs usually ends up with no docs.  It is a balance.  Docs for things like flow would be premature right now, however I need the cypress docs just because I'm always forgetting how to get it all up and running and cypress is still up in the air.

Yes, definitely agree that it's a balance :) I think I was mainly thinking about things like screencasts, which are time-consuming to create and very hard to update (you basically need to make a new one each time). But having docs is definitely good, even for things that might change next week.

The readme could be a ton better about explaining what this is, yeah. As long as it's super clear how to do the most basic things (open chrome, debug current firefox, turn on hot reloading, etc) that many people getting started will run into, I'm ok with that. That may even be a separate document, but if it's clearly linked to and explained at the top of the readme that's probably fine.

Thanks @clarkbw for bringing this up

I'm in favor of keeping the readme a "high level overview of the project". 

Information like running the debugger, debugging a target (firefox, node, chrome), ... testing is best described in specific documents. I started this with integration tests and I'd like to add unit testing as well. IMO, the readme should be a cheat-code on the most needed information for getting started and link to topical docs. 

> advanced / beginner contributors 

I think it's also important to think about internal and external contributors. The internal contributors might have the project context and quickly jump to the topical document they need. The external contributors will benefit first by learning about the product and team, and then other information. 

> another channel like gitter

I think that could be a great idea. gitter does a good job of notifying you when somebody pings in channel. With something like that, it could help first comers / lurkers stay involved. Gitter was instrumental for Backbone Marionette, we were the first org to adopt gitter (gitter is built on Marionette so we had an in) and our community grew to 3k+ quickly and has been a huge win for the community.

"lib" is a very common term (many projects have src/lib/dist/etc dirs) so I agree that we shouldn't change that. I'm fine switching to "utils" though. Eventually we will consolidate them somehow anyway when we don't have the devtools/devtools-sham stuff going on.

This makes sense to me. I see feature flags and config as very different things anyway. Usually the feature flags exist only client-side to disable or enable features, and config is used heavily by the server just for parameterization (client can use it too). Basically, feature flags are just booleans for the client-side, and could be specified separately than config.

It's also common to turn on/off feature flags depending on feature detection, while config is just a simple thing to read from json files.

Anyway, all that to say I think this makes sense. We could still use nconf for config, as feature flags are sort of a different thing.

README and CONTRIBUTING update coming in #352

Meant to add `[ci skip]` to the commit

README screenshot
![screen shot 2016-07-15 at 14 33 43](https://cloud.githubusercontent.com/assets/2134/16889147/2ee110f0-4a99-11e6-965b-ac60db18149c.png)

This looks great, I thought you wanted to move some of those instructions for getting debuggees running to a separate doc? I'm OK with that if you want to.

This looks awesome though!

> move some of those instructions for getting debuggees running to a separate doc?

Yes, and It still looks too large, but I wanted to have the basic instructions available for people.  I'm looking at moving it to the "empty page" where its likely more useful.  "Here's how to get Chrome running"  And if I make a linkable doc like you suggested I think we can link to help getting debug targets running.

Thanks this is great. 

If you're interested in cleaning up or svgs. I believe we're consolidating them in an icon js file so they can be required directly. 

It would be great to move these in there and then require the new react components. The advantage is that it avoids http requests. 

Looks great. +1 on a doc for debug targets and utilizing the empty page. 

Couple comments
- Top section should include chrome debug protocol
- Top section should include npm aswell as GitHub. Npm makes it embeddable. 

Also, if you'd like to branch out from svgs we have this fun ticket https://github.com/jlongster/debugger.html/issues/338

Looks great

Hey @svenvNL, this should be possible to debug by looking at [App.js](https://github.com/jlongster/debugger.html/blob/master/public/js/components/App.js#L36). The keydown handler is set there and you can easily add a breakpoint in `toggleSourcesSearch`. It might help to change the handler to open file search on another keystroke like just "p" and see if that resolves the issue. Happy to help debug further. It's also possible you're branch is not on latest...

@jasonLaster I've been actually playing with debugger.html for several weeks prior to working on this patch, and it went really well - you just call `npm install` and `npm start` and you're up and going.

The only small trouble I had was figuring out how to start Firefox with the debugging server on the right port. I wanted to use the version I built myself and avoided your Firefox startup scripts, so it's not your problem.

@jsnjdr great. We're actually updating the docs too make it more clear how to set your local profile for Firefox. 

@jlongster ready to go

waiting to uplift to beta

> waiting to uplift to beta

might want to check in on aurora again as it looks like beta isn't in the cards

Right now, we should explicitly state that Firefox is the only officially supported version I think, but it'd be fine to say "experimental" support for Chrome protocol (or something like that). We aren't quite in the phase where we can support multiple protocols because we're time-constrained and still building basic features.

This is looking good, the only thing that's confusing to me is the `getBreakpointText` method and using `actualLocation` and `location` like that. If you can, try to rework that before merging this because it's pretty confusing. I don't see why you can't just have:

``` js
let text = bp.get("text");
if (!text) {
  text = getTextForLine ? getTextForLine(getOriginalLocation(actualLocation).line) : "";
}
```

> selectors translate locations to original locations (useful for ui)

I'm wondering how you are thinking of dealing with the async nature of sourcemaps. Say we display a bunch of sourcemapped locations in the UI, and it shows the raw locations because it doesn't have the sourcemap yet. What happens when the sourcemap comes through? The selectors API is sync (and must be). Are you implying that we are going to update some part of the redux app state, which will rerender those locations?

It might be easier if it's only the action layer that does sourcemapping. Then you can provide an async API:

``` js
// "outgoing" messages that need original -> generated
dispatch({
  type: "ADD_BREAKPOINT",
  [PROMISE]: Task.spawn(function*(location) {
    const loc = yield getGeneratedLocation(location);
    return client.setBreakpoint(loc)
  })
})

// "incoming" messages that need generated -> original
function paused({ frame }) {
  const frame = yield getOriginalLocation(frame.location);
  // ...
}
```

These APIs would actually wait until the sourcemap is fetched & parsed if not already.

I don't know what the best method is yet, just discussing! Please keep doing what you're doing and it'll be interesting to see how it works.

I'll take this, I'm going to land the first version of #352 soon which should cover these details.

Trying to build some assets to help explain certain things.

![debugger - web browser](https://cloud.githubusercontent.com/assets/2134/16933811/babb4eec-4d05-11e6-8c7e-f133e54b756f.png)

@clarkbw nice idea

@jlongster agreed. The "experimental" language makes sense there

Just noticed this partially fixes issue #338 

Not sure why cypress failed. I still haven't managed to properly install it

> I need the cypress docs just because I'm always forgetting how to get it all up and running and cypress is still up in the air.

I agree, and what was a major hurdle for me to get into this project is cypress installation.

Edit: apparently I was missing `npm install -g cypress-cli` and then `cypress install` so maybe that should go in the readme

Want to spark a small design discussion here:
1. Autocomplete needs to know what it's showing. I guess that should go as part of its local state. Should that be an array of the origin indices from props.items ? Or a list of the actual shown item objects? Also, not sure if this needs to be an immutable data structure (what's the benefit?). Maybe a Seq like props.items
2. component state also holds selectedIndex which is initially -1
3. keyUp handler on the input

btw I mean to take this, not just discuss :)

Thanks @amitzur. That looks like a cypress intermittent. I'm not too worried as we run cypress twice (for intermitents) and the other passed fine.

That's pretty great that you fixed some of the tweaks (before you saw the issue).

in app,js, I changed

``` javascript
toggleSourcesSearch(e) {
    if (e.metaKey && e.key == "p") {
      this.setState({ searchOn: !this.state.searchOn });
      e.preventDefault();
    }
  },
```

to (change keybinding to 'p')

``` javascript
toggleSourcesSearch(e) {
    if (e.key == "p") {
      this.setState({ searchOn: !this.state.searchOn });
      e.preventDefault();
    }
  },
```

This worked fine for me and made file search work as intended.
1. I cloned the repo, 09871586abd9cbf5b557e0384ed9a2d49ad6c972
2. npm install
3. npm run

my browser opend the print dialog.
1. changed to 'p', everything works fine

oh, that's a nice idea. I was thinking about something similar as well. 

While you're in there could you replace (#dde1e4) with var(--theme-grey)
https://github.com/jlongster/debugger.html/blob/master/public/js/lib/variables.css#L38

Thanks @svenvNL what browser are you using? I could see this being a timing thing that might be out of our control.

I am running Chrome Canary 54.0.2799.0. The same happens in Chrome stable.

Thanks @amitzur. It's yours. 

> component state also holds selectedIndex which is initially -1

agreed

> keyUp handler on the input

agreed

> Autocomplete needs to know what it's showing

I'm not sure, at this time, I'm okay re-calculating the search results on enter. 

``` js
results = this.getSearchResults()
result = results[selectedIndex]
this.props.selectItem(result)
```

The trade off with re-computing search results is speed, but at the moment we're just doing a string.includes call on the sources, which should not be expensive.

I wouldn't worry about immutable objects here if you do want to store results state :)

Thanks @amitzur we have these docs, but they're new and probably hard to find
https://github.com/jlongster/debugger.html/blob/master/docs/integration-tests.md

not sure if the install steps are clear enough either

Ahh, @svenvNL I was just about to type that this is likely a mac/windows thing. Thanks for investigating. We probably want to find a shortcut library that handles this, but that's a great fix.

@svenvNL have you stopped by our irc room? 
https://github.com/jlongster/debugger.html/blob/master/README.md#getting-involved

Would be easy to debug in there :)

Thanks @clarkbw 

Send the quick and temp fix as a PR, #361

Here's a patch 
https://gist.github.com/eee5181639eae616388d6a9e223f63d4

shortened the if statement.

@jasonLaster I was late to request for the other issue that you suggested. But this looks really interesting. Plus, delving into the CSS should allow me to easily delve into the app. Can I take this issue?

Thanks!

@jbhoosreddy thanks. We'll find some more tickets for you soon as well

Looks good, I'll make a small ticket for replacing the values w/ variables

Lets also replace the CSS values with [variables](https://github.com/jlongster/debugger.html/blob/master/public/js/lib/variables.css#L38)

Since I want to write more reducer tests I'm going to look into this.

I'm closing this for now as it's something that we are _not_ going to handle for the next two sprints. We will get back to this after then though

we're changing directions to store the original location. closing and trying again. lots of good lessons here though

I like only dispatching actions in action creators (generally, not a hard rule), so this looks good! r+

yeah - i feel that way too. 

Looks good r+ (as mentioned on IRC you could convince me that we don't need the private underscore, I'm on the fence...)

ha - yeah. this is more a symptom of not having a clear idea for the util yet. it's a bag of functions that keeps changing based on my goals... when it settles down i'll see what we have :)

Here's an example for changing util to utils
https://gist.github.com/7f62e6dc854c5ac0ec7088c85a172b17

There are several other files in the util directory that will need to be mapped as well

Here's a sketch of what it will look like
https://gist.github.com/4f7a079d075c9d619b59f541c36b109b

there are lots of files that use feature.js that need to have their require's remapped

Thanks for this. I'll look at it now.

This will be very helpful. Thanks!

I really, really don't want to commit the entire console here. The debugger and console projects should stay separate and we provide ways to tie them together either in a toolbox or in some other custom configuration. We want to be removing devtools dependencies (as in checked-in) from this repo, not adding them.

Also, the console is not in this sprint, so I don't think we should be spending time on it. There is a lot to figure out about how to tie together the debugger/console outside of devtools but I don't think we have time right now.

sorry, should have added a disclaimer that i did not plan on merging this, just show how that it is possible. 

closing this as we don't want to merge. will link to the branch from the console issue

Here's a POC branch for showing how the console could be loaded in debugger.html

https://github.com/jasonlaster/debugger.html/tree/console

it still needs some libraries to be de-privileged 

Thanks. Yeah. I'm really happy with how this looks.

Thanks @jbhoosreddy. This looks great

Thanks @jbhoosreddy! 

By the way, I noticed that circle failed because your commit was behind by a couple commits. Make sure to always be rebasing, we move quickly here :)

@jbhoosreddy looks like circle failed. My guess it's because you 
a) need to rebase, 
b) need to update the .eslintignore file to move util to utils

@jbhoosreddy pushed the themes work. We now need to go in and update the CSS so that the two themes look good

makes sense. BTW, the keyUp on the input will take care of ArrowUp and ArrowDown, but the Escape I feel should go where the cmd+p shortcut goes, which is an event listener on the window defined in App.js

Thanks for working on this. I've been thinking recently that it's nice to consolidate selectors and reducers.

@nojvek we run the debugger.html as a standalone web page. https://github.com/jlongster/debugger.html#getting-started

I develop in chrome :) It should be very easy to embed the debugger in another environment. Let me know if you run into anything, I'd be happy to pair on integrating it. Also, embedding the debugger in other envirornments (atom, nuclide, vs code, ...) is a primary motivation for our project, so we would prioritize changes that make this easier. We want to build one debugger that works in all cases, initially we were thinking any browser, but with our app state we could conceivably support any language (a requirement for nuclide). 

agreed

It seems a little odd that loading original source texts is tied into loading generated source texts. You should get the original source texts at the time the sourcemap is loaded, right?

You described the problem as a user setting a bp in a generated source and the original text hasn't been loaded yet. Why is that a problem? If it's a generated source, shouldn't it be able to just send off the generated location immediately?

I don't have as much context as you though, so I'll defer to you. This looks like a good direction anyway and we can always change things later after we get a feel for how everything works. If you think this is how we should go, you can merge it. (I do request that you make the `loadSourceText` receive a normal JS object though)

> You should get the original source texts at the time the sourcemap is loaded, right?

We need the generated source to get the original source.

> If it's a generated source, shouldn't it be able to just send off the generated location immediately?

We need the original location for the breakpoint list.

well, this didn't last long... :)

ping @clarkbw any progress? Also, happy to help land this if you can break it up into smaller tickets

@amitzur mind approving this?

Ok, bunch of changes.  This is probably good to land for now as I've filed another issue for the default page and can make smaller updates to the docs later.

I give my permission to license under the MPL 2 any contributions I have made to the debugger.html code base.

I can start looking into this one tonight.

:+1: 

:+1: 

@jbhoosreddy want to take a look at this? 

@jasonLaster. Yes. I'd like to.

I give my permission to license under the MPL 2 any contributions I have made to the debugger.html code base.

Thanks. This is probably in `networkRequest` and in the [development-server](https://github.com/jlongster/debugger.html/blob/master/bin/development-server.js#L25-L37) `httpGet` function.

Looks good, r+

r+

@jlongster if you have any comments on the docs, it should be pretty easy for anyone to open a small pr on top of this. I'm closing this as the work is now a week old and it's important to land a change this big

r+

This might be addressed in part by the theming work as well #370 

It's more likely to be solved when we figure out how to just re-use Firefox's version of codemirror. Personally I don't care if the theme doesn't match in a local tab, but if we care about that, we could solve it in #370

Cool

I had to resolve a conflict, hopefully this doesn't break anything...

Need to spend some time soon converting most of the code to new stuff like flow/reducers+selectors/etc. I think landing the JS bundle in Firefox shouldn't be too hard at this point so I might find time next week for that.

Here's a patch to get started with
https://gist.github.com/ad9aa95dd24dd428df2cf35efabd496d

BTW, [it supports Firefox now](https://github.com/zalmoxisus/redux-devtools-extension/releases/tag/v2.3.1), though only Nightly and Developer Edition till Firefox 48, which gets released.

Thanks @darkwing. Ignore that for now, I think we'll have to move pretty printing to the client, so this will change pretty significantly

After discussing with @jasonLaster, I'm going to drop this one for now.

That's a very good idea!

Karma is flaky which really sucks :/ This should not be a problem.

@zalmoxisus Awesome! Yeah, I installed it locally and it worked great (nightly). Thanks for all your work!

The only reason I'd think we need it is for compat with other devtools modules. We don't need defer ourselves at all, right? We can just use `Promise`

@jlongster we might need to do something in the future. The solution might be to refactor those places too. 

Thanks @svenvNL what browser are you using? I could see this being a timing thing that might be out of our control.

Ahh, @svenvNL I was just about to type that this is likely a mac/windows thing. Thanks for investigating. We probably want to find a shortcut library that handles this, but that's a great fix.

@svenvNL have you stopped by our irc room? 
https://github.com/jlongster/debugger.html/blob/master/README.md#getting-involved

Would be easy to debug in there :)

in app,js, I changed

``` javascript
toggleSourcesSearch(e) {
    if (e.metaKey && e.key == "p") {
      this.setState({ searchOn: !this.state.searchOn });
      e.preventDefault();
    }
  },
```

to (change keybinding to 'p')

``` javascript
toggleSourcesSearch(e) {
    if (e.key == "p") {
      this.setState({ searchOn: !this.state.searchOn });
      e.preventDefault();
    }
  },
```

This worked fine for me and made file search work as intended.
1. I cloned the repo, 09871586abd9cbf5b557e0384ed9a2d49ad6c972
2. npm install
3. npm run

my browser opend the print dialog.
1. changed to 'p', everything works fine

I am running Chrome Canary 54.0.2799.0. The same happens in Chrome stable.

Send the quick and temp fix as a PR, #361

This is looking good, the only thing that's confusing to me is the `getBreakpointText` method and using `actualLocation` and `location` like that. If you can, try to rework that before merging this because it's pretty confusing. I don't see why you can't just have:

``` js
let text = bp.get("text");
if (!text) {
  text = getTextForLine ? getTextForLine(getOriginalLocation(actualLocation).line) : "";
}
```

> selectors translate locations to original locations (useful for ui)

I'm wondering how you are thinking of dealing with the async nature of sourcemaps. Say we display a bunch of sourcemapped locations in the UI, and it shows the raw locations because it doesn't have the sourcemap yet. What happens when the sourcemap comes through? The selectors API is sync (and must be). Are you implying that we are going to update some part of the redux app state, which will rerender those locations?

It might be easier if it's only the action layer that does sourcemapping. Then you can provide an async API:

``` js
// "outgoing" messages that need original -> generated
dispatch({
  type: "ADD_BREAKPOINT",
  [PROMISE]: Task.spawn(function*(location) {
    const loc = yield getGeneratedLocation(location);
    return client.setBreakpoint(loc)
  })
})

// "incoming" messages that need generated -> original
function paused({ frame }) {
  const frame = yield getOriginalLocation(frame.location);
  // ...
}
```

These APIs would actually wait until the sourcemap is fetched & parsed if not already.

I don't know what the best method is yet, just discussing! Please keep doing what you're doing and it'll be interesting to see how it works.

we're changing directions to store the original location. closing and trying again. lots of good lessons here though

@jbhoosreddy thanks. We'll find some more tickets for you soon as well

@jbhoosreddy pushed the themes work. We now need to go in and update the CSS so that the two themes look good

@jasonLaster I was late to request for the other issue that you suggested. But this looks really interesting. Plus, delving into the CSS should allow me to easily delve into the app. Can I take this issue?

Thanks @amitzur. That looks like a cypress intermittent. I'm not too worried as we run cypress twice (for intermitents) and the other passed fine.

That's pretty great that you fixed some of the tweaks (before you saw the issue).

Just noticed this partially fixes issue #338 

Not sure why cypress failed. I still haven't managed to properly install it

oh, that's a nice idea. I was thinking about something similar as well. 

While you're in there could you replace (#dde1e4) with var(--theme-grey)
https://github.com/jlongster/debugger.html/blob/master/public/js/lib/variables.css#L38

Looks good, I'll make a small ticket for replacing the values w/ variables

Thanks!

shortened the if statement.

I like only dispatching actions in action creators (generally, not a hard rule), so this looks good! r+

yeah - i feel that way too. 

Looks good r+ (as mentioned on IRC you could convince me that we don't need the private underscore, I'm on the fence...)

ha - yeah. this is more a symptom of not having a clear idea for the util yet. it's a bag of functions that keeps changing based on my goals... when it settles down i'll see what we have :)

Thanks. Yeah. I'm really happy with how this looks.

I really, really don't want to commit the entire console here. The debugger and console projects should stay separate and we provide ways to tie them together either in a toolbox or in some other custom configuration. We want to be removing devtools dependencies (as in checked-in) from this repo, not adding them.

Also, the console is not in this sprint, so I don't think we should be spending time on it. There is a lot to figure out about how to tie together the debugger/console outside of devtools but I don't think we have time right now.

sorry, should have added a disclaimer that i did not plan on merging this, just show how that it is possible. 

closing this as we don't want to merge. will link to the branch from the console issue

Thanks @jbhoosreddy! 

By the way, I noticed that circle failed because your commit was behind by a couple commits. Make sure to always be rebasing, we move quickly here :)

It seems a little odd that loading original source texts is tied into loading generated source texts. You should get the original source texts at the time the sourcemap is loaded, right?

You described the problem as a user setting a bp in a generated source and the original text hasn't been loaded yet. Why is that a problem? If it's a generated source, shouldn't it be able to just send off the generated location immediately?

I don't have as much context as you though, so I'll defer to you. This looks like a good direction anyway and we can always change things later after we get a feel for how everything works. If you think this is how we should go, you can merge it. (I do request that you make the `loadSourceText` receive a normal JS object though)

> You should get the original source texts at the time the sourcemap is loaded, right?

We need the generated source to get the original source.

> If it's a generated source, shouldn't it be able to just send off the generated location immediately?

We need the original location for the breakpoint list.

Broke this into four pieces
- [x] pretty print the source
- [x] show the pretty print source
- [x] add / remove breakpoints from the pretty source (probably get it for free)
- [ ] handle cases where the ugly source is source mapped

there's a PR for 1 now, the rest will be done next week. 1 was the hard one. 

Found a couple of tweaks that will need to be made after this lands:
- [ ] formatted source should not be in the tree
- [ ] pretty print button should be "selected" in pretty source
- [ ] selecting the pretty print button should take you to the other source ugly -> pretty, pretty -> ugly

There are several small pieces that still remain. But the happy case has landed and the other work is in small issues, so closing this issue

I can start looking into this one tonight.

After discussing with @jasonLaster, I'm going to drop this one for now.

Thanks @jbhoosreddy. This looks great

@jbhoosreddy looks like circle failed. My guess it's because you 
a) need to rebase, 
b) need to update the .eslintignore file to move util to utils

related bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1295321

This bug should probably be moved to next sprint. Right now we're just making sure that the basic dark/firebug themes even work. They were totally broken before but I just spent a few hours getting them basically working. How does moving this out (as a polish bug) sound?

Pulling it out of the sprint as we're not going to be able to get to it in time.

Hey @wldcordeiro would be happy to help!

I think a great place to start is to adjust the font sizes for the light theme with the file picker and right sidebar.

![screen shot 2016-08-25 at 3 06 16 pm](https://cloud.githubusercontent.com/assets/254562/17982295/418e7c04-6ad5-11e6-9202-5bb3f1f08da7.png)

@jlongster do you know what would be involved to load the dark theme?

sounds good to me

Closing this issue and re-opening a new more relevant issue #988.

@jasonLaster adjust the font sizes? Are the current values not using the theme vars? This is for the right and left sidebar?

I'm closing this issue as we're not planning on working on it in the next couple of sprints. We can re-open it or reference it when we do as the overview is helpful.

> designs for the paused state in the debugger

I think we were handling this in another issue.  

This was first and foremost about the icon and then anything related to the toggle state behavior / interactions.

Here's a patch to get started with
https://gist.github.com/ad9aa95dd24dd428df2cf35efabd496d

Yeah, definitely

@clarkbw: hey, I know this has since been closed, but on designs needed from me: were you referring to the icon for pause on exceptions, or designs for the paused state in the debugger? (attaching those below):

![screen shot 2016-07-26 at 9 22 08 am](https://cloud.githubusercontent.com/assets/1720093/17139466/962207d4-5312-11e6-9739-ce386d6b07d2.png)

@clarkbw Should I open a new bug with that info?

I had to resolve a conflict, hopefully this doesn't break anything...

Need to spend some time soon converting most of the code to new stuff like flow/reducers+selectors/etc. I think landing the JS bundle in Firefox shouldn't be too hard at this point so I might find time next week for that.

Thanks for working on this. I've been thinking recently that it's nice to consolidate selectors and reducers.

r+

@jlongster when you get a chance, can you explain this one in more detail?  

I'm unclear what our current debugger is doing other than providing the default parameter names for the promise argument functions such that it shows `resolve(value)` and `reject(reason)`.

I'll try to find some time this week.
Honza
Hey @Zacqary I feel like you would enjoy this one :P 

Hmm. Really interesting. I haven't looked at this either. I'd be happy to
check it out tomorrow morning though

Thanks @Zacqary, I just looked into it for a bit and I think we might want to format Promises with the Reps module, which you've already looked at before :)

@janodvarko, @linclark, @nchevobbe is there a ticket for using Reps to format promises? It looks like `GripMap` and `GripArray` might be similar, but I couldn't find where they're used.
ping @Zacqary. Mind if I take this bug back so that I can pull in the latest greatest Reps?

The rep looks better. Now we just need the fields

![screen shot 2017-01-10 at 4 39 44 pm](https://cloud.githubusercontent.com/assets/254562/21825877/77cc0c1a-d753-11e6-9fc9-7b3892d3520c.png)

Here's how chrome and firefox handle it:

|chrome|firefox|
|--|--|
| ![](https://cloud.githubusercontent.com/assets/254562/22755253/631b4866-ee10-11e6-9a67-8fb27ca2df07.png) | ![](https://cloud.githubusercontent.com/assets/254562/22755254/631bd830-ee10-11e6-8e26-2a3b1ce9c75f.png) |


Also, we the state that we have in `pauseInfo` is pretty useful for this: `state.pause.frame.scope.bindings.variables`

notice that we have both the `state` and `reason` where appropriate

```json
{
  "rejected": {
    "enumerable": true,
    "configurable": false,
    "value": {
      "frozen": false,
      "ownPropertyLength": 0,
      "preview": {
        "kind": "Object",
        "ownProperties": {},
        "ownPropertiesLength": 0,
        "safeGetterValues": {}
      },
      "actor": "server2.conn2.child1/pausedobj36",
      "promiseState": {
        "state": "rejected",
        "reason": {
          "type": "undefined"
        },
        "creationTimestamp": 1486584316133.3994,
        "timeToSettle": 0.001713000237941742
      },
      "class": "Promise",
      "type": "object",
      "extensible": true,
      "sealed": false
    },
    "writable": true
  },
  "unhandledPromise": {
    "enumerable": true,
    "configurable": false,
    "value": {
      "frozen": false,
      "ownPropertyLength": 0,
      "preview": {
        "kind": "Object",
        "ownProperties": {},
        "ownPropertiesLength": 0,
        "safeGetterValues": {}
      },
      "actor": "server2.conn2.child1/pausedobj37",
      "promiseState": {
        "state": "pending",
        "creationTimestamp": 1486584316133.2642
      },
      "class": "Promise",
      "type": "object",
      "extensible": true,
      "sealed": false
    },
    "writable": true
  }
}
```

```diff
diff --git a/src/components/shared/ObjectInspector.js b/src/components/shared/ObjectInspector.js
index 43c49db..67f1f85 100644
--- a/src/components/shared/ObjectInspector.js
+++ b/src/components/shared/ObjectInspector.js
@@ -127,6 +127,9 @@ const ObjectInspector = React.createClass({
     const { getObjectProperties } = this.props;
     const obj = item.contents;

+    // we'll want to do something special here to also get the state and
+    // reason as children of a promise when we look for other child properties as well
+
     // Nodes can either have children already, or be an object with
     // properties that we need to go and fetch.
     if (nodeHasChildren(item)) {
```
@janodvarko What's your timeline?
took another look at this after looking at object-inspector a bit

```diff
diff --git a/src/utils/object-inspector.js b/src/utils/object-inspector.js
index 8fd893c..8decf19 100644
--- a/src/utils/object-inspector.js
+++ b/src/utils/object-inspector.js
@@ -34,6 +34,18 @@ function isDefault(item) {
   return WINDOW_PROPERTIES.includes(item.name);
 }

+function isPromise(item) {
+  return item.value.class == "Promise";
+}
+
+function promiseItems(item) {
+  return [
+    createNode("state", `${item.path}/state`, item.value.promiseState.state),
+    createNode("reason", `${item.path}/reason`, item.value.promiseState.x),
+    createNode("value", `${item.path}/value`, item.value.promiseState.x)
+  ];
+}
+
 function sortProperties(properties) {
   return properties.sort((a, b) => {
     // Sort numbers in ascending order and sort strings lexicographically
@@ -139,6 +151,10 @@ function getChildren({
     return [];
   }

+  if (isPromise(item)) {
+    return promiseItems(item);
+  }
+
   const actor = obj.value.actor;
   ```
   
   I also wrote some tests that we can use. I found writing tests with real data here really helped:
   
   ```diff
   diff --git a/src/utils/tests/object-inspector.js b/src/utils/tests/object-inspector.js
index 500bbd9..9bb5906 100644
--- a/src/utils/tests/object-inspector.js
+++ b/src/utils/tests/object-inspector.js
 describe("object-inspector", () => {
   describe("makeNodesForProperties", () => {
     it("kitchen sink", () => {
@@ -103,4 +105,70 @@ describe("object-inspector", () => {
       ]);
     });
   });
+
+  describe("getChildren", () => {
+    it("rejected promise", () => {
+      const promise = {
+        "enumerable": true,
+        "configurable": false,
+        "value": {
+          "frozen": false,
+          "ownPropertyLength": 0,
+          "preview": {
+            "kind": "Object",
+            "ownProperties": {},
+            "ownPropertiesLength": 0,
+            "safeGetterValues": {}
+          },
+          "actor": "server2.conn2.child1/pausedobj36",
+          "promiseState": {
+            "state": "rejected",
+            "reason": {
+              "type": "undefined"
+            },
+            "creationTimestamp": 1486584316133.3994,
+            "timeToSettle": 0.001713000237941742
+          },
+          "class": "Promise",
+          "type": "object",
+          "extensible": true,
+          "sealed": false
+        },
+        "writable": true
+      }
+
+      const children = getChildren(x, x, promise);
+      expect(children.map(c => c.path)).to.eql([...])
+    })
+
+    it("unhandled promise", () => {
+      const promise = {
+        "enumerable": true,
+        "configurable": false,
+        "value": {
+          "frozen": false,
+          "ownPropertyLength": 0,
+          "preview": {
+            "kind": "Object",
+            "ownProperties": {},
+            "ownPropertiesLength": 0,
+            "safeGetterValues": {}
+          },
+          "actor": "server2.conn2.child1/pausedobj37",
+          "promiseState": {
+            "state": "pending",
+            "creationTimestamp": 1486584316133.2642
+          },
+          "class": "Promise",
+          "type": "object",
+          "extensible": true,
+          "sealed": false
+        },
+        "writable": true
+      }
+
+      const children = getChildren(x, x, promise);
+      expect(children.map(c => c.path)).to.eql([...])
+    })
+  })
```
@jasonLaster Hi Jason. The Promise Rep (PromiseRep from reps/promise.js ) already landed some times ago (see https://bugzilla.mozilla.org/show_bug.cgi?id=1310608 ). It looks like you don't have it in debugger.html yet though, merging from mozilla-central should be good.
So far I'm starting by trying to replicate the behavior of the old code but I'm running into an issue. I figured, just to get some results on the screen, I'd try this ugly hack involving mutating the preview:

``` javascript
function getPromiseProperties(variable) {
  const { class: varClass, promiseState } = variable.contents.value;
  if (varClass === "Promise" && Boolean(promiseState)) {
    variable.contents.value.preview.ownProperties.promiseState =
      promiseState.state;
  }
  return variable;
}
```

The expected result, I'm thinking, is:

```
x: Promise
    promiseState: "rejected"
    __proto__: PromisePrototype
```

but that's not happening. It's still just:

```
x: Promise
    __proto__: PromisePrototype
```

Just to make sure I wasn't missing something, I also tried making sure the changes I was making to the preview exactly matched what another, working, Object preview looked like:

``` javascript
function getPromiseProperties(variable) {
  const { class: varClass, promiseState } = variable.contents.value;
  if (varClass === "Promise" && Boolean(promiseState)) {
    variable.contents.value.preview.ownProperties.promiseState = {
      value: promiseState.state,
      configurable: true,
      enumerable: true,
      writable: true
    };
    variable.contents.value.preview.ownPropertiesLength++;
    variable.contents.value.ownPropertyLength++;
  }
  return variable;
}
```

And still nothing.

Of course, as I found out, `variable.contents.value.preview` seems to only be relevant for rendering the non-tiny grip preview:
![screen shot 2016-11-20 at 5 15 15 pm](https://cloud.githubusercontent.com/assets/1445834/20466663/fef740d8-af44-11e6-860e-9c9ba1ba4974.png)

So obviously that's not what I'm looking for, but I still haven't been able to track down how to add anything to the actual list of properties that gets rendered when you expand one of the grips.

Side note: it seems really weird to me that there are two sources of truth for what appears in the preview, and what appears when you expand the grip. 

Had a private conversation with @jasonlaster about some things that are bugging me about the data model that I was playing with in `getScopes` and we figured I should copy it here:

I think the most frustrating thing was the fact that there's this preview prop which is solely for generating the properties displayed in the non-tiny preview (which is for, I assume, when we display a rep in the console as opposed to the Scopes dropdown?) And that one, by the way, has two different ownPropertiesLength and ownPropertyLength props, which could both simply be computed by getting Object.keys(ownProperties).length or equivalent. It seems to me like there's a lot of precomputed data which would be better served by selector functions. Especially given that there's no clear link between the ownProperties in the preview and the properties that show when you open the dropdown. If it's memoizing all that for performance reasons, then it ought to be doing that using a memoized function that points to the original source of truth, so that it's easier to reason about the code.

Maybe the previews are being calculated server-side, e.g. if there are 100,000 variables in a scope. I can see why that might be the case, and I admit that I'm still coming from a place of ignorance because I still don't actually know where the dropdown props are coming from. That's my main concern. My instinct is that the preview and the dropdown should be different views of the same data, but if that's not possible then I'd still like to see a clearer connection between what's going on in getScopes and the props that appear when you expand a scope's dropdown.

In short, the old code patterns that were lifted wholesale from the old debugger are confusing to me as a seasoned Redux dev, and I think it'd benefit contributors with a Redux/Elm-architecture background if they were rethought with a fresh perspective.
@zalmoxisus Awesome! Yeah, I installed it locally and it worked great (nightly). Thanks for all your work!

well, this didn't last long... :)

BTW, [it supports Firefox now](https://github.com/zalmoxisus/redux-devtools-extension/releases/tag/v2.3.1), though only Nightly and Developer Edition till Firefox 48, which gets released.

r+

@jasonLaster I believe this issue has gone stale with recent work and the new landing page. amirite?

Closing

Thanks. This is probably in `networkRequest` and in the [development-server](https://github.com/jlongster/debugger.html/blob/master/bin/development-server.js#L25-L37) `httpGet` function.

This wasn't exactly the right thing to do but this is what I aimed for:
- Always show Firefox + Chrome sections
  - Include quick instructions for starting each
  - Include links to further instructions in the docs
- Update the node section to be similar

Here's the quick mockup I made by commenting out lots of code:

![screen shot 2016-07-22 at 12 47 45 pm](https://cloud.githubusercontent.com/assets/2134/17069282/b337524e-500a-11e6-89b5-e8d802e55a17.png)

> "You may be looking too..." and "connect to firefox"

Agreed, I didn't like the commands approach, you can see it becomes messy and then we have multiple places where these commands live.

> GitHub style "Copy to clipboard" button

I like it!  Could keep it short and offer both OS options while still linking to the docs for more information.

Fixed in #471 

Personally I think those commands could be overwhelming here (if the user did something wrong that's unrelated, that's not a great first thing to show). I'd rather keep the form of a statement like "You may be looking too..." and "connect to firefox" is a link that display the command to run Firefox or something (and could also link to the docs).

@jbhoosreddy - this could be a good one too

One thing we could do is have a GitHub style "Copy to clipboard" button which copies the appropriate command to clipboard and can be executed by the users directly.

:+1: 

Looks good, r+

Cool

r+

Thanks @darkwing. Ignore that for now, I think we'll have to move pretty printing to the client, so this will change pretty significantly

fixed now that we're Pretty Printing in the client

#444 

That's a very good idea!

@jasonLaster thanks. It works to that extent, so I'm going to make a PR tonight. I was actually looking into the httpGet issue now.

So I finalized whatever I had by the end of today and hid it behind a feature flag. Will come back to it later.

Thanks. This is really good work and is close to merging

> I think this is actually "normalizing" sourceText 

nerd snipe. it's probably neither as denormalizing is adding redundant data to a table for read performance. I generally think of normalizing as moving entities out to their own table, but that is a simplification because it is more about trade-offs on overlapping data field. **shrug**

At this point, I have enough separation from the pretty printing problem to not feel as strongly about the pros-cons. 

Couple of observations:
- patch does not change the source reducer that much. `updateText`, `getSourceText` are simple changes.
- my work ignores a valuable use case, "showing a loading message while pretty printing". If I add that, it's likely that the patches are very similar.

Given that, I think this is largely a testing and preference question, so I'm happy to close the PR. We will have plenty of time to discuss these questions at a later point.

fixed now that we're Pretty Printing in the client

Is this still an issue?

@helenvholmes want to have fun with this?

Fixed with #443.

Fixed by #428

We should probably call it `formatStr` or whatever the current L10N API uses for consistency, and because we will need this function to take parameters (for localizing strings like "has % items"). Also, the current l10n system does not work like this. Each string is given a name and the API is `formatStr("sourceLabel")`. The strings are listed in a properties file with these keys.

We should probably hold off on this until we really know more about our strategy. Are we wanting to leverage the current system? It seems like we should if we want to land for real soon, in which this PR doesn't really work.

I also don't think we need to localize the toolbox. Lots of strings there and it's only for local development, and we don't have a way to localize strings for things outside of mozilla-central.

So introducing `TARGET` was pretty easy: #447. I think this solves the config issues for the firefox panel, so I probably won't refactor the config system any more until later this week (if we want to look at nconf). I really want to get the bundle landed on Monday.

Looks great. 

Did you see the chrome contributing section?

This should already work. It works for me: 

<img width="954" alt="screen shot 2016-08-01 at 10 30 38 am" src="https://cloud.githubusercontent.com/assets/17031/17297285/0f104a88-57d3-11e6-9ca6-3df0f7993252.png">

hmm, it's strange that in my case you only see the script pulled out of the HTML.

By the way, you can reproduce by going to `localhost:8000/increment` with source maps.

closing this PR, we can discuss an approach tomorrow during sprint planning

Looks great. Thanks @jbhoosreddy 

@jbhoosreddy did a great job in https://github.com/jlongster/debugger.html/pull/434. The first pass has the ability to add and edit watch expresions.

We'll do a second pass soon:
- [x] look at comments in #434 
- [ ] add remove expressions
- [x] format with the Object Inspector

Fixed.

merged

@clarkbw could you put this work in a new like `addDebuggerBreakpoint` and feature flag it off? That way we can land the work and iterate.

``` js
function addDebuggerBreakpoint() {
  if (!feature.isEnabled("features.debuggerBreakpoint")) {
    return;  
  }
}
```

@jbhoosreddy mind cleaning this up first. Would be nice to land it

Hey @jlongster just wanted to share my initial exploration with action testing https://github.com/jlongster/debugger.html/compare/master...jasonLaster:action-tests?expand=1

It is similar in theory to what you're doing, but attempts to record the client data:
- client protocol events are logged
- client command arguments and results are logged

I'll do some work to show a POC when i have some time.

Also, I did some work to scrub the protocol data. The goal is to generate the smae fixture data every time.
- stripped actor ids of connection data
- i plan on truncating text and standardizing timestamps

I left the app store in the fixture data so that components could be be rendered at that snapshot. Of course, it's also possible to load the store with relevant actions, but at the moment it still makes sense to me to have the store's for convenience. 

#444 

Can you either merge through github or reference the commit here? We need to make sure you can view the actual committed changes from every PR. It's hard to see if you addressed my comment or not.

EDIT: I would prefer we always merge through github after all CI tests pass, as that makes it clear that it doesn't make anything fail to everybody.

Shouldn't be too hard. As you said, I've been planning on it. I think the main thing it depends on is reps. So this will force us to figure out how to manage shared dependencies generally. Oh, it also depends on the tree... this is all good stuff to figure out, but it might take some time. I'm focusing on landing the debugger behind a pref right now, but I will look at this soon.

> feature flag it off

Sure, I'll take a look later today.

I think we should be careful about adding too much code that is just experiments. Perhaps it's better to just push them as branches that we can refer back to later. I don't think we have time right now to do this, and I'd much rather leave all the code out of the master branch. Feature flags shouldn't be abused to commit code that's not ready.

> Perhaps it's better to just push them as branches that we can refer back to later

Its just as easy to close this out for now.  I think we can keep experimenting with it and I like having the record of discussion / code / screenshots somewhere until we have a better process.

I'm seeing the @jlongster screenshot and not seeing the webpack: version. I have `"sourceMaps" : true` on in my config...

> By the way, you can reproduce by going to localhost:8000/increment with source maps.

Same as @clarkbw. Can't reproduce, that's what I was using before.

Superseded by #452

This is awesome. This comes from m-c? I've never looked at this lib. What are we going to do about maintenance? Since we are moving the repo, should we start spinning this libs off into separate repos? That would make them easier to upgrade/maintain/keep in sync with m-c.

Looks good!

I think we also need to copy the two workers right?

Oh, yep! I had done that manually, good catch!

These are just static files, so we could just host them somewhere like on the gh-pages of this repo. Then we wouldn't have to bother with an express server and could link directly to them from the readme or something. I'd like to keep the development server simple. (and we avoid more failure points, like starting the example server happens to clash with something else already listening on that port). 

> on the gh-pages of this repo

I like this.

But we should try to maintain a way to serve them locally like we do now, that has saved me on flights.  Maybe a separate examples repo would make this easier.

> - mention the examples app when dev server starts, i.e "Examples are available at localhost:7999"

With a gh-pages branch we could direct people to https://devtools-html.github.io/debugger.html/

Fixed with this commit https://github.com/devtools-html/debugger.html/commit/0cc26fcf9917f1789ae1f27c8d5a74f4948c1ba8

nice

> Since we are moving the repo, should we start spinning this libs off into separate repos?

I think this is a decision that for the larger devtools team. At the moment, I'm okay keeping m-c files in sync. It would certainly be easier to make modules like KeyShortcuts their own libraries and pull them in, like source-map, but that is a larger discussion

Here's Node's Path documentation: https://nodejs.org/api/path.html
https://github.com/nodejs/node/blob/master/lib/path.js

Not sure if that's reusable. I haven't found anything else so far.

Eh, I forgot to make a branch in my fork for this. Hope you merge it soon, I suppose until then I can't push anything else to master :)

See it live..: https://github.com/hallvors/debugger.html/blob/master/docs/remotely-debuggable-browsers.md

I've once (semi-randomly) seen the debugger in a state where the _(index)_ entry didn't appear in the UI, but I have never seen the state @jasonLaster reports here..

It's impossible to deterministically know which lines you can and can't set breakpoints on. Scripts (functions) may have already been GCed so it doesn't look like there's anything there, but you definitely should be able to set a breakpoint there and refresh the page and hit it in the next session.

This is a really tricky problem and it's best to just let the breakpoint be set even if it's never hit. What would the other behavior be anyway? Move the breakpoint? Don't let the user add it? It's simpler UX as well to just set the breakpoint. 

My only concern is this is a big lib to have in devtools-sham, which we aim to get rid of. How much did you have to change? We can't just blindly copy the files in devtools-sham because those ones need tweaks. How do we update this lib? We should document the changes you made so we know how to keep them in sync.

Ok, I'm fine keeping them in here but it'd be nice to just have a separate command like `npm run examples` or something. If you all really want it to be automatically served that's fine too.

To be clear (we talked about this on IRC) I think we should merge this but continue thinking about how to track this stuff.

Looks like this need to be rebased, can you do that?

hm.. if there was an inline event handler in the HTML, would setting a breakpoint actually work? 8-)

You are saying the source code rendering view has absolutely no idea what code is JS, what is HTML and what is CSS? It's unexpected behaviour but if you say it's by design just close this as invalid.

Work looks great! It came out really cleanly. Also, love that we don't need to import the svgs into m-c now.

One comment: the sources tree file probably doesn't need separate consts on top, we can just use them directly.

Hmm, the gh-pages could be nice.

I would prefer to leave it as part of the dev-server. The advantage is that it's one less step to explain to beginners and one less process to start up. The dev server crashes now in one place, which will be fixed shortly.

Thanks @hallvors! 

Looks good, r+

We should point most people to gh-pages though. The only reason you'd need to manually start a server is if you were offline like @clarkbw said and really want that. For the most part people can just use the hosted examples. bgrins has an examples repo that he uses on his personal github and that's worked really well.

Imagine when the debugger lands and people just want to see how to debug sourcemaps. In Firefox, you just go to our examples on gh-pages, and open devtools, and go. In that case, embedding them in this project actually makes it a lot harder to access.

NOTE: the try/catch in services is temporary and will be removed next week when we upgrade to cypress 0.17.

@jlongster `GH Pages + npm run examples` makes sense. 

Lets also add a section in the documentation for debugger examples so we can let people know about them.

Thanks, i'll open a second issue for toggling stories. I'm kinda interested in this as i've seen the same thing for unit tests.

This makes sense. Pending is fine in terms of naming. 

I can see something like obsevables handling this case generally, but this is great for now. 

Closing this issue as it's largely done and opening an issue for loading sourcemaps in the toolbox https://github.com/devtools-html/debugger.html/issues/469

Closing this PR and created a new one at #470 

Created a new PR in #471.

Looks great

r+. This is a really nice cleanup.

I think we can merge after we land the firefox bundle. 

I didn't solve this but took a look at possible solutions that might be useful when you're working on this @jbhoosreddy https://github.com/clarkbw/debugger.html/tree/http-dev-server-crash

Fixed in #471 

I disabled the test so that i can look into the flakiness later. I believe it's a timing issue with the connection and when commands are being issued.

> it was causing the tree to be collapsed initially

That's been a recent bug and it worked before with the path. Two sources can't have the same path; if they do, the latter will "replace" the previous one in the source tree (basically: we don't support this right now, nor do we in the old debugger). The only time this can happen is if the same source is loaded multiple times and that's pretty rare.

I'd check out why you have multiple sources with the same paths. The problem most likely is where that's happening.

Just did a little digging and found a couple of things:

on page navigate:
- Firefox properly clears the sources 
- Chrome does not clear the sources 
- Firefox does not clear the breakpoints 

I just realized that the current code for this in the toolbox returns true or false to indicate if it was able to open the source. If `false`, meaning it couldn't find the source in the debugger, it opens it in a new "view-source" tab. Theoretically, it's a bug when that happens because logs should always be from a source in the current window. But this could happen in several cases: browser console shows logs from all sorts of places, a bug in sourcemaps may log a URL that the debugger doesn't have for some reason, etc. I don't think we can drop that fallback case right now. 

The main problem is that means we need know when all the current sources are loaded in the debugger, so we can check if the source exists afterwards. Right now we have no such concept; sources come in as they are created. We need the ability to see if the debugger is fully initialized or not, basically, and if not wait for the initial set of sources to load.

Because the `view-source` functions in the toolbox need the fallback, they might need to handle more logic then just firing a `selectSourceURL` action. But this code works for now. I'm landing a bundle in Firefox that uses this, but it will fail if the source never exists in the debugger.

We may remove this code and take a different approach in the future though.

Don't we already download Firefox for the integration tests? Is it possible to download Firefox Dev Edition so we can test against Firefox? I wonder if Firefox wouldn't be flaky (and I'd rather be consistently testing Firefox right now).

Yeah this is really good. It's nice that we can change how we load SVGs in one place also. Just had one small comment.

Interesting. Chrome has the idea of frameNavigated, which might be a useful event to fire on the firefox side:

https://chromedevtools.github.io/debugger-protocol-viewer/1-1/Page/#event-frameNavigated

@jlongster - i believe the path issue is coming from source maps. The screenshot above shows two sources with the filename "(index)". This only showed up after I added the index into the key. I agree that key should be explicit so that it doesn't change. Not sure how to handle the source path issue if that's coming back from the source-map library, but i can investigate.

> testing firefox

That's a good point. I'd like to merge this work as it will be useful in the future and then follow up by downloading firefox.

> flakiness

I'm not sure if it's chrome specific, we'll see.

Check out the sourcemap and the URLs that it maps to. I'm curious why it would emit a `http://localhost:8000/increment/` URL. Usually the sourcemapped URLs don't (can't?) resolve to the actual local host, they resolve to something like `webpack://`, and also that means that the sourcemap bundled in an HTML file? If you can find out why that URL is in there, we can figure out how to handle that situation.

Yeah, that's a good point

@clarkbw thanks for this. I'll look into it!

I'd like to be mindful about committing code that needs a lot of follow-up... what's the benefit of committing it now? We can leave this PR open until at least the test is running (I'm fine with Firefox as a follow-up)

Maybe we can append the source's actor ID, so the path + actorID would always be unique but also be consistent across renders. We do want to support this eventually, because the same script can be loaded multiple times, but it'd be nice to be explicit about when that can happen... To me this points to a bug somewhere else, but I could be wrong.

I think I got to the bottom of this:

Steps to reproduce:
- enable sourceMaps
- go to localhost:8000/increment in chrome

There are two issues for me:
- the source is only the script portion
- i can't add a breakpoint

These issues are related. It turns out that chrome has a separate endpoint for getting a non script resource:

``` js
{"id":44,"method":"Page.getResourceContent","params":{"frameId":"44519.2","url":"http://localhost:8000/increment/"}}    
```

I believe that if I fetch the source this way, that i'd see the full source. I'm not sure about adding breakpoints, but this is less important as it's a chrome specific bug.

@jlongster I think you're right. I'll double check this morning, but I believe the problem is a result of chrome not clearing the sources list on navigation events, which is fixed in another bug

I'm going to close and if we need to do something, re-open a new PR

Great find

6b66ecbc48edb1bc301e8eb3951acda84c8d707

(oops, forgot to merge through the UI)

As a side note, I'm very happy to share that this fix solves the source map intermittent issue as well, which is very cool! 

![screen shot 2016-08-04 at 10 46 21 am](https://cloud.githubusercontent.com/assets/254562/17406212/8a1948b0-5a30-11e6-860b-f75454edcba3.png)

Woo! That's great.

@jlongster mind taking another look now that the tests pass. Note, I added #482 to switch to firefox soon. After that, it would be nice to have CI run both firefox and chrome.

Fixed by #473 

Fixed by #477

Looks fine to me! Looks like one of the cypress runs failed? Not sure if that's related or not...

r+

Hmm, interesting. It was very consistent locally, but it might be slower on CI. You might have noticed that I added some pauses in there for good measure. I actually did not test it without them when it started working, but it might be at play here. I can look into this later if it's an issue

I'll update the bullet in a separate commit

Hey, mind taking a look at this @jlongster?

Yep, I should be able to get to it today. Mostly waiting on try for a bunch of bugzilla stuff at this point.

I did a little work to install and start firefox nightly:

https://github.com/devtools-html/debugger.html/compare/master...jasonLaster:test-firefox-latest

This script successfully downloads the latest build, but fails to untar it.

I also tried running the driver with the latest firefox and confirmed that we will need to use marionette to drive the latest firefox. We have two options here, the first is to launch firefox directly with the appropriate profile. The other is to use the driver + marionette. At this point, I think starting firefox is simpler, so we just need a way to include the profile. This patch includes a zipped profile, which i can easily unzip on circle, but I'm not sure where the profiles live in linux. On mac they're in Application Support...

closing for now... I left some comments in #482 with progress notes

Looks good besides the one nit!

Opening a PR because there were conflicts that I fixed so I want to run CI.

Thanks for looking into this! Definitely something to look into more soon.

The problem is the fact that we create a new tree every single time because of the "collapsing" process. There is a TODO in there already about this. This is problematic because the identity of the tree items change whenever a new source is added, thus everything loses it's "expanded" flag because it's keyed off of the item instance.

This is not the fault of debouncing the source tree at all, it just exposed it. Now the source tree renders multiple times at start, whereas before it only rendered once after all sources comes in. Multiple renderings & recreating the source tree is causing this. I'll look into a fix.

Hmm, running into a couple cases now where we do isEnable checks for non-features. Will update the PR so we can asses. I think this is why i held off last time. 

I still think it's a good idea to limit the `isEnabled` API.

Looks good, minus the test failure which can easily be fixed.

The cypress tests have to be updated to use localhost:8000 as the example:
https://github.com/devtools-html/debugger.html/blob/master/public/js/test/cypress/commands.js#L49

This looks like a fix
https://gist.github.com/jasonLaster/2c9f9d5048c144ea5031d09efd9b9bb1

@jlongster, could we expose a subset of the actions like so:

``` js
const { selectSource } = actions;
window.actions = { selectSource }
```

I prefer an option like this as every time someone wants to use an action, they need to make the case for it being public. Also, maybe it makes sense to wrap this in a environment flag:

``` js
if (isFirefoxPanel) {
  const { selectSource } = actions;
  window.actions = { selectSource }
}
```

this way, we are not tempted to use this inside of the debugger for any reason.

@jbhoosreddy i think this might be a fun one for you. There's some interesting bits in here that need to be sorted out before pretty printing can land.

Also, i noticed recently that selecting "pretty print" a second time causes an error, so there's a  bug here too.

Thanks @jsnajdr. Looks good.

Don't worry about the test failures, that's something I broke recently

r+

Looks good

updating the test failures manually

Pulled the revert out as jarda's PR https://github.com/devtools-html/debugger.html/pull/495 depends on `event-emitter`, which was included by the `key-shortcuts` work. Lets try to fix key-shortcuts in place on monday.

I believe these failures were fixed by  these two commits [1](https://github.com/devtools-html/debugger.html/tree/b3ce17ca6cc928a79c0ec6bb9bbb860fd70141c1), [2](https://github.com/devtools-html/debugger.html/tree/81b92e1c8b06f03e4b9c408d050c34146167a34b).

After the two fixes, circle was a perfect 20/20 https://circleci.com/gh/jasonLaster/debugger.html.

This will be fixed by #489.

For unit tests I get this error:

```
<InlineSVG />: `raw` prop works only when `window.DOMParser` exists.
/Users/amit/projects/debugger.html/node_modules/babel-core/lib/transformation/file/index.js:591
      throw err;
      ^

SyntaxError: /Users/amit/projects/debugger.html/public/images/angle-brackets.svg: Unexpected token (1:0)
> 1 | <!-- This Source Code Form is subject to the terms of the Mozilla Public
    | ^
  2 |    - License, v. 2.0. If a copy of the MPL was not distributed with this
  3 |    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
  4 | <svg width="16px" height="11px" viewBox="-1 73 16 11" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    at Parser.pp.raise (/Users/amit/projects/debugger.html/node_modules/babylon/lib/parser/location.js:22:13)
    at Parser.pp.unexpected (/Users/amit/projects/debugger.html/node_modules/babylon/lib/parser/util.js:89:8)
    at Parser.readToken_lt_gt (/Users/amit/projects/debugger.html/node_modules/babylon/lib/tokenizer/index.js:433:33)
    at Parser.getTokenFromCode (/Users/amit/projects/debugger.html/node_modules/babylon/lib/tokenizer/index.js:550:23)
    at Parser.readToken (/Users/amit/projects/debugger.html/node_modules/babylon/lib/tokenizer/index.js:180:21)
    at Parser.readToken (/Users/amit/projects/debugger.html/node_modules/babylon/lib/plugins/flow.js:164:22)
    at Parser.nextToken (/Users/amit/projects/debugger.html/node_modules/babylon/lib/tokenizer/index.js:169:21)
    at Parser.parse (/Users/amit/projects/debugger.html/node_modules/babylon/lib/parser/index.js:128:12)
    at parse (/Users/amit/projects/debugger.html/node_modules/babylon/lib/index.js:47:47)
    at File.parse (/Users/amit/projects/debugger.html/node_modules/babel-core/lib/transformation/file/index.js:517:34)
```

For karma I get this:

```
    07 08 2016 01:00:52.485:INFO [karma]: Karma v0.13.22 server started at http://localhost:8002/
07 08 2016 01:00:52.495:INFO [launcher]: Starting browser Firefox
07 08 2016 01:00:52.524:INFO [launcher]: Starting browser Chrome
07 08 2016 01:00:54.540:INFO [Chrome 51.0.2704 (Mac OS X 10.10.5)]: Connected on socket /#ebYgdmCidwIgMbHfAAAA with id 13756911
07 08 2016 01:00:55.409:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:55.411:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:55.413:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:55.414:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:55.423:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:55.612:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:55.956:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:56.152:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:56.326:INFO [Firefox 48.0.0 (Mac OS X 10.10.0)]: Connected on socket /#YpNbd9zKde6gNB8cAAAB with id 6421711
07 08 2016 01:00:56.412:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:56.639:WARN [web-server]: 404: /undefinedsource-map-worker.js
Chrome 51.0.2704 (Mac OS X 10.10.5): Executed 2 of 33 SUCCESS (0 secs / 0.049 secs)
Chrome 51.0.2704 (Mac OS X 10.10.5): Executed 5 of 33 SUCCESS (0 secs / 0.08 secs)
07 08 2016 01:00:56.936:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:56.936:WARN [web-server]: 404: /undefinedsource-map-worker.js
Chrome 51.0.2704 (Mac OS X 10.10.5): Executed 5 of 33 SUCCESS (0 secs / 0.08 secs)
Firefox 48.0.0 (Mac OS X 10.10.0): Executed 0 of 33 SUCCESS (0 secs / 0 secs)
07 08 2016 01:00:57.577:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:57.582:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:57.586:WARN [web-server]: 404: /undefinedsource-map-worker.js
07 08 2016 01:00:57.587:WARN [web-server]: 404: /undefinedsource-map-worker.js
Firefox 48.0.0 (Mac OS X 10.10.0) loadSourceText loading one source text FAILED
    NetworkError: Failed to load worker script at "undefinedsource-map-worker.js" (:0)
Firefox 48.0.0 (Mac OS X 10.10.0) loadSourceText loading two different sources FAILED
    NetworkError: Failed to load worker script at "undefinedsource-map-worker.js" (:0)
Firefox 48.0.0 (Mac OS X 10.10.0) loadSourceText loading a source twice FAILED
    NetworkError: Failed to load worker script at "undefinedsource-map-worker.js" (:0)
Chrome 51.0.2704 (Mac OS X 10.10.5): Executed 5 of 33 SUCCESS (0 secs / 0.08 secs)
Firefox 48.0.0 (Mac OS X 10.10.0) loadSourceText source failed to load FAILED
    NetworkError: Failed to load worker script at "undefinedsource-map-worker.js" (:0)
Firefox 48.0.0 (Mac OS X 10.10.0) SourceTabs Many Tabs FAILED
    expected 0 to equal 3
    [292]/</</Assertion.prototype.assert@/Users/amit/projects/debugger.html/public/js/utils/tests/sources-tree.js:8209:14
    [292]/</</Assertion.prototype.equal@/Users/amit/projects/debugger.html/public/js/utils/tests/sources-tree.js:8329:6
    @/Users/amit/projects/debugger.html/public/js/components/tests/SourceTabs.js:82:6

Chrome 51.0.2704 (Mac OS X 10.10.5) loadSourceText loading one source text FAILED
    Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
Chrome 51.0.2704 (Mac OS X 10.10.5) loadSourceText loading two different sources FAILED
    Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
Chrome 51.0.2704 (Mac OS X 10.10.5) loadSourceText loading a source twice FAILED
    Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
Chrome 51.0.2704 (Mac OS X 10.10.5) loadSourceText source failed to load FAILED
    Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.
Chrome 51.0.2704 (Mac OS X 10.10.5): Executed 11 of 33 (4 FAILED) (0 secs / 8.091 secs)
Chrome 51.0.2704 (Mac OS X 10.10.5) SourceTabs Many Tabs FAILED
    Error: expected 0 to equal 3
        at Assertion.assert (/Users/amit/projects/debugger.html/public/js/utils/tests/sources-tree.js:8209:14)
        at Assertion.be.Assertion.equal (/Users/amit/projects/debugger.html/public/js/utils/tests/sources-tree.js:8329:11)
        at Context.<anonymous> (/Users/amit/projects/debugger.html/public/js/components/tests/SourceTabs.js:82:29)
Chrome 51.0.2704 (Mac OS X 10.10.5): Executed 32 of 33 (5 FAILED) (skipped 1) (8.506 secs / 8.434 secs)
Firefox 48.0.0 (Mac OS X 10.10.0): Executed 32 of 33 (5 FAILED) (skipped 1) (0.655 secs / NaN secs)
TOTAL: 10 FAILED, 54 SUCCESS
```

For cypress I get this:

```
1) Todo MVC (Chrome) Source Maps:
     CypressError: Timed out retrying: Expected to find element: '.Chrome .tab', but never found it.
      at Object.$Cypress.Utils._.cypressErr (http://localhost:2021/__cypress/static/js/cypress.js:4758:15)
      at Object.$Cypress.Utils._.throwErr (http://localhost:2021/__cypress/static/js/cypress.js:4722:22)
      at Object.$Cypress.Utils._.throwErrByPath (http://localhost:2021/__cypress/static/js/cypress.js:4750:21)
      at $Cypress.Cy.extend._retry (http://localhost:2021/__cypress/static/js/cypress.js:5681:26)
      at http://localhost:2021/__cypress/static/js/cypress.js:7713:28
      at i (http://localhost:2021/__cypress/static/js/vendor.js:582:40)
      at e._settlePromiseFromHandler (http://localhost:2021/__cypress/static/js/vendor.js:581:5260)
      at e._settlePromiseAt (http://localhost:2021/__cypress/static/js/vendor.js:581:6529)
      at e._settlePromises (http://localhost:2021/__cypress/static/js/vendor.js:581:8394)
      at i._drainQueue (http://localhost:2021/__cypress/static/js/vendor.js:580:3183)
      at i._drainQueues (http://localhost:2021/__cypress/static/js/vendor.js:580:3244)
      at MutationObserver.drainQueues (http://localhost:2021/__cypress/static/js/vendor.js:580:1186)
```

Hmm, scrolling is definitely a concern. What you have here is good though and I think that we can land this as is and add the scrolling in next. In someways it's a different skillset.

My hope is that we can rely on native list scrolling behavior, for example focusing on an element, which forces it to scroll into visibility.

Sorry about the testing:
- karma is disabled for the time being
- unit tests - i think you need to do an npm install, we just setup a svg inline loader.
- cypress - that's a good find. The tests run through chrome as well and you haven't launched chrome. That should be more clear if they're on by default!

For the testing, I think you can write some unit tests for the component by turning on the mocha server: `npm run mocha-server` and writing tests in the component directory. With that said, it's not a blocker.

regarding unit tests - I did npm install, but still the problem occurs. Maybe missed something in package.json?

Here's a decent scrolling function that I think does the trick:
https://gist.github.com/jasonLaster/6757b83cbadf3add2b9a9ad429972dd0

![](http://g.recordit.co/kZFNFHVHwM.gif)

It's not as fancy as what we discussed in the tree, but in this case I think it's a good first start. It's also not native, in that it relies on focus, but that's probably also okay. 

We should think about accessibility as well and make sure tab works and we are focusing on the appropriate elements so that screen readers have a shot.

:thumbsup:

@jasonLaster could you give me feedback on this?

Thanks @amitzur - we were actually discussing doing something like this here #454. I imagined adding a somewhat styled `index.html`, but this is a great start before we get there.

Oh sorry, I didn't realize that you had done this work. Mind opening a PR for it?

I think it's fine, but it's hard to say because i'm not too familiar with express' api's

Thanks! This is awesome. Added lots of small comments, but we should be able to land this soon. 

This seems really hacky, and I'd like to avoid it. Adding `setTimeout`s is not a good way to solve things, and you're accessing internal state of the protocol. I don't have enough context of watch expressions to suggest a solution though, but this seems like we're just adding technical debt and will pay for it later. This is why I was concerned about adding watch expressions because it's taking time away from other things.

I'd encourage you or @jbhoosreddy to think of any other solution that doesn't involve `setTimeout`, or anything we can change in our testing infrastructure to avoid it. We're going to run into this a lot I suspect as we add other features which require evaluation, and I don't think this solution is going to hold up.

Yep, that's what I meant about being explicit, and I thought about doing it later but I can do it now.

Sure, sounds good!

Nice, I had noticed that so it's great that you fixed it!

There are two unrelated things here, so it might be nice to have 2 PRs. Client logging and sanitizing the app state. I'm not convinced we should be taking on either though.

Client logging: I'd much rather just use the browser's ability to log data. In Firefox this is easy and everyone on the devtools team already knows how to do this. We know it's not buggy and it is the _real_ protocol log. I really don't think we should be taking this on in our client.

App state sanitizing: if you want to separate that out in a different PR, I'm fine merging it. (I don't see how it depends on client logging?) But I still convinced we don't want full app state fixtures. I'll be working on testing this week and will show a more fleshed out version of #415 to show why. Sanitizing helps reduce changes sometimes, but whenever we tweak the app state it'll still massively change the fixtures. That's not terrible, but I think we can get away with saving a lot less data. But like I said I'd be fine merging that part.

Looks good, r+

> If the firefox-driver script didn't have to be compatible with builds older than the latest Nightly

Doesn't this make it only compatible with nightly though? Only nightly supports the `ws:*` option right?

> Doesn't this make it only compatible with nightly though? Only nightly supports the ws:\* option right?

The `--websocket` option to `firefox-driver` will be compatible only with Nightly, yes, because the WebSocket server is brand new.

One little drive-by improvement I did, however, is that `--start-debugger-server` option now looks at the value of `d.d.remote-port` to get the default port. Previously, it was hardcoded as 6000. Compare the old code:
https://dxr.mozilla.org/mozilla-aurora/source/devtools/client/devtools-startup.js#139
with the new one:
https://dxr.mozilla.org/mozilla-central/source/devtools/client/devtools-startup.js#158

So, the only compatible way to specify the server port is the command line argument.

Nice! I think a `resume` event is also sent, which should be harmless but something to keep in mind if we hit other weirdness down the road. Looks good!

Oh, I see the `--websocket` option now. Cool. This looks great, thanks!

We can just link here: https://wiki.mozilla.org/DevTools/CodingStandards

Although I don't think that is explicitly called out in there, we can add it.

good to know, i didn't see that in `target`

Looks good, r+

@jlongster just looked into the test failure and remembered that prettyPrint is off by default. I'll share a PR soon that will let us define our own ci.json config soon

A resume event is on the debugger client, not on target.

Great work @amitzur! Thanks so much, i've been personally using file search a lot more and wanting this badly.

Sounds good to me, with our current setup I think it makes sense.

- [x] Add comment formatting to Wiki Page
- [ ] Link to JS code formatting in the [CONTRIBUTING](./CONTRIBUTING.md) doc

In my opinion the CI should allow this. It's not uncommon to use this workflow on try: enable more verbose logging and download the log file and see what's going on. Why not just download the log file from CI?

Thanks!

At the moment, we're not saving console logs to a log file, you're right that we should probably just generalize it to that. 

ahh - that makes sense. We should document these events perhaps :)

Cool, then we don't have to write code! :) We could still drive logging from prefs if you wanted, and in fact that's related to your client logging PR. I'd be fine with a pref, but I'd prefer that pref to just flip the Firefox pref to log protocol data. With these prefs we could control the amount of logging when pushing to CI.

Ooh you're talking about `introductionType`. Yeah, you can merge this PR. I'm not sure where we ignore them in the other debugger, but this works! r+

Oh yeah - interesting. I'll be on the lookout for that

Thanks for the thoughts. My takeaway at the moment is that this work is largely dependent on your plans for testing the actions.

**Client Logging**
- I agree that the browser is sufficient for logging the protocol
- The client logging I added is designed to facilitate a client mocking API:

for example, a test could simulate either an event or command and under the hood we'd find the appropriate event or command. In the case of commands, it's more helpful to record the input/output of the command than the request/response of the protocol.

``` js
mockClient.newSource("todo-view");
mockClient.setBreakpoint("todo-view", 33);
mockClient.setBreakpoint("todo-view", 45);
```

Either way, we can punt on the client logging until we have a better idea of how we want to test the actions.

**app state sanitizing**

I agree that this is up in the air as well. If we have a great way to simulate actions, then we don't need entire app state fixtures. I'll PR this up anyways as it's nice to have in the interim and might be useful. 

Closing as this conversation occurred in #496. If we want to log the protocol in firefox we have the mechanism to do that.

If we want to log/record the client in the future, we can revisit.

Hey @clarkbw, @helenvholmes mind weighing in with some designs / sketches of how you see this working:

The engineering side should be easy: [protocol method](https://github.com/devtools-html/debugger.html/blob/master/public/js/lib/devtools-sham/shared/client/main.js#L1863-L1867), [client command](https://github.com/devtools-html/debugger.html/blob/master/public/js/clients/firefox/commands.js#L97-L100).

Thanks @amitzur!

@amitzur, interested in working on this list? 

I think they should all be fairly actionable except for the item "file search" button one. @helenvholmes, do you have an idea of where you think we should surface a file search button if it's not open?

@jlongster is this issue done?

Addon debugging is a very important use case (almost mentioned this in my email) and I think they'll always show up as resource:// URLs, so we need to be careful of hardcoding any rules for them specifically. What does our old debugger to for these scripts? 

Also, did you do anything to see those webpack URLs? Sourcemapping should be turned off so you shouldn't be seeing those...

Yep!

This is fixed in #510

> The client logging I added is designed to facilitate a client mocking API:

I guess I was focusing too much on the console logging, but that's true. Let's leave this open for another day or two as we discuss testing. I'm currently writing tests that are the simple action/reducer kind, and I'd like to get more experience with that before closing this. Right now I'm manually mocking and it feels good because I can dynamically do whatever I want (like the test that tests a failed source text loading).

If you want to go ahead and merge this, that's cool. It's an improvement over the current system. I like sanitizing it more manually, i.e. convert all the ids of the sources into readable ids, because then you can easily do `fakeSource["bar.js"]` and look them up based on readable ids. But this is good for now.

I started working on theming for a bit and got pretty far. Here's a [branch](https://github.com/devtools-html/debugger.html/compare/master...jasonLaster:theming?expand=1).
- Include dark and light theme css files
- remove overriding / legacy styles
- update codemirror to support mozilla themes

The toolbox has a lot of logic to support loading the correct stylesheet:
- https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/theme-switching.js
- https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/theme-switching.js

A lot of this logic is unnecessary if we're using a CSS pre-processor like sass or less and could use the CSS nesting feature. I'd like to strongly consider that for this usecase, as if we already bundle a css file with webpack and could always use these libraries if we were to leave github.

> re-use Firefox's version of codemirror

I was thinking about it this weekend, and I think a simpler path forward would be to build a modular Editor in the new debugger. When we are ready to create other devtools-html packages we can extract a new Editor and share it with other tools.

Benefits:
- We avoid re-writing a lot of legacy code that is imperative, assumes an iframe, chrome loader...
- We focus on what the debugger needs now and not supporting all of the editor features immediately
- We can design a modular Editor, which takes into account different use cases, for example the debugger uses gutter breakpoints, but many others do not.

> easily do `bar.js`

Yeah, I like that API too. I was imagining having a small wrapper that does a regex match. e.g. `selectSource("todo-view")`, but alas this is a little indirection on the testing side so I could be persuaded in either direction.

@jlongster I believe source mapping is on by default on the server at the moment. My patch on friday that disables it probably didn't land yet.

> manually mocking and it feels good because I can dynamically do whatever I want

Great, can't wait to see how it goes. Really eager to write some tests as well. 

Ok, lets keep them as is for now.

@jbhoosreddy did you open a PR for e2ea8e30151888ae72917603a169289df807c66e?

Oh great! Thanks

Awesome. Flexbox is a great idea here. I keep telling myself to try flexbox more. 

Thanks for filling this, James and I talked about this in June. 

I think you're right that is a question of updating the selected item. I'd like to double check Chrome's and sublimes UX. I don't think any of them open the tree. 

Looks good to me. I don't have a great idea of express's API, but this is also internal so the big thing is that it doesn't crash

I feel like most of this is already done 

Here's what Chrome does.  Not recommending this, just for reference.
![pause on caught exceptions](https://cloud.githubusercontent.com/assets/2134/17504160/2add01ba-5dab-11e6-8d63-1ac52707138a.gif)

Yeah, this is an interesting problem that's connected to sharing the debugger protocol between the tests and debugger:
1. test simulates adding a todo by evaluating `dbg.type("input", "hello", "Enter")`
2. debugger attempts to run a watch expression, but finds that the first evaluation is still pending.

I think the best way to handle this that is likely to hold up over time is to introduce a new client method `debuggeeCommand` that issues a console evaluation, but does not wait for a response. In this way, the test still drive the debuggee, but won't be stopped if the debuggee pauses, which is often the case. If there's a time when a test wants to check a debuggee value, it can still use the regular evaluate method, which returns the response.

Anyone mind giving me the low-down on the difference between exceptions and caught exceptions? (I think James did at some point... yikes, sorry!)

If we wanted to do some sort of combo button, not understanding what the two do, we could have it cycle through three states on click:

![screen shot 2016-08-09 at 9 53 41 am](https://cloud.githubusercontent.com/assets/1720093/17518764/2e25c76e-5e17-11e6-93e6-4a3643db2b99.png)

(That second icon is entirely made-up just to help illustrate the point.)

@helenvholmes There are two types of breaking on exceptions: 
1. Pause on any exception whatsoever, even if it's wrapped in a try/catch block and is handled
2. Only pause on exceptions that aren't caught, and bubble up to the top and are thrown

Does that make sense?

Damnit, @jlongster beat me to it. Here's what I had, might help:

Here are two programs: the first catches an exception, the second does not:

``` js
try {
  doSomethingHard();
} catch (e) {
  console.log('oops, that hard thing failed');
}
```

``` js
doSomethingHard();
```

The benefit of pausing on uncaught exceptions is that they are unexpected uhohs. The benefit of pausing on caught exceptions is sometimes, that's just where you want to stop and it's useful. I think it's most useful to pause on uncaught exceptions.

Yes, I meant to update this yesterday. I think we can close it for now. Compatibility with m-c will be a long-standing effort and we'll keep working on it in new bugs.

closing this as the debuggee eval PR has some of this work and it can be re-opened and focused when/if something like the debuggee eval lands. 

@jlongster just updated the PR and came up with something much simpler.
- the timeout is gone as the function is more focused
- there's much less internal state
- `debuggeeCommand` is only for tests (not any eval w/ a timeout)

Also, as an interesting aside, working on the test helped me find an interesting Frames bug related to console evaluations. We should be excluding the eval frames from the frames list. This now does that. We might want to do it more upstream, either in the reducer when adding the frame data or selector, but there's an open question in my mind when it comes to one reducer querying another's state.

@jbhoosreddy the watch expression test is not showing the updated evaluation value. Once something lands, could you look into that and see why it's not being updated. 

I believe i fixed this last week. If i remember correctly, the bug was related to source maps not updating: https://github.com/devtools-html/debugger.html/commit/b9d515a8ef44d3727bdee5e886068fd5ce8a0d16. 

Either way, i believe this is the case you were describing.

![screen shot 2016-08-09 at 10 56 29 am](https://cloud.githubusercontent.com/assets/254562/17521010/bb6fcb8a-5e1f-11e6-90ef-2065414cd6d1.png)

not sure if it's being tracked.

From the above, it sounds like the most useful option someone would want to click is:

> 1. Only pause on exceptions that aren't caught, and bubble up to the top and are thrown

Do we want to surface "pause on uncaught exceptions" _and_ "pause on caught exceptions", with toggling both meaning "pause on all exceptions"? Do we all agree that "pause on uncaught exceptions" should be the first choice we surface, as it's more useful to see your unhandled errors than your handled errors?

> Do we want to surface "pause on uncaught exceptions" and "pause on caught exceptions", with toggling both meaning "pause on all exceptions"?

There actually isn't a "pause on caught exception only" option. It's more an option to the "pause on exception" behavior: do you ignore caught exceptions or not. Uncaught exceptions will always be paused on.

I think having 1 icon with 3 states is worth trying, and clicking it toggles through the states. Not sure if that's too hard to explain to the user though.

![screen shot 2016-08-09 at 1 44 47 pm](https://cloud.githubusercontent.com/assets/1720093/17526961/75cfd3b4-5e37-11e6-9f4b-e574d7f1d348.png)

I'm continuing with a potentially nonsense icon, but something like this, perhaps?

superseded by #528

Need to fix up linting, as it's trying to lint the sourcemap test case bundle.

Yeah, but there should only be 3 states:

off -> on (pause on only uncaught exceptions) -> on (pause on all exceptions)

Initial work could be to disable for now

![screen shot 2016-08-09 at 2 37 14 pm](https://cloud.githubusercontent.com/assets/1720093/17528807/c7397352-5e3e-11e6-8f36-a94e1227e942.png)

I'm starting to wonder where this Chrome-stop-sign-analogy came from. I guess because errors stop you? But then why the pause sign? 

We could potentially do warnings/errors... hm:

![screen shot 2016-08-09 at 2 42 52 pm](https://cloud.githubusercontent.com/assets/1720093/17528973/91d88756-5e3f-11e6-80d5-4827f94e4605.png)

I think it's because you "pause" or "stop" on the error... I guess? I'm not sure if warning works well because I don't really see it as a warning... but I don't know what the right icon is. If this is too confusing maybe there is a different way. Feel free to experiment with an icon with just 2 states and then some other way to turn on "pause on caught exceptions as well)".

@jlongster couple of nits, but overall looks great. 

Maybe a color change is enough, "uncaught" red, "caught" blue...

Looks a lot better. Not exactly sure of the implications, but we can try it out. r+

Thanks for taking the time to figure it out! 

Last two to go, @jay3686 and @marfarma 

The integration tests break because they assume you have to type cmd+p to open autocomplete. Infact, i'm not sure what happens now if you do that.

Looks good!

@clarkbw, @jlongster : here is what I have so far, see live demo: http://janodvarko.cz/devtools/splitter.html/

It's built on top of the split-box from debugger.html + flex-box support. I don't have horizontal splitters yet, but vertical alignment works well I think.

Are there any other specific requirements?

Honza

I renamed the folder to `unit-sources` which is where we can add any arbitrary source text. Right now anything that uses `networkRequest` will pull it from there automatically, but I also plan on making the mocked thread client load from it too so you can literally load them as sources. By creating various kinds of sources we can test all kinds of edge cases.

I tried to move `restartWorker` to `node-unit-tests`, but it's a little difficult to add a global `afterHook` that has access to it. That file is not a test file, so we'd need to define a global `__restartWorkers` function or something so the global hook can access it, but that also means that we'd be keeping a reference to all workers and restart them automatically, which might not be desired for some workers. So I added a whitelist to only restart ones we care about. But then I realized that none of this will work for karma, so if that's important we just need to manually restart each worker we care about. Might be a better solution that works for both node & karma, but I think we can figure that out later unless you have any easy solutions right now.

Node version on circle is a little older... had to avoid `string.includes`. Tests should pass now...

thanks @janodvarko. The vertical splitter looks great, I believe we want the same requirements for the horizontal splitter.

I give my permission to license under the MPL 2 any contributions I have made to the debugger.html code base.

I give my permission to license under the MPL 2 any contributions I have made to the debugger.html code base.

Thank you everyone!  This is awesome.

I thought this was solved by the key shortcuts library?

It'd probably be good to split out your source changes into a specific PR. It would be good to track those individually for historical sake.

> It'd probably be good to split out your source changes into a specific PR. It would be good to track those individually for historical sake.

Was just thinking about doing that as well. It's significant enough to deserve that. Also, would help move this PR along as well.

Now that #528 has landed, I have a better idea of what's possible with simple unit tests. I think you can take them pretty far. I just dynamically generate sources as needed and built up the state I need from scratch every time, which allows a lot of flexibility for each test to do whatever it wants without needing any fixtures or protocol data. All the tests: https://github.com/devtools-html/debugger.html/blob/master/public/js/actions/tests/sources.js And an example: https://github.com/devtools-html/debugger.html/blob/master/public/js/actions/tests/sources.js#L68-L76

I'm still not completely sure what we'll use this protocol data for. It's easier to build up the state with fake sources or breakpoints and render stuff out. We do need to test the protocol, but we should probably just test the real thing as an integration test anyway to make sure it works and returned the right data.

I'm going to break this out into two different issues.

This seems to have stalled out, I'm going to pick this up for now.

## screenshots

### without editor header

![screen shot 2016-08-11 at 11 29 05](https://cloud.githubusercontent.com/assets/2134/17600584/fde6bf56-5fb8-11e6-8bfa-e366f218c272.png)

### with editor header

![screen shot 2016-08-11 at 11 29 25](https://cloud.githubusercontent.com/assets/2134/17600585/ffa08d22-5fb8-11e6-94a6-d10adaf782fc.png)

I'm going to close this out for now, certainly good questions raised and something we can look into further later.  However keeping this issue open and stale isn't providing much value.  Lets reopen / reference this later as we look into possible solutions.

@helenvholmes can you break this down into a single component you want to approach first?  like the scopes list? or breakpoints?

Or is this more of a general design approach?  (just trying to make this more actionable)

Was just talking with people about this last night, wondering if we could try grouping by file.

Currently we preserve the order of adding breakpoints, which has value.  However we could maintain that order but within file groupings.

<img width="301" alt="screen shot 2016-08-11 at 12 00 47 pm" src="https://cloud.githubusercontent.com/assets/2134/17601086/44eed24c-5fbb-11e6-878b-64b16c8476d3.png">

The test failure is my fault. I accidentally pushed a change that enables the fixtures.

Thanks for the fix and going through the stale issues

@clarkbw this issue has been open for some time, 
- do you have time to complete some of the low hanging fruit? 
- discuss any of the open questions
- file some smaller more actionable issues

I personally like the idea of 
- linking to the _make a pull request_ egghead series
- agreeing to the Contribution Covenant and including it in the project
- reviewing the docs for key concepts, testing, getting started...
- documenting people in the project and adding screenshots

Personally, i'm not sure if we're ready to be added to the list of good projects for beginners yet. Hopefully we will by october when flow, our testing strategy, and docs are improved.

@helenvholmes and I discussed this two weeks ago and we're going either move the actions below the editor (footer) or move them to the top below the tabs (above the editor).

Helen, do you have time to think about the editor actions row?

@jlongster do you think we'll have time to look into this in this sprint or the next sprint? 

I think this might be something we want to punt on for now. 

I'm much happier now that we have a ci.json config as well.

@jlongster feel free to open this if there is something actionable here.

@jlongster do you think we'll be able to take this on this sprint or next?

@jlongster do you think we'll be able to take this on this sprint or next?

@clarkbw would you be able to take this on next sprint?

> and adding screenshots

added this in #538 

Just to throw my opinion in here, I feel that moving the button into the breakpoint container could make it more contextual than where it exists now.  I believe the reason it is up with the other buttons is for ease of access when you're stepping and want to disable break points to run to the end.

Here's where I'd place it instead:
<img width="307" alt="screen shot 2016-08-11 at 1 47 57 pm" src="https://cloud.githubusercontent.com/assets/2134/17604404/873838f0-5fca-11e6-949e-8ff419f164e8.png">

But I defer to @helenvholmes 

> hm.. if there was an inline event handler in the HTML, would setting a breakpoint actually work? 8-)

I think it actually might, yes. They shouldn't be much different than inline scripts, but there may be bugs with introducing them through attributes.

Yea, the source code rendering has no idea what code is what in mixed mode. It might be possible to us (the client) to support mixed mode and be smart about it but that's a very big feature and I'm not sure if it's worth the pay-off, given that most people don't actually debug HTML files (just JS).

It's a good idea but not something we can really do right now.

I like it a lot. We may tweak the design of the whole header area but I think this makes it look a lot more consistent for now.

Interesting, this looks cool! I'll take a closer look tomorrow.

Plus one. Also like the spelling of colour 

small nit, but otherwise looks good.

Sorry, I accidentally pushed a change that enabled fixtures https://github.com/devtools-html/debugger.html/commit/8041eeebf682d0db3303cdabcddb0ae72f5c9a57. Ughh, pushing to master directly is so dangerous :/

> Sorry, I accidentally pushed a change that enabled fixture

I'll rebase and force push

It's nice, but shouldn't be on the issue queue. I'll try to do it at somepoint

@jbhoosreddy You've done a great job here. I'm going to close this master ticket and we can always open smaller ones to tweak the UX. I know you have some ideas here.

Also nice, but not important in the issue queue

I think this is a nice tweak. 
If we agree on the design, I'd support doing it next sprint.

This is a small enhancement that I think we can get to next sprint.

Finished in #530 

ugh

@jasonLaster I worked on the nit as per your feedback.

Looks good @jbhoosreddy.

There seems to be a bug with `componentDidMount`, that's keeping the integration tests from passing.

![screen shot 2016-08-12 at 9 22 07 am](https://cloud.githubusercontent.com/assets/254562/17623449/1793d870-606e-11e6-8526-f19c5a0d977a.png)

@jlongster mind taking a look?

The tests look fine to me, but not sure about the exception value change.

Merging to help the other tests run consistently. If there's any feedback I can incorporate it in another PR.

This is resolved by #527 

Pulling it out of the sprint as we're not going to be able to get to it in time.

@jasonLaster thanks! I'll work on it in the next sprint!

How is this different from #537?

I also filed https://bugzilla.mozilla.org/show_bug.cgi?id=1294686 because things related to m-c should be in bugzilla to integrate with everything else. This issue if fine too, but will probably require some m-c patches as well.

haha - it's not. oops

Cool!

Thanks @jbhoosreddy. I cleaned this PR up in #544 

After seeing your work on action unit tests, i think it's nice to continue trying to dynamically generating data source and otherwise. 

If we want to capture more data we can always come back to this.

@jlongster mind taking a look at this. 

Also, I forgot if you were able to fix the unit tests so that they could run in the browser.

@jbhoosreddy happy to take a stab at this today or tomorrow

Hmm, very cool. I'm not sure if this is something we want to do if it's being removed from the protocol though.

API has been replaced by `Page.configureOverlay`

https://chromium.googlesource.com/chromium/src/+/02c23fc6d8a185917e1c936fa5a7b9a1c9fa309c%5E%21/#F5

Chrome team is currently making major changes to the CDP API's. Next stable on Chrome will have more stable API surface and the protocol version will be bumped to Version 1.2 (as far as I'm informed)

still working on disable breakpoints

Sorry I didn't look at this today. I'll look early tomorrow. I was wrapped up in getting codemirror & theming working in m-c and there are lots of little details to keep in my head so I stayed on that all day.

@jasonLaster should we drop this for the next sprint?

Thanks @auchenberg. Good to know

Update, I believe the code is in a good place. I plan on adding some integration tests for 'toggle all breakpoints' and 'pause on exceptions' before this lands. Feel free to review now though.

This looks great! A few nits, but you can merge after fixing tests

- [ ] Open new issue for removing settings menu

Do this as we work on each

Work in Progress #535 

For now we just disable the button in this case

@helenvholmes has designs for sidebars across the toolboxes

bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1260552

related bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1295321

This looks great, nice idea. One comment, but I like trying this out.

I'm fine with, but I wanted to show you an example of the `waitUntil` usage which would also fix it. I'll try to do that tomorrow morning, otherwise we can merge this.

I don't see where search is turned off by default? Doesn't matter though, looks good to me :)

Dropping the `pageAgent.configureOverlay(false, "Paused in debugger.html");` for now.  Our [protocol.json](./public/js/lib/chrome-remote-debug-protocol/protocol.json) file is set at version 1.1 and adding the `configureOverlay` method pulls in a method from the tip (ToT) that muddies the waters.  This is just a small part of the mess of dealing with multiple protocol versions.

If we bump protocol versions in the future we'll need to update the overlay message, otherwise I think we should stick with the original commit with updates to the docs or not add this at all.

Updated the [Comments](https://wiki.mozilla.org/DevTools/CodingStandards#Comments) section of the Coding Standards wiki page.

Looks good. 

Thanks!

The tests are failing because `cm` is no longer exposed on the window: https://github.com/devtools-html/debugger.html/blob/master/public/js/test/cypress/commands/debugger.js#L75-L76

overall: couple of nits, but looks good. 

It'll be interesting to revisit after `source-editor/editor.js` is de-privileged.

Looks like the settings menu is already removed.

Oh ha - that's because it was off before. Jaideeps' PR had changed that.

> The tests are failing because cm is no longer exposed on the window: https://github.com/devtools-html/debugger.html/blob/master/public/js/test/cypress/commands/debugger.js#L75-L76

Ah, gotcha, I will add that back in, sorry. I wasn't sure if it was leftover from debugging but that is useful for tests.

@johnkpaul this might be a nice bug

@jlongster I updated the PR and added a couple other things while in there:
- changes the original source id to slash delineated
- changes definition of isGenerated to not original
- changes getGeneratedSourceId to use the source ID as opposed to
  searching the map. This makes it possible to move isGenerated and
  isOriginal out of the worker.

Looks great. Any reason you didn't go ahead and move them out of the worker? It's not a big deal, either way this looks good, r+

I'm going to merge this so that we improve the test quality. I've created https://github.com/devtools-html/debugger.html/issues/555 to discuss `waitUntil` and other approaches.

@jlongster no big reason. the work already seemed like it had gotten large and it took awhile to test for correctness. 

This is starting to come together. We are now using all the real CSS files from m-c with little changes.

@jasonLaster, thanks for taking care of this.

Also, in regards to the change in m-c, I find it a bit strange that there is a bug in m-c library. Because the existing keyboard shortcuts work in the current debugger. I'm curious to see if you run into a similar problem.

> Also, in regards to the change in m-c, I find it a bit strange that there is a bug in m-c library. Because the existing keyboard shortcuts work in the current debugger. I'm curious to see if you run into a similar problem.

That's exactly what I'm curious about. We should investigate this before making changes to m-c and understand why we need to make those changes.

It looks like the toolbox is using a different mechanism for registering the key shortcuts:

![screen shot 2016-08-17 at 5 34 56 pm](https://cloud.githubusercontent.com/assets/254562/17754054/bf034088-64a0-11e6-8591-e69e6bfa629c.png)

https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/views/toolbar-view.js#55-79

https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/debugger.xul#183-216

Actually, we'll probably want to disable these shortcuts in the panel so that handlers can go through the actions and not directly to the client.

Merging it as it's a simple fix. Let me know if you have any comments and i can publish a new PR or revert.

The source-map worker doesn't need `makeOriginalSource`, right? Are there other utilities you plan on sharing? It gets a little confusing having 3 sourcemap files.

I think we can reduce the scope of the sourcemap worker to only download and parse the sourcemap. Everything else should be able to be done on the main thread, but I haven't looked into this yet. This would simplify this by only needing the worker for a single API. This PR is fine btu I may look into that soon.

Cool, r+

I believe that test failure is leftover from the sourcemap actor ID not being updated, which you fixed in a recent PR.

Yup - that's why i merged the PR pre-emptively.

Nice, looks like all good changes, r+

`makeOriginalSource` is used in the worker to create original sources.

I'd like to see if we can reduce the worker, the big constraint here is that they have the consumer and node are in the worker, so all of the queries against them need to be in the worker.

Makes sense, thanks!

Yeah, I believe we can make the consumer transferrable though, which would allow the simplification. I might be missing something though.

Got it, yeah that would be awesome. I'm not too familiar with what that would take

r+

Spent a lot of time on this today. I'm sort of getting the hang of it, but I don't feel close. Hopefully tomorrow I'll make some headway, but I wish we could get someone else to do this work... I was able to meet with someone from taskcluster today and it helped a lot but this still feels like a time sink since taskcluster is such a big project.

I'll work more with the taskcluster team tomorrow and see if I can get more help. At least now I know what questions to ask!

Is this done?

Actually, I just realized something. I was about to write a taskcluster task that downloads the artifact build of Firefox and just runs tests like you would locally, and it would be based of a standard ubuntu image. At that point, there's no reason we can't just use CircleCI for that. I was thinking that taskcluster might have pre-built images that would make it easy to run mochitests, but if you are outside the tree, apparently not.

We still need to write taskcluster tasks for running the tests in the tree, and I pretty much know how to do that now. We will need to do that before we turn on the debugger, but the most important thing is getting integration tests against the Firefox panel itself, and doing that in CircleCI is fine for our github pr-style development.

Not quite; this bug needs to be resolved on m-c first: https://bugzilla.mozilla.org/show_bug.cgi?id=1295213

Replaced karma with a simple script for running the unit tests with the firefox driver

Having problems building the artifact build for some reason on CircleCI, will continue to look into it...

@jmeas try doing a webpack build. 

Is that done by running the command `webpack`, @jasonLaster ? If so, I tried that by running `npm run prepublish` (which [is aliased to webpack](https://github.com/devtools-html/debugger.html/blob/53501477b9dab79c5ae9dca2ffdf75f257604117/package.json#L28))

Oh, yeah that's probably the same thing 

If you've got time tonight/this weekend we could ScreenHero?

Hmm, in away from my computer so it's tough for me to pinpoint it. I think you're on the right track. 

Ah @jmeas just looked quickly, I believe our webpack config needs to be updated. It only builds styles.css when it's not in development. Should be an easy fix to allow that all the time so there's always a styles.css

Don't have any context at all, but we don't want to build a styles.css in development, as it breaks hot reloading. If it's storybook specific... yeah that's fine.

> It only builds styles.css when it's not in development. Should be an easy fix to allow that all the time so there's always a styles.css

Makes sense. I (temporarily) got around this by running:

`NODE_ENV=production npm run prepublish`

The CSS looks a little bare, but I'm not sure if that's because it's not being run in the context of the greater app. For instance, there's no syntax highlighting, and I can't see breakpoints in that associated story. Does that sound right?

Here's a screenshot:

![image](https://cloud.githubusercontent.com/assets/2322305/17827548/76d5177a-6633-11e6-848a-21e652e040df.png)

Oh nice. By the way, the issue came from the stores being loaded in the storybook config file. 

That does look right :/

We recently changed our theme management and it now retired on a root div with the theme-light class. 

I'm out, so just guessing...

> We recently changed our theme management and it now retired on a root div with the theme-light class.

Ah okay, that makes sense. Thanks for the help with figuring this out!

Contributor Covenant is handled in #565

Make a Pull Request in #564 

Here's what I have left to do:
- [x] document in contributing how anything "up for grabs" should have a difficulty rating
- [x] document how anything assigned indicates an intent to implement

As far as the other items I think we're going to wait.

I'm not yet comfortable joining the contributor convent, we're too young.  If there was a wait to snooze a github issue for 6 months from now that is what I would do for this.

Related [docs](./docs/) directory changes can wait still.  DevRel will be helping us with some of that so it's probably too soon to start on our own.

@clarkbw you're making great progress here!

One thing I thought of while reading the PR PR was how a lot of new contributors would be anxious about getting started. Even though our doc explains the steps, it might still _seem_ like a lot. One fix would be a quick five minute video that goes through all of the steps of clone, install, start a browser, start the server. I know making videos can be a lot of work, but i think this one would be especially useful.

Fixed https://github.com/devtools-html/debugger.html/commit/9a01c43deeeade0ffe0ee2c363f13556520d9692

Are you sure this actually helps? You didn't wait for this CI to run before merging. Have you seen improvements?

It's an improvement, but i don't think it's a complete fix. I've been running the the tests on circle for the past hour or so.

It's very hard to track down the source of the issue since its now reliable locally and just an issue on CI.

This is likely a debugger server issue. I noticed that setting "break on next" and then adding and removing a breakpoint causes break on next to be disabled.

My only concern is that it forces you to go through the whole test suite even when pushing out documentation updates, etc. Given that we really should go through the CI 100% of the time anyway (because we have to be sure that it works in the CI environment, even if it works locally), I'd like to develop a culture where you always open a PR and wait for the CI, and run it locally if you just want to be faster. But I'm not against it if others want this.

In that case, husky might not be the best solution for this use case.

I'm also inclined to rely on CI. My issue here is that CI is an async process and I would not want to slow down the contributor workflow to catch a case that could be handled by CI

Thanks for the suggestion. I'm interested in the project because git hooks are useful, but often poorly understood

Generally looks fine to me. If it's a server issue, it happens the exact same way as the previous debugger so I wouldn't worry about that for now.

Cool! I'll merge this in since everyone seems to be OK with it?

^ @jlongster yeah, i'm fine with that. just wanted to bring it up so it was noted

Sounds good to me!

It is a neat idea, maybe could at least run the linter on push? That would catch stupid stuff but should be very quick.

A hook for linting was what I had in mind. Quick to resolve and easy to fix. We get quicker feedback also instead of waiting for CI results. I'll try it out and see how it could fit in this context.

You can run `npm run lint` if you don't want to wait on CI :) But I get your point.

Nice fix, this must come up big time w/ node

Thanks @MattCain! 

I don't think I could have done this any better myself. Thanks for improving the formatting as you went along. Looks great to me.

Please feel free to grab another issue if you're interested. If you have any questions, feel free to ask, I'd love to provide more clarity to some of the issues in our queue.

> Nice fix, this must come up big time w/ node

Haha, yep... I'm using a complex site as an example and it stalled for about 10 seconds.

closing for now, we might want to come back to this later.

Jumping into this late, but I can see the appeal of running `npm run lint` before a commit.  It is pretty quick and could save some time.  Lets come back to this later.

Sorry for taking a while to look through this. All of this looks like good changes, so you can merge it if tests are OK!

Holy shit, got it to work!

We did this on fxa-auth-server and fxa-content-server and we couldn't be happier.
It's also pretty simple to [set up](https://github.com/mozilla/fxa-auth-server/pull/1270/files).
Personally it saved me from a lot of shameful force-pushs and it could help newer contributors to make better PRs.

@jlongster when you get a chance, can you explain this one in more detail?  

I'm unclear what our current debugger is doing other than providing the default parameter names for the promise argument functions such that it shows `resolve(value)` and `reject(reason)`.

Awesome!

closing this as we're not going down this path.

Same, `Promise.race` is nice. I like this change. 

The changes to `client/main` are good, but i think we'll want to make that change to m-c as well. I'd happy to merge this and then if the `m-c` patch changes at all create a new PR here with those changes. Up to you though.

Looks like you'll need to run `cypress` first too. it's pretty borked.

> I didn't realize something like promise.race was in the spec

Yeah, its kind of neat.  I've never actually found a good use for `Promise.race` and saw this kind of failure case somewhere else and it finally made sense to me.  The common case cited in examples is to use it for competing, but similar requests like asking Google Maps and Open Street Maps for the same thing but taking the answer from whoever returns first but that always seemed like a lot of extra work for very little gain.

I added a patch here: https://bugzilla.mozilla.org/show_bug.cgi?id=1295753

try is down so waiting to run the tests

i don't know, that's a good question

Trees are open again!

> The changes to client/main are good, but i think we'll want to make that change to m-c as well. I'd happy to merge this and then if the m-c patch changes at all create a new PR here with those changes. Up to you though.

I'll take you up on that offer

> Looks like you'll need to run cypress first too. it's pretty borked.

I can't seem to run the tests, locally I keep getting this error `TypeError: Cannot read property 'compileSync' of undefined` which I think you've seen before: https://github.com/cypress-io/cypress/issues/185 

This error happens even when I run against master, I don't think my changes have had an effect here

This is awesome!  

![2016-08-24 21_47_20](https://cloud.githubusercontent.com/assets/2134/17957170/5ab8151e-6a44-11e6-8b44-053ec7a03f09.gif)

I think you could just do this (1 line change):

``` js
    case constants.SELECT_FRAME:
      state = state.setIn(["pause", "frame", "scope"],
                          fromJS(action.frame.scope));
      return state.set("selectedFrameId", action.frame.id);
```

But we need @jasonLaster or @jlongster to take a look

> compile sync

Try removing the screenshots directory in public/js/tests/cypress

Also, that's just a warning so the tests should pass otherwise. Try running the tests from the app, it's much clearer: https://docs.cypress.io/docs/installing-and-running#section-running-tests-from-the-gui

I mentioned in standup that there are two issues with the console. That's actually not the case, the second issue, which was with the right sidebar object inspector was there before.

This issue has two PRs, one github facing, the other m-c..

Wow, nice find @JasonWeathersby. We need to start using the debugger more in practice so that we can find these cases and add tests around them.

I'll put together a patch soon, but you're absolutely on the right track.

The hard part is that we need both the selected frame and the pause info. 

Thanks Jason. l originally got it to work by passing in the selected frame to the scopes component but that required a bit more code and adding more data to the scopes component did not make sense to me.

Jason this is more verbose but more correct :) . My initial go was similar in that I added the selectedFrame to the scopes component and modified the getScopes function.

I was documenting the pause reducer and I noticed that the scopes variables where coming from pause state instead of selected frame. 

So this line uses `Cmd+P`
https://github.com/devtools-html/debugger.html/blob/master/public/js/components/App.js#L56

however in the `key-shortcuts.js`
https://github.com/devtools-html/debugger.html/blob/master/public/js/lib/devtools-sham/client/shared/key-shortcuts.js#L114

there's a `CommandOrControl`/`CmdOrCtrl` that should be used (also should we even have the if block for `Cmd` alone?) So the solution to getting the shortcut working is easy.

However, the message https://github.com/devtools-html/debugger.html/blob/master/public/js/components/App.js#L99

Is there a simple way for me to get the platform? Then I can just make the message show what is needed.

@jlongster Is the env var `TARGET` wise? Seems like one other things might use as well. Maybe something like `FXDEV_TARGET` just to not collide?

Hey @wldcordeiro would be happy to help!

I think a great place to start is to adjust the font sizes for the light theme with the file picker and right sidebar.

![screen shot 2016-08-25 at 3 06 16 pm](https://cloud.githubusercontent.com/assets/254562/17982295/418e7c04-6ad5-11e6-9202-5bb3f1f08da7.png)

@jlongster do you know what would be involved to load the dark theme?

I think the best you can do now is to check to see if it's a mac:

> Is there a simple way for me to get the platform?

``` js
const { Services } = require("Services");
const isOSX = Services.appinfo.OS === "Darwin";
```

Thanks for the help! Let me know if you have any questions, if you want to say hello stop by our [irc](https://github.com/devtools-html/debugger.html#discussion) room to say hello. 

haha - love it. documentation driven testing

Interesting finding by the way, I did most of the development for this feature with this cypress test. 

``` js
  it.only("(Firefox) Test Scopes", function() {
    debugPage("todomvc");
    goToSource("todo-view");
    toggleBreakpoint(33);

    // pause and check the first frame
    addTodo();
    stepIn();
  });
```

Having it meant that I could make a change and then quickly be back in the right place to debug it. Honestly, I probably could do the same thing with storybook and a fixture. I'm not sure if HMR would work with the way scope state is stored, but that could be another technique

@jlongster now that we've integrated codemirror. Does it make sense to close this for now and keep what we have? I assume after we launch we can revisit it?

Great job! This looks good to me, although I'm not sure what our shimmed Services does locally. I bet it just hardcodes Mac as the platform. But we shouldn't deal with that here.

Not sure about the consistent cypress errors. I've never seen those ones and almost every test is failing, but it can't be because of this PR. Any ideas @jasonLaster?

@jlongster yeah, I asked about the best way to determine the platform and @jasonLaster suggested using the `Services` lib.

I'd like to at least look at the native codemirror behavior and see if it's just a matter of making sure we hook up the code search addon. If it's any more complex, yeah, we can close this and open more specific issues and focus on searching later.

@jlongster Looking at CI we get this error

`CypressError: Timed out retrying: Expected to find element: '.autocomplete input', but never found it.`

from my understanding from the [webpack.config](https://github.com/devtools-html/debugger.html/blob/master/webpack.config.js#L43-L46), Services library is taken from devtools instead of devtools sham, so it should work. [Services](https://github.com/devtools-html/debugger.html/blob/master/public/js/lib/devtools/client/shared/shim/Services.js#L484-L497)

 But yes, devtools-sham simply assumes it to be OSX.

Looks like a good change. I wouldn't be surprised if this change did break the cypress tests as they use file search to navigate to a source.

The best thing to do here is to run [cypress](https://github.com/devtools-html/debugger.html/blob/master/docs/integration-tests.md#installing-cypress) locally. Happy to look into it as well.

This is great, I like that the scopes is a normal JS object as it is a bit easier to dig around in. I want to avoid converting the pause object into an immutable obj at some point too. Thanks for fixing this!

Just fixed a related issue where some scopes had the same sibling key because they shared the same function display name or more likely were "(anonymous)".

I don't think `Scopes` is hot-reloadable as it stands because it's a connected component. Definitely should look into how to enable it for more components.

Actually, you're changes run perfectly locally. I'm going to rebuild circle and see if the test failures are just on CI

You should be good. I bet we'll merge soon :) 

Thanks for the help

Cool, it's great that we can reuse that pending property.

You know, the second test failed too.

What i think is happening is that we're firing cmd on a linux box

[cmd](https://github.com/wldcordeiro/debugger.html/blob/file-search-all-platforms/public/js/test/cypress/commands/debugger.js#L65-L66). I'm going to play with this on CI, by building w/ ssh [here](https://circleci.com/gh/devtools-html/debugger.html/679) and will report back. Feel free to do the same

Closing this so that I can merge a fix for the platform event. 

Did you accidentally merge this? Not sure you saw my review :)

Wanted to include a screenshot of the Chrome layout for reference.

![screen shot 2016-07-25 at 10 39 49 am](https://cloud.githubusercontent.com/assets/2134/17988140/2a3f9e26-6ad9-11e6-96de-b2d8f4174e03.png)

Nope. Missed it. Will fix that now. Thanks for checking!

Merging as my fix was just to test code

I could do this. @jasonLaster 

> It would be nice to have a button in the top right for exiting file search

Like an `x` in the far right of the search bar?

Regarding that patch? Is that just a concept/idea for how you could do it?

Oh just outside of the searchbar?

Yeah, that's what I have in mind

Go for it. Would be nice to see, I think it's often helpful. Also can't hurt

#586 brought this in.

Atom and I think Sublime just put a highlight over the lowest expanded part of the tree from what I can tell.

merging as this is straight forward. @jlongster let me know if you have any questions

Merging as this was related to @jlongster original comments

Merging as this is straight forward.

@jlongster happy to adjust if you have any concerns.

Looks good to me.

removing it from the milestone as i don't think it should be considered critical for us hitting our sprint.

go for it

@jasonLaster I noticed that this is the line that does the rendering, but I'm wondering how to inspect the `objectValue` because I can't log it in a way that is useful.

https://github.com/devtools-html/debugger.html/blob/master/public/js/components/ObjectInspector.js#L154

It seems like a pretty straightforward change but I thought I'd need make sure I don't break the view for other item types.

Reps already supports this with a "short" mode, so I would investigate that before doing anything else. I don't have the info off-hand to help right now, but we shouldn't need to this manually.

What dos this do when we already have ESLint rules?

I think you actually want `tiny` mode for this. You can see an example in the [tests](https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/components/test/mochitest/test_reps_object.html#83).

Looks good, as does the other various PRs you merged. Thanks!

@jlongster ESLint is a great tool for the style of your code. EditorConfig lets your project dictate the basic file config stuff and will enforce it on an editor level (usually with a plugin) but the short of this is that you can have your tab sizes set to 8, your line endings to `CRLF` and this will automatically adjust the values of those settings for anything you edit in the project.

@wldcordeiro i think you said that well. The way i think about this is that, the editorconfig is a universal format for editors so that they can have the right settings per project

> 7999 from 8000

Oh right, thanks!  Good catch!

> this port change

Sorry, I should have clarified in the original issue.

The port you're looking for is in the Chrome command here: https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#chrome

localhost:8000 will show the debugger interface
But any mention of the examples directory, so http://localhost:8000/todomvc/ should use `7999` 
Also check for `/increment/` or `/pythagorean/`

@clarkbw I updated the PR I'm not seeing any mentions of `/increment/` or `/pythagorean/` that would need the replacement.

Thanks for this fix!

Thanks @wldcordeiro!

Moving out of the sprint as it's a polish item that's not tied to getting the debugger to run inside of firefox.

done

@jasonLaster adjust the font sizes? Are the current values not using the theme vars? This is for the right and left sidebar?

Here are my thoughts on the Watch Expressions interface. 

### base feature

We need an obvious way to add a variable name to the watch expressions list, this should include some kind of auto-complete to help people out with variables we know about.  This feature is for people who know what watch expressions are, how to use them, and use them frequently when solving code issues (likely not that many people).

### integrated with the editor

Taking this further I think we want to integrate with the editor.  Allow users to hover or click on a variable in the editor and add that variable to the watch list.  This adding procedure may require a popup of some kind but I think we'll want something like that to inspect variable values anyway.  I see this as a way of introducing this feature to more people.

### integrated with console logging

One other way of taking this further is to consider the watch expressions to be our method for console logging variables.  So every time the variable I'm watching changes we log that into the console.    This is how people actually debug their applications and one possible way we could integrate console logging to the debugger.

### integrated with breakpoints (conditional)

And to take the watching a step further I think it would be interesting to allow people to say `pause when $x > 10` such that the debugger pauses execution when the variable reaches a value or expression that it shouldn't.

### log / graph values over time

Last item here that I've been asked for by people who work on animations is that the watch expressions logs and can graph the output over time.  This would allow developers who are seeing lots of different values to visually see when a set of values in all the values are going out of bounds.

@jasonLaster Mind if I investigate ? I'm looking to make a first contribution but don't really know where to start ^^

Sure. I mention the file above that's the issue. 

Let me know if you have any issues running the project locally

Mind writing an integration test that tests refreshing, selecting and closing tabs?

By the way, now that tabs are persisted, i just realised that the follow up task is hiding tabs from other pages. 

i'll make a follow-up commit with integration test in this PR. And after that has merged, I'll create a follow up PR for hiding tabs.

@jasonLaster Are scopes only available for Firefox target ?
I finally make the remote-debugging work on Firefox, so I can concentrate on the behavior :)

However, I tried to reproduce what you've done : I can't even see `<this>` for `App.TodoView`.

<img width="1138" alt="screen shot 2016-08-28 at 13 01 21" src="https://cloud.githubusercontent.com/assets/4603973/18033300/d7e6a2c4-6d20-11e6-9059-393581c25938.png">

Are the relevant infos in `frame.environment.bindings` ?

Ohh my guess is that you need to pull.  #592 fixed this so that it is available. 

@thomascrvsr if that doesn't help let me know. I'd be happy to do a quick screenhero session and reproduce it with you. 

This is a property of frame. 

I'll take a look at this.

hmm, i'm not reproducing this anymore

strange, i'm seeing it again. I wonder if it's something like `optimizedOut` where it's not available on the server sometimes...

haha - sorry, I'd like to write a test somewhat like this one 
https://github.com/devtools-html/debugger.html/blob/master/public/js/actions/tests/sources.js#L166-L184

for pretty printing. The nice thing is everything is client side, so we can test pretty printing without relying on the debugger connection.

@jasonLaster : I made a draft of the fix. Basically, in `getScopes()`, when we encounter the scope with the same actor of the scope of the selected frame I add `this` variable to `vars`.

Is this the right direction to take ?

Do you know if the only way to get Cypress is by filling the early adopter form ? I couldn't run `npm run test-all` because it's missing on my machine.

@ThomasCrvsr yup - it's not too bad. These docs walk you through getting set up. You basically stop by https://gitter.im/cypress-io/cypress and ask nicely.

https://github.com/devtools-html/debugger.html/blob/master/docs/integration-tests.md

@ThomasCrvsr also, it'd be nice to add some checks to the existing integration test for another scope this

It'd be similar to [this](https://github.com/devtools-html/debugger.html/commit/3d62a69ce80292fbffb532d2b25615ce6d8598f6#diff-5ab3592cecb716562600466967e88b4fR14).

Cypress might be a pain to setup, but it's fun to run it. I actually fixed `this` last week and used a test to automate getting to that spot in the debugger to fix.

This is not an issue with Firefox. Jason, it'd be great if you used Firefox for the next couple weeks while we try to polish it for Firefox. Closing as we really need to focus on Firefox right now. If I'm wrong and it somehow is Firefox you can re-open.

<img width="266" alt="screen shot 2016-08-29 at 8 51 57 am" src="https://cloud.githubusercontent.com/assets/17031/18052025/04ee8fa2-6dc6-11e6-91c8-4de6547cc0dd.png">

Also, feel free to stop by our IRC channel #devtools in irc.mozilla.org and say hi sometime

@jasonLaster Yep, I kept in mind adding some test but I wanted to show the implementation first ^^
I will try to find some time this afternoon to get all this working :)

(I joined the #debugger-html channel, but maybe this is not the main channel ^^)

These changes won't work. A key part of sources is that you can't base them off URL. Many sources do not have a URL (eval'ed sources is just one example). Please don't change the `SELECT_SOURCE` action, it was correct before. With your code, you won't be able to view eval'ed sources (and other edge cases).

I don't have time to do a full review, I'm on PTO until tomorrow afternoon. But we really need to write a bunch more tests so things like this obviously fail. I should write a bunch that deal with weird sources like eval'ed sources.

> Many sources do not have a URL

I believe all sources now have a [url](https://github.com/devtools-html/debugger.html/blob/master/public/js/clients/firefox/events.js#L61-L63). But it's true that they are not relative to the target URL. If that is a concern, I think we can address that here as well as it would make sense to have all source url's relative to the target.

> tests

We have a couple tests now that deal with eval sources
- [break on next](https://github.com/devtools-html/debugger.html/blob/master/public/js/test/integration/tests.js#L75) pauses in the eval of a console script
- [evals](https://github.com/devtools-html/debugger.html/blob/master/public/js/test/integration/tests.js#L172) is a test that pauses in two evals with and without sourceURLs. 

We probably should have more, but we do have some. 

It'd be nice to have tabs persist as the debuggee is navigated. Tabs is a new feature we're introducing with this debugger and I'd like for it to be polished.

> We should really focus on testing now and avoid landing much new code

Completely agree. I'm going to work on 
- adding unit tests
- adding integration tests that are missing (likely in cypress as it's really easy to add)
- adding mochitests so that we can begin converting those over

I don't want to spend the week switching to mochitest entirely as I'd rather focus on getting the right tests in to improve our coverage holistically. 

> mochitests 

Last friday, I started working on writing more mochitests. It's important to me that we can have a good workflow around writing and debugging the new tests. I'm going to see what I can do here that will let us run the mochitests in the standalone mode and still debug the app.

@jasonLaster integration tests don't seem to pass, even on `master`. Do you have the same situation ?

@jlongster is this when you embed the debugger or when you run a tab? I'm on Firefox (gecko-dev) and have the breakpoint styling look a little off.
![screenshot_20160829_083632](https://cloud.githubusercontent.com/assets/580982/18055089/da57037a-6dc3-11e6-9add-89b95d8cd28b.png)

Worth looking at #291 as well for some previous design discussion

@jasonLaster I was trying to recreate and hadn't been able to. Expanding `addOptions` worked for me with no error in console (not sure if you were using the devtools console or browser toolbox but neither had an error.)

Stepping out for an hour. I'll fix the tests when I'm back

Thanks

> focus on Firefox

That makes sense.

I'll re-open and label it as chrome so we can come back to the chrome issues when we have time. It will be nice to do a quick pass at that point. Also, if a contributor would like to do a quick CSS fix that'd be great as well

@clarkbw funny that you should report this :)

I'm looking into it as well. I'd like to fix this for a couple of reasons. 
1. it'd be great to run our unit tests locally this way.
2. it's nice to run our unit tests in firefox on CI.

Merging as this only affects the integration tests.

Working on styling the button now. Is there preference on units and layout? I started using flexbox, but want to make sure I'm writing things that fit in @jasonLaster.

closing in favor of #617. The only thing I changed was:
- squash commits
- add <this> assertion
- rebase off master

Thanks @ThomasCrvsr for the hard work tackling a difficult first bug!

Thanks @wldcordeiro!

@wldcordeiro flexbox is perfect. We use that in several places

@jasonLaster Noticed that the search icon in the autocomplete is set to `16px` width (which changes the height too) and the default font-size is coming out to `13.333px` for me since it uses browser default so maybe slightly higher in `em`s? I have no problem using whatever units. :) Just wanted to get that figured out so I didn't need to do it twice.

ahh - 16px is probably fine too. It's nice to be consistent w/ the file at hand. 

Thanks, looks great and the patch reads really well.

one nit. otherwise ready to go

Should be closeable.

Should be closeable.

Totally support @clarkbw's file grouping suggestion. It would be a very nice addition. Handling file grouping gets interesting with repeat files. Do we just expand their name to include the next level of the dir? If there's a `foo.js` in `bar/` and `bur/`  do we list them as `../bar/foo.js` and `../bur/foo.js`? I honestly don't use _that_ many breakpoints often enough to know where it becomes ugly.

I'll grab this.

> Last friday, I started working on writing more mochitests. It's important to me that we can have a good workflow around writing and debugging the new tests. I'm going to see what I can do here that will let us run the mochitests in the standalone mode and still debug the app.

Mochitests already have a good workflow; we've been using them for years... I'd rather not spend time trying to reinvent mochitest right now. You can debug them by just passing `--jsdebugger`. We really need to just convert cypress tests to mochitests :) At this rate we are not going to be able to land the debugger, I fear.

Hmm, I like grouping but would prefer that we punt until after we launch and can discuss the different cases. 

I can take a look at this if you want :)

A temporary fix might be to increase the `height` of the breakpoint svg [here](https://github.com/devtools-html/debugger.html/blob/master/public/js/components/Editor.css#L28)

@jasonLaster Do you mind if I try to do the implementation ? :)

@thomasCrvsr sure. Note it's marked hard so might have some traps. But should be good, will touch both chrome and Firefox

Looks better with `15px` and a little better still with `16px` as it gives a slightly more even amount of padding around the number.

15px
![screenshot_20160830_065554](https://cloud.githubusercontent.com/assets/580982/18089777/d4aab280-6e7e-11e6-9817-18123047b037.png)

16px
![screenshot_20160830_065522](https://cloud.githubusercontent.com/assets/580982/18089788/db4118fa-6e7e-11e6-9833-fc7322381c21.png)

either way looks better than the default though heh!

I'll grab this issue.

Someone has published the `Node` `path` lib to npm, but they haven't updated in some time (looks like the lib from 0.12.7 from the last commit) and some limited searching isn't giving me a ton of alternative results either. If the license is permissive would it be alright to copy Node's path lib? Or just the API?

@jasonLaster looks like it depends on `process` and `util` https://github.com/jinder/path/blob/master/package.json#L21

maybe something like [path-browserify](https://www.npmjs.com/package/path-browserify) is useful.

Dependency tree of the path package I posted (not counting `devDependencies`)
- path
  - util
    - inherits
  - process

@jbhoosreddy looks like that is relatively similar to what I posted only further out of date, granted path stuff hasn't changed a ton.

@wldcordeiro I posted it as a suggestion because it doesn't have any dependencies (except tape for tests) and seems to have methods which are talked about in the issue like (basename, dirname, join, etc.). I see it's not actively maintained, but I imagine we could make modifications as per our requirements if needed. 

Reading the code for all the libraries mentioned here and those I found on the internet, I think the way to do this would be to keep the existing `utils/path.js` which maps to particular methods in the node `path` library. We can further use `Services` to identify which operating system we are working on and separate exports for win32 and posix explicitly.
It seems they use `process` to do things like identify OS type and current working directory (if no arguments are given), and we can prevent using that code since we have that information.

Thanks @jbhoosreddy - i like your approach. One thing to add though. If you have something pretty good, it might be nice to release your own NPM library :) 

You can always copy over the Services OS methods to the library and inline them.

Thanks @wldcordeiro @ThomasCrvsr are you testing on chrome? I think this issue is difficult because it is a chrome / firefox thing.

I looked into this briefly with @helenvholmes and we found that the issue is code mirror gutter line font-sizes. In firefox it is 11 and in chrome it is 13px

<img width="989" alt="screen shot 2016-08-30 at 11 08 00 am" src="https://cloud.githubusercontent.com/assets/254562/18094693/55554d6e-6ea2-11e6-9864-a63111b3d5b3.png">

@ThomasCrvsr this should be a good fix

``` patch
diff --git a/public/js/lib/themes/dark-theme.css b/public/js/lib/themes/dark-theme.css
index 48516a8..b4254b7 100644
--- a/public/js/lib/themes/dark-theme.css
+++ b/public/js/lib/themes/dark-theme.css
@@ -246,6 +246,7 @@ div.CodeMirror span.eval-text {

 .cm-s-mozilla .CodeMirror-linenumber { /* line number text */
   color: var(--theme-content-color3);
+  font-size: 11px;
 }

 .cm-s-mozilla .CodeMirror-gutters { /* vertical line next to line numbers */
diff --git a/public/js/lib/themes/light-theme.css b/public/js/lib/themes/light-theme.css
index 808eab4..edfecfa 100644
--- a/public/js/lib/themes/light-theme.css
+++ b/public/js/lib/themes/light-theme.css
@@ -246,6 +246,7 @@ div.CodeMirror span.eval-text {

 .cm-s-mozilla .CodeMirror-linenumber { /* line number text */
   color: var(--theme-content-color3);
+  font-size: 11px;
 }
```

Just adding the label there? I'll grab that real quick.

Screenshot of popup in chrome with source link:

<img width="525" alt="variable popup" src="https://cloud.githubusercontent.com/assets/95570/18097151/9dbd7b6e-6e91-11e6-9515-2aa261a17772.png">

@clarkbw I have sidebar designs for sidebars with additional tabs, but I think they're going to be different from the debugger, which instead is one tab, with an accordion.

Sidebar with panels: https://invis.io/F68A5KHKY#/179720580_Sidebar_Tabs 

Sidebar with one panel, accordion (ignore old icon cruft): https://cl.ly/3Y1j3G3F0s1r

@clarkbw: Do we want to split up the Debugger to have panels for some things instead of a monolithic accordion?

@wldcordeiro I'm intrigued by your suggestion, but I don't think I understand it yet + I want to make sure it works across all of the tools, not just the debugger. Could you post a ./mov file with what you're imagining? :) 

The variable popup in the XUL UI wraps the variables view widget.  Guessing the variable popup in this UI will wrap the Object Inspector.

Would need to decide if this source link should be part of the header of a popup, or if it should be part of the Object Inspector.  IOW, should the link be included when the variable is shown in other places where the Object Inspector will be used, like the console output.

@helenvholmes I think the panel suggestion is a good one. I'd like to suggest that we schedule some time in October to kickoff some larger UX projects for the debugger. I'm worried that we don't have the bandwidth to do this work properly beforehand.

@jasonLaster Yes, I saw weird little differences between Firefox and Chrome but couldn't point to the exact thing. Thanks !

I'll revert my commit and add your proposition, sounds good ?

Also, I've got the impression that there is a lot of common code between those two themes, should we try to refactor those part into one spot ?

I should have linked all the source files

It is amazing!

We should keep a consistent caps strategy for the project.  I use the lowercase: `debugger.html` 

There are some general formatting things that need to be fixed, like the triple tick marks to encapsulate code blocks.

@helenvholmes Here's a little video. https://dl.dropboxusercontent.com/u/3788370/collapse-sidebar.mp4

@ThomasCrvsr that's a great point. Actually we probably would benefit from **NOT** touching them as we pull them in from the larger devtools project. Lets add the class to the Editor.css file or something like that

> I believe all sources now have a url. But it's true that they are not relative to the target URL. If that is a concern, I think we can address that here as well as it would make sense to have all source url's relative to the target.

We shouldn't be doing that, in my opinion. The URL should be null. How we display sources with null URLs is a UI concern, and we shouldn't be relying on that in anything except the components. It's much easier to check if `source.url` is null in tests, is more predictable, etc. You don't want `SOURCE6` to be automatically selected when you reload because it'll most likely be a different source.

I agree that we should get tabs persisting, but we need to do a different way. I don't fully understand why persisting the tabs requires those changes. We should keep a list of URLs currently open and use those across refreshes.

I've been working on setting up a `head.js` that can drive our debuggee today and wanted to report back some of the work as a progress update:

Here is a small test that selects a source and some breakpoints

``` js
window.fun = function() {
  (async function () {
    await selectSource("todo-view");
    await addBreakpoint(33);
    await addBreakpoint(35);
  })();
};
```

and here are the commands it uses

``` js
function setupCommands(opts) {
  actions = opts.actions;
  store = opts.store;
  selectors = mapValues(opts.selectors, (selector) => {
    return function() {
      return selector(store.getState(), ...arguments);
    };
  });
}

function selectSource(url) {
  const source = selectors.getSources()
                .find(s => s.get("url").includes(url));

  actions.selectSource(source.get("id"));
  return wait(100);
}

function addBreakpoint(line) {
  const source = selectors.getSelectedSource();
  return actions.addBreakpoint({
    sourceId: source.get("id"),
    line
  }, {
    getTextForLine: l => window.cm.getLine(l - 1).trim()
  });
}

function debugTab() {
  const tabs = selectors.getTabs();
  const id = tabs.find(t => t.get("browser") == "firefox").get("id");
  window.location = `/?firefox-tab=${id}`;
}

function wait(time) {
  return new Promise(function(resolve, reject) {
    setTimeout(resolve, time);
  });
}
```

Once we have the helpers setup we can easily use them in a mochitest.

Mulling this over a little more, I think the discussion boils down to this: we shouldn't save tabs that are there for non-URL based sources. It doesn't make sense. It'll more likely than not show the wrong source, or it may not even exist. 

Looks like a common cypress failure

Updated from comments (converted that method), so merging

@jasonLaster A good start! I'd prefer to use the `addBreakpoint` action directly, and explicitly pass in the source. It common to set it on the selected source, but many tests also set multiple breakpoints on various sources. It's nicer to have a single API instead of a succinct one. I'd rather be more explicit: just use the actions directly! `actions.addBreakpoint(...)` You don't need `getTextForLine` unless you are explicitly testing the breakpoints panel.

`setupCommands` seems left over from cypress, and `initDebugger` still seems more appropriate, especially since for mochitests it's going to open the panel and everything.

> we shouldn't save tabs that are there for non-URL

I agree with that. We have an `isHiddenSource` method we can re-use to exclude these tabs
https://github.com/devtools-html/debugger.html/blob/master/public/js/utils/sources-tree.js#L7-L10

Closing in favor of #630

Yay! Will review tomorrow morning

Hey @wldcordeiro what's the status here? I'm not sure if you're looking for a review

One nit. Looks good though!

And, you now have a star on the project

modified the PR to fix the nit.
1. removed utils/path.
2. updated references

@jasonLaster Does this fix looks good ? (I tried in Chrome and Firefox, this is better :) ).

Also, I looked at `Editor.css` and saw the class `.editor` but couldn't find any usage of it in the code. Do you know if it's obsolete ?

@jasonLaster I'm working on the implementation of `toggleAllBreakpoints()` for Firefox.
We should get the App state in order to toggle each breakpoint individually : https://gist.github.com/jasonLaster/12d18102361653f2a8842e357b8bdcbc#file-foo-diff-L107

A proposal would be to pass the app state to `toggleAllBreakpoints()` as a second param, which will be passed to `setBreakpoint()` or `removeBreakpoint()` depending if we disable/enable breakpoints.

Have you got a better idea ? :) 

Sorry, but I don't think this is a good idea. My first thought was that we should just inline this and not have it be a separate module, but I have other concerns about the implementation itself:
1. It feels weird to depend on node directly like this.
2. This pulls in the entire path implementation from node which is a whopping 44K.
3. We don't need an entire `path` implementation. We are only ever dealing with URLs, so it will _always_ be a forward slash. A ton of the implementation of `path` is dealing with cross-platforms paths. We don't need that.
4. Node's `path` methods don't always work on URLs. There are unexpected failures:

``` js
> const path = require("path")
undefined
> path.join("http://foo/bar", "baz")
'http:/foo/bar/baz'
```

For those reasons, we shouldn't use node's path module. I like what we have now; it's simple and it works well. I rarely run into problems with what we throw at it.

I like the simplicity of our current implementation. I was thinking we should look into replacing it with a proper library, but there isn't anything out there that is simple and works with URLs.

(I missed the discussion in the issue because I was on PTO/conference, sorry)

This isn't in the scope of what I call the "object inspector" though. I think this will be special functionality in the debugger, with it listening to events in the editor. The console doesn't use the editor, etc, so it will have to hook it up differently if it wants it. We could share the functionality that extracts all this info though. This will be in the next phase; right now we're focusing on landing the current debugger.

This looks great, but to be honest this feels more like a blog post, with all the screenshots and specific references to how things are currently laid out. What if we just turned this into a hacks blog post?

I'd prefer to keep react/redux intros out of our specific docs because react is because used across devtools now, not just the debugger. I've always wanted a central place to document our devtools architecture and I want http://mozilla.github.io/devtools-docs/index.html to become that. I already wrote a [react intro](http://mozilla.github.io/devtools-docs/react.html) and a [redux intro](http://mozilla.github.io/devtools-docs/redux.html) there, so if it's missing anything we can improve that. We should be ready to embrace the rest of the devtools instead of throwing everything in here.

(Also, given that we are focusing on landing the debugger, I don't have time to check if everything in here is correct, but that's ok)

Which class are you talking about ?

Sorry @ThomasCrvsr, i didn't see that you updated the patch.

Hmm, that's a good point. I didn't see that we were pulling in 44K. 

looks like the mochitests failed on CI. Also, looks like we need to do some `eslintignore` stuff

Thank you for putting the work in to this @jbhoosreddy, but sorry we can't accept it :( I would have mentioned this in the issue if I had seen it. I hate closing PRs after someone has put the work into them but this will break various code (see `join` above) and increase the code size a lot, and the current code works ok. If there is another solution, please open a new issue (I'll close this PR and the current issue)

We haven't seen anything that properly handles URLs, so let's just use what we've got. We can always bank on forward slash being the separate across platform because it's a URL, which makes it very simple.

Yeah, definitely need to figure out eslint. The mochitests are failing because bug 1294686 hasn't landed yet. It doesn't recognize that path as a mochitest directory.

Thanks! I'll fix all this up.

It might help to start with some docs on this workflow: 
- `npm run mochitest` does on the first run and subsequent runs.
- how to update docker.
- where the tests + helpers live 
- what is mochitest - link to docs
- how to use `--jsdebugger`
- logging with `info`
- ...

It might also help to add some comments on the different scripts so it'll be easy for our future selves to update.

We'll add docs over time. I can add some comments in the scripts though. For now I'll add a short section somewhere and link to https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Mochitest. We shouldn't recreate that page, and we'll probably keep evolving our specific workflow as we use it for the next week or so.

Sure, we can try it out. I don't think anyone on our team uses it though, so we can't guarantee it's going to stay up-to-date or all projects from us is going to have it. 

Test case: http://s.codepen.io/clarkbw/debug/PGYXoN (breakpoint line 24 of PGYXoN)

@jlongster It is probably to long to be used for a hacks post. I get that you want to centralize all of the docs in devtools-docs. TBH I did not know about those. Will the other tools be exposed to use standalone as well? If not there should be something for the developers who only plan on using the debugger in that fashion. At a bear minimum I think having the current component arch (which is editable) is nice to have for a new contributor, especially if they already know React and Redux.

Yeah, this works. It probably will be different if we ever persist breakpoints.

Looks good!

Closing this for now.  We can open this up again later when we want to circle back to using taskcluster again.

Closing as we'll focus on merging work into the `head.js` that @jlongster is setting up.

Agreed. 

We'll look into this in the future, but we have 1.5 weeks to write all of our mochitests and need to be sure that the debugger in the panel is actually working correctly. We're shifting to focus 100% on mochitests for the next few days.

> Will the other tools be exposed to use standalone as well?

They will be, but not yet. I think we plan on merging this but working on it soon to make it easier to keep up-to-date (pointing to comments in code/flow types instead of listing references docs here, etc). Good work on this!

Thanks for filing this! How come some have separate issues and others not? (edit: oh, you are in the middle of doing it)

Once we have a flow going (probably tomorrow, landing some stuff on m-c right now) let's ping some of the contributors and see if they'll help too.

> How come some have separate issues and others not?

I think I was just mid-workflow.

This issue would be a good place to add docs, feel free to edit the top comment.

@jbhoosreddy I'm not entirely sure we need to replace this anymore :D Unless you know of a URL-based path library? I couldn't find one anywhere, and it really is a lot simpler since we can assume forward slashes. But if you figure out a way that we don't have to maintain this though, that would be great.

Getting there. I have a working mochitest just need to make sure that mozilla-central has the necessary changes (just pushed last night) and make sure our workflow isn't horrible. I've already improved several things so that you can edit the mochitests locally and firefox will automatically use them. Should be able to start writing tests later today, and we'll probably add more utility functions to `head.js` as we find pain points.

Looks perfect, this will work nicely with testing too because we can just do `win.Debugger.actions` etc to access the redux stuff. Remove the callback (unless you need it?) and we'll merge this and then push a new m-c update with the test. We need this update before we can write mochitests because it depends on how the selectors/actions/etc are exposed.

@ThomasCrvsr i'm not sure exactly what you're asking here?

One thing you might have missed in the description is that we do not update the breakpoints _disable_ state when we toggle all of the breakpoints. The reason for that is that it's nice to "turn off" all the breakpoints and then when you turn them on again, you still have some disabled some enabled based on your workflow.

> App state in order to toggle each breakpoint individually

In general we don't pass app state into the client methods as they should have a small API, just get the data that they need to perform some function.

![](http://g.recordit.co/zUiLDRewN5.gif)

I like @clarkbw's suggestion, looks good to me.

Unfortunately I'm stuck on bug 1294686 to be merged to m-c. It's been pushed to fx-team but for some reason it's taking a while to move to m-c. I'll work on docs though and hope to ready later today.

My recommendation would be the panel icon: https://cl.ly/0R3W3g1d2A0a

Sounds good. I look forward to writing some tests! 

Here's the [head.js](https://github.com/jasonLaster/debugger.html/blob/2ef93211c9ea78ca5645efccc8a60e224bf64fbe/public/js/test/integration-mocha/head.js) I was working off of before. pretty happy with the API. e.g. addBreakpoint assumes you're adding a breakpoint to the selected source, but you can pass in an optional source if you want to. 

Based on your commit messages (I haven't pulled this down), looks like we ended up going with what's currently in the tools? (https://cl.ly/3S0B1D210I1T ?)

@jasonLaster Sorry, I wasn't clear ^^' I was referring to `public/js/clients/firefox/commands.js` in your gist. You call `getState()` in the function `setBreakpoint()` in the line I shared in my previous comment.

ohhhhh, that's not great :). let me look

@jlongster I updated this pr to drop frame-update and use will-navigate which is the proper behavior. 

This does mean that we don't handle the pause state at the moment but we're tracking that work and should have a fix for that separately.

I like a lot of the stuff in your head.js. I was trying to use actions more directly, but I think you're right that we need to wrap things like step/stepIn/etc because we want to wait on the "pause" event, and users can still use actions directly if they want.

I'm not sure about automatically assuming the selected source though; I like to be more explicit. I'll have a test or two finished when merging this and we can talk more about it then; the API is still pretty simple but you do have to pass in a few more parameters which I think makes it clear what's going on.

thanks @wldcordeiro 

Couple things:
- i noticed that clicking on the collapsey thing did not work. Could it be a bug?
- i believe the buttons should be on the other side of the draggable? This might be an issue with how you've setup the headers?
- Could we do the double click behavior in a later PR? I think this is adding a lot to this PR and making it hard to review.

@helenvholmes mind doing a quick visual pass on this. It can be pretty similar to chrome

So theoretically this is ready to go. Just waiting on a new docker image to build.

Oops, there were a few changes to the command action and main.js which I'm going to remove.

@jasonLaster 

>  i noticed that clicking on the collapsey thing did not work. Could it be a bug?

Not yet implemented, just putting the skeleton there since it was going in a new component.

> i believe the buttons should be on the other side of the draggable? This might be an issue with how you've setup the headers?

Do you mean they should be in the tab bar area rather than in the sidebar?

> Could we do the double click behavior in a later PR? I think this is adding a lot to this PR and making it hard to review.

Sure.

@helenvholmes where would it be preferred to put the collapse buttons? In the sidebar headers like this? Or in the tab bar?

![screenshot_20160901_154403](https://cloud.githubusercontent.com/assets/580982/18185477/0aab5c80-705b-11e6-9026-df2b7455d8b8.png)

One reason I mentioned putting the button in the center is that the header realestate is more valuable. I.e I like the debugger buttons on the left and we have copy for the right side of the sources header. 

The first test passed! The failure is cypress. Going ahead and merging this because Jason approved this generally. I know there are a few conceptual differences, but thanks for letting me flesh this out. I think this will be good for long-term maintenance, but adaptable if we find the current APIs problematic.

Note that we are able to run our mochitests in ~7min, including the entire time for checking out docker. I think that's pretty good. Running all the mochitests will end up taking several minutes once we write them, but even if it's ~15min that's a whole lot better than before (waiting on try for hours).

Thanks! I'm pretty happy with how it worked out; I was worried we'd have to wait on a build and wait >30 min or something. The 7min is just checkout out the docker image unfortunately, so not sure if that can be reduced... but we could definitely run the tests in parallel (split them up into 2-3 "chunks" and run them on different containers). That's actually what try does (that's why there's dt1, dt2, dt3, etc)

I missed a bunch of linting errors which I just fixed (pushed straight to master). 

I agree with Jason, I think where it is in that screenshot is too prominent. A few notes:
- @helenvholmes we talked about the idea of not having any icons, but a "gesture" where if the user slides it far enough in that it just collapses. Have we tried that? I guess there is the problem of how to open it back up.
- Is it just me or does the icon seem darker then the rest of the icons?  Or is it just thicker?
- I suppose we could copy Chrome and put them in the editor header...

I thought I had another question but I forget. It's awesome to see this worked on, thanks @wldcordeiro !

Oh, I remember: in https://bugzilla.mozilla.org/show_bug.cgi?id=1260552 Honza has ported our Draggable and SplitBox components to m-c. But we're modifying Draggable... I suppose it's ok and we'll just deal with it when we try to copy back his new SplitBox which has a bunch of new stuff.

Also, one last thing (sorry): any reason the width of the splitter is increased a lot? Can we keep it consistent with the rest of the borders but just make the clickable area as big as you want it?

Shall we go ahead and merge this and figure out how to go from there?

Should I make the changes suggested before that?

@helenvholmes i agree, CSS variable names are hard...

I'd like to revisit some of our CSS strategy once we land in firefox. I think now that we can safely plan on being an independent project in github, we can discuss some CSS strategies for the debugger as long as it would make sense for other devtool tools in the future as well.

I've landed the ability to run mochitests, and documented the general workflow here: https://github.com/devtools-html/debugger.html/blob/master/docs/mochitests.md

I'm working on some of the breakpoint tests right now. If someone else, maybe @jasonLaster, wants to start playing with this, it's ready. Just read the docs. We still need to flesh out the story for various things, like how to click the gutter in codemirror, but we can start writing tests. I'm writing a test that tests the CodeMirror breakpoint gutter but running into a few issues with simulating clicking, but hopefully after we figure a few things out it'll be quick to write tests.

My issue is something else; I think it's easiest if we use small test sources for the gutter tests that don't even need scrolling. The UI doesn't seem to be completely updated after `EventUtils.synthesizeMouseAtCenter` returns; I'm not sure if it's CodeMirror's fault or not, it could be doing something asynchronous.

> Should I make the changes suggested before that?

Yeah, go ahead with the changes suggested so far jand we'll merge this in.

Good call! Yeah, those scripts can be improved. I can add some more sanity checks to them.

We've talked about a CSS in JS solution before but I want more buy-in from the team first, especially @helenvholmes. I think there are a lot of benefits to it but I want others to know how to work with it too.

This fixes #655 for me

Awesome, great improvements, thanks! Just one or two notes.

Ok, I'll update with the suggestions

The downside to using shell is that it doesn't work on Windows :( We might want to redo this in JS later, but it's so much easier in shell.

Now it looks like this:

<img width="910" alt="screen shot 2016-09-02 at 1 44 07 pm" src="https://cloud.githubusercontent.com/assets/17031/18212862/6a8dd610-7113-11e6-8a80-31d814061c57.png">

(Not sure about the opacity, I can revert it to a normal background :D) I noticed that the icons were off like this before too, so I didn't fix that in here. Anyone else notice that?

<img width="914" alt="screen shot 2016-09-02 at 1 43 58 pm" src="https://cloud.githubusercontent.com/assets/17031/18212860/6a8bcd8e-7113-11e6-9612-55c3b3037d7b.png">

<img width="899" alt="screen shot 2016-09-02 at 1 43 51 pm" src="https://cloud.githubusercontent.com/assets/17031/18212861/6a8bcf64-7113-11e6-9007-70c9d995bc2c.png">

> doesn't work on Windows

We could require the new Ubuntu Windows userspace integration, which would make shell scripting work.  I hope the artifact builds work the same on Windows.

Thanks!

I went ahead and fixed those icons. Converting a few ems to pxs solves it and makes this less dependent on font size (the padding/margin is in px anyway).

Left one comment, but looks good. Feel free to merge.

Initially I was in favor of search being a popup, but now that i'm used to it replacing the editor the popup feels noisy. I might feel differently as i start using the debugger more often and find the popup is more contextual.

Yeah, it works fine to render the welcome box in `App`. I think it'd be nice to always render the header so that top row is always consistent, and would help with #623 because you could put the icons in there. But that's a different discussion.

@jlongster yeah - that's a great point. Lets create a new issue for the center pane header

Just fixed conflicts, it was passing on CI before.

The linting errors were my fault. I'll merge this in as it seems good to me too!

Done in #656

Why do you need autoconf213? I mean, I know you need it, but it should already be installed if you have the Xcode developer tools installed right? I didn't have to install it specifically, but I guess I could have done that a long time ago.

Definitely should document this though. You had Xcode installed but autoconf wasn't on your machine?

I agree it should always be visible and then we could use it to hold the collapse buttons for the sidebars.

Edit: Right now those buttons are being put in the sidebars themselves #623 

@wldcordeiro are you picking this up?

I was just thinking it might be nice to make the label or perhaps the header area in general clickable so someone could bring up the search field by clicking.  However we'll need to wait on #623 to see the outcome of where the buttons land.

based on all the information discussed, I'll make a fresh PR for this.

> The UI doesn't seem to be completely updated after `EventUtils.synthesizeMouseAtCenter` returns

I may be wrong but I ran into the same problem writing another test. Brian suggested I use `node.click` instead and it worked.

I'm just trying this one out to see if I get somewhere with this.

I think always visible makes sense and as @clarkbw mentioned we can house the collapse buttons there, I'll be updating #623 this week to do so (weekend has been busy with family birthdays and weddings of friends eating all my time.)

> I've landed the ability to run mochitests, and documented the general workflow here: https://github.com/devtools-html/debugger.html/blob/master/docs/mochitests.md

@jlongster I may be wrong but shouldn't it be `dbg.win.document.querySelectorAll("#foo")` instead of `dbg.win.querySelectorAll("#foo")`?

> I may be wrong but shouldn't it be dbg.win.document.querySelectorAll("#foo") instead of dbg.win.querySelectorAll("#foo")?

Yep, you are correct! I will update it tomorrow :)

I'll take this one, already writing editor mochitests.

Added the header pane back in PR #663, seems like a solid idea (particularly because of the collapse/expand buttons).

Should we discuss entry states a bit? Originally the empty state was about education. Now that we're moving the key command label into the top of sources in #622, should the empty, no-files-open state be the Cmd+P state, instead of two separate states?

Empty state:
https://cl.ly/443837143A24

Cmd+P state:
https://cl.ly/2a0v1I233A3C

If so, should we consider a tab, like Sublime Text does?
https://cl.ly/14083S1f003l

(In that last screenshot: wording needs to be finessed quite a bit. I'm not sure what the greek text should be.)

@helenvholmes you've got a couple CSS lint errors, `npm run lint-css` should find them locally

Just added another test for making sure we are selecting the right mode. I actually needed to implement that as well, so there's a bit of code in here... but it's a small function on the editor to select the right mode.

This turned out to be a bit of a pain because I needed direct access to the editor, and it's only exposed in development mode. The way we do this normally on m-c is we have also have a `testing` flag, so I changed the `debugGlobal` to also expose it if the testing flag is true. I had to create a local module that is basically a noop, but the webpack config will make the debugger load the native `flags` module from m-c when in the panel.

This will be mostly covered by #660. I added a test for modes which is the only thing we need to copy from this slice of tests. There are still other things we need to test from the editor, but we can close this issue when that PR is merged.

oh nice

The only problem is that is that it hardcodes the `30px` in more places, and this bit us before when we tweaked the height of the header. But it's not a big deal for now, thanks @helenvholmes!

Hmm, I'm hesitant to do too much work on the center pane at the moment as we haven't flushed out the search / discovery story yet.

We'd like to have project text and symbol search added soon.

I also think we could use this space in an interesting / different way after we have done some exploration into user flows in Q4. My hope is that we can provide more of a birds eye view or jumping off point. Also, I think our UI has a lot of assumptions built in on how we want to use the left and right sidebar which might be something we experiment with.

If we do adopt a more plugin oriented architecture in Q4 with some of these partnerships, that will inform how we use this space as it might be valuable or very different in other contexts.

Yeah, I can try to do it this week. I didn't actually do implement it, I just fiddled with the HTML/CSS in devtools to hack it up... But it shouldn't be too hard :)

It's not a big deal if we don't get to it this week. It's more important to get testing and bugfixes in before the merge.

https://cl.ly/0R0b102a3X2X << one thing to check is what happens in this situation. (Might look odd, I'm not certain.)

I spent a couple hours with souremaps today, and I don't think we can realistically land with sourcemaps by the end of this weeks. It doesn't work reliably enough and it takes some work to get it working with the native panel's network request. I bet we can turn it on soon, but I'd say let's focus on other stuff for now.

In that light, let's close this issue. When we finalize sourcemaps, that PR should include the relevant mochitests.

> I was just thinking it might be nice to make the label or perhaps the header area in general clickable so someone could bring up the search field by clicking. However we'll need to wait on #623 to see the outcome of where the buttons land.

Following current patterns, they'd be here-ish: https://cl.ly/0E0s1F1O2A3r

That "with ..." comment is generated by github when you merge with the "squash and merge" button. I guess when you squash they want to make sure both names are referenced.

Haven't test locally, but if there are any problems we should see it pretty easily.

> @helenvholmes we talked about the idea of not having any icons, but a "gesture" where if the user slides it far enough in that it just collapses. Have we tried that? I guess there is the problem of how to open it back up.

I don't think we could have the gesture without the icon; with the icon, you click the icon, that opens it back up.

Looks good @helenvholmes. Some small js lint errors which you can see locally by running `npm run lint-js`

oh gosh, nice catch.

I think this makes sense, it's better to focus on a smaller subset. I'm re-opening the issue though and moving to the next sprint as we'll want to pick it up again soon.

This is a good reference for me. It gives me a little "direction" about how these tests are to be written.

We're still figuring it out too! :) My goal is to be as clear and descriptive as possible though. I've had to deal with our old mochitests for too long.

Haha :)

Forgot about this, but this requires the `devtoolsRequire` function to be available in the panel context which hasn't been committed to m-c yet :( I'm finally doing this in [bug 1300866](https://bugzilla.mozilla.org/show_bug.cgi?id=1300866). I'll have to update the docker image too. So we might not be able to merge this until later today.

> Actually. Just noticed that this is a decent 666 bug

Lol

Alright, pushed a new docker image with the `devtoolsRequire` patch applied so we finally have it. Responded to the review and made several tweaks too. Hopefully this passes; if so I think we should land this and keep working on it. Thanks!

Looks great. 

This is much cleaner to read than before. 

Id be happy to merge this now or wait on the on click behavior. 

@jasonLaster I was going to contact you about that. I was having some trouble thinking of how to implement that since the click will change the width of the `SplitBox`es but the buttons are in the `SourceTabs` component. Some ideas for what to look at for inspiration or general guidance of where to look should do heh.

@jasonLaster I face to another problem. If we set a breakpoint, remove it and set it again we don't have the same actor.
It become problematic when implementing the "toggleAll" feature for Firefox as we should update the state app to have consistency for actors.
What we could do is making the `toggleAllBreakpoints()` function to return every breakpoints and use it in the appropriate reducer to update every breakpoint. What to you think about it ?

Hmm @ThomasCrevoisier that's a good point. 
- We'll need a way of replacing the breakpoint actors, and updating the breakpoint state
- There are three breakpoint fields I think we'll want to keep (disabled, condition, and snippet) there may be others

Lastly, if this issue becomes _too_ hard we can explore a server-side implementation that involves implementing a `toggle-all` method. This would be consistent with what chrome does.

Nice find. Lets investigate quickly to see if the fix is likely in the splitter component or how we're using it.

Hmm, I believe the happy case works alright - clicking a breakpoint navigates to the correct source line, but there is an edge case here:
- navigating within a source is broken. @jlongster do you think this could be related to the sourceeditor work you did lately with codemirror? My guess is that it would be a regression with alignline

![](http://g.recordit.co/Gz1I3m8yjU.gif)

Great find. 

We're re-using the same document and resetting the text, so it makes sense that we would run into this problem. In the short-term we should scroll to the top in `Editor.setText`. In the long term we should implement one document per source tab, so that we can quickly toggle between sources and maintain scroll position.

This will be address soon in #438 

The long term solution would be the server side implementation like Chrome (the server-side is not present in this codebase right ?), but I could try the first implementation for the moment :)

This would be a good candidate for an enhancement in the next sprint.

I implemented the feature in the last debugger with codemirror documents and it is pretty straightforward, but there are edge cases with clearing state on navigation and keeping state outside of the redux app state that make it a little complicated.

haha - we should probably have some sensible max-widths.

nice find

Sounds good @ThomasCrevoisier. 

We discussed this feature here #426 #623 earlier and agree.

This will probably be its own enhancement that we should schedule for next sprint. 

We're going to bring in Honze's revamped SplitBox which has received more love so we should just focus on that component. It's fine if it's like this for next week or two.

Definitely agree with this one. Seems like the collapsible sidebars work fixes it.

For what it's worth, I put a lot of work to make sure that it's loading exactly the same CSS. In the panel, it's still inheriting some additional CSS that we don't have in the local tab. But it should be identical, and any problems are our CSS explicitly overriding it which we should remove. Thanks for filing!

Possibly, I'm not sure. I didn't change `alignLine` at all, but that code has moved around so something is going on. I can take it and try to look soon.

The `editor-mode` test timed out but that has been fixed on master. The problem was that that script it depended on was being GCed because it didn't introduce any global variables, so it was racy. You can ignore that failure or rebase.

Just tested this and the ride sidebar resizes fine, it's only the left sidebar. I'm guessing that there's an extraneous render and it might even be the editor, which would definitely be slow. Should be pretty easy to fix.

Sounds good to me, thanks!

The only tests that failed were cypress

thanks @wldcordeiro 

Couple things:
- i noticed that clicking on the collapsey thing did not work. Could it be a bug?
- i believe the buttons should be on the other side of the draggable? This might be an issue with how you've setup the headers?
- Could we do the double click behavior in a later PR? I think this is adding a lot to this PR and making it hard to review.

One reason I mentioned putting the button in the center is that the header realestate is more valuable. I.e I like the debugger buttons on the left and we have copy for the right side of the sources header. 

@helenvholmes Here's a little video. https://dl.dropboxusercontent.com/u/3788370/collapse-sidebar.mp4

@jasonLaster 

>  i noticed that clicking on the collapsey thing did not work. Could it be a bug?

Not yet implemented, just putting the skeleton there since it was going in a new component.

> i believe the buttons should be on the other side of the draggable? This might be an issue with how you've setup the headers?

Do you mean they should be in the tab bar area rather than in the sidebar?

> Could we do the double click behavior in a later PR? I think this is adding a lot to this PR and making it hard to review.

Sure.

@helenvholmes where would it be preferred to put the collapse buttons? In the sidebar headers like this? Or in the tab bar?

![screenshot_20160901_154403](https://cloud.githubusercontent.com/assets/580982/18185477/0aab5c80-705b-11e6-9026-df2b7455d8b8.png)

Based on your commit messages (I haven't pulled this down), looks like we ended up going with what's currently in the tools? (https://cl.ly/3S0B1D210I1T ?)

> @helenvholmes we talked about the idea of not having any icons, but a "gesture" where if the user slides it far enough in that it just collapses. Have we tried that? I guess there is the problem of how to open it back up.

I don't think we could have the gesture without the icon; with the icon, you click the icon, that opens it back up.

Adding this to the sprint as it's very small and we should prioritize staying in sync with m-c.

closing in favor of #899 

Test case: http://s.codepen.io/clarkbw/debug/PGYXoN (breakpoint line 24 of PGYXoN)

This isn't in the scope of what I call the "object inspector" though. I think this will be special functionality in the debugger, with it listening to events in the editor. The console doesn't use the editor, etc, so it will have to hook it up differently if it wants it. We could share the functionality that extracts all this info though. This will be in the next phase; right now we're focusing on landing the current debugger.

Screenshot of popup in chrome with source link:

<img width="525" alt="variable popup" src="https://cloud.githubusercontent.com/assets/95570/18097151/9dbd7b6e-6e91-11e6-9515-2aa261a17772.png">

The variable popup in the XUL UI wraps the variables view widget.  Guessing the variable popup in this UI will wrap the Object Inspector.

Would need to decide if this source link should be part of the header of a popup, or if it should be part of the Object Inspector.  IOW, should the link be included when the variable is shown in other places where the Object Inspector will be used, like the console output.

I am confused as to whether debugger.html has _any_ kind of tooltip when hovering any kind of variable variable.  The initial description here implies that it does (and requests an enhancement for the function-valued variables), while #1293 (marked as a duplicate of this issue) implies that it doesn't... Can anyone clarify?
Here's the old code

https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/views/variable-bubble-view.js
Sorry it's not clear. 

We're missing the tooltip, but that'd be a great next step. 
Sorry for the regression :/. 

The debugger was a total rewrite. I'll clean up the issue description soon as we have a much better product doc in the works. 

In reality, were not great about talking about upcoming work. We should get a lot better on that front!

We're planning on having a link to the definition and a formatted variable. 

We also want some goodies like add to watch expression. What extra info are you looking for?


closing this as the work will be tracked in #1574
> I am confused as to whether debugger.html has any kind of tooltip

My initial bug report was about the Firefox devtools as they existed at the point when I filed the bug.  I was told to file it in this repo.  Those devtools did have a tooltip, but it was missing some information I wanted.  The change to debugger.html then removed even the info that we _used_ to have.  :(
And I think marking https://github.com/devtools-html/debugger.html/issues/1293 as a duplicate of this one wasn't correct; if this issue is resolved as written we'll have the link to the function definition, but not the info https://github.com/devtools-html/debugger.html/issues/1293 is asking for!
The extra info that used to be there was some information about scope chain, as I said.  It doesn't have to be in the popup, if it's accessible some other way.
@jasonLaster How will the work be tracked there if the information about what work needs to happen isn't present there?  ;)
*shrug*.  I'm giving up on spending time on this, but I don't see how you will keep track of the specific feature requested here without having an issue about that feature, and in that case why that shouldn't be this issue.  The most likely outcome is that it will just get forgotten.
> Here's the old code
> https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/views/variable-bubble-view.js

For the popup to be _transient_: There's already a html tooltip popup widget as used for the [image thumbnails](https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor#Image_thumbnails) of Network+Inspector and the [cause js column](https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor#Cause_column). I think it's in https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/widgets/tooltip/HTMLTooltip.js
>  I'll be sure to investigate soon, unless you want to hack on a prototype.

@jasonLaster Appreciated, but sorry, no time, unfortunately (kids, job, life - in random order ;-) Filing a bug report is much easier (and something I can do "in between") than actually fixing it. Kudos to you and your team, thus.
It is amazing!

We should keep a consistent caps strategy for the project.  I use the lowercase: `debugger.html` 

There are some general formatting things that need to be fixed, like the triple tick marks to encapsulate code blocks.

> Should I make the changes suggested before that?

Yeah, go ahead with the changes suggested so far jand we'll merge this in.

@JasonWeathersby if you'd like, you can now use the reference docs for actions, available here: http://devtools-html.github.io/debugger.html/reference/

We may also see reducer docs as well if #708 gets merged soon.

This looks great, but to be honest this feels more like a blog post, with all the screenshots and specific references to how things are currently laid out. What if we just turned this into a hacks blog post?

I'd prefer to keep react/redux intros out of our specific docs because react is because used across devtools now, not just the debugger. I've always wanted a central place to document our devtools architecture and I want http://mozilla.github.io/devtools-docs/index.html to become that. I already wrote a [react intro](http://mozilla.github.io/devtools-docs/react.html) and a [redux intro](http://mozilla.github.io/devtools-docs/redux.html) there, so if it's missing anything we can improve that. We should be ready to embrace the rest of the devtools instead of throwing everything in here.

(Also, given that we are focusing on landing the debugger, I don't have time to check if everything in here is correct, but that's ok)

> Will the other tools be exposed to use standalone as well?

They will be, but not yet. I think we plan on merging this but working on it soon to make it easier to keep up-to-date (pointing to comments in code/flow types instead of listing references docs here, etc). Good work on this!

Shall we go ahead and merge this and figure out how to go from there?

ping @JasonWeathersby @clarkbw what is the status here? I'd love to land this soon :)

Sounds good!

I should have linked all the source files

@jlongster It is probably to long to be used for a hacks post. I get that you want to centralize all of the docs in devtools-docs. TBH I did not know about those. Will the other tools be exposed to use standalone as well? If not there should be something for the developers who only plan on using the debugger in that fashion. At a bear minimum I think having the current component arch (which is editable) is nice to have for a new contributor, especially if they already know React and Redux.

Should I make the changes suggested before that?

@clarkbw @jasonLaster Sorry I have been swamped on a couple other things. I will try to get this updated over the weekend or on Monday morning.

@clarkbw we can replace the actions after I land the other changes.

OK updated doc pushed

Yeah, definitely need to figure out eslint. The mochitests are failing because bug 1294686 hasn't landed yet. It doesn't recognize that path as a mochitest directory.

Thanks! I'll fix all this up.

We'll add docs over time. I can add some comments in the scripts though. For now I'll add a short section somewhere and link to https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Mochitest. We shouldn't recreate that page, and we'll probably keep evolving our specific workflow as we use it for the next week or so.

Getting there. I have a working mochitest just need to make sure that mozilla-central has the necessary changes (just pushed last night) and make sure our workflow isn't horrible. I've already improved several things so that you can edit the mochitests locally and firefox will automatically use them. Should be able to start writing tests later today, and we'll probably add more utility functions to `head.js` as we find pain points.

Unfortunately I'm stuck on bug 1294686 to be merged to m-c. It's been pushed to fx-team but for some reason it's taking a while to move to m-c. I'll work on docs though and hope to ready later today.

I like a lot of the stuff in your head.js. I was trying to use actions more directly, but I think you're right that we need to wrap things like step/stepIn/etc because we want to wait on the "pause" event, and users can still use actions directly if they want.

I'm not sure about automatically assuming the selected source though; I like to be more explicit. I'll have a test or two finished when merging this and we can talk more about it then; the API is still pretty simple but you do have to pass in a few more parameters which I think makes it clear what's going on.

So theoretically this is ready to go. Just waiting on a new docker image to build.

Oops, there were a few changes to the command action and main.js which I'm going to remove.

The first test passed! The failure is cypress. Going ahead and merging this because Jason approved this generally. I know there are a few conceptual differences, but thanks for letting me flesh this out. I think this will be good for long-term maintenance, but adaptable if we find the current APIs problematic.

Note that we are able to run our mochitests in ~7min, including the entire time for checking out docker. I think that's pretty good. Running all the mochitests will end up taking several minutes once we write them, but even if it's ~15min that's a whole lot better than before (waiting on try for hours).

Thanks! I'm pretty happy with how it worked out; I was worried we'd have to wait on a build and wait >30 min or something. The 7min is just checkout out the docker image unfortunately, so not sure if that can be reduced... but we could definitely run the tests in parallel (split them up into 2-3 "chunks" and run them on different containers). That's actually what try does (that's why there's dt1, dt2, dt3, etc)

I missed a bunch of linting errors which I just fixed (pushed straight to master). 

Yay! Will review tomorrow morning

looks like the mochitests failed on CI. Also, looks like we need to do some `eslintignore` stuff

It might help to start with some docs on this workflow: 
- `npm run mochitest` does on the first run and subsequent runs.
- how to update docker.
- where the tests + helpers live 
- what is mochitest - link to docs
- how to use `--jsdebugger`
- logging with `info`
- ...

It might also help to add some comments on the different scripts so it'll be easy for our future selves to update.

Sounds good. I look forward to writing some tests! 

Here's the [head.js](https://github.com/jasonLaster/debugger.html/blob/2ef93211c9ea78ca5645efccc8a60e224bf64fbe/public/js/test/integration-mocha/head.js) I was working off of before. pretty happy with the API. e.g. addBreakpoint assumes you're adding a breakpoint to the selected source, but you can pass in an optional source if you want to. 

Sorry, but I don't think this is a good idea. My first thought was that we should just inline this and not have it be a separate module, but I have other concerns about the implementation itself:
1. It feels weird to depend on node directly like this.
2. This pulls in the entire path implementation from node which is a whopping 44K.
3. We don't need an entire `path` implementation. We are only ever dealing with URLs, so it will _always_ be a forward slash. A ton of the implementation of `path` is dealing with cross-platforms paths. We don't need that.
4. Node's `path` methods don't always work on URLs. There are unexpected failures:

``` js
> const path = require("path")
undefined
> path.join("http://foo/bar", "baz")
'http:/foo/bar/baz'
```

For those reasons, we shouldn't use node's path module. I like what we have now; it's simple and it works well. I rarely run into problems with what we throw at it.

I like the simplicity of our current implementation. I was thinking we should look into replacing it with a proper library, but there isn't anything out there that is simple and works with URLs.

(I missed the discussion in the issue because I was on PTO/conference, sorry)

Thank you for putting the work in to this @jbhoosreddy, but sorry we can't accept it :( I would have mentioned this in the issue if I had seen it. I hate closing PRs after someone has put the work into them but this will break various code (see `join` above) and increase the code size a lot, and the current code works ok. If there is another solution, please open a new issue (I'll close this PR and the current issue)

@jbhoosreddy I'm not entirely sure we need to replace this anymore :D Unless you know of a URL-based path library? I couldn't find one anywhere, and it really is a lot simpler since we can assume forward slashes. But if you figure out a way that we don't have to maintain this though, that would be great.

One nit. Looks good though!

And, you now have a star on the project

Hmm, that's a good point. I didn't see that we were pulling in 44K. 

modified the PR to fix the nit.
1. removed utils/path.
2. updated references

We'll look into this in the future, but we have 1.5 weeks to write all of our mochitests and need to be sure that the debugger in the panel is actually working correctly. We're shifting to focus 100% on mochitests for the next few days.

Closing as we'll focus on merging work into the `head.js` that @jlongster is setting up.

I'll do a lot of this soon in order to avoid overriding changes in m-c. 

Thanks for all of the details. Great issue!

closing as we'll do this work in the toolbox and on m-c.

> How come some have separate issues and others not?

I think I was just mid-workflow.

This issue would be a good place to add docs, feel free to edit the top comment.

Taking this, my job to make sure these are all done.

We still didn't get the bfcache one done but I don't see good reason to keep this tracking issue open anymore.

Thanks for filing this! How come some have separate issues and others not? (edit: oh, you are in the middle of doing it)

Once we have a flow going (probably tomorrow, landing some stuff on m-c right now) let's ping some of the contributors and see if they'll help too.

I've landed the ability to run mochitests, and documented the general workflow here: https://github.com/devtools-html/debugger.html/blob/master/docs/mochitests.md

I'm working on some of the breakpoint tests right now. If someone else, maybe @jasonLaster, wants to start playing with this, it's ready. Just read the docs. We still need to flesh out the story for various things, like how to click the gutter in codemirror, but we can start writing tests. I'm writing a test that tests the CodeMirror breakpoint gutter but running into a few issues with simulating clicking, but hopefully after we figure a few things out it'll be quick to write tests.

My issue is something else; I think it's easiest if we use small test sources for the gutter tests that don't even need scrolling. The UI doesn't seem to be completely updated after `EventUtils.synthesizeMouseAtCenter` returns; I'm not sure if it's CodeMirror's fault or not, it could be doing something asynchronous.

> I may be wrong but shouldn't it be dbg.win.document.querySelectorAll("#foo") instead of dbg.win.querySelectorAll("#foo")?

Yep, you are correct! I will update it tomorrow :)

This is tracking ticket, so removing from a sprint

closing this issue as now we have a couple small mochitests, but i think we the main work is done. @jlongster @clarkbw re-open it if you see it differently 

yeah, bfcache is tracked elsewhere and it seems out of scope as it's more than just writing a test

> The UI doesn't seem to be completely updated after `EventUtils.synthesizeMouseAtCenter` returns

I may be wrong but I ran into the same problem writing another test. Brian suggested I use `node.click` instead and it worked.

> I've landed the ability to run mochitests, and documented the general workflow here: https://github.com/devtools-html/debugger.html/blob/master/docs/mochitests.md

@jlongster I may be wrong but shouldn't it be `dbg.win.document.querySelectorAll("#foo")` instead of `dbg.win.querySelectorAll("#foo")`?

This is not something we can do on the client. We should plan to do a fix in the server. 

changed the label to server
closing and moving to the bugs board as a note. We can always re-open when we're ready to tackle it.
I think we have enough tests to cover most of these cases. There are still ones we don't cover but the point of these bugs was to make sure we weren't missing anything crucial. Closing this because I've looked through these tests and all the ones we don't have are pretty straight-forward and mostly related to features we don't have.

All of those tests are already covered in https://github.com/devtools-html/debugger.html/blob/master/public/js/test/mochitest/browser_dbg-editor-gutter.js

closing this and adding a new "clean-exit" issue as these small edge cases might be nice. The closure issue does not seem useful as we have Reps

I'll take this one, already writing editor mochitests.

This will be mostly covered by #660. I added a test for modes which is the only thing we need to copy from this slice of tests. There are still other things we need to test from the editor, but we can close this issue when that PR is merged.

I think we have some good editor mochitests that cover the tests listed in the original comment, so I'm closing this.

Also up for debate is the highlighted line color and how long the fade should last. @helenvholmes might be able to help. Right now it fades for 1s because any shorter and it's too easy to miss.

I didn't notice before but there is an issue for this, #652

Just commenting for my own memory: @jbhoosreddy is looking into reproducing the linux failures, which look related to the key shortcuts library.

@jbhoosreddy If you'd like, it'd be okay if you removed those key shortcuts from this PR and then opened a new issue. The good thing with that is that fixing the key shortcuts library is a different kind of review

haha - looks great. 

All good points, thanks! I'll have a new PR soon.

@jasonLaster I updated the PR then. I commented out those lines and I will un-comment them once I fix it in a new PR.

Thanks @jbhoosreddy! it always feels good to merge!

closing this for now as we recently cleaned up the breakpoint styles and this is a bit stale.

There are some good ideas here like file grouping that we can revisit later

Closing this issue as it's gone stale. Opened https://github.com/devtools-html/debugger.html/issues/716 to tackle code search in the panel.

Will be fixed by #713

There's another issue open so closing this (see #645)

This is tracking ticket, so removing from a sprint

I can repro this now. Not sure why I didn't see it before, but we'll fix this immediately.

This should be fixed once #713 lands

I'm pretty sure this is a dupe of #675

This is also a dupe of #675

Woo awesome!

Wow, looks great

looks like there was a lint and the test timed out
509 INFO TEST-UNEXPECTED-FAIL | devtools/client/debugger/new/test/mochitest/browser_dbg_keyboard-shortcuts.js | Test timed out - 

@jbhoosreddy should be close to landing though

@jasonLaster Here is my `Editor` refactoring. I tried to add comments to explain things. But the idea is to group the code according to the workflows, instead of grouping it by functionality (i.e. being explicit what we are doing with `loading` and `editor` text).

Probably still need to polish some things, but it seems to be working. This is some complicated stuff and I think it's OK the editor has a bunch of complicated code it in. It should all be contained here and the rest of the system doesn't have to care about it. (The whole thing is still only 230 lines long).

I'll add some more tests and fix any errors that come up.

It might be easiest to view the file directly: https://github.com/devtools-html/debugger.html/blob/highlight-line/public/js/components/Editor.js

This is ready to be merged once tests pass and it's reviewed.

Oh, nm, I also need to fix up flow.

I obviously wasted some time on this one. But that's okay. Someone would have to spend time debugging this at some point anyway. Apart from any possible nits, I think the key shortcuts are good to go for all platforms, including Linux.

Also, Yay!

:thumbsup:

Great work on this! 

Thanks. We're working on fixing that 

Yeah, a fix should be out by Thursday, thanks!

@jlongster mind pushing the console patch when you have a moment

Oh nice. Sorry, wasn't sure what was involved here :)

I believe this is the same issue as #705

@MoLow Thanks!  

It looks like #721 just added instructions for Windows testing

Chiming in kind of late here, but if you ever decide to pick the virtualization thread back up, @jlongster, I'd love to jump in and help. Feel free to ping me here (or on Twitter).

nice catch

We shouldn't be going into the webpack module directly. The official binaries are installed in `node_modules/.bin`, so we should use `node_modules/.bin/webpack`. @clarkbw Can you open a new pull request to fix that?

Tabs don't work because there are too many sections to show. We were previously very constrained and could only have 2 tabs before the tab headers got too small. We will likely have around 6+ panels so tabs just don't work. There's not enough room.

I'm definitely interested in experimenting with different ways to display that information, but we were intentional about using an accordion. Sorry if you prefer the old way!

Yeah, I pushed it last night and it landed on m-c already.

It is, good call. Duping.

@jlongster i saw that, thanks! 

Thanks!

Looks great, just a few nits.

@jbhoosreddy Yeah, the previous mochitests were simply awful. Pulling everything out of the DOM and only checking it when needed allows us to write way simpler tests. The old tests were also written at a time where promises weren't even used.

Oh nice!  Thanks!

Looks good! Lets land this :)

Thanks, I think this is because we need to use `marionette` after 47. 

Thanks @SebastianZ for the feedback. We certainly plan to experiment with the way we show pause state. 

Would it help if we pinned the accordion headers so that they could not scroll out of view. 

> disclaimer: this is a bad photoshop job and the idea is not fully baked. I believe this is a mobile pattern though.

![screen shot 2016-09-14 at 11 47 10 am](https://cloud.githubusercontent.com/assets/254562/18519113/a9bca062-7a70-11e6-99b6-c94fda379db7.png)

This should be good to go.

Cleaned up several things. I think once your navigation tests land I can clean up this test a little bit; reloading is weird because the promise will resolve before the debugger is finished initializing so you need to wait explicitly on somethings like the source text being loaded if you need it. We could probably make that cleaner.

This is ready to go, I think. I added another small test for making sure that you can select a source and line and the debugger will appropriately go there, even if the source doesn't exist yet. This tests the whole `pending` state workflow.

@jlongster let me know when the docker image is ready and i can kick circle

Latest commit only tweaks a few more things. If the tests pass, I'd like to go ahead and merge because we need to get a try run going if I'm going to land a bundle update tonight.

You don't need to list all of the sources in the example - only the ones that you are interested in. If we added a source to an example you don't need to change any of the tests. If you do, it's because you are wanting to change how that test actually works, so you're rewriting the test or adding a lot to it anyway.

Doing this gives you control over what happens (only wait for 1 source because that's what you test, don't care about the rest), and makes it very explicit about what that action needs. I have to say I'm actually really happy about how it currently works after spending time on the old tests. Compared the the whole test file this is a tiny amount boilerplate and it makes things very explicit.

Another navigation is `reload`, and for example here I just wait for a single source to be available: https://github.com/devtools-html/debugger.html/blob/highlight-line/public/js/test/mochitest/browser_dbg-editor-select.js#L76. I always only list the exact sources that I'm about to use, and it's only 1-3 sources. We can keep discussing it for sure though.

sounds good!

(One last note...) If you are navigating frequently in a single test (usually tests just have a single `initDebugger` at the top) you can keep the array of sources you are interested in at the top and just do `navigate(dbg, url, ...sources)`. But I think it's rare for tests to be doing this, and most tests just have a single `initDebugger`.

> reload is another navigation

good point. I suppose back/forward are as well.

> It doesn't seem intuitive to know source count

agreed, that's why it would be  in the dictionary

> You don't need to list all of the sources in the example

I think it's likely that if we do this we'll find racey tests where they work most of the time, but occasionally fail. I like the rule of thumb that _most_ tests should assume the debugger is navigated and then do the test. If we are explicitly testing a partial loading state we can write that test to wait for only a certain source.

Actually, I might know of the real solution (yeah, I just keep talking to myself here, sorry...).

There's a problem where other tools try to link to a source in the debugger, but the source might not exist. This happens in weird cases where a URL gets printed somewhere to a source that isn't in the page we're debugging or something. In this case, the toolbox should open up a `view-source:` URL as a new tab.

The problem is the toolbox needs a way to know if the source exists in the debugger or not. And if the debugger is not initialized, it has no way of knowing "when" to check, because the debugger has no concept of sources being "done loading" because they are never technically finished loading. Right now, it just assumes the source will exist in the debugger.

The Right Thing is to somehow allow users to tap into the initial `threadClient.getSources()` call. That promise will resolve when all of the current sources are retrieved from the server. When it resolves, all of the current sources should exist in the state. If we let the console wait on that promise, it can check the current state and decide whether or not to open a source in the debugger or a new `view-source:` tab.

So how do we expose it? I don't want to create an arbitrary event or something like that. What we can do is make the `bootstrap` function return a promise that is resolved when `initPage` is resolved, which will be the `getSources` promise. The panel's `open` function can then block on `bootstrap` and the toolbox will wait to tell anyone that the debugger is opened until that finished initializing.

Theoretically, if we do that, and wait for the `jsdebugger` tool to finish opening, we can assume that all of the sources exist in the current state, so we don't need any of this. The only thing we need to wait on is loading source texts, which is obvious and natural anyway.

> I think it's likely that if we do this we'll find racey tests where they work most of the time, but occasionally fail.

If you're not waiting for a source that you expect to be there, you'll find it failing very quickly and often. I would blame the author for writing a racy test ;) because you are using state that you didn't wait for.

I think you're feeling the pain of this more with the navigation tests, but most other ones only need to wait on sources once at the top of the test, that's all. For the navigation ones, you might want to create an array of tests that you wait on.

But regardless, if there's a way for this to be handled automatically 100% without boilerplate, I think it would be better. And I think we can make that happen by blocking the tool initialization on the initial source loading. So all of this might go away.

Alright, squashing this and merging! 

I'm fine with this. Others on the team would prefer the other style probably though. But it's fine for now.

Oh, great, thank you! The test failure is unrelated and has already been fixed on master.

@jasonLaster Mind rebasing this?

@wldcordeiro you are on linux, right? Can you reproduce the above screenshot?

This will be fixed by https://bugzilla.mozilla.org/show_bug.cgi?id=1302833

Fixed by #713

https://github.com/devtools-html/debugger.html/pull/733

Will be resolved here https://github.com/devtools-html/debugger.html/pull/733

Sounds good. So this works? Does this mean we could `renderRoot(App)` ahead of the `startDebugging` calls too? If you wanted, we could still make `startDebugger` block on `initPage` as well if we can render beforehand. No need to do that right now though.

This looks like a good direction though; let's wait to merge until I cut a new release (tonight hopefully) just in case something goes wrong.

Is it OK to convert it to an .ico file first? Because SVG favicons seem to be only supported in Firefox at the moment ( http://caniuse.com/#feat=link-icon-svg )

> We will likely have around 6+ panels so tabs just don't work. There's not enough room.

So far there are just 3 panels on the right side, _Breakpoints_, _Call Stack_ and _Scope_ (previously only two, _Variables_ and _Events_).
If you intend to add more panels for the different breakpoint types, then I suggest to do it like Firebug did. I.e. add an accordion for the different breakpoint types within the _Breakpoints_ panel:

![Firebug's *Breakpoints* panel](https://cloud.githubusercontent.com/assets/958943/18529675/62333d88-7ace-11e6-935d-36de4e78c4ad.png)

> Would it help if we pinned the accordion headers so that they could not scroll out of view.

It would be better, though I still believe that the UI outlined above has a better usability and conforms better with the existing DevTools UI.

Sebastian

PS: Some years ago I suggested several UI improvements for Firebug's _Script_ panel, which might be worth considering for this regard.

> Does this mean we could renderRoot(App) ahead of the startDebugging calls too? 

Yes. 

> let's wait to merge until I cut a new release

Sounds good.

This looks good to go then

I wasn't thinking of breakpoints types; there will be whole new areas like watch expressions and threads. While we don't take advantage of it now, I think we have the potential to be better at showing you more information at once. For example, if we only shows the top few call frames, you could see your watch expression, frames, and scopes all at a single glance instead of having to click between tabs. Scrolling is also much quicker than clicking between tabs.

For what it's worth, we didn't just do this without any thought. It was an intentional improvement over the existing UI, and I'm sure there are more improvements we could make. I'd like to experiment with better ways to show the info too, but it has to be more amenable to lots of information than tabs are.

Resolved in #718.

Resolved in #691 and #718.

It's just a correction in the comment. I'll go ahead and merge this one.

That doc is a single source of reference for me when it comes to tests. I end up going back to it so many times, and I'm sure many other contributors would find it useful.

Do you think it will be possible for me to investigate this one, unless someone else is already planning on doing it?

this is amazing. i can't wait to try it out!

> > PS: Some years ago I suggested several UI improvements for Firebug's Script panel, which might be worth considering for this regard.
> 
> If you can link those suggestions I'd love to look through them. :bow:

Oops. Had the page open but forgot to add the link. Here it is:
https://github.com/firebug/firebug/issues/2923

> I wasn't thinking of breakpoints types; there will be whole new areas like watch expressions and threads.

In my thinking threads would have their own tab, watch expressions would go under _Scopes_.

> While we don't take advantage of it now, I think we have the potential to be better at showing you more information at once.

With the limited amount of space within the sidebar this is very tricky to do and the UI may get really crowded like it's the case in the Chrome DevTools when you're stopped at a breakpoint.

> Scrolling is also much quicker than clicking between tabs.

I strongly disagree with that statement. 1. Scrolling requires you to search for the section you want to see, especially when the sections contain a lot of information (might be mitigated with @jasonLaster's suggestion to pin the headers, but not sure yet how this would work exactly), 2. With all sections shown below each other the information you're looking at moves up and down when items in other sections are added or removed, which causes the UI to be unsteady. 3. They only allow to save one scroll position, so if you scrolled down it may happen that you e.g. only see some scope variables at a specific position. Tabs allow you to save the scroll position for each section.

Just to be clear, my opinion is that accordions are good to show related information like different kinds of breakpoints or the scope variables and watch expressions, but different information should be put into different tabs or other UI to be able to separate it better.

Sebastian

doc changes look good!

mochitest failed for unrelated reasons

`637 INFO TEST-UNEXPECTED-FAIL | devtools/client/debugger/new/test/mochitest/browser_dbg-console.js | Test timed out -`

I'm going to merge this in so I can finish up with the rest of the docs changes

I saw that in this run: https://circleci.com/gh/devtools-html/debugger.html/888

Trying additional runs to see if I can reproduce it.

It looks like the tests are failing because we need #736 to merge

The split console and the debugger live in separate iframes. If you use the key-shortcut API, you would need to set the shortcuts on a parent window that contains both the debugger and the console.

In the old debugger, we are using a toolbox API (useKeysWithSplitConsole) to forward some debugger shortcuts to the toolbox window when the splitconsole is focused:
- https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/panel.js#57
- https://dxr.mozilla.org/mozilla-central/source/devtools/client/framework/toolbox.js#570

useKeysWithSplitConsole takes care of attaching the shortcuts to the topmost devtools window, but calls the handlers only if the splitconsole is opened and the selected tool is the one for which the shortcut was registered. 

In https://bugzilla.mozilla.org/show_bug.cgi?id=1297113 , I am migrating this API to use key-shortcuts.js instead of XUL <key> elements. At the moment, the plan is to keep this useKeysWithShortcut API, but since the old debugger is the only user of this API, that could change if you have another implementation in mind here.

@jasonLaster thoughts? 

Yes, this is a good idea. I thought it was supposed to work like that, but there must have been a regression at some point. Thanks!

It looks like the storybook install steps have changes. Thanks for filing, we will fix.

This is a very small fix that definitely fixes the test, so going ahead and merging.

@jbhoosreddy go ahead! Just need to look at all the helper functions in `head.js` and make sure they exist in the API list.

(Moving the second half of the `editor-select` test also avoids having to do any reloads, because the only reason I did that was to clear out the state)

Sounds good to me, thanks. Too bad it needs to rewrite the whole file, but it does need fixing.

That test failure was fixed with #736.

I like it. Thanks! The failure is only the console test that was fixed.

Thanks! Sure, feel free to add the new APIs here too.

Closing this issue because it is not tied to our immediate goals. I think a local runner would be a nice workflow improvement and it would be helpful for writing integration tests for the standalone application, but I don't see us having the time to work on this in the near future.

Sounds good to me, thanks!

Closed by #816

Hi @SezginEge, thanks. We would love the help. At this point, i'm not sure if we have a clear direction for how we want to handle it. 

I would love to get your ideas here as it is a challenging problem.

Thanks for the research @SezginEge, this is great!

I think Chrome's is what we're looking for:
- tooltip - (first mention current state, then mention the next state)
- colors - both chrome and edge have consistent colors (blue for caught) (purple uncaught)

our colors are here [variables.css](https://github.com/devtools-html/debugger.html/blob/master/public/js/lib/themes/variables.css).

Would you like to take a stab at implementing this?

@SezginEge nearly forgot to point you in the right direction - here's the exception [function](https://github.com/devtools-html/debugger.html/blob/master/public/js/components/RightSidebar.js#L143-L165). If you have any questions [getting started](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md), please stop by our IRC room. That's what we're here for. 

I think, we should use toggle button with different color variants. This is more visually descriptive single state button or contextual menu. 

I also added some images about how different modern browsers implemented this button. 

On firefox developer edition, you can toggle different states only with contextual menu and this is not visually descriptive.

![debugger-options](https://cloud.githubusercontent.com/assets/6282991/18767214/7e6bbb84-8126-11e6-92a5-428c5bbad8f2.png)

On the other hand, Chrome using toggle button with different color variants and Edge using toggle button with contextual menu.

These images from Chrome's early version: 
<img width="250" alt="vgnon" src="https://cloud.githubusercontent.com/assets/6282991/18766479/21051fd8-8123-11e6-8193-2d57da46d90c.png">

<img width="250" alt="3tsmz" src="https://cloud.githubusercontent.com/assets/6282991/18766485/288f7dca-8123-11e6-833a-27bfc9dfe23b.png">

<img width="250" alt="bgzoy" src="https://cloud.githubusercontent.com/assets/6282991/18766484/2680a6a8-8123-11e6-807c-6e1b93dc26fd.png">

Edge's toggle button:

![edge](https://cloud.githubusercontent.com/assets/6282991/18766960/5dcc15d2-8125-11e6-8758-90fc0f8557ff.gif)

Thanks @jasonLaster! You can assign this issue to me. I will send pr as soon as possible.

Rebuilt docker image, kicking Ci. This might work now.

Sigh, I forgot that I also need to pull in the local codemirror CSS when in the panel. Requires modifications to index.html. Done in [bug 1301511](https://bugzilla.mozilla.org/show_bug.cgi?id=1301511) and already pushed to fx-team.

I was hoping to land this, but might as well wait until tomorrow when everything's moved to mozilla-central.

Yay, test finally passed! The only thing that's failing is cypress, as this is an old PR. Going to merge this as it's important to get tests running with the local codemirror.

Fixed a small conflict

We do not have a pause warning anymore, so I am closing this and adding it to the feature backlog
(This includes the editor PR which will be merged first)

Rebuilt docker image, kicking Ci. This might work now.

Finally, tests passing!

Maybe for now, we could add a toolbar that matches the editor to the bottom of the sources panel with the option to turn off source maps.  

**yellow for emphasis**

![screen shot 2016-09-07 at 12 55 54](https://cloud.githubusercontent.com/assets/2134/18326419/7f9ec1fa-74fa-11e6-8f18-db4eb716642a.png)

But this is for @helenvholmes to figure out.

If we want more than a temporary fix I'd suggest we focus on the intent of usage.  If we don't feel that a user should need to toggle this during a session but we want the option available just in case I think we want this hidden, like in a submenu.  If we feel a user should need to toggle this regularly we might want to make the option more visible in the UI, like in a toolbar.

> Maybe it does just need to be a global setting in the toolbox settings menu,

This makes a lot of sense to me now that we're talking about the sources view separation and this as a toolbox level feature.  We should coordinate with the console on this when we come back around to source mapping.  I suspect they might want an option inline to at least toggle views given that they don't currently have an easy way to show both values like the debugger does.  Perhaps that could just be a local option vs a more global toggle in toolbox settings.

Are we still doing this?  I feel like the consensus was that we didn't need it anymore; except possibly as a toolbox level setting.  Even then I'm unsure if its necessary.

This issue is a bit confusing, I believe we landed on doing something like this

<img width="919" alt="screen shot 2016-09-27 at 11 45 06 am" src="https://cloud.githubusercontent.com/assets/2134/19392676/abcda2ec-91e6-11e6-82eb-daef5aa64d28.png">

Which requires some small design work and a bugzilla bug opened.

@jasonLaster what's the bug number for this work?

> what's the bug number for this work?

The bugzilla bug for this has already landed and the rest of the work is being tracked in #879 

@jasonLaster is this issue finished now?  #879 was merged in

That's a neat idea. I like the idea of embracing the fact the sourcemaps are easily faulty and making it easy for the user to flip them on/off. It's worth trying something like that and see what user think about it.

It might be worth going ahead and bringing back back that three-dot menu with a single item under it, not sure. That's still a pretty accessible place to toggle them.

Having key commands for the settings in the menu sounds like a cool idea, if there are keys available.

I'm not exactly sure how frequent it is, maybe others don't use it like I do. But sourcemaps have enough problems that we should make it easy to turn off, but I'm fine with a submenu. Might be good to get feedback from others on this.

That's true, we will make it easier to use even when sourcemapping goes wrong. We need to figure out all these workflows. I suspect we'll still want the ability to globally turn it off, because we'll always prioritize sourcemapped code, i.e. if stepping into a function we'll pull up the sourcemapped version first. Sometimes you just want to step through the generated code. Also, this affects other tools; turning sourcemaps off will disable sourcemaps everywhere, so console isn't sourcemapped and clicking on locations takes you to generated locations.

I hadn't thought about it being a toolbox-level feature before, and maybe that does impact the UX of this feature. Maybe it does just need to be a global setting in the toolbox settings menu, and we won't have to turn them on/off as much because we can provide better interacts between original/generated now.

Yep, Jason has a bug in bugzilla to do that but I can't find it right now.

I think the submenu is probably the best place to add some quick settings:

I see the source footer as a place for a single source's actions: pretty print, black box, maybe search...

I think the sources sidebar could work for source maps, but i agree that it could get busy

> I'm not exactly sure how frequent it is

I think this is tough to estimate because the old debugger would force you to choose. The new debugger, which is like chrome's allows you to see both the bundle and the original sources. 

Assume I want to view line 1234 in the bundle, that is still possible with source maps on. Another example is adding breakpoints. It is still possible to add a breakpoint to line 1234 in the bundle with source maps on.

I think it's useful to be able to toggle the modes, but I don't think it's so common that it deserves a key command or a more prominent location.

One cool feature would be a context menu option to view the original location or view the generated location. This would make it easy for people to understand the mapping that is going on and if they're transpiling, set more granular breapoints in the generated source.

> toolbox-level feature

I hadn't made that leap either, but that makes a lot of sense

@helenvholmes? do you feel like the settings can handle this? 

Yup

I actually think it might fit better here, since there's a) already a bar b) that sources sidebar normall is half that height and has a lot of things in it:

<img width="727" alt="screen shot 2016-09-07 at 4 20 23 pm" src="https://cloud.githubusercontent.com/assets/1720093/18327118/02c907ea-7517-11e6-9ed5-4b84061f364d.png">

I should stress I think this is more of a temporary fix, though. As features to the debugger get added I imagine we're going to need this submenu again:

<img width="349" alt="screen shot 2016-09-07 at 4 22 07 pm" src="https://cloud.githubusercontent.com/assets/1720093/18327166/3fe5e49a-7517-11e6-843a-90c3a34545ee.png">

I'm working on some more holistic designs for Settings, but I don't think they will make that submenu go away.

Debugger submenu: relatively quick actions that don't need UI, "Edit List" as last item
Settings: hitting "Edit List" deeplinks to Debugger section of Settings

I second what @clarkbw says; I brought this up to @jlongster yesterday as well. Without knowing use cases/the way people are toggling and using source maps, I don't know where they best belong. I hesitate to put them somewhere when we ultimately might move them.

James made sourcemaps and turning them on and off was an action people do with some regularity, which surprised me. (I thought they were infrequent actions.)

We could potentially also introduce a key command for it, and not have the UI for it front and center.

Thanks!! I think the ideal solution would be to avoid comparing the text. There should be a solution that doesn't require that, because it will be slow on large texts. We'll look into it.

Definitely a good bug. The scrolling needs to be reworked. Thanks!

Nice

I ran the CSS linter locally and it all passes, so merging this as it's only CSS changes. Eager to see if the dark theme works well now

awesome!

@jlongster it works kinda sortttaaaaaa

But better at least

Looks like I need to update the docker build since your console landed. Thanks for opening this PR; I need to update it today for other reasons too. I'll do that now.

New docker image available. Should work now.

Oh, I can't trigger it because I didn't create it. Can you kick the CI?

I reverted the image back to a good one, so you can use it now. Still working on updating it.

Mind kicking it again? :)

Sounds good

kicked

Several small nits but this generally is awesome :) Thanks for taking the time to do this, it helps _greatly_!

Generally I wouldn't worry about porting old tests too carefully. They are generally bad, but they are good to look at to see specific edge cases to test. Feel free to write simple-ish tests for now and just look at the old tests to make sure there isn't something important we're not testing. Thanks for carefully looking through the old test.

New version looks great (w/a few nits), thanks!

> The change is because after I took out the button tests (as per Jason's suggestion), there was not much my test was testing. So I decided to test the different key shortcuts.

Oh testing all shortcuts is great :) I was talking about this change:

```
-    keyShortcuts.off("F12", this.stepOut);
+    keyShortcuts.off("Shift+F11", this.stepOut);
```

Which changed code, not a test, and changes the step out to be shift+F11 instead of F12.

This is very close though. Thank you!

@jbhoosreddy #697 just landed

Hmm, @jbhoosreddy have you rebased lately? 

We saw some issues with bad builds earlier in the week, but i believe the build is good now

Just commenting for my own memory: @jbhoosreddy is looking into reproducing the linux failures, which look related to the key shortcuts library.

@jbhoosreddy If you'd like, it'd be okay if you removed those key shortcuts from this PR and then opened a new issue. The good thing with that is that fixing the key shortcuts library is a different kind of review

Thanks @jbhoosreddy! it always feels good to merge!

I modified the PR based on all the review comments.

My test is failing on Circle, but it looks fine on my end. I'm not too sure how to fix it though.

@jasonLaster I updated the PR then. I commented out those lines and I will un-comment them once I fix it in a new PR.

This is completed. It will work when an update is pushed to m-c.

Looks good, just a few nits. You could update `findSource` to check if the `url` param is an object which means it's actually a full source already and just return it. That would allow us to pass a source through any of these APIs.

I like the TAB_URL cleanup. We can talk about automating it later, but I like that's we don't process the test files at all (someone looking at both dirs sees that they are exactly the same), but maybe we'll do it eventually.

going to re-add the licenses

> someone looking at both dirs sees that they are exactly the same

that's a good point

closing as this is not a priority
Looks generally good except for my one comment.

> There's a new proposal in here

I think it might be good to split this up into two different PRs.  

We could get the small formatting fix in now and then look into alternate ways to highlight the paused breakpoint later.

> I think it might be good to split this up into two different PRs.

The reason it's not is because I need this simpler HTML to fix the margin bug with the "no breakpoints" cleanly. Also the new HTML makes it a lot more consistent - if you look at the code all those props should actually be on the outer component (so that you can click anywhere in item and it works), and it's all within a "breakpoint" class. The problem with that is that flexbox is applied to that class, etc.

I think it's weird to reuse the an icon that looks like a button (it looks like both the pause and stop on exceptions button). The arrow that chrome uses makes sense. So regardless of what we do in the future, I think this is an improvement that makes it feel more solid. 

(I do agree it's pretty subtle right now, but a bad icon (we've agreed on that) seems a worse temporary fix)

There are several small improvements here that would be harder to do without avoid simplifying the HTML so asked a favor to go ahead and merge this :) The design will be worked on very soon as we figure out a better way to show the paused state. Unfortunately I missed some linting errors in #703 because I didn't wait for CI which was my mistake, so I fixed this in a follow-up commit here. The rest passes.

Hmm, interesting. 

I personally am not in love with how the icon looks at the moment, but i do think some sort of badge would help. 
- a badge offers more information than highlighting
- highlighting might be confused with other selections, e.g. i selected it as i want to jump to that location.

For what it's worth, chrome is doing both patterns - in the call stack they have an icon, in the breakpoints they use a highlight:

![screen shot 2016-09-08 at 8 15 42 pm](https://cloud.githubusercontent.com/assets/254562/18371249/d12ec77a-7600-11e6-832c-219666273e0b.png)

One last minor nit, but thanks for tweaking this. Looks fine otherwise.

Thanks!

Handled in #876

> Call stack looks huge and it takes up too much space. We may use same line-height and font-size as breakpoint items.

Indeed, the padding there should be the same as the others.

> List item borders could be great for differentiating items.

I'd prefer zebra-striping for differentiating items.

> We can add hover effect for each section

Maybe? With the zebra striping it might not be needed? I'd have to see.

I guess zebra striping is already present but very faint. 

Made the following changes and I think it's a huge improvement.

Changed this line https://github.com/devtools-html/debugger.html/blob/master/public/js/components/Frames.css#L10

``` css
padding: 0.25em
```

and this line https://github.com/devtools-html/debugger.html/blob/master/public/js/components/Frames.css#L16

``` css
background-color: var(--theme-search-overlays-semitransparent);
```

The results are much nicer already.

![screenshot_20160926_154939](https://cloud.githubusercontent.com/assets/580982/18853197/2d8ff6c0-8401-11e6-8c71-0d5ddbe53453.png)

Hover effect could still be a small UX win but I think those two would be the most crucial changes.
@helenvholmes what are your suggestions?

@SezginEge sorry about kind of stealing it from under you, I wanted to see how things would look and it was such a small change. I have a branch with the two changes applied I can open a PR from.

Yeah, here's the HTML version: (just need to switch the `-f html`)

![screen shot 2016-09-09 at 08 12 05](https://cloud.githubusercontent.com/assets/2134/18392081/41bafba8-7665-11e6-9b7f-21e4a55b1f9f.png)

> I'd like a way to note private functions.

You can use the jsdoc `@private` to denote private function.  By commenting the function they will appear.

> is there a good way to split it up by file so that each set of actions pause, breakpoints is grouped

I'm trying to use the `@module` docs to make this happen.  It ends up looking kind of like this:

![screen shot 2016-09-09 at 12 19 53 pm](https://cloud.githubusercontent.com/assets/2134/18399809/c837d102-7687-11e6-937a-582048142175.png)

> it looks like some utils are pulled in

In that config it wasn't set to `--shallow` which prevents it from spider-ing deeper

Ok, I've got this in much better shape now.

![screen shot 2016-09-09 at 12 51 46](https://cloud.githubusercontent.com/assets/2134/18400779/397980dc-768c-11e6-92b4-a76109896b8a.png)

Ok, going to force push a new version.  

Any opinions on the docs directory name?  Currently I'm using `docs/actions` however you can add the `public/js/reducers/` directory (which I haven't done yet) and it will merge together the docs.

> Do you think it's possible to exclude the built html/md? I believe github might have that option

I don't think so... I believe i need to commit it all to the docs directory.

> I don't think you need the top code section for actions/pause etc. maybe a filename would be better if we can do that. Same with the header, I think Pause Actions would read better than actions/pause. Same with the toc.

I've tried a number of versions to get that better to read.  The `actions/pause` comes from the module names which all use that format.  Without that top level I haven't found a way to separate the reducers out in a future version.

> looks great, ship it.

Once this merges into master we should see it up and running here: http://devtools-html.github.io/debugger.html/reference/

Maybe something like `docs/reference` because they are auto-generated reference docs? Or just `docs/ref`. 

This looks great, I'm very excited to give this a try.

I've been thinking for awhile that we should be leveling up our documentation. I especially like the flow inference as it is a great motivator to continue adding valuable types.

It would be great to output a documentation page with a theme like this.
https://github.com/cutting-room-floor/documentation-theme-default

In terms of next steps, I'd suggest that we merge this and then add a couple small documentation issues:
- port @JasonWeathersby great action descriptions to inline documentation
- add support for reducers. Ideally we could document each action in the reducer the way Jason's docs lay it out. 
- add an HTML doc page, which would have a more concise TOC, which would give people a better idea of what our Redux backend supports.

There are many of things here to discuss, but this is a great step forward.

- I'd like a way to note private functions.
- is there a good way to split it up by file so that each set of actions `pause`, `breakpoints` is grouped
- it looks like some utils are pulled in

Wow, that looks great.
- Do you think it's possible to exclude the built html/md? I believe github might have that option
- I don't think you need the top code section for `actions/pause` etc. maybe a filename would be better if we can do that. Same with the header, I think Pause Actions would read better than `actions/pause`. Same with the toc.
- looks great, ship it.

Oh, those should be sub-bullet points.  Are they looking strange in the rich diff?

@clarkbw oh no, just the single space threw me off and made me think it was a mistake since in Markdown it's typical to use 2 or 4 for sub bullets. If it renders right I don't care heh.

Alright, tests pass. This actually didn't need a new docker image because this removes the `reconfigure` which was the real problem. The m-c patch just makes sure that sourcemaps are off, but because the tests don't test examples with sourcemaps, they work fine if sourcemaps are on (which is what the docker image is testing now).

We'll see if there are any real problems when we go and update the bundle, as it will be testing all the latest code on all platforms. I don't think there will be, as the m-c patch just tweaks the default configs.

Responded to that minor nit, so need to wait for tests to re-run. :)

Try kicking CI again. I've had no problems in the last hour.

> it's typical to use 2 or 4 for sub bullets

oh wow, I think I've been doing it wrong this whole time

Does this happen when you just run `webpack`? If you are on windows (which seems like it), you might need to do `node .\node_modules\.bin\webpack`. 

I can't think of anything off the top of my head. I'm pretty sure other people on windows have been able to run it.

@jlongster could be problems with their `NODE_PATH`? http://stackoverflow.com/a/9588052

I think we have enough tests to cover most of these cases. There are still ones we don't cover but the point of these bugs was to make sure we weren't missing anything crucial. Closing this because I've looked through these tests and all the ones we don't have are pretty straight-forward and mostly related to features we don't have.

@jasonLaster review?

@wldcordeiro mind if @jacobjzhang grabs this?

Sure? I had put it aside while working on the sidebar collapsing but now that I got that done/we're reworking that I have time for this. But if @jacobjzhang wants it they can take it.

@jlongster @jasonLaster might be time to have a `develop` -> `master` branch setup so features can be iterated on? Just a thought

Yes, we've talked about that before. Not entirely sure because the whole point of nightly is to land features that might not quite be done yet, so it's a whole new layer on top of the existing Firefox trains. Personally I think we just wait to land things until they are a little more fleshed out, use feature flags when needed, and make sure the flags are actually working (here, CSS was still applied).

Not against it, we'll probably end up doing it, but there's already a good bit of process so need to figure out how to do it easily.

(fwiw, devtools team is looking into different way to deploy so we don't have to wait for nightly -> aurora -> beta -> release, and if we use a different system something like that totally makes sense)

@jlongster - mind holding off for a minute. It looks like the bug is unrelated.

To expand a little more, I foresee a problem with a `next` or `develop` branch where a certain feature on that branch is finished and needs to be released, but it lives on that branch with many other features which are not ready. So it doesn't necessarily solve the problem of cutting releases, as things will still be blocked.

I think we should just keep in-development things on branches and merge them in when they are "good enough". 

@jasonLaster sure, although I'm pretty certain this is the cause...

Confirmed that it fixes it and I already have a try run running here. I'll double-check before it actually lands.

This looks like an accident. It only has 1 old commit of mine? You may be trying to merge in the wrong local branch.

@jasonLaster I'm updating the contributing docs for this now, but I noticed this line which is in conflict with your recent node version requirement?

> Debugging node requires at least node v6.3.0 and running node with the `inspect` flag turned on.  Here's what running node looks like when running an example `server.js` file.

Should we update the minimum to `6.3.0`? Or change the docs to match the version you check for?

@jasonLaster with your PR (#768) this issue has been covered?

Updating from research, Sublime only highlights the file not the tree so collapsing the containing folder won't apply the highlight to the folder. Both however will highlight the selected tab rather than last clicked.

I can tackle this issue to have the same behavior.

## Sublime

![screenshot_20160919_214229](https://cloud.githubusercontent.com/assets/580982/18656850/0baaf590-7eb2-11e6-94f3-54abedc53477.png)

## Atom

![screenshot_20160919_214212](https://cloud.githubusercontent.com/assets/580982/18656853/10b60642-7eb2-11e6-8079-d5ed29ef5dc0.png)

Actually, @jacobjzhang @wldcordeiro I tagged the wrong issue. I intended to tag #606.

@jlongster actually fixed this earlier last week.

@helenvholmes, @clarkbw, @jlongster do you think this UI makes sense? Chrome has the remove breakpoint action in a contextmenu.

@jlongster we simplified the markup for the breakpoint, which makes it tougher to implement right-side actions. Does this still make sense considering that?

In file search hasn't landed yet. There was a PR to put the groundwork in but it was reverted to get some more attention. Keep an eye on the project, and more improvements/missing features will land. 

Thanks @fflorent. Unfortunately we had to launch with a limited feature set, but we're working on catching up quickly. 

I'm working on in file search and imagine all file search will be done soon. @helenvholmes has designs for a nice sublime like project search. 

Go for it. 

This would remove it completely from the list, separate from toggling its checkbox, correct?

The interaction makes sense to me. [Here's the link](https://dxr.mozilla.org/mozilla-central/source/devtools/client/themes/images/close.svg) to the 'x' icon I imagine we'd be using.

@helenvholmes yup. sometimes you just want it gone. Which to be fair, you can do when you click the gutter, but it would be nice to be able to delete it from the list.

When I write `node .\node_modules\.bin\webpack`, - error - https://gyazo.com/c460631678bf9ae894819f328610eba7
Can you give me ready project with coplied files? Because webpack can't compile them.

Hey everyone! I see this is assigned to me. I no longer feel I understand what this issue is for, even going over the backscroll :(

What is the desired outcome to be able to close this issue?

I think it makes sense, and I think it's a good reason to avoid the breakpoint icon because it would be weird to have two icons there but only one of them actually clickable. Now that we don't have the breakpoint icon, we could put an X there.

To clean up the UI a little, maybe it would only appear on hover? That's a pretty common interaction so that it's not so cluttered but you can still do it quickly.

> weird to have two icons there but only one of them actually clickable

good point. 

> maybe it would only appear on hover

That's what I was thinking as well.

:+1: that @jlongster the hover icon seems to make sense. 

That's very confusing because that is not what I have in `node_modules/.bin/webpack`. This is mine: https://gist.github.com/jlongster/f5fb0614a810eed719b470ba7c15fdbc

It looks like it's trying to run linux commands on windows, but for me webpack is all written in JS.

What version of node are you using? It's hard to debug this, and I think other people on windows have had no trouble.

I don't think it will help much to give you compiled files; you wouldn't be able to productively change anything or open PRs back into the project.

Yikes, you're right. That's terrible. I'll fix it now.

Also moving the search bar down to under the tab-bar seems like another good change.

@wldcordeiro agreed. Thanks for the list, Jason!

it's strange that it didn't warn me that i don't have it.

You may have it, depending on how to setup hg. One of Mozilla's scripts may have auto-enabled it for you. But it's good to just avoid it so others don't run into that issue.

Not sure we should change the actual `uuid` module; the point of the name was to make it clear to the user that we didn't have a proper uuid implementation. The only place this is used is `public/js/utils/redux/middleware/promise.js`, so it's probably better to go in there and avoid the uuid module entirely and use an incrementing id. Do you mind doing that instead?

Hardcoding the height seems like it might cause issues on various platforms; are we sure it's `24px` on all platforms, with subtle font rendering differences, etc? How did you get 24? I don't see 23 hardcoded anywhere and I assume this just needs to make it 1px taller to overlap the border.

@jlongster I'm not a big fan of hardcoding it either, `23` was hardcoded here though, https://github.com/wldcordeiro/debugger.html/blob/92b582e80174f0b821f823652fdd101765927334/public/js/components/SourceTabs.css#L19

@jlongster if I do that should I just remove the `uuid` module? It'll be unused.

I see, ok, that makes sense.

@wldcordeiro yeah, you can try that and see if anything errors. I don't think anything else should be including it.

@jlongster this is ready for review. It handles navigation, closing tabs, loading, errors (need to test), pretty printing, source maps. 

@jacobjzhang, @daviddahl just pushed a fix. It would be great if you could pull and see if this fixes it.

@wldcordeiro mind updating the branch, or giving us write permissions

@jasonLaster rebased onto master.

@clarkbw Probably good to have your feedback here. I'm not sure I feel the current template is very helpful, as there may not be an issue to associate with or necessary to have a screenshot/video. But you can decide what is good.

Looks like this issue is coming from this App.css html,body rule: https://github.com/devtools-html/debugger.html/commit/cf66f84da35299433da039ad66efcdc64424690e#diff-b0ea81e204f18a27b1f04a9cfb44581eL11

I'm inclined to disable the font-family as we want to be using system fonts. 

With it on:
![screen shot 2016-09-20 at 3 25 31 pm](https://cloud.githubusercontent.com/assets/254562/18685488/3e3d7c14-7f46-11e6-8a8b-2ddbf81757c8.png)

With it off
![screen shot 2016-09-20 at 3 26 52 pm](https://cloud.githubusercontent.com/assets/254562/18685512/57b4f14a-7f46-11e6-9822-8365fb6c58dd.png)

Do you set up the IRC notifications on circle's side?

Yep - already added

Looks fine, thanks.

@jlongster I lifted this from the template I use at work. I'll change it to what makes sense but figured it's a good conversation starting point. 

> I'm not sure I feel the current template is very helpful, as there may not be an issue to associate with or necessary to have a screenshot/video.

Usually if there isn't an associated issue we change the line to `Associated Issue: N/A` and if there aren't screenshots/videos we just drop the sections out and give a brief summary in the change list.

Cool, looks good.

Looks good!

Cool, sounds good

Thanks @Dalimil. Nice job with the Ctrl/Cmd strings :)

I'm not sure if this is in the issue, but I believe we'll take the copy out of the center pane now that it's up in the header. @helenvholmes thoughts? 

#750 

Ported to https://github.com/devtools-html/debugger.html/pull/788. Should be a simple merge.

I can't reproduce this on new installs.  It looks like this issue https://github.com/kadirahq/react-storybook/issues/15 which is usually about using an npm mirror.

Hmm, let me switch the storybook step out. Having a seamless install, getting started experience is important for the contributor [funnel](https://qph.ec.quoracdn.net/main-qimg-75afe1307fc3d04c84b6b19853fcbf2b?convert_to_webp=true).

Taking this, my job to make sure these are all done.

Looked into this briefly. It would be nice if step 1 was to update `h-split-box` so that we're consistent with m-c

@jasonLaster is this still in progress?

@jasonLaster I could look into that. Pull down `h-split-box` and diff it with `SplitBox`. I'd like to find out if it's possible to have a single `SplitBox` that does horizontal and vertical rather than two with an awkward name.

@clarkbw I was not using any mirror (I think, I am relatively new to npm ;))

Good idea. Looks like something isn't working; most/all of the tests are timing out. We should definitely update this though.

Yeah, that works for me. Can you fix the indentation changes in webpack config? (unless I'm missing something)

@apollo13 thanks for reporting this!  @jasonLaster is working on a fix in #789 hopefully this will be resolved soon.

@apollo13 no worries. actually the mirror comes in from the npm side. NPM uses a mirror when the the dep is `@org/something`, which makes it flakey.

This fixes  #793

I tried to move the documents into the `Editor` component using a `WeakMap` with the sourceText objects as the key, and it worked really well. However, there's one big drawback: no way to discard the document when a tab is closed. They will be disposed of on navigation and the next GC cycle happens, but naturally we want to keep the source text around even after a tab is closed.

So I don't have many more tweaks to suggest. I would like to group together the loading/error management to make that workflow a bit more clear, so I still made a commit for that: https://github.com/jlongster/debugger.html/commit/b34950400913f266f9d3370136da4f676346093f You can view the Editor.js file itself here: https://github.com/jlongster/debugger.html/blob/editor-docs/public/js/components/Editor.js

Basically, we don't really need any of the doc management for these "messages" and it's feels weird to handle loading and errors in separate places. That's my only suggestion though, the rest looks fine. Let me know what you think and if you make any changes.

Hello, I could help with that

@AndrewPomorski Sorry I failed to post here saying I was hopping on this. I have a branch already in the works. 

With the timeouts working I think this makes sense as long as it doesn't interfere with the build / bundle process.

I think this looks like a good start, lets try it out and update it as we go.

I like it, I think it needs an ok from @jlongster and a rebase

Example failures: https://treeherder.mozilla.org/#/jobs?repo=fx-team&revision=675331e308773c07e5b39cafd92ec1f4f591d152

Whoops, meant to include a screenshot

![screen shot 2016-09-21 at 12 08 13 pm](https://cloud.githubusercontent.com/assets/2134/18725198/21633f30-7ff4-11e6-988b-1e5767a7a2b1.png)

I don't feel good about the setup with all the timeouts. I've already run into issues when the timeouts were too short and while developing it just wouldn't connect randomly.

We need a better way to deterministically figure out if it's running. We should be able to detect if something is running on a port in the development server, right? If so, the development server should provide this info by checking the port (with some sort of system command) and letting the frontend know.

Agreed that this can't get in the way of Firefox development, we can make the docs better if that's the only option.

Yeah, this is fine for now. We should bring it back with (I guess) a simple template system, because this breaks the workflow of running it in production mode locally.

We could also avoid grouping all of the Chrome and Firefox tabs in one page. If you could "switch" between those targets (basically just flipping between two pages) that would solve the issue as well.

Looks great to me!

> Chrome and Firefox tabs in one page 

This sounds like a good idea. I drew some wireframes earlier today that I can share.

I think another fix would be to connect to each client separately. Then it is just a matter of showing tabs when the connection is made. No short timeouts needed.

I'll take another stab at this and report back.

Oh yeah - i forgot about that workflow again. One minute, let me revisit this.

Sounds great, thanks a lot for working on this Jason!

@zspitzer nice idea. 

[Debugger search designs](https://invis.io/AY8OEG3C6#/117937554_Debugger)

Still need: a good way to handle closing, and after chatting with Jason I think we both want to move the "1 of 7 results" string so it's not moving as people are typing.

@AndrewPomorski would you like to grab this issue? https://github.com/devtools-html/debugger.html/issues/800

@jlongster thanks for pushing back. I think this implementation is cleaner.

@jlongster this is updated. Is it what you had in mind?

@jasonLaster for the close button is there a prefered background or something similar to the gif? Right now the button just always shows as the x

@helenvholmes ^

@wldcordeiro I'd suggest the hover for the accordion header.

This doesn't have a close button background, but i just played with it and it's hard to get a circular background around the close button, so definitely not a requirement.

@jasonLaster I'm getting driven insane trying to add that! The containing `span` is above the icon for whatever reason and the `i` element that contains the svg is taller than its parent! I'll keep fiddling with it while waiting for guidance on what kind of hover bg to use.

I don't see any changes with the timeouts. Is it different because it renders the page immediately and changes as clients are connected? That is nice, but a timeout of 2000 could still disconnect from a working Firefox instance. These timeouts are still applied if you already have selected a tab and it's in the query string, and you are doing cmd+R to refresh the page and develop. So these timeouts are tested a lot, and when it disconnects randomly (for some reason sometimes the server would take a while to respond after hammering it a lot), it's annoying.

Did a quick search and there's a couple way to see if something is running on a port: https://gist.github.com/timoxley/1689041 What we should do instead is do that in the development server and provide information to the client about what's running. We can also be more confident in our messages to the user: "Chrome definitely isn't running on port 9000. Is that the right port, or did you forget to start Chrome?" kind of stuff, instead of just wondering which things are running.

Sorry for pushing back again, but I want to make sure that developers don't hit these timeouts and think our clients are flaky... and after experiencing that I'd really like to avoid it...

That's exactly right, except for one nit! The `<link>` tag should automatically appear when I flip on production mode, so we can just is `isDevelopment()` to check of that. But yes, this is great, thanks a lot!

Nice. Easy to fix

@jasonLaster here's the hover effect with a placeholder color.

![screenshot_20160921_160735](https://cloud.githubusercontent.com/assets/580982/18730837/95f07108-8015-11e6-970f-d062cf498629.png)

I can tackle it :) 

Here are the most up to date screenshots. Would someone from the community like to take a stab at this?

@helenvholmes Just noticed that the designs don't have a close button, which is important for going back to the selected source.

![screen shot 2016-09-21 at 8 18 02 pm](https://cloud.githubusercontent.com/assets/254562/18733364/454dad06-8038-11e6-9b26-d834eb6587d6.png)

Cleared the milestone as this can be done by a community member.

> What we should do instead is do that in the development server and provide information to the client about what's running

I agree. This feels out of the scope for this work as chrome and firefox are slightly different: firefox awaits a WS connection, chrome expects a HTTP list/json calls. I just tried doing a simple server on port 6080 `python -m SimpleHTTPServer 6080` while firefox was running and did not get an error which was strange. `python -m SimpleHTTPServer 9000` did throw the correct error.

> when it disconnects randomly (for some reason sometimes the server would take a while to respond after hammering it a lot), it's annoying

That's a good point. It took me a while to grok this as when i timed some things it was fast. Also, I have not hit this flakey connection problem (and realized it). Maybe i've hit it and not connected the dots.

> Sorry for pushing back again

No worries. I dropped all of the timeout changes from before. Now both connections are back to 6 second timeouts. The only difference is that chrome and firefox are independent so waiting on chrome to connect does not slow down firefox.. This fixes the initial problem and I can file a subsequent issue for detecting chrome and firefox servers.

@jasonLaster I can take it up

Thanks @akashmohapatra. Feel free to ask lots of questions. Also, have you been able to [get started](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md)?

Here's the latest design for the "in file" search.

Changes:
- moves search to above the editor
- show a summary of the responses (this will likely move)
- show an error message when nothing is found

We'll also likely add a close button before the designs are finalized.

Would someone like to take a stab at updating the UI?

![screen shot 2016-09-21 at 10 37 47 pm](https://cloud.githubusercontent.com/assets/254562/18735420/b8113a84-804b-11e6-8042-16f231180158.png)

Yes, have the setup in place. Will ask as I go along :) 

@wldcordeiro I think `var(--theme-selection-color);` would be a good value for the close button hover state. 

@wldcordeiro I just noticed that the close X is now missing. I took a stab at showing the circle and this is what i came up with

``` css
.close {
    width: 16px;
    display: block;
    text-align: center;
    border-radius: 10px;
    background: red;
    height: 16px;
    margin-top: 2px;
    line-height: 14px;
    color: white;
}
```

There would probably be some styling of the `fill` for the svg path so it's highlighted on hover or something like that.

@jasonLaster bizarre... I have this.

![screenshot_20160921_211018](https://cloud.githubusercontent.com/assets/580982/18736010/d7b3d3c6-803f-11e6-8f28-5a57902b1b3f.png)

Curse browser rendering differences!

@jasonLaster @jlongster is there a doc or something that lists the different keyboard shortcuts available? I'd like to come up with a list of tips to cycle.

@caprainbrosset I agree. 

@wldcordeiro I hope you don't mind, but I hacked a bit on top of your work:
- play with the colors
- hover transition
- position of the close button in the tab
- general ocd :) a.k.a design is tough

Feel free to push back on any of my decisions, but felt like it would be helpful to hack on it a bit instead of describing some of the things I saw.

[patch](https://gist.github.com/jasonLaster/3d03e2f7aa3d4dab46c5641988f0223e)

## Screenshot

![screen shot 2016-09-22 at 8 52 01 am](https://cloud.githubusercontent.com/assets/254562/18748782/d7f5d2aa-80a1-11e6-8b3c-fba9aa8748aa.png)

## GIF

![](http://g.recordit.co/LXPb7y04YV.gif)

Thanks for the feedback @captainbrosset.

This is somewhat addressed by #680. Unfortunately, I don't think it's intuitive what the language in the tooltip should be. Is it the current state, or is it what you will get if you click on it. Most of the time, it's the latter, but in this case the icon is not discriptive because all three states are the same :/

@jasonLaster: updated screenshots:

![screen shot 2016-09-22 at 9 14 27 am](https://cloud.githubusercontent.com/assets/1720093/18749471/00a7cdb8-80a5-11e6-9931-8ce52ba9389f.png)

Issue #791 has good suggestions for closing UX that I think we should use on these close buttons as well!

Thanks @helenvholmes. We can likely pull the close button out into it's own component so we can share it.

Updates on designs thus far (link in comment 2 will have the most up-to-date designs):
- Now has a close button
- Close button UX is address in issue #791 
- Regarding the "1 of 7 results" string: It doesn't look fabulous over on the right hand side, but since I'm still figuring out how to maintain our tabs based on James' feedback I'm going to keep playing with this.

I'm not sure about the circular close button? I haven't noticed too many circular elements in the debugger so far so I felt like the rectangle with a more slight border-radius looked a little better. I don't mind the color change as I wasn't sure which to use anyways and the `x` changing to white on hover is a nice touch as well @jasonLaster. @helenvholmes do you have some preferences/guidance here?

> circle / square

It seems like you can do either. Just about what feels right in the current project.

![](http://g.recordit.co/ZNlo9lMnFz.gif)
![](http://g.recordit.co/TKKCYneiEH.gif)
![](http://g.recordit.co/zs6poo8tUy.gif)
![](http://g.recordit.co/6qjzz8oxEm.gif)

@jlongster updated

> weakMap with sourceText objects 

Yeah, I thought about doing this with sourceTabs, but it seemed bad to include that data.

are you ready to approve this?

Cool, this looks great! Thanks!

Yeah, sorry! Didn't know if you were going to make another pass or not.

@jasonLaster look good now?

FYI, I looked at pulling out the code in here https://github.com/devtools-html/debugger.html/blob/master/public/js/components/RightSidebar.js#L13-L15 to the `utils/text` module as well but it wasn't quite as clean.  Feels like there should be a better higher level solution, like possibly the keyboard-shortcuts module could provide this.

Shouldn't the SplitBox component now live in `lib/devtools`?

Yup, we can move it to lib/devtools and land those fixes in m-c

Yay! I am liking this a lot. Some minor nits:

Let's make the SVG on hover white, instead of that dark gray.

If you could add a `transition: all 0.25s easeinout` on `.sourcetab .close`, it will match the other animations we have so far. (I wonder if that should just be made a variable...)

Thanks for the work @wldcordeiro!

Hi @SezginEge, thanks. We would love the help. At this point, i'm not sure if we have a clear direction for how we want to handle it. 

I would love to get your ideas here as it is a challenging problem.

I think, we should use toggle button with different color variants. This is more visually descriptive single state button or contextual menu. 

I also added some images about how different modern browsers implemented this button. 

On firefox developer edition, you can toggle different states only with contextual menu and this is not visually descriptive.

![debugger-options](https://cloud.githubusercontent.com/assets/6282991/18767214/7e6bbb84-8126-11e6-92a5-428c5bbad8f2.png)

On the other hand, Chrome using toggle button with different color variants and Edge using toggle button with contextual menu.

These images from Chrome's early version: 
<img width="250" alt="vgnon" src="https://cloud.githubusercontent.com/assets/6282991/18766479/21051fd8-8123-11e6-8193-2d57da46d90c.png">

<img width="250" alt="3tsmz" src="https://cloud.githubusercontent.com/assets/6282991/18766485/288f7dca-8123-11e6-833a-27bfc9dfe23b.png">

<img width="250" alt="bgzoy" src="https://cloud.githubusercontent.com/assets/6282991/18766484/2680a6a8-8123-11e6-807c-6e1b93dc26fd.png">

Edge's toggle button:

![edge](https://cloud.githubusercontent.com/assets/6282991/18766960/5dcc15d2-8125-11e6-8758-90fc0f8557ff.gif)

Thanks for the research @SezginEge, this is great!

I think Chrome's is what we're looking for:
- tooltip - (first mention current state, then mention the next state)
- colors - both chrome and edge have consistent colors (blue for caught) (purple uncaught)

our colors are here [variables.css](https://github.com/devtools-html/debugger.html/blob/master/public/js/lib/themes/variables.css).

Would you like to take a stab at implementing this?

@SezginEge nearly forgot to point you in the right direction - here's the exception [function](https://github.com/devtools-html/debugger.html/blob/master/public/js/components/RightSidebar.js#L143-L165). If you have any questions [getting started](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md), please stop by our IRC room. That's what we're here for. 

Thanks @jasonLaster! You can assign this issue to me. I will send pr as soon as possible.

Thanks. James is changing get URL in his PR, for the better, so we should probably wait on this. 

Really happy that were mapping now and can type more. Let's keep this up

@jasonLaster I was doing this but noticed I'm not really sure what the `client` option logs as I didn't see any additional output. Also could you explain what is in the `firefoxProxy` logging? From a glance it looks like a verbose output in the webpack console.

As #716 mentioned, You can refer the gecko patch which use `key_shortcut` to catch Codemirror related shortcuts https://reviewboard.mozilla.org/r/80700/diff/2#index_header

Looks good, thanks

Sounds good. One thing to keep in mind is that we want to pull the fake toolbox out into a separate project so the console and other tools can use it when developing locally. This could get too debugger specific (the console won't be able to target other servers yet). I think if we keep the designs simple enough it'll be easier to adapt across projects, and we also don't want to take on a project that is re-creating `about:debugging` (go to `about:debugging` in Firefox). Basically: the simpler the better in my opinion, but some styling and more instructions would be good.

It might be good to pull in bgrins/linclark early on this as we want them to adopt this, and bgrins has been helping prepare other tools for running in a tab.

Also, you don't need to go to `about:config`. Users just need to open the devtools and turn on "Enable browser chrome and addon debugging toolboxes" and "Enable remote debugging" in the Advanced Settings. That's a lot easier than `about:config`.

> The browser pages have a launch button so you don't have to think about it

I'm a little hesitant to make it this complex. We'd basically be re-creating `about:debugging` at this point which is a pretty complex project. We're 2 people working on a full debugger and I'd rather spend our time on more important features.

Thanks for the feedback:

> separate project
- I believe the can be pulled into an `RDP Client` project
- I'm hesitant to call it a toolbox as that implies the tool navigation aspect as well as the client connection. _overloaded words sigh_

> about:debugging
- thanks for mentioning, I had not considered the overlap. 
  - This will be important to consider if we consider connecting to service workers, i'm not sure if there's an RDP method that exposes them. 
  - Addons is another story, and my assumption is its not relevant for the standalone case.
- the main difference is that the focus here is on multiple targets (chrome, node) and perhaps launching a browser or invoking a script.

> bgrins/linclark
- absolutely. @bgrins, @linclark is there specific console feedback or general tool feedback? I'd be happy to talk when I get back from PTO (2 mondays from now).
- I assume that the frontend can be somewhat configurable:
  - exclude chromium panels
  - add additional panels
  - change Title to "Console"

> about:config
- I'm torn here as it's also nice to turn off the prompt message
- Also, there are more steps for using the UI (open devtools, open setting, find advanced mode, ...). I don't know, I tried to avoid this with selenium + creating a new profile, but neither marionette nor selenium at the moment is robust. (we probably could fix this though). Also, selenium has a nice feature for finding firefox in the directories)

> launch button
- I assume it could be as easy as an exec check and perhaps a ps to see if it's running... Definitely not something that I plan on putting too much time on, but you're right that these things can become more complex.
- this is something that probably won't be included in V1, which is just a re-skin.

---

Thanks for the feedback. It's good to think through how we want the developer / contributor UX to work as it will have a significant impact. Lets plan a time to talk with Helen and Bryan as well so that we can talk through some of the options. 

I'll hopefully be sharing a re-skin in a bit. It shouldn't change the current UX, so it shouldn't be blocked by these discussions.

> I'm torn here as it's also nice to turn off the prompt message

I always thought this should be surfaced in Firefox proper, the prompt should have "don't ask me again checkbox"

> Actually it's different. 6 is needed if you want to debug it with the debugger. 5 is needed for running the debugger.

We should have something like this sentence in the docs as well.  The question has come up a couple of times.

@clarkbw I'll open another little patch that clarifies this.

Yead, there's a bug to turn it off if when using `localhost`, which solves the issue. If you're talking about automatically starting with `npm run firefox` directly accessing the prefs makes sense, but for people who just want to make an existing running version of Firefox work opening the tools and clicking 2 checkboxes is pretty easy.

(didn't feel the need to respond to all your points, they are all good)

@jasonLaster you said the hot reloading section wasn't clickable in the TOC but I wasn't able to reproduce.

Thanks @wldcordeiro. @clarkbw mind taking a look?

I've made most of the requested tweaks. Still working on pretty-printing so I'll push a new commit when I have it.

There are a few things that I need to do for pretty-printing to work. We actually need to invert the mappings that are given to us from the pretty-print worker because they are mapping the wrong direction. The server implementation does this so I just need to copy that code over too. There are a few other complications but it shouldn't take too long to get it working.

I'll also add mochitests. As a follow-up, I think I will go ahead and move this back into a worker because I forgot about the wasm/asm.js use case which might have huge multi-MB sourcemaps.

I don't see too many places where this is going to conflict, actually. Just 2 places at at least, and it should be pretty small. I'm happy to rebase on top of this and fix the conflicts.

@clarkbw @jlongster took the examples out.

Sounds good

Can be closed

@jlongster how do I go about seeing the sources dropdown in `SourceTabs`? The second commit addressed it but I don't know how to get it to show up to confirm I didn't break its rendering.

@jasonLaster Sorry for long period of inactivity.

Here is what I've done so far. Let me know if you have comments on the refactoring of `source-maps`. I thought about creating a specific module for selectors related to sources.

I still need to implement the toggle function for Firefox.

@jasonLaster is out traveling for a week
@jlongster can take a look
Also, related to the source maps work there is a PR already open doing refactor work #807 that might conflict with this

Really great idea, sorry I haven't done this before.  I needed to read up on how its done and now I think understand what we need to do.

As far as I can see there are only 3 sets of permissions.  Admin, Write, and Read.  Admin allows inviting people to teams, Write allows all write permissions to the repo (push, labels, issues, etc), and Read is used for private repos.  The Write permission seems a little more broad than I had expected but I don't think it will be an issue, most things are fairly easy to undo.

Here's my plan:

Two groups
- debugger
- debugger-core

The main group `debugger` is what everyone will belong to and gives write permission to the repo, we can add contributors to this group.  I'm not sure what the exact process or qualifications should be but @wldcordeiro certainly belongs in there. 

The core group is the admin group which would likely be @jlongster and @jasonLaster and allows them to invite people into the debugger group.

I could have sworn the permissions were more granular. It had been a while since I looked at them on a repo. 

This is the recommended system for issues only access https://help.github.com/articles/issues-only-access-permissions/

Seems like a complicated way of doing it. Hopefully Github adds more granularity at some point. 

Also it appears there are linting issues here.

```
/home/ubuntu/debugger.html/public/js/components/RightSidebar.js
  157:1    error  Line 157 exceeds the maximum line length of 80  max-len
  157:93   error  A space is required after ','                   comma-spacing
  161:1    error  Line 161 exceeds the maximum line length of 80  max-len
  161:100  error  A space is required after ','                   comma-spacing
  164:1    error  Line 164 exceeds the maximum line length of 80  max-len
  164:88   error  A space is required after ','                   comma-spacing
```

@wldcordeiro When i run "npm run lint" command, i am not getting any error on js files. But CI founds errors. Is there could be any problem on linting tool?  

@SezginEge I had similar happen to me with a PR, I think CI might run on the transpiled code? @jlongster might know why the output differs (could be a need to `npm install/update` for the lint preset as the CI builds the env each time?)

@jlongster Do you have any idea why i am having this issue? Before sending another commit, I want to make sure everything is okay.

Thanks guys. This PR looks good. Also nice job iterating on the solution. 

CI should be the same. If try npm update. Also jlongster can run SSH on the CI build to check. 

Looks good. Was thinking pulling out the close button would be nice. Maybe we want the hover background to be red?

This looks good. 

I like the source-map refactor. 

Also the actions look good. Nice job updating the tests as well. 

The big question will be whether we merge this before or after James's source map refactor work. 

Actually probably a soft grey for the remove button. 

I liked the consistency of having the same styling as the the tab close button. 

@jasonLaster Is everything okay or should i update anything? 

Try to run `npm update` and then `npm run test-all` if it's still passing locally it must be CI weirdness. Otherwise the lint preset update and you were on an older version. 

@SezginEge looks like these are the remaining lint failures. Jason is on PTO for the week.

``````
  148:8   error  Expected indentation of 6 space characters but found 7  indent
  149:37  error  A space is required after ','                           comma-spacing
  157:8   error  Expected indentation of 6 space characters but found 7  indent
  158:37  error  A space is required after ','                           comma-spacing
  165:7   error  Expected indentation of 4 space characters but found 6  indent```
``````

I would merge James's work before as I need to do little linting fixes, and correct the implementation for Firefox command (I finally found how to do it), and fix conflicts between this branch and the master branch.

There is more to configure than just opening the page, so that may complicate some things. Also I would want this to be behind a preference in the local config. 

@wldcordeiro You need to open enough tabs that it runs out of space, and it will group the rest of them under that dropdown.

I see. A slightly better name maybe "overflow menu"  as the name didn't make it clear that it was for that to me. Thanks @jlongster 

Agreed, not sure how that name made it in there. We thought about using that icon as a settings menu somewhere else, so that's probably why.

These changes look good. My only request is to remove the `Refactor:` prefix from the commits, and I wouldn't really consider this a refactor anyway. Just describe the changes in the messages. Thanks a lot!

Check your version of eslint: `eslint -v`. Mine is 2.8.0. It's common for differing versions to be different with applying rules.

Worst case, just fix the errors from CI and get CI passing and we know the code is fine. If you're going to be opening many PRs though, you probably want to fix it locally. I'm betting you have a different version of eslint overriding the local version we've installed in `node_modules`.

@jlongster I've been trying to use something like this for my commits heh https://seesparkbox.com/foundry/semantic_commit_messages but I can change the message too.

The code looks great except one small thing. Thanks!

I prefer not opening it automatically, it's more annoying than it's worth. I may stop the webpack build and restart it, but I already have the tab open, so it'll just open another one. It may open it in the wrong browser, etc etc.

Thanks for the idea. I think we can greatly improve the output of the dev server, as right now it's a wall of text and it also outputs the examples url which is really confusing. I'd rather simplify that text and allow the dev to choose where & when to open it. Additionally, in many terminals you and Cmd+click to open URLs.

I should be able to merge it today. Once you do a rebase I will review this PR.

Since we don't do it, it doesn't really help to only have commits from one person using it. I don't personally find it that helpful, especially this early on, because one commit may contain changes that covers multiple semantic meanings, and I'm fine with that.

So it's more consistent with our current commits to remove it, and consistency is good.

Neat, what does `space-between` do? Is that the same as applying `flex: 1` to all the elements?

@jlongster edited the commit messages and rebased.

@wldcordeiro That would be really cool, definitely in favor of that.

This is why I dislike the `^`. I wish we used `=` on all of our versions so we'd know that everyone is using exactly the same thing. It worries me too because depending on who is building it Firefox, we may get different code.

> This is why I dislike the ^. I wish we used = on all of our versions

I agree.  I think we should move to `=`.  I don't really see much value in different people using different versions of the required modules.

Especially with a bot keeping tabs on the latest version.  We can upgrade as needed and upgrade everyone at once.

> Especially with a bot keeping tabs on the latest version. We can upgrade as needed and upgrade everyone at once.

Do you know if greenkeeper will still work? The way I understood it is it won't notify you of updates with `=` because it thinks you explicitly want to stay with that version. But I hope we could get it to work.

(btw, even `=` won't guarantee we all have the same thing :( Dependencies of dependencies will still probably use `^` so all the transitive dependencies may likely be different versions depending on when you `npm install`. This is a serious problem with npm. Luckily I know some people working on a new tool that we might be able to try out soon to help with this)

@jlongster we could consider using `npm shrinkwrap` but I don't have much experience with it myself.

> Do you know if greenkeeper will still work?

Actually it will still bother us about modules we locked down with `=`.  It will only ignore modules we put in the ignore list: https://github.com/devtools-html/debugger.html/blob/master/package.json#L115-L121

Their goal is to keep you aware of releases and test out your CI on all changes.  Which I think still would work well with our goal.  

We could turn on greenkeeper now and start trying it, especially as we move to more `=` for versions.

> It worries me too because depending on who is building it Firefox, we may get different code.

This is actually my greatest worry.

> we could consider using npm shrinkwrap but I don't have much experience with it myself.

Since shrinkwrap is not part of the install process, it has many issues and it gets very difficult to manage. This seems like a good summary: http://jonnyreeves.co.uk/2016/npm-shrinkwrap-sucks/

Yeah, we can try greenkeeper again, especially if we can tell it to ignore things.

@captainbrosset Did you want to try and hide the label in this PR? I'm fine with merging this as it is.

Awesome, thanks a lot and thanks to the reviewers!

I'm going to push an update to Firefox at some point this week, maybe around Wednesday, so you will see it in Nightly then.

This pr closes #680 and #803 

Feel free to merge it now, I don't know when I'll have time to work on this other thing. So I'll submit a new PR when I do.
Thanks!

@wldcordeiro that's so cool. I just learned about it now but seems amazing.

@jbhoosreddy I started experimenting with implementing it for us but we have a more complicated setup so it will take a bit more effort.

Closed by #816

Closed by #816

It's taken me a while to get this working, mainly due to breaking the `run-mochitests-docker` script because the `source-map-worker.js` file doesn't exist anymore. These tests should finally (hopefully) pass. Going to wait to merge until later tonight to check on a few things. Before I forget, I need to file issues for:
- Moving sourcemap parsing back into a worker
- Pretty-printing
- Generate a consistent ID for a given eval source (and figure out where to put it, not on the URL)
- Integrate with the native prefs system

I wrote one basic test, but unfortunately I realized that we can't run the mochitests until we turn the feature on, because it uses the `firefox-panel.json` config. And we don't have the ability to flip it on just for a test. We need to integrate with the native prefs system which would allow this.

> Call stack looks huge and it takes up too much space. We may use same line-height and font-size as breakpoint items.

Indeed, the padding there should be the same as the others.

> List item borders could be great for differentiating items.

I'd prefer zebra-striping for differentiating items.

> We can add hover effect for each section

Maybe? With the zebra striping it might not be needed? I'd have to see.

I guess zebra striping is already present but very faint. 

Made the following changes and I think it's a huge improvement.

Changed this line https://github.com/devtools-html/debugger.html/blob/master/public/js/components/Frames.css#L10

``` css
padding: 0.25em
```

and this line https://github.com/devtools-html/debugger.html/blob/master/public/js/components/Frames.css#L16

``` css
background-color: var(--theme-search-overlays-semitransparent);
```

The results are much nicer already.

![screenshot_20160926_154939](https://cloud.githubusercontent.com/assets/580982/18853197/2d8ff6c0-8401-11e6-8c71-0d5ddbe53453.png)

Hover effect could still be a small UX win but I think those two would be the most crucial changes.
@helenvholmes what are your suggestions?

@SezginEge sorry about kind of stealing it from under you, I wanted to see how things would look and it was such a small change. I have a branch with the two changes applied I can open a PR from.

@helenvholmes can you take a look?

We can go ahead with this system for now.  I need to do more research into groups like Node who have a process for bringing contributors into teams but there's no need to block on that just yet.

> We can go ahead with this system for now. I need to do more research into groups like Node who have a process for bringing contributors into teams but there's no need to block on that just yet.

Are you referring to the additional repo method you linked or the debugger/debugger-core groups you mentioned?

Sorry, I'm talking about the current method. 

I believe we are interested in trying a separate issues repo for RFCs at some time but not quite yet. 

Hmm nevermind, appears to have been some weirdness locally.

I restarted the dev server and refreshed and things were working as expected again. Closing.

> because the source-map-worker.js file doesn't exist anymore

This won't break things, but just a heads up that it is here as well: https://github.com/devtools-html/debugger.html/blob/master/bin/make-firefox-bundle#L34

@jlongster Okay, let me know when I can rebase.

Maybe 60/40(20*2) isn't the ratio we want, but I'd say the editor should take up more space than the sidebars by some amount.

Bizarre, it seems to be a dependency failing or something. Searching online leads me mostly to results with `npm` being the problem. Did you run just a bare `npm install`? Or did you do it as `npm install -g`? Also what OS are you on?

I personally really prefer the old background color. To me it makes it stand out way too much. It should be a subtle hint, not actually trying to differentiate a new section. There's already a ton of information in the right sidebar so we need to be conservative about how much weight we give things. I like tightening up the padding though.

Although I think it needs a little more padding. It almost likes like it has no padding.

I'm not too concerned with having consistent styles across the sections. They all contain different contain laid out in very different ways. Each pane should have freedom to display information as it chooses, but conform to only basic style choices like font-size, item padding, and maybe a few others, but otherwise feel free to optimize for its content. 

I will totally defer to whatever @helenvholmes thinks is best though. Obviously she has the most weight in this discussion.

@jlongster the color I chose might be a bit strong but the original might as well be non-existent it's so subtle. Padding I took the cue from the surrounding accordions but could be tweaked as well.

![screenshot_20160927_080134](https://cloud.githubusercontent.com/assets/580982/18876914/b3968fea-8488-11e6-9d8c-7f95d8f6537e.png)

Yeah, it could be a tiny bit stronger, but it needs to be subtle. Let's let Helen pick a color.

> Padding I took the cue from the surrounding accordions but could be tweaked as well.

The accordions have no padding by default, iirc. Each panel needs to specify its own padding, because it could to do anything. For example we want the background color to span the entire width of the panel, but the padding will be applied inside the item. And the breakpoints has a checkbox which is different visual treatment should not receive the same padding as text.

@jlongster I'll defer color choices to Helen as there are three themes that need them. I chose one out of the current variables rather than picking an arbitrary color. Sorry I wasn't referring to the accordions themselves but to their contents. Breakpoints for example uses `padding: 0.25em 0`, but as you said we'll defer. I just wanted to kick off something and adjust from there.

Sounds good! Thanks for opening. Good point about need to consider other themes.

Another adjustment that might be worth doing is moving scopes/breakpoints/etc into their own accordions so that their headings always stay visible in the sidebar but the contents move when scrolled.

@SezginEge go ahead, note that this hasn't been labeled with a difficulty yet (I don't have the best gauge for this task) so feel free to ask questions as needed.

I'm not sure what you mean by that. Why would we have multiple accordions?

I imagine us finding a better way to display all that information, but it's going to take time and we need to be careful about it. Most alternatives I've seen so far would not actually play out in practice. The way it acts right now is intentional; we played with a few different behaviors a long time ago but they all had serious drawbacks.

This is actually pretty complicated because the accordion API doesn't have a way to "open" it except for clicking the header. You can specify if the pane should be open by default [here](https://github.com/jlongster/debugger.html/blob/master/public/js/components/RightSidebar.js#L192), but that's only for the initial rendering.

If you want to learn React, this will be good. You need to implement a lifecycle method in the [Accordion](https://github.com/jlongster/debugger.html/blob/master/public/js/components/Accordion.js) component (probably `componentWillReceiveProps`) and update the local state to open/close based on the new items. That way we could re-render the accordion with new panes marked as `opened` and it would update its state and rerender.

Yep, I updated that too, thanks!

What version of `npm` are you using? I've seen the most issues with older npm versions.

This is due to the `geckodriver` dependency it seems. 

It might be best to use pixel widths like before. Any reason it changed to percentages?

If I widen my screen I would want just the editor to expand. In fact, does `SplitBox` convert the percentages to pixels? Because when you are resizing it with your mouse surely it uses pixels to track the mouse exactly.

I agree this would be a great feature to add, thanks for the suggestion.

> PS: I already suggested that (besides other Debugger UI improvements) for Firebug a long time ago.

This isn't that project and their issues aren't this project's issues.

Yeah, we should do something like this. Not sure what the UX is like yet. debugger statements are weird because everything is different about them: how to remove/disable/etc. When you remove a breakpoint, it does not come back on refresh, but a debugger statement would.

Anyway, yes, we want to figure this out but there's lots of UX and technical issues to figure out. We will need to add something to the debugger server to give us this information, because we don't even have the source text available client-side until you view a source.

We've definitely thought about adding bots when we need something automated, but so far we haven't needed to automate anything quite yet. Things we should automate at some point: filing an issue if the bundle.js file in m-c is changed, opening a PR to update m-c deps every week, etc.

Any specific workflow you want automated?

@jlongster I'm not certain. Maybe Honza has the best answer as I believe @jasonLaster just brought it over from m-c, I figured 20/60/20 because the previous values were `300px` and the percents I found were nearly the same number (I think it's like 306 on my screen)

I think this is done.

I don't think a PR bot like homu/bors would be useful till the project grew in size in some really significant way. But I would like the automation of m-c issues and upstream PRs.

@wldcordeiro We should always be using pixels for this stuff. It happened to be the same size on your computer, but on various screen sizes the panels should be the same size.

Percentages also have introduced a problem: if you resize the left panel now, the right one moves around because it's based on a percentage. I would recommend in this PR just going back to `300px`.

> > PS: I already suggested that (besides other Debugger UI improvements) for Firebug a long time ago.
> 
> This isn't that project and their issues aren't this project's issues.

I know. Note that I am a former Firebug developer. I just mentioned it, because it contains some more useful information.

> When you remove a breakpoint, it does not come back on refresh, but a debugger statement would.

Because the code can't be changed by the debugger, debugger statement breakpoints wouldn't have an option to remove them.

> Anyway, yes, we want to figure this out but there's lots of UX and technical issues to figure out.

Yes, for sure, UX will be hard to get right.

Sebastian

@jlongster how about the `maxSize`? I'm not sure what to set that to with pixel values that would be appropriate.

Yeah, `maxSize` makes a lot of sense as percentages. I'm assuming that it will work to mix them.

Thanks for the clarification @SebastianZ I think UX wise we'll definitely want to make it clear that a breakpoint set by a debugger statement is one and non-removable. 

![screenshot_20160927_094937](https://cloud.githubusercontent.com/assets/580982/18881205/b93533ac-8497-11e6-9683-d6270ef40aa3.png)

Like having a `[debugger statement]` text added to the left of the breakpoint detail or something else to clarify its difference.

Nothing seemed to break leaving the `maxSizes` as is and reverting the initials to `300px`, pushing the changes now @jlongster 

Output makes it look like `3.10.8` 

I did a little work on this previously in #422

Yes, done.  I just need to follow up with some docs in a PR.

If we added code coverage reporting I'd like a bot like coveralls, that'd be a nice one.

I think all these are great ideas. We're definitely not at a level to require a bot which would handle complex interactions with users. Also, it's a great idea to have bots automate m-c issues (in the future).

I was thinking of initially adding a **very** simple bot which might not do too much. But as the project requirements grew at some point, we could add functionality to handle more functionality.

@clarkbw maybe a bot which would see new users filing issues and respond with a comment pointing them to docs if they were interested in fixing it?

Once this merges we can circle back to #814 and rebase on top of this.

Alright, this should be the final code ready to be merged. Hopefully tests will still pass. Nothing really changed from before, just went through and made sure there were no `console.log`'s/etc.

@ThomasCrevoisier Just landed my PR. Sorry for all the conflicts.

I would recommend keeping your PR as focused as possible if you're implementing a single feature. I haven't gone through this PR too closely, but I'm not sure why parts of the source-map library were touched. There may have been a good reason needed for this feature, and if so, that's ok!

Cool, thanks!

Thank you :)

Fixed by #807

We can't write mochitests for sourcemaps until we turn them on. I have written a mochitest for sourcemaps (which isn't running because in testing sourcemaps are disabled), but we will write more when we enable them, which I'm hoping is later this week.

I think it's OK to move this to the next sprint, as the above tests do handle a few cases we need to make sure to test.

This was fixed by #805

This works now from #807 

<img width="781" alt="screen shot 2016-09-27 at 1 53 42 pm" src="https://cloud.githubusercontent.com/assets/17031/18885504/f217e5bc-84b9-11e6-9522-63b9925f7c65.png">

We'll add a "Debugger" section to the preferences panel to add a "Toggle Sourcemaps" option.

There's a shim that can be used for require("Services") that will give the same prefs API: https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/shim/Services.js

Note you will probably want to set `Services._defaultPrefsEnabled` to false so that it doesn't try to read the m-c pref files: https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/shim/Services.js#425

> We'll add a "Debugger" section to the preferences panel to add a "Toggle Sourcemaps" option.

Yep, something like this:

<img width="919" alt="screen shot 2016-09-27 at 11 45 06 am" src="https://cloud.githubusercontent.com/assets/2134/18887163/e3f874d6-84a7-11e6-90c9-a850d2781b3b.png">

> I believe that source maps were touched because the APIs received state. Now that i believe that's changed the problem should be simpler

GO BACK TO YOUR VACATION!

I am on archlinux.  Originally I did npm install.  I just tried npm install -g though, which seemed to work.
But then I run npm start and I get the same error.
[jake@localhost debugger.html]$ npm start

```
> debugger.html@0.0.5 start /home/jake/code/debugger.html
> npm run check-node && node bin/development-server


> debugger.html@0.0.5 check-node /home/jake/code/debugger.html
> check-node-version --node ">= 5.0.0"

node: v6.6.0
npm: v3.10.8
Listening for WS on *:9000
Will proxy to TCP on *:6080 on first WS connection
Protocol messages can be logged by enabling logging.firefoxProtocol in your local.json config
Hot Reloading can be enabled by adding "hotReloading": true to your local.json config
Development Server Listening at http://localhost:8000
View debugger examples at http://localhost:7999
/home/jake/code/debugger.html/node_modules/graceful-fs/polyfills.js:264
      if (stats.uid < 0) stats.uid += 0x100000000
               ^

TypeError: Cannot read property 'uid' of undefined
    at /home/jake/code/debugger.html/node_modules/graceful-fs/polyfills.js:264:16
    at FSReqWrap.oncomplete (fs.js:123:15)

```

Hmm, this didn't pay attention to the ignore list

https://github.com/devtools-html/debugger.html/blob/master/package.json#L117-L124

@clarkbw bizarre because that's exactly what their docs/repo says to do.

@jlongster should I add `react-immutable-proptypes` to our ignore list as well?  It looks like I missed that.

Thanks @lourd. 

Async actions are super interesting and something we're actively thinking about. We have an issue for exploring saga and wait for. There are a couple of interesting use cases. One is selecting a source to view before it's loaded like from the console or when the page is reloading and you want to show a previously selected source. 

I like your stylistic tweaks. They failed because we don't currently support object destructing, but I'd be open to addict the babel plugin. I've wanted it before for the same reasons. 

In terms of next steps, I'd be really interested to see a PR where redux saga or observsbles or wautFor was used to clean up one use case. Would you be interested in trying that? As a side note, this is one reason why open source is so useful. As a team, we haven't been able to prioritize this research, but it could help a lot. 

@clarkbw [wrote](https://github.com/devtools-html/debugger.html/pull/422#issue-167668695):

> The change as implemented listens for the PAUSED action and specifically for the one that is related to a debugger; statement in the code; defined as "debuggerStatement" from the Firefox client. This listening happens in the breakpoints reducer and creates a breakpoint in the state.

@jlongster [wrote](https://github.com/devtools-html/debugger.html/pull/422#issuecomment-235431860):

> The UX is a little weird to me that it's only "discovered" when it pauses on a debugger statement though. I don't know if there's a way around that though. I definitely don't want to ask the JS engine for all "debugger" statements, as that sounds very heavy and error-prone.

Did you consider using the [Parser API](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API)?
With that API it's quite easy to get the `debugger` statements and it provides better UX, because it doesn't rely on the JS engine to run the code.

**Example:**

``` javascript
Components.utils.import("resource://gre/modules/reflect.jsm");
Reflect.parse("var i = 5;\ndebugger;");
```

Sebastian

I think I'm OK with object spread. It's not in an future JS standard yet, so it makes me a little uneasy, and this would be the first syntax we'd use that could not run on mozilla-central.

Actually, thinking about it more, I don't think we can do this. This file is is part of the suite of mozilla-central modules, and we want to share the exact same code at some point. We need to stick to JavaScript features that can run without any transforming for now. In the future, when more of devtools is off of mozilla-central, it'll be easier.

@lourd Some history: we have a bit of a complicated setup. This project exists on github, but most of the Firefox devtools exists in a large repo containing the entire Firefox source code. That is in mercurial and hosted on internal Mozilla servers. Devtools code hosted there has no build step: it runs as normal JS. Right now we need to share code between all these projects, so we're restricted to what JavaScript features Firefox can run.

Most of the shared files are under `public/js/lib/devtools` and the `devtools-sham` directory. The redux middleware was a special case where we needed to change several parts to get it running outside Firefox, so I think we wanted to "own" it. However, I'd like to move back to sharing this with other devtools as well. Generally, we try to touch these shared modules as little as possible (most of them being in the `public/js/lib` directory).

Regarding async abstractions, yes, I think a simple promise middleware will get you very far. I'm not convinced our needs are complex enough for something like sagas/observables. Those are great for complicated sites that have a lot of different dependent workflows. The debugger generally just displays the state from the debugger server. But if you'd like to play around with it and see how our actions might look different, feel free to!

Thanks a lot for taking the effort to open a PR! Sorry we have these constraints that make it a little more difficult to get changes through. Please keep opening PRs! (filing issues before doing large amounts of work is good too, and may avoid unnecessary work) 

Unfortunately, this seems like a platform-specific bug in a dependency. Looks like it's coming from https://github.com/isaacs/node-graceful-fs.

I found the issue: https://github.com/isaacs/node-graceful-fs/issues/89

I have no idea which module is requiring this though :( I suppose you could try `npm install graceful-fs@4.1.8` and see if it'll upgrade it just for you. We're about to upgrade some of our deps so maybe this will go away.

`react-immutable-proptypes` should be safe to update. It's a simple library, unless it has a peer dependency on React 15 (which I doubt).

Posting here as I got a response on the issue I created. Greenkeeper's initial PR doesn't respect the `ignore` setting, I was told they'd update the issue when this was changed but I think we can choose to ignore this PR and all others will work as expected.

Ah ok, thanks! Do we care enough to manually update a few of the packages pointed out here?

I don't think it'd hurt but `eslint-plugin-react` was a 5.x to 6.x bump so that one I'd double check.

That bug has landed and this is harmless to merge because that option will be ignored for servers that don't support it.

@SebastianZ interesting API, only problem I see is that this project is aiming at working in more than Firefox and that seems to be a Firefox API. If Node/Chrome have something similar than it's more feasible.

There's a catch, though: we don't even have the source text to parse. We _definitely_ do not want to eagerly fetch all the source text, and then also parse all of them. That would be a huge performance problem. We are fine-tuning the debugger to be zippy even on huge sites so that's a no go.

This would have to be provided by the debugger server using C++ APIs to query the `ScriptSource` object specifically. 

I'll create a separate issue to see if someone else wants to update the packages.

Closing in lieu of #838

This isn't very risky because none of these are runtime dependencies, and mostly just linting.

Going ahead and closing this because we should move these files back into `public/js/lib/devtools` at some point, and we can't use the object spread on m-c. Thanks a lot for your contribution, please continue opening PRs!

@jbhoosreddy I have a bot idea for you: make it watch files that we've copied from mozilla-central and when it sees changes automatically open a new PR with the new files copied over. That might be quite complex, not sure, but boy would that be helpful.

Striping on the original is purposefully non-existent; @jlongster's correct, it's about not highlighting too much information at once, and [relying on white space to create line items](https://twitter.com/helenvholmes/status/742998316963790848).

Issue #700 is more about treating the padding and alignment in the right sidebar consistent; currently padding between items in accordions and left-alignments are all inconsistent. Getting everything lined up will help the vertical rhythm, as Jason put it, and consistent white space will help users differentiate what is a line item at a glance.

I think it would be best to left-align everything vertically first, and come back to visual changes like these second.

![screen shot 2016-09-28 at 2 29 35 pm](https://cloud.githubusercontent.com/assets/1720093/18927078/5228bcd2-8588-11e6-9f65-ec261fed61ed.png)

![screen shot 2016-09-28 at 2 30 01 pm](https://cloud.githubusercontent.com/assets/1720093/18927080/54947f74-8588-11e6-9946-31c4a4fbe4a9.png)

Since this was an issue with `node-graceful-fs` and they've since release a fix, closing.

> This would have to be provided by the debugger server using C++ APIs to query the `ScriptSource` object specifically.

Right. So I guess you'll need to contact the other browser vendors about this (or just implement this feature in Firefox' RDP and hope others take over the idea).

Sebastian

Talked to Thomas on IRC and came up with something. This is just a theory that I haven't actually tried yet, but if we want this to exist at the client layer, I think it looks like this: https://gist.github.com/jlongster/d12be12928337ff69b09e8f634ecd432

The code isn't the prettiest, but basically we need to explicit track which previous bps we removed. This is because `removeBreakpoint` always removes the bp instance from the store, and when you re-add a breakpoint, you get a new `BreakpointClient`. So a new client needs to be re-added to the store.

I did this pretty quickly so I could be mistaken. We can talk about it more.

still not working though

@jharrowmortelliti it isn't something we can do anything about though, the failure is in another package I'd take a look at the issue at `node-graceful-fs`'s repo and report there if the fix still isn't working.

On second look, maybe you want the second copy to separate the adding of the `status` property. As it's done now, when referring to `action` later it doesn't have a `status` property. I'll leave that decision to y'all.

this sounds like a fun (non-blocker) project! I'd love to do it!
I believe only files to track are the ones in public/js/lib/devtools @jlongster?

I'm actually making nice progress on this. If I come up with a good solution, we can look into review and deployment.

@jbhoosreddy That's so cool! Yep, all the ones in `public/js/lib/devtools`. You can look at `bin/import-deps.js` which is how we manually do it right now. #790 is already open for a latest update and needs some fixes, but we'll get it in soon.

@lourd I think the uniformity of the `dispatch` is good (each dispatch adds start/done/error status). This isn't going to be a bottleneck, so it's not a big deal. We embrace immutability and copy things quite a lot, and profile to see where we need to optimize.

Updating PR for those changes @helenvholmes mentioned. Should be ready a little later today.

@helenvholmes I resized the arrows a bit because they were larger than what appeared in your images and adjusted their margin. Looks like the alignment is there now.

![screenshot_20160929_104818](https://cloud.githubusercontent.com/assets/580982/18963466/59018674-8632-11e6-9e30-0312cb83adef.png)

Brian G. and I talked this week about experimenting with moving our CodeMirror with all its set up to npm as a way to try to share modules better. This is a good reason to: we could pull down the same thing that the Firefox panel is using and get this locally too.

There are places we disable user selection, but I didn't think we wanted to disable it globally. I suppose I'm fine with it, hadn't really thought it through. Thanks!

It's common for the `window` scope to take a while to populate - it needs to send a ton of data across the RDP. But the rest of the UI should not be dependent on that, so it shouldn't be janky... thanks for filing.

We've seen a few people report issues from linux (I think specifically arch). I'm not sure what the problem is; I'm not very familiar with WebDriver. In the short term, it's not very hard to manually configure Firefox and tell it to listen on a debug port: https://github.com/devtools-html/debugger.html/blob/master/docs/remotely-debuggable-browsers.md#firefox

It feels a little inconsistent to change the size of the arrow when it's used in several other places.

Honestly, I'm still unsure exactly what the original issue is about :) The main thing that I think needs tweaking is the top/bottom padding of the call stack. We could indent the contents some to make it more "nested", but that doesn't make sense with the call stack I think. 

@helenvholmes, the designs you posted aren't what we currently implement (grouping breakpoints by file, etc), so it's a little hard to talk about what to specifically change on our end. If you have any recommendations for small tweaks the current designs, that's great! Otherwise I think we should just make the call stack items a little tighter and that's all.

> We'll have the exact same code search UX as all the other tools, which is important.

Well, I put this too simply. We're going to want to customize it to the debugger, so I don't know if there's a way to build on top of this current behavior or not. If not, I think it's still important to consider the builtin UX and copy it so it's at least the same feeling across tools.

@jlongster draw a line from the pause button and the left edge of the accordion headings is left aligned to it. Also the arrows are larger than most of our svg buttons, they tend to be 6px and that was 10px

Moving the command bar over a few pixels achieves this too.

![screenshot_20160929_124315](https://cloud.githubusercontent.com/assets/580982/18967415/6187ae94-8642-11e6-9882-1cd76e7633f0.png)

My bad, I definitely read it wrong! I like this solution too, it's very simple. I'll merge it! Thanks for talking through it @wldcordeiro !

Separate PR is fine for this but I realized that while the breakpoints and scopes had the left alignment right, call stack did not (aside from its padding issues.) 
![screenshot_20160929_131122](https://cloud.githubusercontent.com/assets/580982/18968448/49a8e4ce-8646-11e6-8ada-0fc3e6d855d6.png)

That's because there's no checkbox or arrow icon. It would be really weird imho to give up precious spacing in the call stack for that. It's more important to see more of the function name.

This looks like a pretty easily scoped project if anyone else wants to take it on.

I would take a look at where we are using strings and find a way to disable it in specific component classes, globally could be the answer but this feels like it should probably be on a component level so as not to mess with other things where selection should work.

Here's the CSS you'll need to make this happen.

https://developer.mozilla.org/en-US/docs/Web/CSS/user-select

```
.unselectable {
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}
```

Could we enumerate some of the areas where we don't want selection? That would make this an easier task for a new contributor.

Haha this is so awesome! Great job! Does the source live in a repo or something? We probably should throw it up somewhere on heroku or something.

Do you think this fix has reached m-c yet? I just had a report that F11 was broken.

- [x] command bar
- [x] source tabs
- [x] sources header
- [x] sources tree?
- [x] right sidebar?

@jlongster @clarkbw feel free to add to the list.

This fix hasn't reached m-c yet. The previous debugger uses a different code to handle it. 

I created a bug to do fix it in the old debugger but then the new debugger got enabled on nightly so I didn't know what to do.

But I looked into fixing it and could push a patch to m-c if we want to do that.

I only see this used in one place and that's a devtools-sham file here https://github.com/devtools-html/debugger.html/blob/master/public/js/lib/devtools-sham/sham/css-property-db.js so just removing it from there would do? @jlongster can you confirm?

The last time this was tested was prior to Honza's SplitBox being brought in, let's reevaluate now that it's in?

Appears that the changes in Flow from 0.29 to 0.33 broke the flow lint due to a couple errors. If we want this change in maybe a follow-up PR that fixes the types CI complains about or a different PR that does both the update and fixes will be better.

Some docs on the changes that happened:
https://github.com/babel/babel/releases/tag/v6.16.0

Looks like it was from https://github.com/babel/babel/pull/3473 and https://github.com/babel/babel/pull/4576

Cool, thanks. I'll take a look later, ran out of time today. I'll poke around these small PRs over the weekend probably.

Yeah, we probably should just update it from m-c after that bug lands. I'm not sure how much Xidorn cares that we actually remove every ref, but probably just letting us know. It's pretty harmless to keep it here too.

Let's just sync some of those files next week and we'll get the updates from m-c.

@helenvholmes @clarkbw @jlongster @jasonLaster Thoughts?

@nt1m I find the tree much more useful than just the tabs, in fact across most people I've talked to the reason the old debugger was so disliked was because of its file list compared to say Chrome's file tree. In editors like Sublime Text and Atom the tree is indispensable. I do how ever like the idea of an open files section with quick actions like you've suggested. Brackets has something like that and it's quite nice as a separate section to the tree and top tabs.

> Suggestion 1: New tab page

https://github.com/devtools-html/debugger.html/issues/780

There are plans in place for some UX improvements there to the file search. I do like the idea of making a new tab button that also brings up the file search dialog though as some people are much more mouse oriented than others and it'd be a simple addition overall.

Could you post more of the log? Are there any specific packages in the logs like express throwing the error or something? I'm thinking it is possible that Windows firewall might be blocking Node.js or something but I'd like to see some further logs because Google isn't returning much for the error message alone.

I am getting `networkRequest is not a function` error on this line: https://github.com/devtools-html/debugger.html/blob/master/public/js/clients/chrome.js#L46

I checked firewall settings for nodejs and everything looks okay. :+1: 

These are console log screenshots from chrome and firefox:

![chrome-err](https://cloud.githubusercontent.com/assets/6282991/19022299/f22e2836-88dd-11e6-992e-df232caefbc3.PNG)

![firefox-err](https://cloud.githubusercontent.com/assets/6282991/19022294/e054cb10-88dd-11e6-9865-c19b5a853d98.PNG)

Since the SplitBox comes from m-c could it be a fix applied upstream @jlongster @jasonLaster? Or maybe our usage of it is wrong. 

Hmm, seems like the require call for `networkRequest` is using the destructured import

`const { networkRequest } = require("../utils/networkRequest");`

However, the file it points to exports the whole function as it's `module.exports` so it would seem that the change needed would be `const networkRequest = require("../utils/networkRequest");` that however has another error of its own on firefox because it tries to load the chrome client in the reject so that's just a matter of dealing with the error.

@SezginEge try that modification here https://github.com/devtools-html/debugger.html/blob/master/public/js/clients/chrome.js#L7 and see if the error persists. I have a pending PR with it and just want to confirm that it's not just me that it fixes it for.

Fixed :+1: Thank you for help. 

Thanks @SezginEge and @wldcordeiro for getting to the bottom of this.

@clarkbw do you think we could just use the `user-select` property? https://developer.mozilla.org/en-US/docs/Web/CSS/user-select

Thanks @nt1m for the feedback. The screenshots / writeup help make it concrete

> 1. new tab button 

I like the + to the right of tabs.

> 1. left sidebar file section + actions
- This is a neat idea, but I'm not sure I'm sold at the moment. largely because debugger and editor UX is different.
- The actions are cool, but likely not common enough to warrant surfacing on hover. 
  - i'm not sure if it helps to scan which tabs are pretty printed, or blackboxed. Especially given that you can select the source and see the info in the footer.
  - we could add these actions to a context menu in either the tree or tab.

Thanks for the feedback, this is just my 2cents at the moment. I'll think about it some more and hope others share their thoughts.

The unit used was `vh` shouldn't we be using the `vw` unit on the SplitBox's width? https://github.com/devtools-html/debugger.html/blob/master/public/js/components/App.js#L138 That may be the cause of this @jasonLaster 

ping @jlongster, mind giving this  quick read through. Should be pretty straight forward

I agree that we don't need to put the actions there. As a regular debugger user, it just doesn't help. Eventually we'll have a context menu so you right-click the files and probably do thing like that in the rare case, but it's not worth having dedicated UI right there.

The source tree is a _huge_ usability improvement, there's no question in my mind about that. I suspect you may not use the debugger as much as others (sorry if I'm wrong, maybe you just don't use it in the same way), but when dealing with a huge amount of files it's really helpful to see what's going on.

What's this do?

@jlongster according to @nt1m this lets Firefox change the direction of the content from left to right and right to left more easily. Simple enough addition I figured I'd open the PR and see whether we want it or not.

It's fine with me! Just curious. Note that we use a different `index.html` for the Firefox panel, so it's probably more important that we change in there. Are you willing to help land a change on mozilla-central?

@jlongster yeah I can use hg and make a change on m-c. Heh, I just did a `ctrl+p` and typed index.html to find it

 Look in `devtools/client/debugger/new/index.html`. If you don't mind, file a bugzilla bug and make a patch, and I'll review it, and we can get it checked in there too.

I'll take a look in a little bit, fixing up the greenkeeper PRs first

I will merge in this change with #851 because the related failing code needs changes that should be on top of there. I don't know why this suddenly broke, but it's having a hard time parsing an `away` inside a `for/of` loop.

Approved because the changes I suggested are minor in the grand scheme of things. Feel free to modify if you wish, but I'll leave this open for @jlongster to give feedback as well.

I never fleshed out my original comment, so here's a few more details.

I was wrong about trying to only move part of the sourcemap work into a worker. I think it would be OK once we have a fully parsed & indexed sourcemap to query it on the client, but there's no good way to only do part of the work (parsing) in a worker and transfer it back. We also don't want to fetch on the main thread, because we'll be getting a huge string and copying that into a worker. Ideally, to keep things simple and fast, the worker does everything and we just send it messages.

But then we have another problem: we need a privileged cross-origin fetch. We also need to ability to bypass the browser cache when fetching. Normally we would load a privileged fetch from `DevToolsUtils` in the Firefox panel, but that's not available in a worker.

I actually had an implementation that did the fetching on the main thread, and passing the string to worker that did everything else. This was annoying though; not only was the code split between 2 places and more complicated, we were creating a huge string and copying it to the worker.

Luckily @jsnajdr pointed out that if the page is privileged (as it is in Firefox) doing a `XMLHttpRequest` is privileged and there's no cross-origin check. So we can just make our own fetch. Additionally, you can tell it to bypass the cache by setting specific channel properties, but I haven't gotten that to work yet.

So we have it all within a worker now. Just some context.

Note to others, that if you're doing the upstream / downstream fork thing and are just pushing in the latest changes of master you can skip the lint and unit tests step by pushing with the `--no-verify` option.

> It would be nice to make the search popup (Cmd+P), the equivalent of a new tab page

I'm not sure about the new tab page part, but I do agree that having a create a button / icon to call up the search could be good for people who don't use the debugger enough to know the key combo.  We did put the key combo suggestion in the sources view, but I do think many people won't find that as much as a search button.

@clarkbw plus there's the segment of users that even with keyboard shortcuts available, prefer to use their mouse. I'll open an issue for adding the plus button/show search button and I can probably knock that out today if we're all in agreement that it's a nice addition. @jlongster @jasonLaster 

@jasonLaster yes, I believe that's all we need to do.  I think the list @wldcordeiro has looks good.  Mostly labels and other text needs this and a global setting could prevent people from copying certain object attributes / values we might want to allow.

> I'll open an issue for adding the plus button/show search button

We should get @helenvholmes to think this over as there are some larger cross-tool design aspects to this that we need to think about.

@jasonLaster I believe this issue has gone stale with recent work and the new landing page. amirite?

@jbhoosreddy how's it going?  Anything questions?

@akashmohapatra how's it going?  Any questions so far?

@clarkbw was this actually actionable? @helenvholmes last comment made it seem like this and #792 needed some additional fleshing out.

@AndrewPomorski how's it going?  Any questions?

Bumping with status update, had been distracted with some other issues that had come up. Been working on this today and should have a PR in today or tomorrow.

Closing

I was able to fix it locally with these changes.

We can try it. It make it harder to push WIP commits to branches, but I guess if you remember `--no-verify` it's not a huge deal.

Hi @SezginEge, we haven't implemented scopes for chrome yet. 

We have a small [note](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#chrome) here, but it is easy to miss.

@jasonLaster Thank you! :+1: 

`getSelectedSource` needed to return `undefined` instead of `null`, because flow's maybe types or that way. It's either `undefined` or a value. Not exactly sure, maybe there's a different way to do it, but that's why the test tests `undefined`.

This looks good; there's one UX thing that I think could be better. Previously if there were no tabs it showed a different page with just a message about nothing being connected, and pointing you to various docs about connecting to different environment. Right now if it can't connect anything it just shows a blank page.

If it's not hard, can you display some sort of message if there are no tabs connected? Not sure if you want to even show the sidebar or not there, up to you.

> message about nothing being connected

That's a good point. I'd like to follow up on this in a second smaller issue. The _best_ thing to do would be to detect connections like you mentioned in a previous PR about chrome connections. This way, we could show a descriptive message per browser.

Also, we should default to showing the connected browser first as opposed to always showing firefox.

ping @ThomasCrevoisier, does this [gist](https://gist.github.com/jlongster/d12be12928337ff69b09e8f634ecd432) make sense? I want to make sure you're not blocked by anything

ping @jbhoosreddy are you still interested in taking a stab at this?

@jlongster I forgot if we've settled on a good approach for this

ping @clarkbw are you interested in taking a stab at this soon?

@jlongster I know you made some progress on this issue a couple of weeks ago. Where does this stand now?

@karlcow thanks for this issue, I've found the cause of this and will be putting a PR in with a fix. Nightly will likely remain broken however for a week or so to wait for some other changes as that's been the typical upstream push strategy (though there is work on a bot to do that!) 

@jasonLaster Sorry, I've been really busy those past days. I got back to it yesterday and got some errors so I'll investigate tonight to see if it's easy to fix.

As I said in https://bugzilla.mozilla.org/show_bug.cgi?id=1307250#c3 , the new debugger does not seem ready to support RTL in its current state.

![image](https://cloud.githubusercontent.com/assets/1141550/19070242/98ed3b2e-8a2a-11e6-9236-8b8430cbb2c2.png)

Thanks @magicp-github for the report.

Also, I'm glad you found our github issue tracker. One concern that we had about developing in github was that it would be harder for community members to file issues. 

Just looked into it, and found that the issue is with the source:
`{ id: "server1.conn1.child1/31", url: "about:home", isPrettyPrinted: false, sourceMapURL: null }`

we call `endTruncateStr(null, 50);` here https://github.com/devtools-html/debugger.html/blob/master/public/js/components/App.js#L36

The fix would be to make sure path is coerced to a string before passing it to endTrucateStr.

Hey @SezginEge, would you be interested in polishing our RTL mode? I'm asking because I noticed you're in Turkey and might have more insights here:
- code is displayed in RTL (should keep LTR)
- source tree is not properly indented
- arrows are in the wrong direction
- icons are overlapping

I created a new issue [here](https://github.com/devtools-html/debugger.html/issues/867) to track the work.

As a side note, i believe I removed the horizontal scrolling because at the time i thought that we wanted people to expand the sidebar. After thinking about it more and looking at other editors + devtools, it's clear people expect to be able to scroll aswell.

Closing in favor of #870 

RTL mode can be accessed for Firefox via CSS, see the [old debugger.css](https://dxr.mozilla.org/mozilla-central/source/devtools/client/themes/debugger.css#203)

It uses the following:

``` css
.selector:dir(rtl) {
  /* for rtl changes */
}
.selector:dir(ltr) {
  /* this is the default, only use for selectors that need to change */
}
```

See: https://developer.mozilla.org/en-US/docs/Web/CSS/:dir

Yeah, I've been meaning to get back to this.  Thanks for the reminder!

Weird, that was the same error I have been seeing on a totally separate branch.  Absolutely nothing to do with this change.

```
Error response from daemon: Cannot start container cfa69171589d7269cba0de2638836e3185a9cb9e4b59e42bd7f440e97790ba5a: /dev/mqueue is not mounted, but must be for --ipc=host

./bin/run-mochitests-docker returned exit code 1
```

And also...
- Tab close button position is reversed
- magnifying-glass and the close button are wrong place in search-container

Here is a [timeline](https://chromedevtools.github.io/timeline-viewer/?loadTimelineFromURL=https://gist.githubusercontent.com/jasonLaster/ba5f06bc2a6e0abd1e34888dd9f791c1/raw/21061cbfca8bacd3b1d75514a85bafb0255beaaa/-) view for expanding the scope.

I didn't experience much jank clicking on the gutter. Did you try adding a breakpoint before or after expanding the scope?

> The fix would be to make sure path is coerced to a string before passing it to endTrucateStr.

That would just show `null` in the results though. You want to gracefully handle errors when parsing the url, because it might not be a valid URL. Just fallback to the raw URL if it doesn't parse.

Trying something in #874 that could fix this.

I don't think I worked on anything related to this. We've talked about having an overlay on the page when the debugger is paused which we should do. Makes it clear that it's paused. For the debugger UI itself I think it's fine the way it is.

Can't remember exactly either. The difficulty is a tab is currently tied to a sourceId, but we don't have the new source's sourceId's when the NAVIGATION action is resetting the state. Need to give tabs the ability to just be tied to a URL as well, and if it has just a URL it resolves it first when clicked.

There are UX issues too: what happens if that source doesn't exist anymore, etc

I thought we talked about using this until we have a good enough custom code search. All we have to do it forward ctrl+f to the editor and we have basic code search. Seems like a tiny thing to do which will give us a week or two to build our own.

Grrr... Well the test actually ran, but ran into an error inside the docker image.

```
** (xpcshell:416): WARNING **: Could not open X display

runtests.py | Running with e10s: True

runtests.py | Running tests: start.



Application command: /firefox/obj-x86_64-pc-linux-gnu/dist/bin/firefox -marionette -foreground -profile /tmp/tmp8SjpyK.mozrunner

runtests.py | Application pid: 474

TEST-INFO | started process Main app process

error: XDG_RUNTIME_DIR not set in the environment.

Error: cannot open display: unix:99

Traceback (most recent call last):

  File "/firefox/obj-x86_64-pc-linux-gnu/_tests/testing/mochitest/runtests.py", line 2420, in doTests

    marionette_args=marionette_args,

  File "/firefox/obj-x86_64-pc-linux-gnu/_tests/testing/mochitest/runtests.py", line 2026, in runApp

    self.marionette.start_session(timeout=port_timeout)

  File "/firefox/testing/marionette/client/marionette_driver/decorators.py", line 42, in _

    return func(*args, **kwargs)

  File "/firefox/testing/marionette/client/marionette_driver/marionette.py", line 1178, in start_session

    self.protocol, _ = self.client.connect()

  File "/firefox/testing/marionette/client/marionette_driver/transport.py", line 214, in connect

    self.sock.connect((self.addr, self.port))

  File "/usr/lib/python2.7/socket.py", line 224, in meth

    return getattr(self._sock,name)(*args)

error: [Errno 111] Connection refused

0 ERROR Automation Error: Received unexpected exception while running application
```

Down to just this error now.  @jasonLaster any ideas here?

```
./bin/run-mochitests-docker

Traceback (most recent call last):

  File "/firefox/obj-x86_64-pc-linux-gnu/_tests/testing/mochitest/runtests.py", line 2420, in doTests

    marionette_args=marionette_args,

  File "/firefox/obj-x86_64-pc-linux-gnu/_tests/testing/mochitest/runtests.py", line 2026, in runApp

    self.marionette.start_session(timeout=port_timeout)

  File "/firefox/testing/marionette/client/marionette_driver/decorators.py", line 42, in _

    return func(*args, **kwargs)

  File "/firefox/testing/marionette/client/marionette_driver/marionette.py", line 1178, in start_session

    self.protocol, _ = self.client.connect()

  File "/firefox/testing/marionette/client/marionette_driver/transport.py", line 214, in connect

    self.sock.connect((self.addr, self.port))

  File "/usr/lib/python2.7/socket.py", line 224, in meth

    return getattr(self._sock,name)(*args)

error: [Errno 111] Connection refused

0 ERROR Automation Error: Received unexpected exception while running application
```

@clarkbw, actually, since the new debugger uses HTML, you have to use :dir instead of :-moz-locale-dir

> you have to use :dir instead of :-moz-locale-dir

oh right!  de-XUL my brain!

Hi Jason, I don't see any "first-timers-only" issues open at the moment. Can I grab this one?  

@monicau Feel free to jump on this, the `difficulty: easy` tag generally means it is safe for first-timers as well, (speaking of the first-timers label, it might be worth removing in favor of just the easy label or renaming it 'very easy'? I don't like giving people the impression issues are for a group only, even if its to help newer contributors). Feel free to ask any questions.

Can't repro. When filing bugs, please state which browser and version you are using. 

<img width="606" alt="screen shot 2016-10-04 at 5 43 11 pm" src="https://cloud.githubusercontent.com/assets/17031/19093688/1adcde26-8a5a-11e6-9ef2-77d10d163eab.png">

I'm confused that only you are running into this... we also don't use the webdriver stuff for mochitests. It just runs `./mach mochitest`, so I don't understand how that effects you?

Thanks @monicau. 

Sorry @jlongster, I saw this in Chrome. 

Good call @jlongster. This should be up to date

> I'm confused that only you are running into this... 

I wish it wasn't so...  But I'm going to look into the circleci settings.

> we also don't use the webdriver stuff for mochitests. It just runs ./mach mochitest, so I don't understand how that effects you?

Oh, those might be in the wrong branch.  Getting confused with the other work that's blocked on getting past these errors.

The devtools-html environment was set to `Ubuntu 12.04 (Precise)`
While my clarkbw account was set to `Ubuntu 14.04 (Trusty)`

Trying that now.

Thanks @clarkbw. I've been thinking about this as well. I personally feel like "up for grabs" is more friendly and contributors can grab what they're excited about. 

Okay. Short story: The bot is running on AWS EC2 instance. thanks to @jlongster for the idea and the help/suggestions.

I learned a lot of things, and again I wasted some time tinkering around deployment servers, docker, AWS, etc. But I think it'll be worth it if we can be more efficient with it.

I turned off the bot (for now) because I wanted to know if there is a preferred interval for this automated PR action? a couple days, a week? @jasonLaster. Once I know this, I can start it after this PR is merged.

side not: sometimes I wonder if only I run into the most strange issues/hurdles, and then I go on StackOverflow to find that I'm not alone. 

I like the current Firefox DevTools search. It is more like filter than search. Besides highlighting the current matches, it filters out lines not matching and with the Up/Down arrows you jump between matches.

Thanks @jbhoosreddy! This is really cool and great job getting this setup.

Have you shared a github repo for the project and written up some docs on how to maintain the project? Also, do you think it would be possible to setup the credentials so either James or i could access it as well. Lastly, i'm not sure how much it costs, but maybe we could set it up in a way where it's expensed for.

In terms of preferred interval. I'm curious if you made it possible to avoid duplicate PRs. If so, then I'd opt for something as immediate as possible (10 minutes / 1 hour). If not, then every other day or weekly is fine too.

> event scopes is bolded

I agree. I'll create an issue here to investigate, but you're right that it's likely a question of updating the Event Rep.

Just updated this PR to only include the Reps work, which is all but three of the modules changed. 

This should be fairly easy to pull in. 

This is fixed in the new Reps, which will be updated here: #790 

Awesome work! And yeah, I don't want you to have to pay for EC2. I wouldn't be surprised if Mozilla already had an account there for people to do things like that. It might be worth asking around how we can run it there and charge straight against Mozilla. I also agree that if you can open it up to us at some point, we can help run it.

I don't have a preference for interval; every day or so seems fine to me.

Should probably wait for https://github.com/devtools-html/debugger.html/pull/790 to be closed and then let it check it again.

Thanks!

Cool, thanks. This looks good, just a small nit.

Nice!

Hey @amitzur would you be interested in taking a stab at this? 

> Have you shared a github repo for the project and written up some docs on how to maintain the project?

I just needed to cleanup the code and remove my credentials before making it publicly visible. I have shared it on this GitHub repository: jbhoosreddy/moz-devtools-gitbot. As I said before, I'd definitely like a review on how somethings could be done better. And it's more readable now.

I can definitely set it up so that anyone can have access. I can add full access to all of you on the EC2 instance also. And the logs are mirrored online (when the bot is active).

The thing is that it is not easy to move. I was hoping to make it as simple as pulling a docker image container, but there's simply no automated way to do `hg clone mozilla-central`. So it has to be done manually. Even on the EC2 instance, this command failed when executed manually. So it was some effort to move the mozilla-central codebase to the server.

It's not costing anything right now and it shouldn't for some time. AWS is good for students. So it would be fine if leave it as for now (given what I said above). Especially since we could add more features to it quicker. But yes, we should also look for a place for it to be hosted on for long term.

> In terms of preferred interval. I'm curious if you made it possible to avoid duplicate PRs. 

GitHub API is nice in that it prevents duplicating PRs and also closes existing PRs if new ones are made.

> I don't want you to have to pay for EC2. I wouldn't be surprised if Mozilla already had an account there for people to do things like that. It might be worth asking around how we can run it there and charge straight against Mozilla

I can look into this.  We can associate one of us with the Mozilla Amazon account to get access to EC2.

I would gladly, however how important is this? Don't most if not all devs debugging JS use the english version? Or at least RTL devs?
This is mainly targeted for the debugger being embedded in devtools, right?
In addition, I took a screenshot of hebrew firefox's devtools. The strings are also in hebrew. Do you think we should work on that as well?
<img width="1280" alt="screen shot 2016-10-05 at 20 41 38" src="https://cloud.githubusercontent.com/assets/394320/19124534/3bb46cda-8b3c-11e6-89ef-adf56a41b4e5.png">

Hi @amitzur, thanks for the hebrew screen :) 

We've gone back and forth on how important internationalization is because many devs work in english. The conclusion we've landed on is that it _is_ nice to support basic rtl and translated strings. We will be looking into adding translations soon :)

Would love your help  on adding basic RTL. 

I got it then :)

I modified the CSS to fix the gutter height, I also realigned the breakpoint svg arrow which also wasn't the same height as the line number highlighting.  When doing the unit tests, there were some warnings.  Is it something on my end? 
![debuggerunittestresult](https://cloud.githubusercontent.com/assets/2848472/19125905/cd06108e-8b06-11e6-9f25-0abbfd972648.jpg)

Thanks, that makes sense!  I created a pull request.

Sure! I added screenshots to the original post.  I'm running Ubuntu 14.04, not sure if it'd look different on Mac or Windows. 

Thanks @monicau. I just created an issue for cleaning this up :) 

https://github.com/devtools-html/debugger.html/issues/886

@monicau oh strange i'm seeing something different on chrome + firefox. breakpoints seem a bit tall

![screen shot 2016-10-05 at 3 26 51 pm](https://cloud.githubusercontent.com/assets/254562/19128131/f41c9be4-8b0f-11e6-81b1-d24857436dbb.png)

![screenshot_20161005_132832](https://cloud.githubusercontent.com/assets/580982/19128222/a7d157c6-8aff-11e6-85eb-85a7cc3632dc.png)

Heights do look just a little odd, @jasonLaster Didn't notice when the green highlight was on the same line. It also makes the line number not quite centered in the highlight.

This is using the existing sourcemap pref, right? I don't think we want to use that, as I mentioned in the bugzilla bug. We need a new pref so we don't collide. Right now, if people turn that pref on I think the server will start sourcemapping as well.

Thanks for the help so far @monicau. 

You're definitely finding some helpful edge cases. 

I looked into it a bit and found that it might be helpful to lock down the line height of the codemirror lines. Here's a [gist](https://gist.github.com/jasonLaster/9ba8f6d83ca47eafeafb974b16748d4c) of what I had. It's by no means perfect, so it'll be helpful to compare in different browsers too.

It looks like in firefox it's 13.333 and in chrome it's 15. I have a patch here that sets the line heights to 15, but I think we could just as easily lock it down to 13. In a side-by-side comparison, I personally prefer 15px line height, but there's an argument to be made for not changing it. In terms of line height ratio's 15/12 = 1.25 and 13.333/12 = 1.11. Personally, I'm more in favor of 1.25

For what it's worth, when I was testing I set some background colors (lightblue and lightcoral) to get a sense of how it lined up :)

![screen shot 2016-10-05 at 6 20 53 pm](https://cloud.githubusercontent.com/assets/254562/19133903/d22fa4ea-8b28-11e6-8cb7-682a9f164115.png)

Also, I love that you're using the test example to debug! Thanks for getting involved in the project again, we're a really early project and there's lots of work to go around

Thanks @ThomasCrevoisier. Feel free to push with `--no-verify` or if you need to delete the test :)

Just did a quick read through and it looks good. Nice job, actually a pretty clean implementation especially considering the BreakpointResult formatting can probably be cleaned up further.

Going through the labels I noticed that "Bug" and "Regression" are very similar and Bug is used more often. I propose we migrate Regression over to Bug. @jlongster, @clarkbw thoughts?

We talked in #879 about revisiting the config system now that we're including Prefs. I propose we start the conversation here, but if the work is very different we close this ticket and open a new one.

I'm closing this issue as we're not planning on working on it in the next couple of sprints. We can re-open it or reference it when we do as the overview is helpful.

Adding this to the sprint as it's very small and we should prioritize staying in sync with m-c.

This is now actionable now that we have Honza's new splitter. 

@helenvholmes I'm re-assigning you so that we can have designs to go off of. I think Chrome's design is a safe default as we want things to be familiar to chrome devs. With that said, we should do the work to have an opinion on the portrait layout. We might want to talk about this in Toronto as we'll be in one place as well.

I don't think I found out a nice way to resolve this. So I'm dropping this if someone wants to pick it up again.

Thanks for looking into it @jasonLaster !  The highlight lines up with the line number now with your changes, but the text in the codemirror in Chrome is overlapping a bit (left one below) but Firefox looks fine (right one)
![debuggerchromelineheightsquishy](https://cloud.githubusercontent.com/assets/2848472/19139213/a07b1ac4-8b50-11e6-84e2-d2e192615133.jpg)

Looks like the font size isn't the same between the two browsers (you mentioned before about Chrome and Firefox having different default size).  Can we specify a font size so that it's consistent in all browsers?  Unless there was a reason why there's no specific font size set for the codemirror at the moment?  It seems to work if I add something like `font-size:12px` to the selector `.editor-wrapper .CodeMirror-line` on top of your changes.

And thanks all of you for being patient with me so far.   :)  It's my first time trying to get involved in open source projects.

Okay committed and pushed.  Let me know if it looks fine on your end.

I found this project starting from [whatcanidoformozilla.org](http://whatcanidoformozilla.org) to [wiki.mozilla.org/DevTools/GetInvolved](http://wiki.mozilla.org/DevTools/GetInvolved) to the recent tweets from FirefoxDevTools :stuck_out_tongue: 

Sounds good to me. 

Finished in #859 

I'll take a look.

@jlongster updated the PR.
![screen shot 2016-10-06 at 9 07 18 am](https://cloud.githubusercontent.com/assets/254562/19153308/fcb916a8-8ba3-11e6-9251-1b88b93985ca.png)

It would be nice if this awesome search box could make it into the built-in Editor component.

https://github.com/devtools-html/debugger.html/pull/879#discussion_r82065993

> Sure, that's fine. Honestly I think it might be good if we eventually just use the Prefs API itself. It basically works with json files, as far as I know, we can load in whatever json files locally we want. This way in the Firefox panel feature flags are real prefs, and you can toggle them on and off, which is how we've previously been able to with in the panel.

> Looks like the font size isn't the same between the two browsers (you mentioned before about Chrome and Firefox having different default size). Can we specify a font size so that it's consistent in all browsers? Unless there was a reason why there's no specific font size set for the codemirror at the moment? It seems to work if I add something like font-size:12px to the selector .editor-wrapper .CodeMirror-line on top of your changes.

Something that looks really weird to me in the screenshot you attached with the above text: the font size of the editor looks huge. The font size of the line number and the editor should be exactly the same. Something seems off to me here, and what's most important is that it looks good in the Firefox panel, and so far nobody has looked at that. (It's bit more setup to get the debugger running _actually_ in the Firefox devtools, so that's understandable)

I can check it out in the panel right now to make sure it's still the same.

Thanks @nt1m 

I just noticed that this also changes the font-size to 12px. We can't do that. Please revert it back to 11px, as that is the standard font-size for all of devtools.

I hate to say it, but I prefer the way it was before. You can see more code on the screen with a smaller line-height. A big line-height (like 1.5) is preferable for large amounts of websites with text, but this is code and usually the devtools is a short window on the bottom so it's nicer to see more code. Also, with the bigger line-height, the highlighted line does not perfectly align with the breakpoint anymore:

<img width="198" alt="screen shot 2016-10-06 at 10 32 24 am" src="https://cloud.githubusercontent.com/assets/17031/19156539/3d2d259c-8bb0-11e6-927f-d9124f3323ac.png">

The way is looks right now in the Firefox panel is exactly correct: it uses 11px for a font-size and everything lines up right. @monicau @jasonLaster Can you find a change that _only_ fixes the problem in Chrome where it exists, but doesn't change anything else?

I'm confused, the only different is it doesn't list the names of the tests? This seems like a step back in terms of UX. If we really don't want the wall of text, maybe we shouldn't force tests to be run?

That looks really nice! I like how it looks.

> It would be nice if this awesome search box could make it into the built-in Editor component.

Brian and Gabe are working on pulling out the editor into a separate module so we can all collaborate in one place and be using exactly the same thing. We might be able to pull this in there when we do it. Right now it makes sense for us to do this, because we also want to add debugger-specific options. But I agree having different experiences is not ideal... when we have separated out the editor from m-c, we can think about it.

@wldcordeiro that would be great. You're the grid + jss guy, so it makes sense. 

I remember last time the issue was:
- codemirror has some flexbox bugs and does not expand if it's a child... (maybe)
- chrome is different than firefox... so this is one of those issues where it's important to check both browsers

fixes:
- Flexbox: 0 for the bar + footer could be good
- also position relative with a greater wrapper height reduction could work too perhaps...

Hmm, it does list the tests that fail, so it's just more compact. I suppose we could make it configurable so running `npm test` shows the list but prepush when you just want an okay could be compact.

@jlongster ping

Fixed in #865 

This was introduced when we started using CodeMirror's documents because they keep track of line classes and our current logic for clearing them doesn't properly clear them on the previous document.

I saw this as well a little while ago and could have sworn I had a fix... but I don't know what happened. Sorry, I'll take this and make sure it gets fixed.

@wldcordeiro Jest would be great :) Unfortunately we need to coordinate with the rest of the team, like the console, which is already using mocha too. There are already many moving parts. Might be hard to suggest a switch to a different testing framework when most people are familiar with mocha.

@jasonLaster I'm a little confused because I thought the dot reporter just showed a line of dots like "....." but your screenshot shows otherwise. In your screenshot, the text isn't any shorter, just some text isn't shown so I'm not sure I see the value.

@jlongster oh yeah, i copied the existing screen to show the wall of text. dot is just dots, with formatted error messages.

Updated 

![screen shot 2016-10-06 at 12 51 16 pm](https://cloud.githubusercontent.com/assets/254562/19161806/4a66ca5c-8bc3-11e6-84ee-54bfe50ed07a.png)

Handled in #876

Oh, weird, why don't I see any test titles in your original screenshot? I also don't see any dots in the last screenshot... haha.

I see now, originally I thought this PR just hid the test titles. I'd be fine switching to the dot reported though as long as it still shows everything about a test when it fails.

I'm getting this done right now. PR should be open shortly.

my font is broke...

> Something that looks really weird to me in the screenshot you attached with the above text: the font size of the editor looks huge. 

That's because I had the page in zoomed-in mode (I'm blind).  My future screenshots will be regular zoom.

Thanks for your input @jlongster, good to know that the line number and text should be the same size, and that the standard is 11px.  Good point about the line height.  Here's a comparison of 13px and 11px line-height in Chrome:

![chromelineheight-13-11](https://cloud.githubusercontent.com/assets/2848472/19164501/375bb890-8bce-11e6-8c3a-6e359ad09c6c.jpg)

I notice in Firefox that the highlighted text is anchored to the bottom of the line, so 11px looks squishy:
![firefoxlineheight-13-11](https://cloud.githubusercontent.com/assets/2848472/19164527/4e69a416-8bce-11e6-8f1f-2483c17278f9.jpg)
when not specifying any line height, the default height in Firefox is 14px and Chrome 13px.  Which do you guys prefer?

Awesome, thanks!

What do you think about using a new pref? I'm on the fence about it. We always force sourcemapping off on the server when connecting the new frontend, so the pref doesn't matter. I was thinking we might connect to an old server, but that actually would be fine, as long as when we are using the new debugger we always send `false` for `useSourceMaps` when connecting to the server.

Thinking more about it, maybe we don't need a new pref. Sorry... can you think of any cases where it would break/cause confusion?

Thanks for the update @monicau. I liked @jlongster's point that we should lock down firefox's current behavior. We can always update it in a design pass :) With that in mind, lets use 14px.

By the way, I'm also blind. I would love to see a debugger theme for blind people :) My editor's font size is 16px and line height is 1.5. A more comfortable on the eyes editor, would be enough of a reason to switch tools if all other things were equal. 

I think this is really close to landing

![screenshot_20161006_135958](https://cloud.githubusercontent.com/assets/580982/19168398/372d6824-8bcd-11e6-8268-4f82a5261a96.png)
![screenshot_20161006_140256](https://cloud.githubusercontent.com/assets/580982/19168507/9e23ab88-8bcd-11e6-9083-d22d95530de7.png)

> That's because I had the page in zoomed-in mode (I'm blind). My future screenshots will be regular zoom.

Oh! No worries! :) That's good to know. Didn't know it was scaled up.

> when not specifying any line height, the default height in Firefox is 14px and Chrome 13px. Which do you guys prefer?

If I inspect the current debugger in Firefox nightly it's showing me a computed line-height of 13.5px... So I don't know! Do you see 14px if you use the browser console to inspect the current debugger in Firefox?

I don't know if we inherit any styles from the toolbox when we are in Firefox that we aren't getting outside of the toolbox. I didn't see any rules that set 13.5px explicitly. It seems like a strange default. If 14px is the default for you, let's use that.

Thanks for talking this through!

Awesome, thanks!

@jbhoosreddy can you tell the bot to open a new PR, or how does that work? this is out-of-date now.

@jlongster ping. should be ready.

looks like a test timeout:
devtools/client/debugger/new/test/mochitest/browser_dbg-breaking-from-console.

Looks good!

Uh oh, I see some errors coming from `source-map-worker.js`. I'll try to look at it later tonight.

@jlongster Yup it's 14px when I use Firefox 49.0's element inspector to look at the line height of the debugger.  Not sure how to find the computed height properly, but I do trial and error on line-height values and compare the result with the default line-height by unchecking the line-height property in the console (left side in screenshot)

![inheritornot](https://cloud.githubusercontent.com/assets/2848472/19171930/4d00fd76-8bed-11e6-9f3f-2b74e0ab5792.jpg)

Looks like 13.5px (right side) is smaller than the default inherited line-height.  Maybe default values are different in different versions of Firefox?  Alright I'll go with 14px then.  The breakpoint arrow doesn't cover the line completely now with the gutter also being 14px in line-height, so I increased the svg height accordingly. 

@jasonLaster not as blind as me, I'm at 18px. But we're not taking monitor size and resolution into consideration so this blind stand-off is inconclusive.

When the bot is live, the logs from the bot can be seen here for debugging: http://52.54.91.129:8080/

There was issues with merge conflicts which the bot didn't handle so it stopped working. I changed it so that it could be handled. I'll monitor it to make sure the bot handles all usual use cases.

closing in favor of #899 

Done in #851 

Two commits should be removed from this PR.
`197ced35d679ff93242b8f37bd39e62cd180f45f` and ~~`a5ff99f5f5ca9d80943885fa2c00e58a8b514b71`~~ as they're unrelated to the dropdowns and in the first one's case redo work that has already been implemented.

Edit: appears the second is related. Still first needs to go.

I had added "Regression" as it is a specific class of bug, but if it isn't used much we don't have much use for it. I just tend to think of the two differently when labeling issues, bug is the general case and includes new bugs, regressions and more. Regression was meant for when we specifically undid something that was working before. Just figured I'd explain the rationale behind its addition. Sticking to "Bug" will likely be easier for now.

I pulled the changes down and it appears the lines are still highlighting in the wrong document?

![screenshot_20161008_122952](https://cloud.githubusercontent.com/assets/580982/19215137/004615cc-8d53-11e6-933b-3a2aff5b51b8.png)
![screenshot_20161008_122958](https://cloud.githubusercontent.com/assets/580982/19215136/00451672-8d53-11e6-864e-f1deb875b6cb.png)

Thanks Amit! This is a lot of work. I'll review it closely on Monday, but for what's it's worth I agree with your points. 

I can work on adding some storybook stories for RTL next week as well if we decide we want to commit to RTL support. You're right that it'll be important to prevent regressions.

Hmm, I think we should say look at up for grabs, we have easy medium and hard. Some people like Thomas jump right into the hard ones!

Hmm strange, the reps should be up to date

Maybe phrase it around `difficulty:easy` being good starting points but to find what interests you that's `up-for-grabs`? I'll play with the wording a bit.

Thanks Jason,

I tried to run the storybook but I get an error about module "Services":

```
ERROR in ./public/js/utils/text.js
Module not found: Error: Cannot resolve module 'Services' in /Users/amit/projects/debugger.html/public/js/utils
 @ ./public/js/utils/text.js 1:15-34
```

I couldn't figure out how webpack resolves `require("Services")` since it's not a relative url. I assume it is targeting devtools-sham/sham/services.js but can't understand how it gets to it

Hey @amitzur, no worries. Honestly, storybook is in a stale state as we want to change how we use it. I wouldn't worry too much about it now.

We will have a chance soon to revamp it and add some unit tests, which will keep it from going stale in the future. 

> 1. html[dir="rtl"] 

Agreed, we would like to continue supporting chromium browsers. At somepoint we can switch to `:dir` when it is better supported.
1. separated directional properties

Agreed, it is nice to isolate directional changes so it's easy to see the diff.
1. maintainability
- I think storybook could help, it has tests it also would be easy to see several scenarios
- I think annotation is also an interesting idea. For other reasons, I'd like to consider a toolchain like post-css, which allows you to extend the syntax and perhaps add an rtl annotation.
1. CSS cleanup

Thanks for highlighting the tweaks with command bar, search, ... I'm not going to touch on that now as we probably want to have a discussion about the big picture first.

@amitzur - would you mind posting a screenshot of the progress. It'd be pretty cool to see a before / after.

Because I used the same `var`s that already existed I'm going to assume that this looks fine in Dark Mode but I couldn't actually figure out how to enable that to take screenshots. How do I do that?

Update: it's working now. I use Firefox Dev Edition for my normal browsing, and the version of vanilla Firefox that I had installed was still at version 41. Updating that seems to have fixed it.

Actually, no, false alarm. Firefox opens the TodoMVC example the way that the debugging version of Chrome does, but it's still not available on `localhost:8000` after I restart the debugger server.

The listen port likely isn't getting configured automatically. Try `shift+f2` and type `listen 6080` and see if it works 

Reading through your changes this looks good. I think we might need to push the CSS changes up to m-c but otherwise this would be good as is. I'll approve and leave open to let @helenvholmes weigh in on the colors. I like it over all however, and it matches the colors used already by the debugger for breakpoints.

Thanks for the PR @Zacqary 

What does m-c refer to in this case?

@Zacqary `m-c` is Mozilla-central the mercurial repository that houses Firefox itself, since the CSS file is in `lib` it's likely shared between us and other devtools so getting it updated there is good. This won't be something you need to worry about, it'd be something myself or someone else could do that's already setup for contributing to `m-c` since it requires a bit more work to setup.

`shift+f2` doesn't seem to be doing anything, but I am getting this from the debug server log:

```
webpack built cbd28cc4ab2b9705a62b in 13712ms
TCP connection failed: Error: connect ECONNREFUSED 127.0.0.1:6080
WS connection closed, disconnected from TCP
```

Odd shift+f2 is the devtools cli. Maybe you can open it from the tool button? 

@Zacqary should look like this at the bottom of the browser (I typed in the command.)
![screenshot_20161009_204316](https://cloud.githubusercontent.com/assets/580982/19225883/0eaf2644-8e61-11e6-8e16-3c4234951c63.png)

I'm going to take this and apply some of the fixes listed here. They might not be exactly what we want but they're improvements.

Since @jasonLaster made a PR that was merged for these changes, I'm going to close the issue. We can reopen if there is more work to be done.

Oh. `shift+f2` in the browser, not the terminal. Duh.

`listen 6080` does the trick! Still not sure why it's not automatically doing that on launch, though.

<img width="1440" alt="screen shot 2016-10-10 at 07 18 45" src="https://cloud.githubusercontent.com/assets/394320/19226865/ef18b0d0-8eb9-11e6-82b4-8c4da702fe91.png">

The inspector link from above broke, here's a [new](https://dxr.mozilla.org/mozilla-central/source/devtools/client/inspector/inspector.js#1380-1411) one. The [togglePane](https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/widgets/view-helpers.js#243) animation looks pretty good as well.

We'll likely want to use splitbox state to keep the width/height instead of setting dom attrs. 

Thanks @Zacqary for the help! 

I'm honestly, not sure if I love the green background because it is so strong, but I understand that it has semantic value.

One slight tweak might be to invert the text, like what we do with the call stack. I also aligned the close button color, but that I'm not sure about that.

![](https://d17oy1vhnax1f7.cloudfront.net/items/3H3K072Z2A271L453d0A/Screen%20Shot%202016-10-10%20at%209.18.48%20AM.hi22.png)

Re-opening this issue to discuss a couple tweaks to @Zacqary's improvement.
1. Invert the text

![](https://d17oy1vhnax1f7.cloudfront.net/items/093Y280x3x2U1g0K2X1v/Screen%20Shot%202016-10-10%20at%209.22.32%20AM.hicB.png)
1. De-emphasize the paused-on-line indicator

This is a quick sketch where there is a slight indicator that highlights the breakpoint in a less dramatic fashion.
![](https://d17oy1vhnax1f7.cloudfront.net/items/1o002e2i3l3V2O1M1c1i/Screen%20Shot%202016-10-10%20at%209.27.09%20AM.hi5a.png)

@Zacqary, @helenvholmes, what do you think? 

Looks like the linting passed, but we had a test timeout

882 INFO TEST-UNEXPECTED-FAIL | devtools/client/debugger/new/test/mochitest/browser_dbg-sourcemaps.js | Test timed out - 

Looks like we had a test timeout

886 INFO TEST-UNEXPECTED-FAIL | devtools/client/debugger/new/test/mochitest/browser_dbg-iframes.js | This test exceeded the timeout threshold. It should be rewritten or split up. If that's not possible, use requestLongerTimeout(N), but only as a last resort. - 

@jasonLaster this same test is failing on most of the greenkeeper PRs, I even tried pulling one down and rebasing it on @jlongster's changes and had no success.

I pulled in our latest m-c dependencies so that I could get the updated Services module, which is easier to work with.  

I think I like the less dramatic callout. The call stack probably needs the loudness of a full background color more than the breakpoint list does.

Can probably implement that one with a `::before` element; I doubt just using a `border` or `outline` would get it to line up the way it does in the sketch.

`:before` pseudo element would be preferred in my opinion. Probably easier to do line-up.

I still used the `-hover` color in https://github.com/devtools-html/debugger.html/pull/911 and this fix is present in that PR too. I figured I should PR this commit separately in case the other one gets blocked by design approval.

@Zacqary thanks for the clarification. I really dig the other PR's looks and will see if we can get design approval on that. Feel free to rebase it on master now to get this change free without needing the commit in your history.

Thanks @Zacqary 

Thanks @wldcordeiro, i think @jlongster will have some insights

Thanks @Zacqary! I think you're on the right track, but I'm going to bump this review to @janodvarko, @linclark, who have worked more on Reps than I have. 

Progress update: spent the day working on running `npm start` from the top level directory. This was an especially difficult bug to track down as webpack module aliasses were being affected by babelrc aliases... This now works, but i need to fight babel aliases for the unit tests...

@jbhoosreddy two things:
- i've noticed that the values might not be computing on the pause action.
- the global value is currently the URL of the page, but that is changing here #884, which i think will be a nice stylistic improvement. 

Thanks for testing. I'll check it out.

Just made a few comments to express my ideas about the future direction. It's hard to find a balance between clarity and abstraction; we do want to share some of the annoying work like webpack config so we should probably do that to some extent.

We should absolutely merge this PR though, I don't mean to block it. It's a big change and we can move thinks back and forth. It's a great start though, thanks for working on it!

I think this fixes it. The problem (I think) was that the scripts that the test was using could be GCed at any time; they didn't introduce any global variables. This means that if a test ran _just_ slow enough, we won't see the sources because they'll be GCed before the debugger is connected. I discovered this because I added logs and didn't even see any logs come through; no new sources were even being added to the debugger.

I will retrigger it on CI several times before merging. But this can be reviewed.

@wldcordeiro note: this should fix the problematic test

Progress update, I'm experimenting with moving the debugger to the packages directory and further splitting out some of the toolbox packages. 

The motivation is to be in-line with other mono-repo projects that do not have a top level directory. I have been using lerna for the past couple hours and have really appreciated how seemless it has been. The `lerna bootstrap` command has really helped when it comes to symlinking package directories and installing bin scripts. This is still an experiment though, so it's subject to change.

Looks minor, not sure why it says it breaks build, everything passed.

I guess it updated the same PR by itself.

closing, as this is covered by #879 

Re-opening to track the work on this feature.

Whoa, I literally had a conversation with my coworker yesterday about some of the ideas we had for the debugger and he mentioned exactly this! Nice work on the PR so far @jasonLaster 

After thinking about this a bit more and speaking with @janodvarko, I think it's important to move forward with RTL support.
- other tools support RTL, and it's important to be consistent
- the changes are mostly CSS and we can add tooling to automate much of this. [margin-inline-start/end](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end) is a feature for supporting just this. And project [houdini](https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/) or [postcss-bidirectional](https://github.com/gasolin/postcss-bidirection) written by our @gasolin, could let us use it and get all of the benefits. Looking at this PR, we could introduce _bidirectional_ and replace the conditionals here with `margin-inline-start` / end. 
- we should introduce some component testing with storybook for keeping us from regressing on themes and rtl. 

This bug still reproduce in latest Nightly Build ID (20161012030211)

@magicp-github should be fixed when we update the debugger on nightly soon. Sorry, there's some lag between a patch landing on github and being shown in nightly

Still a little WIP here. @jasonLaster wasn't the biggest fan of moving the tabs into `Editor` but that simplified layout work. Also I'm fixing some stuff with the breakpoints CSS as they're hidden currently by the changes. I'll update this shortly with the fixes for that.

Thanks @wldcordeiro mind sharing some diagrams with the current options. Curious to see what we can do here. I do feel better seeing that Source Tabs pulls in tabs through connect and the Editor doesn't have to get that data.

Also did you try this in chrome?

Notes:
- modeled after the watch expressions where there's a left prompt. The prompt is pretty rough and would need to be cleaned up.
-  mono spaced font for the input. Do we do this in other places?
- I did not include a close button, to be consistent with the search bar. Escape and enter would close the panel.
- The gutter next to the panel seems very empty now. It would be interesting to explore adding something there.

Here's [chrome's](https://cl.ly/hkLu) implementation for comparison.

@helenvholmes , thoughts? 

![screen shot 2016-10-12 at 1 12 24 pm](https://cloud.githubusercontent.com/assets/254562/19319941/39e63096-907d-11e6-9081-2ad0994346c3.png)

![screen shot 2016-10-12 at 1 13 52 pm](https://cloud.githubusercontent.com/assets/254562/19319982/6db40f06-907d-11e6-964d-ea7f3c933edd.png)

@hzoo there's an intentional decision behind using presets that aren't part of the language proper `stage-0`, and I think the idea behind avoiding `es2015` was to add in the plugins we use one by one to avoid bundling things we don't use. Still removing an unused import might be nice though this may be covered by @jasonLaster's work in extracting the toolbox too. Thanks for the PR, I'll leave it open for a bit for some discussion.

@wldcordeiro Sorry if I wasn't being clear but it looks like both preset-es2015 and preset-stage-0 are in the package.json dependencies but aren't used as I can tell?

https://github.com/babel/babel-preset-env is a new preset I just started that is supposed to determine the correct plugins based on the browser/env supported (chrome, ff, node, etc)

Thanks, I think we can safely get rid of the presets as well. 

@hzoo ah thanks for the clarification, I thought you were suggesting the two presets which there was as discussion of somewhat recently. It does look like they could be removed too.

@jasonLaster @jlongster Sorry it took so long. I've been busy those past few days.

This is the rework of #814.

Alright I think this is ready now. Tested well in Chrome and Firefox for me. Can I get one of you to try these changes locally @jasonLaster @jlongster?

Closing this PR since it was reworked in #926 

No worries, I'll take a look now!

Looks like there's one small flow issue with `shouldDisableBreakpoints`, which could be fixed by going into [types](https://github.com/devtools-html/debugger.html/blob/master/public/js/actions/types.js#L64-L69) and updating the action.

Hey @jlongster, @wldcordeiro mind reviewing this once more. The patch looks great locally on all browsers. Monica thanks for being so clear this work is awesome1

haha - guess i'll catch up soon on the blindness...

By adding a type for the action `TOGGLE_BREAKPOINTS` ?

Note that there's no rush getting this in; I want to push out a debugger update first without this.

Thanks for all your patience! Just tried it locally and it looks good to me.

This generally looks good. I noticed an error state that's much worse with this PR though. Here's STR:
1. Go to http://todomvc.com/examples/react/#/
2. Open `js/todoModel.js`
3. Set a breakpoint on line 54, inside the `toggle` function
4. Toggle an item to trigger the breakpoint

For some reason, if you look at the call stack and click the second frame (titled `TodoApp<.toggle`) things look bad. Admittedly, it was broken before this PR. Here's how it looked before the PR:

<img width="1088" alt="screen shot 2016-10-12 at 5 13 33 pm" src="https://cloud.githubusercontent.com/assets/17031/19327959/9e2f416a-909f-11e6-951e-bd1820293312.png">

Basically, the tabs shift down for some reason, it doesn't get a title, and there's no pause line. Several problems there, this source must be a strange inline source. But at least the tabs shouldn't break like that.

Your PR adds a new problem which looks a lot worse:

<img width="1077" alt="screen shot 2016-10-12 at 5 14 02 pm" src="https://cloud.githubusercontent.com/assets/17031/19327987/bf6ca480-909f-11e6-8377-de49806648f6.png">

I don't know why those grey circles are there.

Can you possibly see if there's a quick fix to at least make sure it doesn't look _that bad_? Because if the user gets in that state, that's pretty embarassing. You don't need to fix all the problems (no tab title, debug line, etc) we can do that separately.

@wldcordeiro awesome, thanks! yeah... it's very annoying. Especially because we may get slightly different styles in the panel (even though technically we're using the same files, there may be be one or two slight differences coming from a file we may not have).

Thanks @monicau! Welcome to the world of OSS.

Please come back again soon :)

@ThomasCrevoisier you should be able to run `npm run flow` locally and double check. You're really close

So this can be merged?

@jbhoosreddy It looks like this PR was updated, but it didn't add another commit explaining the changes. I think this is OK to merge, as it's small, but the original description looks scary because of all the changes. Any chance the bot could add a new comment if it changes the PR?

This can be merged. The failed run was the sourcemap test issue that has been fixed.

> close button

Yeah, that makes a lot of sense. I think I have creator's bias, of course it works this way.

Here are some new screens. I'm not sure if you're thinking of the guillemet being in the gutter or just outside.

![screen shot 2016-10-12 at 5 50 17 pm](https://cloud.githubusercontent.com/assets/254562/19328919/17079408-90a4-11e6-9de3-f78f4bb1d742.png)
![screen shot 2016-10-12 at 5 50 08 pm](https://cloud.githubusercontent.com/assets/254562/19328920/170c493a-90a4-11e6-907b-4a393e5ccd36.png)

Yeah, I added the deprecation message in a while ago too https://github.com/babel/babel/blob/master/packages/babel/cli.js

@jlongster so it appears those dots are the `subsettings` menu. They were absolutely positioned before and go haywire here. I'm trying to figure out the shifting tabs issue now too. It also appears that the subsettings is broken in master right now in that the dots aren't showing up in the button. I'll be pushing more changes here to fix this and improve the toolbox rendering (min/max heights ftw!)

great! Thanks @helenvholmes, do you know where i can find an official guillemet svg? alternatively I could make one, but i'm not sure about the pixel snapping business

Hey @amitzur, how would you like to tackle these subsequent issues? My vote would be to clean up the merge conflicts and merge this PR and then open a subsequent PR with some of the other tweaks.

With the JS direction issue, i propose adding a DOM utils module for getting the direction
and adding some styles, that is probably the best we can do. and perhaps instead of setting paddingLeft, paddingRight... set paddingStart and paddingEnd, which can resolve to the correct direction.

> if you pretty-print a generated source that has a sourcemap, do you "replace" its sourcemap?

agreed. Pretty printing generated sources as well as bundles are definitely difficult. I believe we disabled it in august as well. I believe the sources actor has a function for extending the a source map so that we can pass the inverted source map in and extend the original.

Thanks @Zacqary!

@wldcordeiro awesome thanks! Feel free to tell us if you want to go ahead and merge this PR and do a follow-up as well. I was thinking of trying to get this in to the debugger update I'm about to push out right now, but I think we'll wait for the next one (we can update it as many times as we like). So I'm find merging this if you want to do a follow-up for some of the smaller things.

The most recent push includes a rebase from master, so should be uptodate and ready to merge sans comments / nits

Good work!

Thanks!

Finished in #905 

Lol, that's a huge patch. Nice work @jasonLaster 

Hey @ThomasCrevoisier I hope you don't mind, but I went in and squashed your commits and got flow to pass.

Good questions @Zacqary.

> props chain very hard to follow somewhere in the middle of it all, with all the renders of component classes that get computed from lists.

Yep and you're in a very hard spot with the Tree + Rep... The sources tree is also confusing for other reasons, but this is as complicated as it gets :)

> Also, are there any docs on what exactly all the terms like "rep" and "grip" mean?

:) I don't think so... @janodvarko would likely know. This would be tremendously helpful if we try to unify Firefox and Chrome's definition of remote objects. https://bugzilla.mozilla.org/show_bug.cgi?id=1307877

Seeing this in another bug https://bugzilla.mozilla.org/show_bug.cgi?id=1309464

@jasonLaster what is the status of this? Do you know what it takes to get the prefs working?

@jacobjzhang Are you willing to pick this up again? If not, we should close this PR.

@jlongster Sorry for delay and thanks for feedback, picking this up again tonight after @jasonLaster helped me with rebasing.

The error above is the sourcemap timeout test which has been fixed on master.

@jasonLaster Which PR was it where you changed shortcuts to be passed down through context? Has that landed? I wonder if the debugger update will fix this. I feel like we saw this before you made that switch.

I am fairly sure the bundle I used with this error was passing shortcuts through context... At least there was lots of `this.context.shortcuts` etc.

I only saw one flow error and I fixed it by accessing it outside of the `reduce` function call. Seems like a bug in Flow I guess. But I moved the reducer handler back in to make it consistent with the rest of the file.

Great. Nice fix. 

> Also, are there any docs on what exactly all the terms like "rep" and "grip" mean?

Grip comes from RDP protocol:
https://wiki.mozilla.org/Remote_Debugging_Protocol#Grips

Rep stands for representation of data.

Honza

This looks good, thanks for all the work and patience! I'll merge it, and if we find any problems we can fix it as a follow-up.

Looks good, the main thing is the lerna installation process. This is a great step though, thanks!

This issue is a bit confusing, I believe we landed on doing something like this

<img width="919" alt="screen shot 2016-09-27 at 11 45 06 am" src="https://cloud.githubusercontent.com/assets/2134/19392676/abcda2ec-91e6-11e6-82eb-daef5aa64d28.png">

Which requires some small design work and a bugzilla bug opened.

This has been fixed in https://github.com/devtools-html/debugger.html/pull/927

Fixed in https://github.com/devtools-html/debugger.html/pull/900

Cool, looks good!

The approach looks fine. A few nits, and I think we should just land it without a flag so that it just gets used and we'll fix bugs when they happen. It doesn't really affect the UI because you only get to it via a key command.

> I'd like to get your thoughts on how to get this patch to pass the unit tests. The new services module has some window objects that we might need to either mock or guard against

I really hope we can avoid jsdom. Mainly because I'm not _that_ interested in component unit testing (the craze these days is [snapshot testing](https://facebook.github.io/jest/blog/2016/07/27/jest-14.html) which makes a whole lot more sense to me). So otherwise, it'd be a shame to have all the overhead of jsdom just for a few APIs.

We don't really need Services in the unit tests, right? This is the list of files that comes up when searching for `Services`:

```
./components/RightSidebar.js:13
./components/RightSidebar.js:14
./components/RightSidebar.js:15
./test/mochitest/browser_dbg-chrome-create.js:26
./test/mochitest/browser_dbg-chrome-create.js:37
./test/mochitest/browser_dbg-chrome-create.js:44
./test/mochitest/browser_dbg-console.js:8
./test/mochitest/browser_dbg-console.js:29
./test/mochitest/head.js:36
./test/mochitest/head.js:40
./test/mochitest/head.js:42
./test/mochitest/head.js:524
./utils/text.js:3
./utils/text.js:6
```

Since we are really only using unit tests to test actions and reducers, I don't know where Services is being pulled in. Maybe `utils/text.js`? If so that's a very tiny use case and we could probably get rid of that dependency for unit testing.

So the question is: why are unit tests pulling in Services?

> why are unit tests pulling in Services

I agree with this line of thinking. Hmm, we're likely creating a new pref in `js/utils/pref` now as well.

If we have to mock a lot more, maybe jsdom is the way to go. Looking at your patch though, you had to mock out `localStorage` anyway. The only other API you mentioned is `navigator` which would also be easy to mock ourselves. But maybe there's more?

Yep, Jason has a bug in bugzilla to do that but I can't find it right now.

Ran into some rebasing issues. Going to re-fork off the main repo and re-extract out the dropdown.

Mind sharing a screen shot? I'm thinking about the size of the close button

You're right. I'll make sure it does that.

Thanks for the report @nesk. 

The issue is likely a question of whether lerna is installed correctly. 

Could you check:
1. Is your branch up to date? 
2. If lerna is installed

Thanks. We're actually using a forked version jasonlaster/lerna. 

I noticed yesterday that there's another issue with the toolbox's webpack.config. On line 55, I believe, it should require the debuggers webpack config ../../../webpack.config 

note that the error mentions that https://www.npmjs.com/package/devtools-network-request does not exist, which is true - nothing was published to npm with that name (yet?)

@Pomax that isn't directly related. Since we use lerna it resolves these inner packages. and "installs" them, I think the idea is to publish to npm when we get to a more stable state and there isn't as much interdependency.

@jasonLaster that line seems to use a function to resolve the configs https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-local-toolbox/webpack.config.js#L54

@jasonLaster yeah I can, it seems like that function actually resolves to the debugger's `local.json` should it instead resolve to the webpack config?

@wldcordeiro in that case one important question is "which version of node/npm is being used": node 4 still uses npm 2 which installs packages in a nested hierarchy, whereas node 6 with npm 3 installs everything in a flat directory structure as much as possible, which can impact projects in surprising ways.

This has caused many headaches for some of our MoFo projects that import config files from dirs that worked fine locally, but broke once we pushed to staging; turns out node 4 was being used on the staging servers while all the devs were using node 6 locally, and the config files were nowhere near where we expected them to be.

(might not be related, but also might be, in which case lerna might need to check which version npm it's dealing with)

@Pomax I had checked the Lerna repo and couldn't find mention of an npm 3 requirement, I do know our project requires Node 5.x which ships with npm 3 to develop though.

Yeah, it doesn't look like https://github.com/lerna/lerna/blob/master/package.json has an `engines` section to make it clear what it relies on. I've filed https://github.com/lerna/lerna/issues/378 for them to consider adding one.

Researching stuff has lead me to believe `npm preinstall` doesn't work properly with `npm` v3.x as nuking node_modules and trying `npm install` always fails with the 404s listed in the issue. So to alleviate things here we will need to document that installing the dependencies for the debugger should just be done by running `./bin/preinstall` (which we could rename to `./bin/install` or something)

Also just changing the script entry from `preinstall` to `install` still doesn't get the script to run as expected.

For reference I'm on Node 6.7.0 and npm 3.10.8

NPM issue:
https://github.com/npm/npm/issues/10379

So for all those who are interested, the current work around is to install by running `npm run preinstall` and **NOT** `npm install`

@wldcordeiro I updated my PR with a screenshot. Actually, you may be able to answer this. I am trying to add a hover state but I can't seem to change the style of expression value which is a Rep component, so it doesn't look as good yet.

@jasonLaster I did not yet see it not updating expressions on pause, but I'll keep a look out for it. I did notice sometimes the expression input opens up a new `SOURCEundefined` tab. Also watch expressions does not seem to return a value on Chrome even though the code is executing completely. I should push my latest changes soon.

Cool. 

What do you mean by hover?

Chrome won't wont work yet. That's fine. 

Undefined is strange, when do you see that?

Hi @akhillb, I just took a look and this is off to a good start.

I found two things:

1) the branch needs a rebase. Afterwards, it'll be helpful to run `npm install`

2) I think the styling of the search bar could be improved. I took a stab at styling it here. The gist is that the close button should fit the search bar (width:16px, vertically centered, color: comment-alt _i think_). It might be helpful to add a close-button size prop, that way by default it could be size small, but in this case we pass down size large and it is styled appropriately.

![](http://g.recordit.co/Y6wxddmRU0.gif)

Hmm, surprised that mochitest failed on CI. It's passing locally for me.

@jasonLaster @jlongster so from reading through the npm issue (https://github.com/npm/npm/issues/10379) it seems like in npm 3.x `pre/post/install` always run after a dep-tree resolution step, which is where we currently fail with the 404s. This doesn't really address that specific issue but it does do a better job of finding lerna and makes sure to install the forked version. Until the changes get merged into lerna upstream which we can then just modify the script to use the global or local if the version is high enough.

@jasonLaster sorry i was busy yesterday. Thanks for the input. I will make these changes and get back to you with the new code in a day or two.

@jlongster I believe this _should_ work if you apply the m-c [patch](https://bugzilla.mozilla.org/show_bug.cgi?id=1307580) for the source map pref. It runs successfully locally. I forgot how we want to sequence this, it should be fine to land that patch, and then re-build the image.

Weird, so this is stuff that isn't run through Babel? If we're saying our requirement is Node 5.x for development, than any code that doesn't run through Babel should be compatible with Node 5.x. Nice find @helenvholmes!

@wldcordeiro According to James, the first file it's required in doesn't get the babel treatment... weirdly. Which is why he has a run script that just requires babel.

(I might be getting these details wrong)

@jlongster - mind taking another look.

I'd like to leave the flag for now. I'm finding some other UX issues to tweak, which can be done in subsequent issues.

@ThomasCrevoisier do you have some time to look into this? If not, I'd be happy to pick this up

@wldcordeiro where is this work at? Sorry it's been a couple of days and I lost context, I suppose there are two issues - the subsetting circles and the footer.

Yeah so I'm moving the subsettings/overflow-tabs work into a separate PR. This PR however I'm still trying to figure out the heights properly so that they work for in the firefox devtools panel since that seems to be the problem area. I'll be pushing today with some changes.

Adding this patch as a second option, which is ugly because of the _magic_ numbers, but could be simpler than the flex solution

``` diff
diff --git a/public/js/components/Editor.css b/public/js/components/Editor.css
index e521149..cdd5a24 100644
--- a/public/js/components/Editor.css
+++ b/public/js/components/Editor.css
@@ -39,8 +39,12 @@
   opacity: 0.3;
 }

+.editor-wrapper .editor-mount {
+  height: calc(100% - 32px);
+}
+
 .search-bar ~ .editor-mount {
-  height: calc(100% - 58px);
+  height: calc(100% - 56px);
 }
```

I haven't looked extensively yet, but everything probably moved to the packages directory.

```
<PROJECT_ROOT>/packages/devtools-modules/client/shared/shim/Services.js
```

@nesk @Pomax mind giving this another try. I believe it should be fixed :)

Closing this issue preemptively, feel free to re-open it. 

As context, registerConfig was not playing well with devtools-config/feature getConfig

I'm unsure as to why I'm not getting flow errors. But here's the change that we likely need.

This is the clever version:

```
module.name_mapper='^devtools-local-toolbox$' -> '<PROJECT_ROOT>/packages/devtools-local-toolbox/public/js/index.js'
module.name_mapper='^devtools-\(.+$\)$' -> '<PROJECT_ROOT>/packages/devtools-\1/index.js'
```

Or the more straightforward version, which I think is probably better as I'm not sure if the colliding mapper will work in the above solution.

```
module.name_mapper='^devtools-local-toolbox$' -> '<PROJECT_ROOT>/packages/devtools-local-toolbox/public/js/index.js'
module.name_mapper='^devtools-config$' -> '<PROJECT_ROOT>/packages/devtools-config/index.js'
module.name_mapper='^devtools-network-request$' -> '<PROJECT_ROOT>/packages/devtools-network-request/index.js'
module.name_mapper='^devtools-sham-modules$' -> '<PROJECT_ROOT>/packages/devtools-sham-modules/index.js'
module.name_mapper='^devtools-modules$' -> '<PROJECT_ROOT>/packages/devtools-modules/index.js'
```

Tried a couple variations, I believe that because the local packages resolve correctly now without webpack tricks there isn't a need for the `module.name_mapper` anymore.  We can probably remove the options section if this is correct.

@jasonLaster: it would be nice if the breakpoint icon could turn orange like in the old debugger for conditional breakpoints

Going to close out this issue, as it's gone stale.

Thanks @helenvholmes. I believe the consensus is that we should be hiding the pretty print button for bundle files (sources that have an associated source map). Thanks for the really clear issue.

This is no longer relevant.

Closing this issue because it is not tied to our immediate goals. I think a local runner would be a nice workflow improvement and it would be helpful for writing integration tests for the standalone application, but I don't see us having the time to work on this in the near future.

Closing this as storybook is no longer a dev dependency

Closing this issue as it's likely stale. We've made some improvements to the driver (upgrading to selenium 3). The primary issue now is https://github.com/devtools-html/debugger.html/issues/906, where the driver no longer sets the debugger server

Closing as we now have a more specific issue to work off of.

We have some more options now that the packages work is done. With that said, I don't know if this is a Q4 priority so we might want to close it for the time being.

@jasonLaster what's the bug number for this work?

I believe this is all done thanks to @wldcordeiro 

@clarkbw Would it be alright if we merge this early so that this does not conflict too much with @helenvholmes UI work on #338? 

I think this change makes a lot of sense. 

By the way, could you test hitting enter when there are no search results. I think this could be broken.

Thanks @helenvholmes!

> it might be cool when you switch tabs to re-run the search query

I think this makes a ton of sene

ping @akhillb - here are some updated designs with the close button

https://projects.invisionapp.com/share/AY8OEG3C6#/screens/117937554_Debugger

feel free to disregard the button for search all files.

Thanks. My guess is this is connected with fresh git clones. 

Lol

> @clarkbw Would it be alright if we merge this early so that this does not conflict too much with @helenvholmes UI work on #338?

Certainly, I can followup in another PR.

> By the way, could you test hitting enter when there are no search results. I think this could be broken.

I'll take a look

:thumbsup:

@jasonLaster I'm not sure if I know what the behaviour is supposed to be for hitting enter when there are no search results.

Hitting enter after not typing anything doesn't do anything.

<img width="731" alt="screen shot 2016-10-19 at 11 54 24 pm" src="https://cloud.githubusercontent.com/assets/2134/19545823/8d01f3f2-9657-11e6-9642-3e6e6a518f82.png">

Also hitting enter for a query that matches nothing doesn't do anything.  What is the desired behaviour here?

<img width="684" alt="screen shot 2016-10-19 at 11 54 35 pm" src="https://cloud.githubusercontent.com/assets/2134/19545830/9d29f55e-9657-11e6-9d74-fe982a824dec.png">

@helenvholmes what would you like to do when the tabs overflow? Always keep space for the + icon at the right of the last tab?

I think the overflow icon is broken currently but we should take that into account.

I've created a module to contain the source search in #953 so heads up if you've already started this work.  The rebase could be tricky.

I believe this is fixed, I'm not seeing this kind of output

@clarkbw what version of Node.js are you on? I think the 6.x line is where these warnings appear.

@jasonLaster Unfortunately, I won't have the time to look into this this week :/
Have you got specific error messages ? Is this targetting Firefox debug ?

Normally we update the actor when we re-enable breakpoints : https://github.com/devtools-html/debugger.html/pull/926/files#diff-db5189725270fa6c573d869b7a7911acR125

I believe I am using 6.x...

Yeah, I think there are two issues here:
1.  `client.sourceContents` this is coming from the action/sources tests, where I bet we forgot to add a catch to this function...
2. <InlineSVG />: `raw` prop works only when `window.DOMParser` exists. This looks like `Svg.js` is being required, and ofcourse needs the `window`. We should change how we run our node unit tests and ignore the component tests and finally drop the `if (typeof window == "object")` checks in the tests.

Cool, looks good!

@wldcordeiro  haha - sorry, i should have clarified. I was still hoping that you would come up w. a great flexbox fix, but didn't want to block on it :) 

Thanks for the hard work there

Thanks @helenvholmes!

Here's some details for the spec:
- Copy: "Expand Rows", "Collapse Rows"
- Number of frames: 10
- hover state: `var(--theme-selection-color)`

Hey @monicau, @jacobjzhang interested in snagging this?

@jasonLaster I'll take it!

To confirm, we collapse after 10 frames? And show frames in intervals of 10?

collapse after 10, and then show all

This is handled in this bugzilla bug

Display DOMNodes in a more user friendly way (i.e. not HTMLBodyElement but <body>) https://bugzilla.mozilla.org/show_bug.cgi?id=1307938

Sure, looks fine to me.

@Zacqary any interest in taking a look? This seems like something you might find interesting :)

Sweet, thanks for all these fixes. A few nits that I'd like to discuss though.

Previous times for docker pulls are around 7min 30sec

Thanks. I agree that it's a good idea. We also have a min node check in development server for 5. Would you like to add an engineer's check for five and up?

@jasonLaster rebased and simplified that onClick call.

Looks like every time a checkbox is toggled, `renderBreakpoint` gets called a bunch of times. So far I've determined that the scrolling jump happens after the second `renderBreakpoint` call. Not sure what's different about that specifically, still looking into it.

It might just be React getting confused about scroll position. Or is there any other code that would be affecting the `.CodeMirror`'s scroll position? If we ever intentionally scroll it programatically, then whatever prop is responsible for that might be getting sent the wrong message.

Hmm, I know we have a selected location prop. Also the editor updates the scroll positions. 

Yep, unchecking the box sends a `selectedLocation` prop of:

``` javascript
Object { sourceId: "server2.conn4.child1/32", line: 15 }
```

Although adding new breakpoints afterwards don't change the `line` and it doesn't jump to scroll. Unless it only updates the position when that prop changes.

Aha, here's the bug: https://github.com/devtools-html/debugger.html/blob/master/public/js/components/Breakpoints.js#L90

``` javascript
  {
        className: classnames({
          breakpoint,
          paused: isCurrentlyPaused,
          disabled: isDisabled
        }),
        key: locationId,
        onClick: () => this.selectBreakpoint(breakpoint)
      },
```

The `onClick` handler to select the breakpoint is getting triggered when you click on the checkbox, because the checkbox is part of the same div.

The node test fix commit has been removed.

@jasonLaster I'll take this one

@jasonLaster I'll take this one as well

I'm not sure why the integration tests failed, but it doesn't look related. This should land soon.

I would like to try this one. One small question though. If I select a new tab, do you think it would be better to open the tab with search bar open or closed?

> Chrome won't wont work yet. That's fine.

Oh I didn't know that.

> Undefined is strange, when do you see that?

STR:
1. Enter `document` or `window` in the expression input. 

ER: expression value would be document uri
AR: <not available> and the **debugger is paused**. If you `resume`, the correct expression value is applied.

Here's what I think: If you remember we saw something exactly similar when writing tests with Cypress. I tried to debug the `evaluate` implementation on the debugger server. When the server gets script "document" it returns back a consoleActor with the text "document" which the debugger adds as a source in the sources list. And the debugger is paused. Once you resume it, it goes ahead and emits the result once the console evaluates the script and that propagates back.

While I understood/think I understood the execution of the code, I don't think I can solve it. Would you mind looking at this with me @jasonLaster?

closing this as it's being handled in M-C

This PR still has problems:
1. The footer scrolls with the source. It's no longer "pinned" at the bottom. You should be able to repro by just loading a large source and scrolling.

<img width="669" alt="screen shot 2016-10-24 at 10 03 47 am" src="https://cloud.githubusercontent.com/assets/17031/19648832/7878f246-99d1-11e6-96ec-380408d7c27f.png">
1. The editor no longer is always 100% height. If the contents don't fill the screen, the editor is too short. It might be hard to tell, but you can see that the background color below the editor is gray, not white:

<img width="677" alt="screen shot 2016-10-24 at 10 05 08 am" src="https://cloud.githubusercontent.com/assets/17031/19648868/9d441aba-99d1-11e6-9430-d2cbbd752f5a.png">

I just pulled the latest branch, I think, but if you can't repro maybe I did something wrong.

We need to fix this layout ASAP. There are other serious problems with the latest debugger in nightly, see https://bugzilla.mozilla.org/show_bug.cgi?id=1310330. It seems to be related to the functionality of "hiding" tabs when there isn't enough room, and it seems completely broken. The menu for listing hidden tabs is gone, and when it hides tabs, the entire area becomes scrollable.

Awesome, this does seem to work great, thanks! And it fixes the issue described in the bugzilla bug as well about the hidden tabs messing things up. The hidden tabs still seem to be wonky, but at least the layout is more stable.

Just tried it locally and it behaves very well. Thanks!

Cool, I glanced through it and didn't see anything alarming except for my one comment. Is React 15 being pulled in somehow?

Thanks @gabrielhpugliese for asking. Here is our doc on [debuggable browsers](https://github.com/devtools-html/debugger.html/blob/master/docs/remotely-debuggable-browsers.md#safari). It is vague on Safari.

@clarkbw any thoughts?

I found a CLI handle `/Applications/Safari.app/Contents/MacOS/Safari` but couldn't do much with it...

Closing this as there are now:
- conditional breakpoints are in behind a flag 
- there are some smaller implementation issues for conditional breakpoints #970 #969 

Closing this issue and re-opening a new more relevant issue #988.

ping @akhillb. What's your schedule like? I'd be happy to pick this up if you're busy.

https://twitter.com/auchenberg/status/790958943677714432

> ... only possible to enable remote debugging in GTK/EFL WebKit ports. https://trac.webkit.org/wiki/WebInspector#UsingtheWebInspectorremotely

All of this makes sense, and doesn't look like a pile of hacks :) This makes us more consistent with the toolbox, which is nice. As long as you're 100% sure it doesn't bundle in the theme files for the toolbox (which it doesn't look like it should), this looks great.

@jasonLaster @jlongster feel free to review. I think it's pretty close to what is in https://projects.invisionapp.com/share/AY8OEG3C6#/screens/117937554_Debugger

Things not included though, the result count message, additional search type behaviors. I can add the former if that's something we want here though. The latter I think is out of scope for this PR.

@gabrielhpugliese looks like, not really.  If you find a system that works please open a PR adding it to the docs.  Thanks!

Looks like we have a reference in the sham libraries here: https://github.com/devtools-html/debugger.html/blob/466c8c315cdaf97f98b5b8a4bac83989f424bf6e/packages/devtools-sham-modules/sham/css-property-db.js#L753-L756

done! we can tweak in other small issues

This will fix #685

> what's the bug number for this work?

The bugzilla bug for this has already landed and the rest of the work is being tracked in #879 

This is being done in #685 

@jasonLaster investigate scope of issue and then drop from P1 and Milestone accordingly.

can't repro

Closing this for now, we can reopen this later.

The color values here aren't up to date but I was told this is a good resource to look through for theme colors https://developer.mozilla.org/en-US/docs/Tools/DevToolsColors

Hey @monicau any interest in a second OSS issue :) 

Hey, sure, count me in!  I see that this is made up of multiple other issues. Do I create a new branch for each of the issues and do separate pull requests? 

If you'd like to work on flow typing something, comment on the associated issue saying that you will get it and we'll add a 'in-progress' label.

Tracking issues are an often used way of breaking up larger tasks into tiny ones that encourage new contributions so I figure it would be a good idea to have a label for them and documentation. 

Thanks for the info!

Thanks. I'd be open to giving this a try. We're still trying to sort out the appropriate workflow w/ milestones, boards, labels, tracking issues. 

I definitely see the efficacy of tracking issues in cases like mochitests, but i don't want to overwhelm our issues with lots of small issues either. Often it is sufficient to have a tracking issue and a couple implementation issues that are good to start with. We could always add more implementation issues as we go.

@jbhoosreddy yeah - find a time to pair on this issue. 

Hard to review everything here since there are lot of m-c changes, but I saw one thing. Otherwise looks good.

> @helenvholmes what would you like to do when the tabs overflow? Always keep space for the + icon at the right of the last tab?
> 
> I think the overflow icon is broken currently but we should take that into account.

I think once the tabs overflow we should make room for the tab overflow icon, and the "+" icon should disappear. Just added info for you, @wldcordeiro!

@helenvholmes I had it so the new tab button is always present even with the overflow menu. That seems like more expected behavior to me as in browsers like Chrome/Firefox the new tab button is always present (though they reduce tab sizes to just icons and scroll the tab bar).

![screenshot_20161026_090148](https://cloud.githubusercontent.com/assets/580982/19731532/f3c1ca7e-9b5a-11e6-8861-d69ca98c0cbe.png)

Is our overflow menu those three dots?

> Is our overflow menu those three dots?

@helenvholmes yep, but that could certainly be improved.

@jasonLaster is this issue finished now?  #879 was merged in

@wldcordeiro However you'd like to handle it! Making sure overflow is working is important enough I'd like to see it solidly in, know that we can throw up changing the icon in an up-for-grabs easy bug.

@helenvholmes I believe @jasonLaster fixed overflow so it's working, only thing left is the icon.

Yup

I copied this from @jasonLaster's description so I'm not sure either. It might be the `x` for the close button is blending into the background

@wldcordeiro ohhhhh, okay, good show i'll make sure to make that change too

Just created a button issue https://github.com/devtools-html/debugger.html/issues/1015 to simplify this PR. 

@jlongster mind giving this a look as it introduces a new UI reducer.

Sounds good, thanks!

Is this required for #973?

See #1021

Yeah, looks good, thanks!

Interesting, why was it passing before this?

How do I use this app

Yeah, I just ignore them :) @atiraminor if you are serious, please check our readme.

@jlongster this is not for our `npm run lint` it's for editors
https://github.com/devtools-html/debugger.html/blob/master/package.json#L18-L19

The above description is wrong; that was just a theory, but it turned out to be something else. This is being handled in #1016

eslint fails with this change:

```
/home/ubuntu/debugger.html/public/js/actions/breakpoints.js
   63:33  error  Unexpected space before function parentheses  space-before-function-paren
  153:33  error  Unexpected space before function parentheses  space-before-function-paren

/home/ubuntu/debugger.html/public/js/actions/sources.js
  195:33  error  Unexpected space before function parentheses  space-before-function-paren
  230:33  error  Unexpected space before function parentheses  space-before-function-paren
```

> Is this required for #973?

I believe the cache directory is not being saved because I'm working on a branch.  So yes this is require for that work, however I'm not sure this will solve the issues I'm seeing there.

lets merge this and give it a try

> eslint fails with this change:

likely a result of merging the mozilla-eslint upgrade. We'll likely need to update our code to pass... this could be a big change

Wow, this is a lot better of an implementation than I was thinking of doing. Great work. I'm glad you took this :)

My only worry is how we'll keep `strings.json` in sync. Is there any way we could just copy over the debugger properties file and parse it? Or is the parser not a normal JS module that can copy over too? How did you generate `strings.json`?

Note that the debugger window could have already loaded by the time we set the `L10N` object on it, so we should be careful about using it before it's ready. I think we're OK because we should only use it after calling `bootstrap`, which is done later.

Oh, I thought the tests passed. Maybe we should revert the other one.

I don't think this is because the mozilla eslint upgrade. I just ran it locally (and ran an `npm install` to update everything) and it passed. And they passed in the PR https://github.com/devtools-html/debugger.html/pull/1021.

This must be from this update.

I am working on this.

I would like to work on this.

Thanks @sankha93 feel free to ask any questions here if you get stuck or just want any clarifications, etc.

i'll like to fix this!

Thanks!

React Redux should only rerender if it sees different props. If you try v5 beta (`npm install react-redux@next`), you can figure out which props are being treated as different by adding a custom implementation of `areMergedPropsEqual` which would look something like this:

``` js
// usage
connect(..., ..., ..., { areMergedPropsEqual: shallowEqualWithDebugging })(...)

// implementation

const hasOwn = Object.prototype.hasOwnProperty
function shallowEqualWithDebugging(a, b) {
  if (a === b) return true

  let countA = 0
  let countB = 0

  for (let key in a) {
    if (hasOwn.call(a, key) && a[key] !== b[key]) {
      console.log(key + ' has changed: ' + a[key] + ' to ' + b[key])
      return false
    }
    countA++
  }

  for (let key in b) {
    if (hasOwn.call(b, key)) countB++
  }

  return countA === countB
}
```

@jimbolla Thanks. I don't think it's rerendering, but the way react-router v4 worked was if the state function depends on props, it will render but return the previously rendered component (it stuck it as an instance variable). So my component's render function isn't called, but `componentWillReceiveProps` _still is_, which was the problem. We do a lot of work in cWRP so that was a problem.

This is a combination of a lot of things, but I bet upgrading to 5 would fix it. We need to do more work upgrading though because we need to upgrade our version of react-redux in Firefox for the devtools first which is a more complicated process.

Thanks for the information, I want to dig into this again soon to figure out exactly what's happening.

That's very strange, it must be something with your mouse. I can't repro; it acts exactly the same as all the other scrollbars. I don't show the scrollbars by default, but if you scroll a little then you can grab it and drag. This is the same behavior as all other scrollbars in OSX for me.

This should be fixed right?

Ah. That's weird that it would call cWRP but not render. I would not expect that. Yes v5 should behave differently because it avoids calling its own render method unless it the final props have actually changed, which means your component's cWRP shouldn't get called then.

I just refactored _resolveSourceMapURL so that flow would be happy. The issue there was that flow could not resolve url.parse's properties to strings. Adding the default empty strings did the trick. The rest was just cleanup :)

Code looks great! I haven't tested this locally, so as long as it works, the code is fine. What happens when there are too many tabs and we start hiding them? etc Test all the edge cases manually and make sure nothing is broken.

@jlongster you're right that the small width UI challenges are the difficult edge case.

Here's a gif of it working

![](http://g.recordit.co/JwJsQdKpqd.gif)

Thanks @wldcordeiro for this great work. I really appreciate how you jump in on the UI polish tickets.

Hope my small tweaks are alright.

@sankha93 i removed the return types as that did not affect the coverage

yup

@wldcordeiro I wouldn't mind tackling this issue. I probably wouldn't be tackle it until this weekend however. 

Hey @helenvholmes, I'd love to take this on to get my feet wet, it'd be my first ever OS contribution. I'm a UX designer too but any existing design specs to keep in mind? 

@ajstrand thanks! That won't be a problem at all. 

Hey @lmosele,

Hi! Thanks for taking the time!

So no existing spec, but we do have a set of existing colors in `packages/devtools-local-toolbox/public/js/lib/themes/variables.css` under `:root.theme-dark` that are the jumping off point for this issue.

Are you all set up with the project? Do you want/need extra guidance to get started?

Thanks @lmosele - here's some more info on making theme changes: https://github.com/devtools-html/debugger.html/issues/988

and some [docs](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#themes)

and some recent work on dark themes [PRs](https://github.com/devtools-html/debugger.html/pulls?utf8=%E2%9C%93&q=is%3Apr%20is%3Aclosed%20%22dark%20theme%22) for inspiration :P

also docs on how to do OSS [docs](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#your-first-code-contribution)

By the way, I love your portfolio page. Special props for 3d aligning your work, gatsby poster, and "come back soon" title! Hope you enjoy helping out the debugger. Let me know if there's anything we can do to help. We're all on IRC too.

@jasonLaster looks like we may want to set a minimum width for the center pane? The search results break out of their container in an ugly way too.

@wldcordeiro that's a good idea. I'll file an issue for that. 

> My only worry is how we'll keep strings.json in sync

I agree, it'll be nice to be able to include the `debugger.properties` file in github and copy it over with the bundle. I have a patch that adds a java properties loader... it is still failing, but close...

> Note that the debugger window could have already loaded by the time we set the L10N object

Yeah, this could be an issue down the line, but i think we should be fine for now. The strings in the debugger app will be fine.

Whoops, didn't see that @ajstrand had requested it!

I actually think this issue is naturally dependent on #962, so I'm going to tackle that first.

after thinking this about more, i'm not convinced this will help us at the moment. feel free to continue discussing.

@sankha93 i made a couple of cleanups based on the comments. It looks like flow is complaining in some cases now because it can't assume sourceMapURL is a string. We will likely need to set reasonable defaults like in URL.parse. Thanks for the help again.

> I'll file an issue for that.

#1029 is handling the minimum width

ping @akhillb do you still think you'll be able to get to this?

Got a browser/OS/revision handy? I've tested this with 2b7d50fcf197d680c0f842c658e62043784b19f7 on Firefox 49.0.2 and Chrome 54.0.2840.71 on OSX 10.11.6 and can't reproduce. Thanks!

I would like to work on this.

Also, I'd mark this issue with the 'bug' label, but it appears I somehow am unable to. Sorry!

I think the first file you linked to should be this instead.

https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-config/configs/development.json

The second should be this

https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-config/README.md

This was just a result of our shift to a mono-repo not getting updated. If you'd like to submit a PR with the changes that would be most welcome!

Awesome, thanks for the help! I can submit a PR soon(ish).

Thanks!

I'll grab this one

@jasonLaster I'll grab this one

Hmm try yarn install. Also the preinstall script just wraps lerna so feel free to try to do it yourself. Lerna is windows friendly so should be fine. 

Also please share what you learn!

Triggering it again on CI to make sure it passes again, then will merge.

I think Helen might be gone for the day, and I'd really like to land a debugger update. I may merge this and do a follow-up so that the buttons don't look broken.

The word wrapping, in my testing, just wraps down and is hidden like the screenshot because tabs have a fixed height (rightly so). So I'm not sure what UX you're thinking of. I think the most straight-forward thing to do would be to do the text-overflow: ellipses thing.

For now, let's remove it to have it working again.

Good call, just tested and it is correct as well.

`text-overflow: ellipsis` maybe?

So `yarn install` didn't work as well, here's the result:

```
$ yarn install
yarn install v0.16.1
$ ./bin/preinstall
'.' is not recognized as an internal or external command,
operable program or batch file.
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
```

And when I try to run lerna from the command line using `./node_modules/lerna/bin/lerna.js bootstrap` I get the same error as above:

```
Errored while running BootstrapCommand.execute
Error: ENOENT: no such file or directory, stat 'c:\...\debugger.html\packages\chrome-remote-debugging-protocol\build-bootstrap.js'
    at Error (native)
```

Try `npm install --ignore-scripts` and then `lerna bootstrap` the pre install script doesn't work with Windows. 

I would like to be able to disable debugger statements while having my own breakpoints.

It's a pain if you debug code you don't own and the code author decided to protect the code with debugger statements. Give me a break (pun intended).

`npm install --ignore-scripts` seems to work fine, but `lerna bootstrap` still returns same error message.

Hmm. Build-bootstrap in crdp shouldn't matter. Perhaps try removing or adding that. 

Are you free to screen hero next week? Would be happy to pair on this

Has this been merged into master or did it get overwritten? I am experiencing the same issue as #761 with a fresh install of master and I don't see any check for node version in package.json version 0.0.6

Has this been merged into master or did it get overwritten? I am experiencing this same issue with a fresh install of master and I don't see any check for node version in package.json version 0.0.6 so it seems #768 may have been overwritten or dropped?

Hi, we check the node version in the dev server. Look for checkNode

Thanks. Nice find! Also kudos for using 7

Looks like the devtools-config/feature module can't find the feature-flag module. 

Feel free to play with path.x methods

Also install node 6 with nvm

@jasonLaster : OK, thanks for the update - I'm going to try with v6.9.1.

Just a small update that I'm getting a very similar problem with node v6.9.1:

```
shlomif@telaviv1:~/Download/unpack/firefox/debugger.html$ npm test

> debugger.html@0.0.6 test /home/shlomif/Download/unpack/firefox/debugger.html
> node public/js/test/node-unit-tests.js

module.js:471
    throw err;
    ^

Error: Cannot find module '../../devtools-local-toolbox/public/js/test/test-flag'
    at Function.Module._resolveFilename (module.js:469:15)
    at Function.Module._load (module.js:417:25)
    at Function.Module._load (/home/shlomif/Download/unpack/firefox/debugger.html/node_modules/mock-require/index.js:14:22)
    at Module.require (module.js:497:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/home/shlomif/Download/unpack/firefox/debugger.html/node_modules/devtools-config/src/feature.js:6:14)
    at Module._compile (module.js:570:32)
    at Module.module.constructor._compile (/home/shlomif/Download/unpack/firefox/debugger.html/node_modules/amd-loader/amd-loader.js:10:31)
    at Module._extensions..js (module.js:579:10)
    at Object.require.extensions.(anonymous function) [as .js] (/home/shlomif/Download/unpack/firefox/debugger.html/node_modules/babel-register/lib/node.js:152:7)
npm ERR! Test failed.  See above for more details.
shlomif@telaviv1:~/Download/unpack/firefox/debugger.html$ node --version
v6.9.1
shlomif@telaviv1:~/Download/unpack/firefox/debugger.html$

```

I have not played with the path.x methods yet (whatever those are).

Hmm. Interesting, it works for me on 6.9. Was thinking of path.resolve. Happy to pair on Monday if your free

@jasonLaster : I see. I can try it on a VirtualBox VM as well. What do you mean by "pair"? Do you mean "pair program"?

@jasonLaster : OK, I might do it.

Hi!

sorry for the late report, but I am getting a very similar report on a relatively up-to-date Debian Sid/Unstable VBox VM with nvm's node v6.9.1 after doing only "npm install" and "npm test". See:

```

> debugger.html@0.0.6 test /home/shlomif/Downloads/debugger.html
> node public/js/test/node-unit-tests.js

module.js:471
    throw err;
    ^

Error: Cannot find module '../../devtools-local-toolbox/public/js/test/test-flag'
    at Function.Module._resolveFilename (module.js:469:15)
    at Function.Module._load (module.js:417:25)
    at Function.Module._load (/home/shlomif/Downloads/debugger.html/node_modules/mock-require/index.js:14:22)
    at Module.require (module.js:497:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/home/shlomif/Downloads/debugger.html/node_modules/devtools-config/src/feature.js:6:14)
    at Module._compile (module.js:570:32)
    at Module.module.constructor._compile (/home/shlomif/Downloads/debugger.html/node_modules/amd-loader/amd-loader.js:10:31)
    at Module._extensions..js (module.js:579:10)
    at Object.require.extensions.(anonymous function) [as .js] (/home/shlomif/Downloads/debugger.html/node_modules/babel-register/lib/node.js:152:7)
npm ERR! Test failed.  See above for more details.

```

@jasonLaster @jlongster Sorry it took so long. I've been busy those past few days.

This is the rework of #814.

By adding a type for the action `TOGGLE_BREAKPOINTS` ?

Note that there's no rush getting this in; I want to push out a debugger update first without this.

> if you pretty-print a generated source that has a sourcemap, do you "replace" its sourcemap?

agreed. Pretty printing generated sources as well as bundles are definitely difficult. I believe we disabled it in august as well. I believe the sources actor has a function for extending the a source map so that we can pass the inverted source map in and extend the original.

Thanks!

Working on this!

Thanks!

Looks good, the main thing is the lerna installation process. This is a great step though, thanks!

Cool, looks good!

This is being addressed by #1156

closing in favor of #1333
Mind sharing a screen shot? I'm thinking about the size of the close button

Hi @akhillb, I just took a look and this is off to a good start.

I found two things:

1) the branch needs a rebase. Afterwards, it'll be helpful to run `npm install`

2) I think the styling of the search bar could be improved. I took a stab at styling it here. The gist is that the close button should fit the search bar (width:16px, vertically centered, color: comment-alt _i think_). It might be helpful to add a close-button size prop, that way by default it could be size small, but in this case we pass down size large and it is styled appropriately.

![](http://g.recordit.co/Y6wxddmRU0.gif)

ping @akhillb - here are some updated designs with the close button

https://projects.invisionapp.com/share/AY8OEG3C6#/screens/117937554_Debugger

feel free to disregard the button for search all files.

ping @akhillb. What's your schedule like? I'd be happy to pick this up if you're busy.

@akhillb that sounds good to me. I don't mind having a `large` and `small` class for the close button. 

Thanks for the help @akhillb. This work is being finished up in #1135

@jasonLaster We could add a `buttonClass` prop on the `CloseButton` that could optionally take an additional class for when you override things.

@jasonLaster sorry i was busy yesterday. Thanks for the input. I will make these changes and get back to you with the new code in a day or two.

@jasonLaster I am on a vacation now. Will be back on this by tomorrow.

Setting the margin-right property would mess up the alignment of close button in the file search bar. So i was thinking maybe we could have two different classes for close button, one for file search and other for code search, instead of setting values by a function.

note that the error mentions that https://www.npmjs.com/package/devtools-network-request does not exist, which is true - nothing was published to npm with that name (yet?)

@wldcordeiro in that case one important question is "which version of node/npm is being used": node 4 still uses npm 2 which installs packages in a nested hierarchy, whereas node 6 with npm 3 installs everything in a flat directory structure as much as possible, which can impact projects in surprising ways.

This has caused many headaches for some of our MoFo projects that import config files from dirs that worked fine locally, but broke once we pushed to staging; turns out node 4 was being used on the staging servers while all the devs were using node 6 locally, and the config files were nowhere near where we expected them to be.

(might not be related, but also might be, in which case lerna might need to check which version npm it's dealing with)

Yeah, it doesn't look like https://github.com/lerna/lerna/blob/master/package.json has an `engines` section to make it clear what it relies on. I've filed https://github.com/lerna/lerna/issues/378 for them to consider adding one.

Thanks for the report @nesk. 

The issue is likely a question of whether lerna is installed correctly. 

Could you check:
1. Is your branch up to date? 
2. If lerna is installed

Thanks. We're actually using a forked version jasonlaster/lerna. 

I noticed yesterday that there's another issue with the toolbox's webpack.config. On line 55, I believe, it should require the debuggers webpack config ../../../webpack.config 

@nesk @Pomax mind giving this another try. I believe it should be fixed :)

Closing this issue preemptively, feel free to re-open it. 

@Pomax that isn't directly related. Since we use lerna it resolves these inner packages. and "installs" them, I think the idea is to publish to npm when we get to a more stable state and there isn't as much interdependency.

@jasonLaster that line seems to use a function to resolve the configs https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-local-toolbox/webpack.config.js#L54

@jasonLaster yeah I can, it seems like that function actually resolves to the debugger's `local.json` should it instead resolve to the webpack config?

@Pomax I had checked the Lerna repo and couldn't find mention of an npm 3 requirement, I do know our project requires Node 5.x which ships with npm 3 to develop though.

Researching stuff has lead me to believe `npm preinstall` doesn't work properly with `npm` v3.x as nuking node_modules and trying `npm install` always fails with the 404s listed in the issue. So to alleviate things here we will need to document that installing the dependencies for the debugger should just be done by running `./bin/preinstall` (which we could rename to `./bin/install` or something)

Also just changing the script entry from `preinstall` to `install` still doesn't get the script to run as expected.

For reference I'm on Node 6.7.0 and npm 3.10.8

NPM issue:
https://github.com/npm/npm/issues/10379

So for all those who are interested, the current work around is to install by running `npm run preinstall` and **NOT** `npm install`

@jasonLaster @jlongster so from reading through the npm issue (https://github.com/npm/npm/issues/10379) it seems like in npm 3.x `pre/post/install` always run after a dep-tree resolution step, which is where we currently fail with the 404s. This doesn't really address that specific issue but it does do a better job of finding lerna and makes sure to install the forked version. Until the changes get merged into lerna upstream which we can then just modify the script to use the global or local if the version is high enough.

Weird, so this is stuff that isn't run through Babel? If we're saying our requirement is Node 5.x for development, than any code that doesn't run through Babel should be compatible with Node 5.x. Nice find @helenvholmes!

@wldcordeiro According to James, the first file it's required in doesn't get the babel treatment... weirdly. Which is why he has a run script that just requires babel.

(I might be getting these details wrong)

@Zacqary any interest in taking a look? This seems like something you might find interesting :)

Hmm, I know we have a selected location prop. Also the editor updates the scroll positions. 

Looks like every time a checkbox is toggled, `renderBreakpoint` gets called a bunch of times. So far I've determined that the scrolling jump happens after the second `renderBreakpoint` call. Not sure what's different about that specifically, still looking into it.

It might just be React getting confused about scroll position. Or is there any other code that would be affecting the `.CodeMirror`'s scroll position? If we ever intentionally scroll it programatically, then whatever prop is responsible for that might be getting sent the wrong message.

Yep, unchecking the box sends a `selectedLocation` prop of:

``` javascript
Object { sourceId: "server2.conn4.child1/32", line: 15 }
```

Although adding new breakpoints afterwards don't change the `line` and it doesn't jump to scroll. Unless it only updates the position when that prop changes.

Aha, here's the bug: https://github.com/devtools-html/debugger.html/blob/master/public/js/components/Breakpoints.js#L90

``` javascript
  {
        className: classnames({
          breakpoint,
          paused: isCurrentlyPaused,
          disabled: isDisabled
        }),
        key: locationId,
        onClick: () => this.selectBreakpoint(breakpoint)
      },
```

The `onClick` handler to select the breakpoint is getting triggered when you click on the checkbox, because the checkbox is part of the same div.

This should be fixed right?

@ThomasCrevoisier do you have some time to look into this? If not, I'd be happy to pick this up

yup

@jasonLaster Unfortunately, I won't have the time to look into this this week :/
Have you got specific error messages ? Is this targetting Firefox debug ?

Normally we update the actor when we re-enable breakpoints : https://github.com/devtools-html/debugger.html/pull/926/files#diff-db5189725270fa6c573d869b7a7911acR125

I haven't looked extensively yet, but everything probably moved to the packages directory.

```
<PROJECT_ROOT>/packages/devtools-modules/client/shared/shim/Services.js
```

I'm unsure as to why I'm not getting flow errors. But here's the change that we likely need.

This is the clever version:

```
module.name_mapper='^devtools-local-toolbox$' -> '<PROJECT_ROOT>/packages/devtools-local-toolbox/public/js/index.js'
module.name_mapper='^devtools-\(.+$\)$' -> '<PROJECT_ROOT>/packages/devtools-\1/index.js'
```

Or the more straightforward version, which I think is probably better as I'm not sure if the colliding mapper will work in the above solution.

```
module.name_mapper='^devtools-local-toolbox$' -> '<PROJECT_ROOT>/packages/devtools-local-toolbox/public/js/index.js'
module.name_mapper='^devtools-config$' -> '<PROJECT_ROOT>/packages/devtools-config/index.js'
module.name_mapper='^devtools-network-request$' -> '<PROJECT_ROOT>/packages/devtools-network-request/index.js'
module.name_mapper='^devtools-sham-modules$' -> '<PROJECT_ROOT>/packages/devtools-sham-modules/index.js'
module.name_mapper='^devtools-modules$' -> '<PROJECT_ROOT>/packages/devtools-modules/index.js'
```

Tried a couple variations, I believe that because the local packages resolve correctly now without webpack tricks there isn't a need for the `module.name_mapper` anymore.  We can probably remove the options section if this is correct.

As context, registerConfig was not playing well with devtools-config/feature getConfig

this is no no longer relevant post postcss landing. We can make a new RTL follow up later
Thanks @helenvholmes. I believe the consensus is that we should be hiding the pretty print button for bundle files (sources that have an associated source map). Thanks for the really clear issue.

This works now

@helenvholmes what would you like to do when the tabs overflow? Always keep space for the + icon at the right of the last tab?

I think the overflow icon is broken currently but we should take that into account.

> Is our overflow menu those three dots?

@helenvholmes yep, but that could certainly be improved.

Just created a button issue https://github.com/devtools-html/debugger.html/issues/1015 to simplify this PR. 

@helenvholmes I had it so the new tab button is always present even with the overflow menu. That seems like more expected behavior to me as in browsers like Chrome/Firefox the new tab button is always present (though they reduce tab sizes to just icons and scroll the tab bar).

![screenshot_20161026_090148](https://cloud.githubusercontent.com/assets/580982/19731532/f3c1ca7e-9b5a-11e6-8861-d69ca98c0cbe.png)

@helenvholmes I believe @jasonLaster fixed overflow so it's working, only thing left is the icon.

> @helenvholmes what would you like to do when the tabs overflow? Always keep space for the + icon at the right of the last tab?
> 
> I think the overflow icon is broken currently but we should take that into account.

I think once the tabs overflow we should make room for the tab overflow icon, and the "+" icon should disappear. Just added info for you, @wldcordeiro!

Is our overflow menu those three dots?

@wldcordeiro However you'd like to handle it! Making sure overflow is working is important enough I'd like to see it solidly in, know that we can throw up changing the icon in an up-for-grabs easy bug.

I believe we still need to merge m-c https://bugzilla.mozilla.org/show_bug.cgi?id=1313196, but it's done on github

> @clarkbw Would it be alright if we merge this early so that this does not conflict too much with @helenvholmes UI work on #338?

Certainly, I can followup in another PR.

> By the way, could you test hitting enter when there are no search results. I think this could be broken.

I'll take a look

@jasonLaster I'm not sure if I know what the behaviour is supposed to be for hitting enter when there are no search results.

Hitting enter after not typing anything doesn't do anything.

<img width="731" alt="screen shot 2016-10-19 at 11 54 24 pm" src="https://cloud.githubusercontent.com/assets/2134/19545823/8d01f3f2-9657-11e6-9642-3e6e6a518f82.png">

Also hitting enter for a query that matches nothing doesn't do anything.  What is the desired behaviour here?

<img width="684" alt="screen shot 2016-10-19 at 11 54 35 pm" src="https://cloud.githubusercontent.com/assets/2134/19545830/9d29f55e-9657-11e6-9d74-fe982a824dec.png">

@clarkbw Would it be alright if we merge this early so that this does not conflict too much with @helenvholmes UI work on #338? 

I think this change makes a lot of sense. 

By the way, could you test hitting enter when there are no search results. I think this could be broken.

:thumbsup:

Thanks. My guess is this is connected with fresh git clones. 

should be resolved

Lol

Cool, looks good!

I wanted to figure this out, but I can't make it past the basics of mochitest. Like "How do I pause the test so I can debug the test?"  grrr...

This is my basic test: 

```js
  // Make sure new sources appear in the list.
  ContentTask.spawn(gBrowser.selectedBrowser, null, function() {
    const script = content.document.createElement("script");
    script.textContent = `(function() {
      console.log('this should appear to be coming from the pen.js file');
    })();
    //# sourceURL=pen.js`;
    content.document.body.appendChild(script);
  });

  yield waitForSourceCount(dbg, 9);
  is(findElement(dbg, "sourceNode", 7).textContent,
    "pen.js",
    "The dynamic script exists");
```

This is likely an issue with the server so adding that tag as well.  This might be a good project for someone who wants to learn more about the debug server while also fixing an issue on the client side of things.
added https://github.com/devtools-html/debugger.html/projects/11#card-1576974 to handle this
Cool. Lets see what we can do here, 

perhaps we want to start by creating an example like https://github.com/devtools-html/debugger.html/pull/1407

Then we can see what is going on in the server such that it is ignored
Sweet, thanks for all these fixes. A few nits that I'd like to discuss though.

This PR still has problems:
1. The footer scrolls with the source. It's no longer "pinned" at the bottom. You should be able to repro by just loading a large source and scrolling.

<img width="669" alt="screen shot 2016-10-24 at 10 03 47 am" src="https://cloud.githubusercontent.com/assets/17031/19648832/7878f246-99d1-11e6-96ec-380408d7c27f.png">
1. The editor no longer is always 100% height. If the contents don't fill the screen, the editor is too short. It might be hard to tell, but you can see that the background color below the editor is gray, not white:

<img width="677" alt="screen shot 2016-10-24 at 10 05 08 am" src="https://cloud.githubusercontent.com/assets/17031/19648868/9d441aba-99d1-11e6-9430-d2cbbd752f5a.png">

I just pulled the latest branch, I think, but if you can't repro maybe I did something wrong.

We need to fix this layout ASAP. There are other serious problems with the latest debugger in nightly, see https://bugzilla.mozilla.org/show_bug.cgi?id=1310330. It seems to be related to the functionality of "hiding" tabs when there isn't enough room, and it seems completely broken. The menu for listing hidden tabs is gone, and when it hides tabs, the entire area becomes scrollable.

@wldcordeiro  haha - sorry, i should have clarified. I was still hoping that you would come up w. a great flexbox fix, but didn't want to block on it :) 

Thanks for the hard work there

@bomsy we dropped the accordion refactor you're no longer blocked.
This is blocked by #1364 

happy to take this off your plate if you've got a lot.
hmm, @bomsy Prefs should work again.
@jasonLaster it looks like this will be dependent on changes from #1277 
Nice! 
on this now!
Thanks @helenvholmes!

Here's some details for the spec:
- Copy: "Expand Rows", "Collapse Rows"
- Number of frames: 10
- hover state: `var(--theme-selection-color)`

Hey @monicau, @jacobjzhang interested in snagging this?

collapse after 10, and then show all

@jasonLaster I'll take it!

To confirm, we collapse after 10 frames? And show frames in intervals of 10?

hey @SezginEge how's this going? 
Here's the work we did:

``` diff
diff --git a/public/js/components/Frames.css b/public/js/components/Frames.css
index c18faaf..4b3b212 100644
--- a/public/js/components/Frames.css
+++ b/public/js/components/Frames.css
@@ -11,11 +11,14 @@
   overflow: hidden;
 }

-/* Style the focused call frame like so:
+/* Style the focused call frame like so: */
 .frames ul li:focus {
-  border: 3px solid red;
+  border: none;
+  outline: 0;
 }
-*/
+
+
+

 .frames ul li * {
   -moz-user-select: none;
@@ -41,10 +44,26 @@

 .frames ul li.selected,
 .frames ul li.selected .location {
+
+  background-color: slateblue;
+
+  /*
   background-color: var(--theme-selection-background);
   color: white;
+  */
 }

+.frames ul li.selected:focus,
+.frames ul li.selected:focus .location {
+  background: olive;
+}
+
+.frames ul li:focus,
+.frames ul li:focus .location {
+  background: red;
+}
+
+
```

@SezginEge I think this is a great one. was just thinking about it earlier today!
Thanks @SezginEge. This issue might be vague, so feel free to ask questions in channel if you have questions about styling

If nobody is working on this, I can tackle it.
@clarkbw I could not work on it yet :/ I will try to send a pr today.
@helenvholmes mind taking a look at this wth as it's related to themes?

Sure, looks fine to me.

Thanks. I agree that it's a good idea. We also have a min node check in development server for 5. Would you like to add an engineer's check for five and up?

Will be addressed in #1181 

Thanks for filing.

Done!

ping @akhillb do you still think you'll be able to get to this?

@akhillb do you think you can get to this?

@akhillb I'm going to move this back to "up for grabs" feel free to re-claim it if you've got some time. 

@arthur801031, oh you might need to pass it in :)

Sorry, that was a quick code sketch and i missed that detail

```diff
diff --git a/src/components/Editor.js b/src/components/Editor.js
index ae71d2d..ff35d60 100644
--- a/src/components/Editor.js
+++ b/src/components/Editor.js
@@ -414,13 +414,14 @@ const Editor = React.createClass({
   },

   render() {
-    const { sourceText } = this.props;
+    const { sourceText, selectedSource } = this.props;

     return (
       dom.div(
         { className: "editor-wrapper devtools-monospace" },
         EditorSearchBar({
           editor: this.editor,
+          selectedSource,
           sourceText
         }),
         dom.div({
```
@jasonLaster May I work on this? Thank you!
@jasonLaster  

I have looked at the attributes in `this.props.editor.codeMirror`, `this.props`, and `this.props.editor`, but I still couldn't find `selectedSource`. How do I get this variable? Thank you!
@jasonLaster I've added the code for this issue. Please check. Thank you very much! :)
I would like to try this one. One small question though. If I select a new tab, do you think it would be better to open the tab with search bar open or closed?

@jasonLaster yep i think i will be able to do this.

Thanks!

Ping @bomsy still planning on tackling this?

oops.

@jasonLaster looks like you merged @bomsy's fix? 

i'll like to fix this!

@jasonLaster I'll take this one as well

Thanks for the help! I'm closing this and opening a small issue for focusing the input on open

@jasonLaster I'll take this one

I can take care of this tonight. :) 

Previous times for docker pulls are around 7min 30sec

@jasonLaster updating now

> Cool. Let's clean this up and merge. We can improve perf further in a new PR

Sounds good.  I'll try to get that done at the airport.

Ok @jasonLaster I think this is ready for review.

Once we've landed this, we can start work on some further optimizations where we check that the `docker pull` command actually updates the cache file and only update it in that case, saving roughly 3 min.

@clarkbw could you try updating this PR so we can see if adding the downloads dir helped. 

Cool. Let's clean this up and merge. We can improve perf further in a new PR

Agreed. I think this was the hard step. And this is a huge win for working with contributors

@jasonLaster rebased and simplified that onClick call.

The node test fix commit has been removed.

Looks like we have a reference in the sham libraries here: https://github.com/devtools-html/debugger.html/blob/466c8c315cdaf97f98b5b8a4bac83989f424bf6e/packages/devtools-sham-modules/sham/css-property-db.js#L753-L756

closing this as we'll update it when we remove the shams

I'm not sure why the integration tests failed, but it doesn't look related. This should land soon.

Cool, I glanced through it and didn't see anything alarming except for my one comment. Is React 15 being pulled in somehow?

Awesome, this does seem to work great, thanks! And it fixes the issue described in the bugzilla bug as well about the hidden tabs messing things up. The hidden tabs still seem to be wonky, but at least the layout is more stable.

Just tried it locally and it behaves very well. Thanks!

This issue is done, though our flow coverage could improve lets open other individual issues for that.
thanks for the ping @montogeek. Just moved it to `in progress`. excited to see how you got to `%77`

If you'd like to work on flow typing something, comment on the associated issue saying that you will get it and we'll add a 'in-progress' label.

I am working on this :)

Sounds good, thanks!

https://twitter.com/auchenberg/status/790958943677714432

> ... only possible to enable remote debugging in GTK/EFL WebKit ports. https://trac.webkit.org/wiki/WebInspector#UsingtheWebInspectorremotely

@gabrielhpugliese looks like, not really.  If you find a system that works please open a PR adding it to the docs.  Thanks!

Thanks @gabrielhpugliese for asking. Here is our doc on [debuggable browsers](https://github.com/devtools-html/debugger.html/blob/master/docs/remotely-debuggable-browsers.md#safari). It is vague on Safari.

@clarkbw any thoughts?

I found a CLI handle `/Applications/Safari.app/Contents/MacOS/Safari` but couldn't do much with it...

Thanks for the info!

The above description is wrong; that was just a theory, but it turned out to be something else. This is being handled in #1016

Hey @monicau any interest in a second OSS issue :) 

The color values here aren't up to date but I was told this is a good resource to look through for theme colors https://developer.mozilla.org/en-US/docs/Tools/DevToolsColors

Hey, sure, count me in!  I see that this is made up of multiple other issues. Do I create a new branch for each of the issues and do separate pull requests? 

All of this makes sense, and doesn't look like a pile of hacks :) This makes us more consistent with the toolbox, which is nice. As long as you're 100% sure it doesn't bundle in the theme files for the toolbox (which it doesn't look like it should), this looks great.

@jasonLaster @jlongster feel free to review. I think it's pretty close to what is in https://projects.invisionapp.com/share/AY8OEG3C6#/screens/117937554_Debugger

Things not included though, the result count message, additional search type behaviors. I can add the former if that's something we want here though. The latter I think is out of scope for this PR.

That's very strange, it must be something with your mouse. I can't repro; it acts exactly the same as all the other scrollbars. I don't show the scrollbars by default, but if you scroll a little then you can grab it and drag. This is the same behavior as all other scrollbars in OSX for me.

Closing now, we re-open this if others see it. 

Closed via #1032.

Sorry. NPM run Firefox isn't working now. Use the long command to start Firefox

@ajstrand here's the command i run: /Applications/FirefoxNightly.app/Contents/MacOS/firefox-bin --start-debugger-server 6080 -P dev

Yup. One other report. I'll look tomorrow 

Hi @ajstrand I'm sorry you're running into issues with npm lint.

I'd like to help if I can, but I'm not able to reproduce the linting issues. Feel free to stop by our IRC room in #devtools (look at the readme for instructions). or ping me at jason.laster.11@gmail.com and I can 'hangout and help fix it. 

@ajstrand thanks! That won't be a problem at all. 

Whoops, didn't see that @ajstrand had requested it!

Closed via #1057.

@wldcordeiro I wouldn't mind tackling this issue. I probably wouldn't be tackle it until this weekend however. 

@wldcordeiro I've been trying to get the project up and running on my machine, but I've been having issues when trying to do `npm run firefox`. 

This is the error that I get 

```
> debugger.html@0.0.6 firefox /home/ajstrand/Documents/debugger.html
> node bin/firefox-driver --start

/home/ajstrand/Documents/debugger.html/node_modules/selenium-webdriver/lib/promise.js:2291
        throw error;
        ^

Error: Server terminated early with status 1
    at Error (native)
    at /home/ajstrand/Documents/debugger.html/node_modules/selenium-webdriver/remote/index.js:255:22
    at process._tickCallback (internal/process/next_tick.js:103:7)
From: Task: WebDriver.createSession()
    at Function.createSession (/home/ajstrand/Documents/debugger.html/node_modules/selenium-webdriver/lib/webdriver.js:366:24)
    at createGeckoDriver (/home/ajstrand/Documents/debugger.html/node_modules/selenium-webdriver/firefox/index.js:497:27)
    at Driver (/home/ajstrand/Documents/debugger.html/node_modules/selenium-webdriver/firefox/index.js:605:14)
    at start (/home/ajstrand/Documents/debugger.html/bin/firefox-driver.js:42:18)
    at Object.<anonymous> (/home/ajstrand/Documents/debugger.html/bin/firefox-driver.js:47:18)
    at Module._compile (module.js:570:32)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
From: Task: WebDriver.navigate().to(http://localhost:7999/todomvc)
    at Driver.schedule (/home/ajstrand/Documents/debugger.html/node_modules/selenium-webdriver/lib/webdriver.js:414:17)
    at Navigation.to (/home/ajstrand/Documents/debugger.html/node_modules/selenium-webdriver/lib/webdriver.js:1042:25)
    at Driver.get (/home/ajstrand/Documents/debugger.html/node_modules/selenium-webdriver/lib/webdriver.js:832:28)
    at Object.<anonymous> (/home/ajstrand/Documents/debugger.html/bin/firefox-driver.js:48:10)
    at Module._compile (module.js:570:32)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
```

I can navigate to `localhost:7999` and see the various examples, but that doesn't help me with this predicament. 

I ran `npm install`, so that shouldn't be an issue here. 

I will note that I"m running `npm run firefox` in a separate terminal window after I've ran `npm start`. 

Any ideas on why `npm run firefox` isn't working? 

If it helps I'm running Ubuntu 16.04 in Virtual Box VM. 

I got it working, thanks guys! I ended changing some of the settings in `about:config` .  Now I can actually start on fixing this.  

@jasonLaster I managed to fix the issue. Some the indentation had gotten messed up in a few of the files and so I just had to go correct the affected files. I'll putting up my PR shortly. 

> Is this required for #973?

I believe the cache directory is not being saved because I'm working on a branch.  So yes this is require for that work, however I'm not sure this will solve the issues I'm seeing there.

Is this required for #973?

lets merge this and give it a try

done

Colorized diff https://gist.github.com/jasonLaster/48a09ff185f13ec7fa0da30298a8603e

Thanks @sankha93 feel free to ask any questions here if you get stuck or just want any clarifications, etc.

I am working on this.

> I'll file an issue for that.

#1029 is handling the minimum width

Code looks great! I haven't tested this locally, so as long as it works, the code is fine. What happens when there are too many tabs and we start hiding them? etc Test all the edge cases manually and make sure nothing is broken.

@jlongster mind giving this a look as it introduces a new UI reducer.

@jlongster you're right that the small width UI challenges are the difficult edge case.

Here's a gif of it working

![](http://g.recordit.co/JwJsQdKpqd.gif)

Thanks @wldcordeiro for this great work. I really appreciate how you jump in on the UI polish tickets.

Hope my small tweaks are alright.

@wldcordeiro that's a good idea. I'll file an issue for that. 

@jasonLaster looks like we may want to set a minimum width for the center pane? The search results break out of their container in an ugly way too.

Thanks. I'd be open to giving this a try. We're still trying to sort out the appropriate workflow w/ milestones, boards, labels, tracking issues. 

I definitely see the efficacy of tracking issues in cases like mochitests, but i don't want to overwhelm our issues with lots of small issues either. Often it is sufficient to have a tracking issue and a couple implementation issues that are good to start with. We could always add more implementation issues as we go.

after thinking this about more, i'm not convinced this will help us at the moment. feel free to continue discussing.

Tracking issues are an often used way of breaking up larger tasks into tiny ones that encourage new contributions so I figure it would be a good idea to have a label for them and documentation. 

@jasonLaster : I don't think I saw something like this.

I dove deep into the issues on Selenium + their js docs & the issues on gecko-driver and found out that the Profile object never gets handed to gecko_driver. I'm not exactly sure why but I think it's because this way of setting options will be deprecated in favor of using Capabilities.

> that piece of state could probably live in the source search

Yup, I agree. We added `searchOn` to the UI state because the "+" button in the source tabs row needs to open source search with a redux action. We're not worried about the component unmounting. 

> I updated the history 

that's fine. I can squash these commits when I merge it in.

I'll approve this after the search value is in the the component state. I think that's slightly better because the rest of the app does not need to know what the value is. 

this is a dupe of #1004

I'm going to close this now as I think the first step is feature parity, and then we can focus on long term feature improvements.

I'll make those changes and rebase to clean up this PR, as per your suggestions today.

Gotcha. I can probably get this done later today.

How's that coming?

I'd like to work on this.

Working on this.

Working on this!

This looks great @bomsy.

I was thinking about it last night and I think an improvement would be to improve the close action or add a new action named closeTabs that would know how to close many tabs. The advantage is that now we fire off N actions for closing each tab.

Perhaps we make a new issue for this.

@jasonLaster 

Working with @noeladd we found that the breakpoint text does not format correctly when running RTL mode. 

`{} || var app = app` instead of `var app = app || {}`

<img width="828" alt="screen shot 2016-11-06 at 3 40 15 pm" src="https://cloud.githubusercontent.com/assets/682850/20041498/ea1aa41a-a437-11e6-825a-937cfb9afe05.png">

I updated the PR with the change as suggested. I left the CSS stuff for now as some work has to be done there.. I'll take that up separately.

It's kind of an essential feature missing... At this stage, with no easy way to check a variable content, the current JS debugger found in Nightly is rather unusable...

Code review changes updated and basic functionality tested.

Cool. I think thats a great idea.
I'll create the issue and a PR.

Thanks!

Also i had a thought.
Do we want to hide or disable (grey out) close items that are may not be useful.
e.g If there's only one tab , "Close other tabs" should be disabled, cos its of no use.
Your thoughts?

Hi @jyavenard! I'm not sure what you mean by "check a variable content". I would think the console and scopes help with this. With that said, we're working on getting to parity with watch expressions over here https://github.com/devtools-html/debugger.html/issues/916

In a debug build (though it's not much better with opt build), "scopes" will take over 1 minute to open on my 8 cores mac pro. During the time scopes populate, the entire browser is unresponsive (as all happens on the main thread)
Using the console is also less than ideal everytime you want to check the value of a variable.
Hovering the mouse over the variable doesn't work (like it does in chrome), so using the watch variable had always been the fallback solution. And this is currently gone AFAICT.

Thanks @samuelfullerthomas! 

I noticed a couple of linting things were off, but that should be easy to catch with `npm run lint`

Hmm, that's a really good point. I hadn't considered the `debug build` issue. 

We have "hover" and "watch expressions" on the roadmap, but it sounds like in your case it might be helpful to disable the new debugger in the pref `devtools.debugger.new-frontend`

> Do we want to hide or disable close items

@bomsy I think that's a great idea. I'd propose hiding those items if there's only one tab.
just created this https://github.com/devtools-html/debugger.html/issues/1139. mind snagging it?

Great issue. i'd noticed that as well. this is the debugger trying to connect to chrome. We should do something to suppress this or make it more clear.

Thanks @afeld! These are great contributions that will help with the getting started process.

This is probably a little bit more overhead, but in the future it would be helpful to make three separate PRs as each one requires a slightly different review cycle and I'd hate for one of the three to block the other two.
1. yarn.lock - looks great (i rm'd my node_modules) and everything worked)
2. canonical getting started guides. I like this idea, it's probably better to link to one really good doc. @clarkbw what do you think? 
3. single command
   - I like the command, but I'm not sure if i'm ready to tell people to use it yet. I'd like to try it out myself for a bit. Also, I want `npm run firefox` to be more bullet proof first. 
   - I like the style cleanups
   - Could you remove the reference to it in the doc. 

Thanks for the patch @gavlu. I just dropped the separator from the Editor component, so this should be good to go.

Please share your context menu styles work when you can. It's fine if you can't finish it up, but i don't want to lose it.  

I'm closing this for now because we have open issues for preinstall, but i'll keep it in mind!

Thanks for the help @akhillb. This work is being finished up in #1135

check it out @jacobjzhang! 

Also, don't show "close to the right" if you're selecting the right most one :)

thanks, unfortunately it's not clear where the module.js error is being thrown

Cool! I've updated @jasonLaster 

excellent!  will do!

I'm getting this fixed!

@jasonLaster @viswanathamsantosh 

Well, it's an optional dependency and non-macOS users face this warning as far as i understand. But according to wldcordeiro's [comment](https://github.com/devtools-html/debugger.html/issues/1043#issuecomment-257377595), this shouldn't be an issue to start dev-server. 

@jasonLaster That makes sense that you have something coming to fix it, but you should probably just put something in the README so that new people to the project can get up and running in the meantime. If I hadn't been at the meet up yesterday it would not have been clear to me what the problem was or how to fix it and I probably wouldn't have contributed.

@jasonLaster thank you for adding a patch! I'm not very familiar with React / Redux yet so this helps. Hopefully after a couple of PRs I'll get a handle on things!

This is fixed now, right?

yes it is!

This is a malicious PR. For example, the Greenkeeper verification check is missing

<img width="976" alt="screen shot 2016-11-07 at 19 41 19" src="https://cloud.githubusercontent.com/assets/11321/20070942/b0f8c072-a522-11e6-904d-78c704e8a086.png">

More details here: https://greenkeeper.io/verify.html

Thanks

@jlongster should be fixed.

It doesn't look to me as if this is an fsevents problem at all. It looks like something else is failing in the build causing a file to not get made. Then as a chmod on them is attempted, that fails due to them not existing.

`development-server.js` in the `devtools-local-toolbox/bin` directory when installed seems to be missing. I think the problem lies in that packages install process and not fsevents.

Nice hawk eyes @Garbee!

We've actually seen this bug with the local-toolbox before. Version 0.0.6 added `bin` to the list of files [here](https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-local-toolbox/package.json#L49-L52)

@viswanathamsantosh was this a fresh git clone of the project three days ago? Can you confirm the toolbox version [here](https://github.com/devtools-html/debugger.html/blob/master/package.json#L71)?

I just did a fresh install with your version of node (5.9) and npm 3.10 which should be pretty close to yours and it worked alright.

@Zacqary I updated the PR to add support for L10N being a global.

@jlongster I added a `global-types.js` file to declare types like L10N. Do you think this makes sense?

@jlongster this run looked strange:

https://circleci.com/gh/devtools-html/debugger.html/1587

`docker ./mochitest-run died unexpectedly` ???

I got this!

I am working on this :)

Colorized diff https://gist.github.com/jasonLaster/48a09ff185f13ec7fa0da30298a8603e

This is done! Great job @bomsy!

Hey @gavlu, how's this going?

@jlongster I believe this is done?

#1113

Hey, going to finish up and submit a PR later today.

Closing this as we've addressed the source search tweaks.

Thanks @jacobjzhang 

Closing now, we re-open this if others see it. 

@akhillb do you think you can get to this?

this is tested

@helenvholmes mind taking a look at this wth as it's related to themes?

Thanks!

Hey @amitzur have you been able to make progress on this?

@jlongster this might be a good time to break down some of this work

Hey @helenvholmes does this issue make sense?

@kareniel did a great job tackling this!

@jlongster how do you feel about closing this? We've discussed it before and I'm not sure there's anything we can do at this point

closing this as it's not something we'll likely get to in the near future. It's a cool idea though!

closing this and adding a new "clean-exit" issue as these small edge cases might be nice. The closure issue does not seem useful as we have Reps

This is not something we can do on the client. We should plan to do a fix in the server. 

I'll take this! 

Not sure about greenkeeper anymore, if they don't support yarn. I don't think we're getting enough value out of it. I say we turn it off, but let's talk about it when the 3 of us meet again.

@jlongster yeah, i hear ya. I feel like at best it's just a ping... I could go either way.

This issue is ready to be `up for grabs`.

@bomsy, @kareniel, @jagtalon are you interested?

closing this for now.

@amitzur's static site fix for the dev-server is pretty goo.

and it's in the project cleanup project as a note

https://github.com/devtools-html/debugger.html/pull/1134#issuecomment-258708053

@jasonLaster would like to tackle it!

closing as we can likely investigate when we have another need

This might be nice to budget for 53

@jagtalon dang, you fast :smile: 

@kareniel haha I just happened to open my email at that time

Oops, @Dalimil I almost forgot that we also need to update this [doc](https://github.com/devtools-html/debugger.html/blob/master/public/debugger.properties) as well! 

Hopefully we'll drop this step once we setup the right [webpack loader](https://github.com/devtools-html/debugger.html/issues/1030). But getting webpack to work turned out to be hard!

Thanks for filing @bomsy 

@bomsy are you still interested in tackling this? I know you have a lot on your plate

I did a quick pass on this and I think we can tackle this issue like this:

who knows if it will work in practice :)

``` diff
diff --git a/public/js/components/ObjectInspector.js b/public/js/components/ObjectInspector.js
index b70621d..0a32432 100644
--- a/public/js/components/ObjectInspector.js
+++ b/public/js/components/ObjectInspector.js
@@ -129,13 +129,17 @@ const ObjectInspector = React.createClass({
     return [];
   },

-  renderItem(item, depth, focused, _, expanded, { setExpanded }) {
+  renderItem(item, depth, focused, _, expanded, index, { setExpanded }) {
     let objectValue;
     if (nodeHasProperties(item) || nodeIsPrimitive(item)) {
       const object = item.contents.value;
       objectValue = Rep({ object, mode: "tiny" });
     }

+    if (depth == 0 && index == 1) {
+      expanded = true;
+    }
+
     return dom.div(
       { className: classnames("node", { focused }),
         style: { marginLeft: depth * 15 },
diff --git a/public/js/lib/tree.js b/public/js/lib/tree.js
index d3a21e2..9bfb0e9 100644
--- a/public/js/lib/tree.js
+++ b/public/js/lib/tree.js
@@ -92,7 +92,8 @@ const TreeNode = createFactory(createClass({
                             this.props.depth,
                             this.props.focused,
                             arrow,
-                            this.props.expanded),
+                            this.props.expanded,
+                            this.props.index),

       // XXX: OSX won't focus/blur regular elements even if you set tabindex
       // unless there is an input/button child.
```

Cool ... i'm still interested. just wanted to quickly get issue #1151 out.

I did just now, but not successful yet.
There's an issue with postcss-bidirection not working properly. It throws the error below (also reproduced with postcss-cli).
I managed to make postcss to work with just autoprefixer as a POC. Take a look at this commit 763c4fec33885ae9bc441f604eb0a1f9cfb1bdd3 to see my changes. I intentionally targeted only Sources.css until I get it to work.
Any clue?

```
$ postcss --use postcss-bidirection public/js/components/Sources.css --local-plugins
TypeError: [tcomb] Invalid value {
  "raws": {
    "before": "\n  ",
    "between": ": "
  },
  "type": "decl",
  "source": {
    "start": {
      "line": 2,
      "column": 3
    },
    "input": {
      "css": ".sources-panel {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.sources-panel * {\n  -moz-user-select: none;\n  user-select: none;\n}\n\n.sources-header {\n  height: 30px;\n  border-bottom: 1px solid var(--theme-splitter-color);\n  padding-top: 0px;\n  padding-bottom: 0px;\n  line-height: 30px;\n  font-size: 1.2em;\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n.sources-header {\n  padding-inline-start: 10px;\n  text-align: start;\n}\n\n.sources-header-info {\n  font-size: 12px;\n  color: var(--theme-comment-alt);\n  font-weight: lighter;\n  white-space: nowrap;\n}\n\nhtml:not([dir=\"rtl\"]) .sources-header-info {\n  padding-right: 10px;\n  float: right;\n}\n\nhtml[dir=\"rtl\"] .sources-header-info {\n  padding-left: 10px;\n  float: left;\n}\n\n.sources-list {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n\n.arrow,\n.folder,\n.domain,\n.file,\n.worker {\n  fill: var(--theme-splitter-color);\n}\n\n.domain,\n.file,\n.worker {\n  position: relative;\n  top: 1px;\n}\n\n.worker,\n.folder {\n  position: relative;\n  top: 2px;\n}\n\n.domain svg,\n.folder svg,\n.worker svg {\n  width: 15px;\n}\n\n.file svg {\n  width: 13px;\n}\n\nhtml:not([dir=\"rtl\"]) .file svg,\nhtml:not([dir=\"rtl\"]) .domain svg,\nhtml:not([dir=\"rtl\"]) .folder svg,\nhtml:not([dir=\"rtl\"]) .worker svg {\n  margin-right: 5px;\n}\n\nhtml[dir=\"rtl\"] .file svg,\nhtml[dir=\"rtl\"] .domain svg,\nhtml[dir=\"rtl\"] .folder svg,\nhtml[dir=\"rtl\"] .worker svg {\n  margin-left: 5px;\n}\n\n.tree {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -o-user-select: none;\n  user-select: none;\n\n  flex: 1;\n  white-space: nowrap;\n  overflow: auto;\n}\n\n.tree button {\n  display: block;\n}\n\n.tree .node {\n  padding: 2px 5px;\n  position: relative;\n  cursor: pointer;\n}\n\n.tree .node:hover {\n  background: var(--theme-tab-toolbar-background);\n}\n\n.tree .node.focused {\n  color: white;\n  background-color: var(--theme-selection-background);\n}\n\n.tree .node > div {\n  margin-left: 10px;\n}\n\n.tree .node.focused svg {\n  fill: white;\n}\n\n.sources-list .tree-node button {\n  position: fixed;\n}\n",
      "file": "/Users/amit/projects/debugger.html/public/js/components/Sources.css"
    },
    "end": {
      "line": 2,
      "column": 10
    }
  },
  "prop": "flex",
  "value": "1"
} supplied to [PostCSS#Container, Function]/0: PostCSS#Container
    at Function.fail (/Users/amit/projects/debugger.html/node_modules/tcomb-postcss/node_modules/tcomb/lib/fail.js:2:9)
    at assert (/Users/amit/projects/debugger.html/node_modules/tcomb-postcss/node_modules/tcomb/lib/assert.js:14:12)
    at Irreducible (/Users/amit/projects/debugger.html/node_modules/tcomb-postcss/node_modules/tcomb/lib/irreducible.js:18:7)
    at create (/Users/amit/projects/debugger.html/node_modules/tcomb-postcss/node_modules/tcomb/lib/create.js:11:53)
    at Tuple (/Users/amit/projects/debugger.html/node_modules/tcomb-postcss/node_modules/tcomb/lib/tuple.js:42:22)
    at fn (/Users/amit/projects/debugger.html/node_modules/tcomb-postcss/node_modules/tcomb/lib/func.js:84:14)
    at /Users/amit/projects/debugger.html/node_modules/postcss-bidirection/index.js:72:13
    at /usr/local/lib/node_modules/postcss-cli/node_modules/postcss/lib/container.js:148:26
    at Rule.each (/usr/local/lib/node_modules/postcss-cli/node_modules/postcss/lib/container.js:114:22)
    at Rule.walk (/usr/local/lib/node_modules/postcss-cli/node_modules/postcss/lib/container.js:147:21)
```

@jasonLaster quick question, how do I do hot reloading? There doesn't seem to be any `hotReloading` props in https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-config/configs/development.json :)

@jagtalon  let me know if this works for you 

https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#hot-reloading

@jasonLaster I'm updating the reducers so we dispatch a "CLOSE_TABS". Is that direction ok? 

@bomsy yup, that makes sense!

thanks for the ping @montogeek. Just moved it to `in progress`. excited to see how you got to `%77`

@gavlu this one small fix for App.css and it's ready to go

Hmm @amitzur, i'm not sure. TComb is a little weird as we use int in our project for types, but i assume this is `tcomb-postcss` erroring.

This looks like this [value](https://github.com/devtools-html/debugger.html/blob/master/public/js/components/Sources.css#L2) is not supported.

Try removing line two and continuing.

@garbee have you seen this before with postcss?

nah, it's something else. I was suspecting version incompatibility.
I'm currently debugging it with this script which I run with browserify:

```
window.postcss = require("postcss");
window.cssStr = "a { padding-inline-start: 10px; }";
window.postcssBidi = require("postcss-bidirection");

postcss(postcssBidi).process(cssStr).then(result => console.log(result));
```

What I found so far is that it's walking on css rules and seems to be walking again on the rules that were dynamically created (the html[dir="rtl"] ones). Still investigating...

Ok, investigation is stuck. I cannot find the reason it fails, and I have checked version combinations of postcss 4 and 5.0.10.
Seems like postcss is calling the plugin's callback also on declaration (padding-left:10px) instead of only on rules. So tcomb throws an arg type error.
I have no idea how to make it work and what's the error :/

CC'ing @gasolin. He's the creator of `postcss-bidirection` and works on the team.

Oops, one more fix @Dalimil.

Just noticed that there is a `loadingText` property that we can use instead of `editor.loading`

I tried to push the commit, but you're making the PR off of master which i can't push to. Next time, make the PR with a [feature branch](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#your-first-code-contribution).

``` diff
commit 9b79a9a249619fa82bef8d74bd3dc521981afe95
Author: Jason Laster <jason.laster.11@gmail.com>
Date:   Wed Nov 9 10:24:22 2016 -0500

    Replace editor.loading with loadingText

diff --git a/public/debugger.properties b/public/debugger.properties
index 2123e50..ba077e9 100644
--- a/public/debugger.properties
+++ b/public/debugger.properties
@@ -207,10 +207,6 @@ editor.editBreakpoint=Edit Breakpoint
 # menu item for adding a breakpoint condition on a line.
 editor.addConditionalBreakpoint=Add Conditional Breakpoint

-# LOCALIZATION NOTE(editor.loading): Text that appears in the editor when a
-# source is loading
-editor.loading=Loading...
-
 # LOCALIZATION NOTE(editor.conditionalPanel.placeholder): Placeholder text for
 # input element inside ConditionalPanel component
 editor.conditionalPanel.placeholder=This breakpoint will pause when the expression is true
diff --git a/public/js/components/Editor.js b/public/js/components/Editor.js
index 63ac8b4..b45ed19 100644
--- a/public/js/components/Editor.js
+++ b/public/js/components/Editor.js
@@ -321,7 +321,7 @@ const Editor = React.createClass({
       this.showMessage("");
     } else if (!isTextForSource(sourceText)) {
       this.showMessage(sourceText.get("error") ||
-        L10N.getStr("editor.loading"));
+        L10N.getStr("loadingText"));
     } else if (this.props.sourceText !== sourceText) {
       this.showSourceText(sourceText, selectedLocation);
     }
diff --git a/public/js/strings.json b/public/js/strings.json
index e5e9909..491778a 100644
--- a/public/js/strings.json
+++ b/public/js/strings.json
@@ -11,7 +11,6 @@
   "editor.removeBreakpoint": "Remove Breakpoint",
   "editor.editBreakpoint": "Edit Breakpoint",
   "editor.addConditionalBreakpoint": "Add Conditional Breakpoint",
-  "editor.loading": "Loading...",
   "editor.conditionalPanel.placeholder": "This breakpoint will pause when the expression is true",
   "expressions.placeholder": "Add Watch Expression",
   "scopes.header": "Scopes",
```

@akhillb I'm going to move this back to "up for grabs" feel free to re-claim it if you've got some time. 

@jasonLaster updating now

Thank you so much guys! You are wonderful. I updated my local master branch and ran 'npm install'. It just gave me a warning unlike before which was throwing errors. My local is up now. You can close this issue now. Thank you. :)

Cool. Let's clean this up and merge. We can improve perf further in a new PR

We're going to switch to yarn install soon

What team are you on?

![debugger2](https://cloud.githubusercontent.com/assets/3799600/20150573/7782a296-a66b-11e6-87b8-28c4c4d90df7.png)
Oops sorry! got this error on 'npm start Firefox'. Any thoughts?
[npm-debug.txt](https://github.com/devtools-html/debugger.html/files/581595/npm-debug.txt)

I am a volunteer from the Campus Program team under Participation team, planning to create an activity for Students in campuses to participate in contributing to Firefox dev tools(and may be debugger.html?) so thought to explore this myself first. :D 

If someone wants to tweak how this works, we can do it as a follow-up, so I'm merging at least a temporary fix so I can try to land a bundle. We could probably land another one in a day or two if needed.

> Cool. Let's clean this up and merge. We can improve perf further in a new PR

Sounds good.  I'll try to get that done at the airport.

This is a dupe of #1110 

nice find though!

Thanks for finding this

@helenvholmes mind looking into this?

Hey @juliandescottes, making progress.

This doesn't look like much, but you'll see the log view is in the toolbox and i'm sending console evaluations to todomvc through its console.

![](http://g.recordit.co/YMO6vrkkBX.gif)

I'm confused, the result test is not even in the input area for me:

<img width="585" alt="screen shot 2016-11-10 at 10 55 48 am" src="https://cloud.githubusercontent.com/assets/17031/20183734/57d92b08-a734-11e6-9ed6-4b19c4a99e8d.png">

Oh, you're talking about searching with the file. Yep I see that too. Thanks for the fix.

How did this even happen? I'd like to know how such an obvious error can make it into master, especially right before we ride the trains. We need to make sure every PR actually works in Firefox and doesn't introduce stuff like this.

> Could you wrap this in a feature flag? That'll make it easier to fix locally. And it's easier to follow.

Sure!

@jasonLaster @helenvholmes You can use the SVGs from M-C which don't have the issue.

New Debugger is using inline SVGs. So it's not same situation.

Not sure, I'll look into it. I'm guessing we were reusing the close button component and some of the CSS can't be shared in that way because one assumes the autocomplete component 

@jasonLaster This was more interesting and involved than it thought!  finally got it out! :)

This should not have been merged today. I had to revert it in https://github.com/devtools-html/debugger.html/commit/fd8718c7faa2011faca4cc7da033173d24f6dccc.

Today I was in the process of pushing out an update to mozilla-central, and I already have a stable patch that has passed on try. We only merge emergency bugfixes that block the merge around times like that. Sorry, we don't have a great way to track that kind of thing yet.

Filed an issue in case we forget (https://github.com/devtools-html/debugger.html/issues/1166), but if you can, can you open a new PR?

Ok @jasonLaster I think this is ready for review.

Once we've landed this, we can start work on some further optimizations where we check that the `docker pull` command actually updates the cache file and only update it in that case, saving roughly 3 min.

Agreed. I think this was the hard step. And this is a huge win for working with contributors

Sorry. Thought the bundle was a patch on m-c. Is be happy to re-open this when the time is right :)

I forgot to mention one crucial detail: I could have still generated the bundle from the same commit (which was before this commit) but I needed to land https://github.com/devtools-html/debugger.html/commit/8175aacaec380ecf859183ad62bee2a9aef180d2 as an emergency fix, which is why I needed to revert this so could have a new master to base the bundle on.

I believe this issue has gone stale, `npm run mocha-server` no longer seems to run any tests.

I'm not able to reproduce this anymore

Closing this out for now, we'll open this up again as a user story later.

@jlongster are you seeing this in the latest bundle?

ok, I am now getting this:

```
TypeError: popup.childNodes.forEach is not a function: onShown@http://localhost:8000/public/build/bundle.js:90372:4
showMenu/<@http://localhost:8000/public/build/bundle.js:90390:34
```

I noticed that with this patch (sorry for the bad formatting):

``` diff
diff --git a/public/js/utils/menu.js b/public/js/utils/menu.js
index b1beb71..265b5a0 100644
--- a/public/js/utils/menu.js
+++ b/public/js/utils/menu.js
@@ -20,6 +20,7 @@ function createPopup(doc) {
     document.body.appendChild(mask);
   }

+    alert('Flutterbat mask.onclick');
   mask.onclick = () => popup.hidePopup();

   popup.openPopupAtScreen = function(clientX, clientY) {
@@ -47,8 +48,11 @@ if (!isFirefoxPanel()) {
 }

 function onShown(menu, popup) {
+    alert('Applejack BigMac onShown');
+    alert('Rarity popup=<<' + popup + '>> childNodes=<<' + popup.childNodes + '>>');
   popup.childNodes.forEach((menuitem, index) => {
     const item = menu.items[index];
+      alert('Twilly ' + item + ' ' + menuitem + '<<<' + index + '>>>');
     menuitem.onclick = () => {
       item.click();
       popup.hidePopup();

```

The Twilly alert never happens. It's strange that .forEach() is not there.

Failed because the latest tag wasn't found when pulling the docker image. This seems to be an intermittent issue. Perhaps we should have some retry logic there. 

Thanks. I noticed this as well, but wasnt 100% sure. Thanks for investigating

Hello @jasonLaster,
This bug still reproduce in latest Nightly build (20161111030203). Any update? 

I've now checked it in chromium-browser, and the symptoms of this bug do not happen there - "Add Breakpoint" does what it should and dismissed the popup and I'm getting two "Twilly" alerts.

Just for the record, .forEach() on an array reference works as expected in the firefox web console:

```
["foo", "bar", "quux"].forEach((x, i) => { console.log(x + "<<" + i + ">>"); })
undefined
foo<<0>>
bar<<1>>
quux<<2>>
```

As discussed on #devtools on irc.mozilla.org, it turns out that Firefox 49.x and below do not support the `.forEach()` method for NodeList - see https://developer.mozilla.org/en-US/docs/Web/API/NodeList . firefox 50 and above and the current chromium-browser should be ok. Now the question is - whether we want to support "older" browsers or not.

done! working on this now!

:thumbsup:

This has some interesting `flow` issues, which I can pull down and fix on monday

@clarkbw yeah, that's not a bad idea. looks like we're going to be docker experts in no time :)

Sorry for the slow reply, I was traveling the past two days and was pretty swamped. This cleanup with the additional types looks awesome. And the component types help a lot!

I'll take a look at the two failing mochitests on monday and will report back. Thanks for putting in the hard work here, this is an awesome win for types in the codebase.

Also, for what it's worth, when I have some time I hope to hack on a [local test runner](https://github.com/devtools-html/debugger.html/issues/678) that uses the websocket connection. My hope is that, this setup will make it super easy for anyone to run the integration tests locally. The [integration tests](https://github.com/devtools-html/debugger.html/blob/master/public/js/test/mochitest/browser_dbg-call-stack.js#L40-L62) are actually really fun to work on, but are currently require some setup.

Cool, thanks. I tried to get the Mochitests running locally but apparently I need to upgrade to Sierra to update XCode to download Mercurial to blah blah blah etc. etc. etc. so it might be a while.

I'll investigate on monday

Test fail is due to the docker update timing out. Un-related to the code changes. Not sure if it can just get restarted (perhaps flalky?) or if someone needs to look into something deeper there.

Thanks! 

Yup. Theres a rebuild button on the top right of circle. Not too worried. 

Brave! Welcome back :)

Turns out the latest version selenium-webdriver has a fix that sets the moz:firefoxOptions capability behind the scenes when it's given configuration options for the FirefoxDriver. ;)

(I don't know if I should laugh or cry :) )

I'm taking a look at this right now. I should have a fix by the end of the day :)

This looks great @montogeek! Especially PauseState and ThunkArgs. I'll take a look monday morning. 

At first glance it looks like both you and @Zacqary added a frame [type](https://github.com/devtools-html/debugger.html/pull/1121)

This is awesome. Linting FTW

There are some m-c css files we don't want to change, namely `themes` `devtools-modules` like splitbox

Awesome! This will land before the toolbox console work. 

My guess is the timeout I'd related to the node try script moving network requests 

Thanks for doing this! 

Yup. I like that it's below the gutter as well. 

For historical reasons. It was in the right I think because in the first design it floated above the editor. 

@helenvholmes what do you think?

Gah, I really don't get the failure. It's not present in master currently but is in this branch. @jasonLaster if you could give it a try and see if you have any ideas it'd be great (I'll be on IRC tomorrow or should be, I just need to configure my client heh)

looks like lint-js found something. Probably a version discrepency. Will fix tomorrow

```
/home/ubuntu/debugger.html/public/js/components/RightSidebar.js
  261:5  error  Closing curly brace should be on the same line as opening curly brace or on the line after the previous block  brace-style
```

There we go, an actual failure!

```
/home/ubuntu/debugger.html/public/js/components/RightSidebar.js
  261:5  error  Closing curly brace should be on the same line as opening curly brace or on the line after the previous block  brace-style
```

Checked out the themes folder and the splitbox file from origin and added them to the stylintignore.

Should we ignore all of `devtools-modules` though? the `rep.css` changes required to uphold stylint are very minimal. Easy to roll that back though if we want to.

Hey, 
Excellent changes! Simplifies and cleanups the code alot.
Thanks

Hmm, interestingly. I think when greenkeeper bumped the versions here https://github.com/devtools-html/debugger.html/pull/1171. Other tests started using that package. Yarn will help here :)

closing in favor of the new eslint issue

getting some test timeouts here

@Garbee yup, we should exclude `devtools-modules` the package is for files copy and pasted from `m-c` so we want to be able to do a diff and not see any changes.

@wldcordeiro just pushed a fix. It was tough to track down!

Sounds good to me!

- bumped with the uptodate eslint

- bumped with the eslint update

Here's a patch to get started:

We do some funky things with the command bar and [RTL](https://github.com/jasonLaster/debugger.html/blob/60bf5585453a44a398cad056a936e529c4327f1d/docs/local-development.md#internationalization) positioning. 

``` diff
diff --git a/public/js/components/SourceFooter.css b/public/js/components/SourceFooter.css
index 43ce230..2308ce7 100644
--- a/public/js/components/SourceFooter.css
+++ b/public/js/components/SourceFooter.css
@@ -13,11 +13,11 @@
 }

 html:not([dir="rtl"]) .source-footer .command-bar {
-  float: right;
+  float: left;
 }

 html[dir="rtl"] .source-footer .command-bar {
-  float: left;
+  float: right;
 }

 .source-footer .command-bar * {
@@ -35,11 +35,11 @@ html[dir="rtl"] .source-footer .command-bar {
 }

 html:not([dir="rtl"]) .command-bar > span {
-  margin-right: 0.7em;
+  margin-left: 0.7em;
 }

 html[dir="rtl"] .command-bar > span {
-  margin-left: 0.7em;
+  margin-right: 0.7em;
 }

 .source-footer .prettyPrint.pretty {
```

I'll look into this

I agree, I was going to write up this same issue.

Why are we floating instead of just using Flexbox?

Thanks!

Thanks, this is really helpful!

Looks like there are some flow errors as well.

I'll take a look at this once I have the stylelint fixes in place then. 

ugh, i bet it is flow 35. I'll merge the yarn change, and bump.

Forgot to mention this during standup because it's minor. 

So long as `devtools-local-toolbox` is the only thing we are worried about in that packages folder then this all LGTM on the linting side. I simply did a global glob to verify what was needed was hit, even if new packages were added later.

@wldcordeiro just rebased. this should hopefully be good to go soon

I swear this had been fixed... might have been changed in some conflicting PRs or something.

I support this. If we're going to keep it around we should keep it up to date, otherwise it's just extra baggage to confuse people.

The structure is about to change quite a lot based on #1184 but I do support having some documentation of what the structure is like and what lives where.

> I swear this had been fixed...

I just changed things to flexbox in #1159 which could have caused this

Looks good now. Tried it out locally and tests pass as well as CI

This PR needs a rebase now that the project directory got restructured.

this was added with the directory restructure.

this shouldn't matter.

@wldcordeiro on it

This looks safe to bring in, @jasonLaster had opened a PR to address the CI failure too.

@jlongster this is the PR that's blocking #1179. 

@bomsy just rebased the branch to bringing @wldcordeiro work on #1184

cool!

Moved to #1199

I think the primary necessity from this PR currently is the documentation changes. We do need to look over everything with fresh-eyes in the point-of-view of someone who knows nothing about the project to see where we can optimize the on-boarding path. At this time though, I'd warn against introducing new tools (such as Foreman in this PR) until we have some tangible feedback from multiple people that they are having a hard time getting things going after the docs are cleaned up.

Foreman in this instance is not only adding a new dependency but also bringing along yet-another top-level file. At some point it gets confusing to even go through them much less know what most of them are for.

I'd rather we start on the documentation end here and make that clearer. Then we can listen to feedback on the process and adjust the commands as we go. If we end up hearing a lot that once things are fixed up more getting everything running is still an issue, then we can give running two npm scripts in parallel the due diligence on having that done internally for a quick-start command.

mind taking a look @jlongster

@viswanathamsantosh just rebased your branch. Hopefully it'll pass CI soon and we can merge!

@montogeek just rebased your PR

Going through this now. There's some really good stuff here and I can see how the flow score went up! 

I added some tweaks to your PR to clean up the way the records are setup in the reducer and add selector types. This covers most of the things I think you were seeing.
- **resolved** I think this was the record thing you were seing ---  There are errors related with the `fromJS` utility, since it is not Flow typed.
- **fixed** https://github.com/devtools-html/debugger.html/pull/1199 ---  Flow 0.35.0 started complaining about these lines https://github.com/devtools-html/debugger.html/blob/master/public/js/utils/utils.js#L207 and https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-local-toolbox/public/js/utils/utils.js#L163 with the error: `call of method assign: Expected object instead of T`
- that should be okay, sometimes reducers handle other actions. The sources reducer handles the on navigate action for instance -- `pause` reducer (https://github.com/devtools-html/debugger.html/blob/master/public/js/reducers/pause.js#L41) is handling an `source` action (https://github.com/devtools-html/debugger.html/blob/master/public/js/actions/sources.js#L195)
- **[killed](https://github.com/devtools-html/debugger.html/commit/289f72bf50f93aa8b2c5b01b4d529eca80f11215)** --- This constant/action does not longer exists: https://github.com/devtools-html/debugger.html/blob/master/public/js/reducers/pause.js#L56
- **?** not sure what's hardcoded -- Unfortunately Flow does not support object computed keys in Object type declarations, thats why this is hardcoded: https://github.com/devtools-html/debugger.html/compare/master...montogeek:flow-type-pause-actions-reducer?expand=1#diff-195a73de407881358c8dfc0c5891f7feR114

There are now [15 errors](https://gist.github.com/jasonLaster/0561b73e0b43024a244f23137ef6b933), which seem like small cleanup items. 

oops, this should have included updates to the lockfile. I'll post a new PR in a bit

Thanks for the thoughtful review, I will continue working on it.

About the hardcoded string, is this one: `@@dispatch/promise`, it is the name of the promise middleware https://github.com/devtools-html/debugger.html/blob/master/src/utils/redux/middleware/promise.js#L9

I tried to import it and use it as key, but it is not supported by Flow:

``` js
{
  ...
  [PROMISE]: T
  ...
}
```

What is the goal here? I don't really understand the desire to split up components into a simple file in `components` and a lot of implementation details in `utils`. Components should be as complex as they need to be. It makes it harder to work with when things are arbitrarily split up.

The code in `utils` has things like `shouldShowFooter` and other things that are UI-specific. If anything, I'd rather be moving things from util into components where we can.

> hardcoded string

@montogeek that's an interesting question. We should be handling it in Sources and breakpoints which is typed. @jlongster do you know the answer?

> what is the goal

the rationale is in [1188](https://github.com/devtools-html/debugger.html/issues/1188), which is easy to miss. 

The utils are similar to [editor.js](https://dxr.mozilla.org/mozilla-central/source/devtools/client/sourceeditor/editor.js). The goal is to have have an editor api for commands/queries.

One benefit would be in the Atom integration work, it would be possible to re-implement methods like `showSourceText` for atom.

> shouldShowFooter

I agree. This is a bad example, that i wish were in the component aswell. `showMessage`, `showSourceText` are better examples. 

I am sharing early to get your opinion. Happy to close.

I am hitting this issue in OSX Sierra, nothing is running in any of the ports used by the debugger

Log:

```
> debugger.html@0.0.6 start /Users/montogeek/Infinite/Lov/debugger.html
> start-dev-server

Listening for WS on *:9000
Will proxy to TCP on *:6080 on first WS connection
Protocol messages can be logged by enabling logging.firefoxProtocol in your local.json config
Hot Reloading can be enabled by adding "hotReloading": true to your local.json config
Development Server Listening at http://localhost:8000
View debugger examples at http://localhost:7999
[BABEL] Note: The code generator has deoptimised the styling of "/Users/montogeek/Infinite/Lov/debugger.html/packages/devtools-sham-modules/sham/css-property-db.js" as it exceeds the max of "100KB".
TCP connection failed: Error: connect ECONNREFUSED 127.0.0.1:6080
WS connection closed, disconnected from TCP
TCP connection failed: Error: connect ECONNREFUSED 127.0.0.1:6080
WS connection closed, disconnected from TCP
```

When opening http://localhost:8000, I get a 500 error:
`http://localhost:8000/get?url=http://localhost:9222/json/list` with response: `ECONNREFUSED`

This was done in #1185

This was done in #1184

@shlomif mind doing a fresh git clone, yarn install? I'd like to see if [this](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#linux-or-macos) works for you.

Will be addressed in #1181 

This is being addressed by #1156

I'm closing this as it's not a priority for local development at the moment.

If it's useful for the standalone debugger, the priority could change.

This is not a priority at the moment. If we feel like it is causing beginners problems, we can re-prioritize it though

This is not an issue with linux, it's an issue with the examples server not being started, which was just fixed in #1201

@bomsy let me know if you have any questions here. This one could be tricky :)

Moved this to an `enhancement` note!

Thanks again for posting

closing, we can open it again if we see it.

Hmm, i agree that this test has gone stale as we haven't had time to work on it.

I ran `npm run mocha-server` recently and found it really helpful to run other tests.

There _are_ lots of failing UI unit tests too, which we haven't kept up to date. My theory is when this test failed, instead of turning it off in the web context we turned off the web unit tests, which is much worse :) because now we have other stale tests

closing this issue as now we have a couple small mochitests, but i think we the main work is done. @jlongster @clarkbw re-open it if you see it differently 

@jagtalon how's it going? Let me know if you have any questions, this is a _tricky_ one.

We still didn't get the bfcache one done but I don't see good reason to keep this tracking issue open anymore.

yeah, bfcache is tracked elsewhere and it seems out of scope as it's more than just writing a test

I removed the up for grabs label as one of us should write it :)

don't worry about that. that's the dev-server trying to connect with chrome.

I have a PR that cleans that up so it's more clear.

no worries, take your time :)

@jasonLaster Thanks!
I understood the process wrong, @jlongster helped me!

Alright, just fixed up some of the type issues with the latest changes. 

This should go green!

@jasonLaster Yeah a bit tricky , it is :). I've been able to figure most of it out,  one quick confirmation i need is which selectors can i use to check if the debugger is pause on a breakpoint.
I'm looking at these 
https://github.com/devtools-html/debugger.html/blob/master/src/reducers/pause.js#L115
and 
https://github.com/devtools-html/debugger.html/blob/master/src/reducers/breakpoints.js#L152.
Correct?

Thanks @Garbee, I think that's a persuasive case.

Lets take Aiden's recommendation and consolidate the getting started guide. Many people want one guide on the steps to get started. 

Once that lands, we can re-evaluate foreman. We've landed lots of fixes to `npm run firefox` in the past week and i'm now confident it will work on all computers and in any order (starting firefox first or second)... Lets let this bake and then re-evaluate foreman.

Thanks @afeld for kicking off this discussion. The OSS workshop was a great place to test this setup in the wild! 

@viswanathamsantosh found the bug [here](https://github.com/devtools-html/debugger.html/pull/1175/files#diff-2cf5ca54ef1aa18d5ca2f259e62142eaR15).

We'll be removing the need for strings.json soon :) [here](https://github.com/devtools-html/debugger.html/issues/1030). In fact if you wanted to get some practice with webpack loaders, you could do it too!

closed as this was mostly for the conversation

Looks good! I'll review more closely tomorrow morning

@bomsy ooh,

if you want to see if it is paused and why, then `getPause` and then `why` or reason is your answer

if you want to know if it is paused at a breakpoint, then

we do that here:
https://github.com/devtools-html/debugger.html/blob/master/src/components/Breakpoints.js#L17-L29

my guess is you want the former :)

We're green! Will review one more time tomorrow morning and then merge!

Thanks for the great work here. It was fun to get it over the finish line as well :)

Sorry for being slow on this @Zacqary. I'll have a chance tomorrow morning to look into those tests!

Cool! Thanks for your help

Reviewed once more, and it looks solid. Forgot how good the UI component cleanup was :)

I was thinking we could link to our full test script somewhere else and have a small example included so the format was obvious.

So for the file search my test plan looks something like this:
- [ ] Use keyboard shortcut to open up
  - [ ] Placeholder text is present, close button and search icon all lined up
  - [ ] Type 'todo'
  - [ ] Check result count and search term text are correct
  - [ ] Check first item is highlighted
  - [ ] Pressing enter opens the first item
  - [ ] Reopen with keyboard shortcut
  - [ ] Type garbage, see error text
- [ ] Use `+` to open up search

Awesome! Thanks jason. I will look into webpack loaders. \o/

@clarkbw nice idea. 

+1 to linking to a test plan
+1 to having a small example

I'm not sure what the level of detail should be for the test plans. I just played around with the a strict format like yours and found it to be verbose and ultimately it could be difficult to maintain and there are a lot of boxes to check :)

Perhaps something more high level:

Test Plan: Source Search
- [ ] Open search with cmd+p shortcut
- [ ] Open search with "+" button
- [ ] Opening search shows the previous value
- [ ] Select a source takes you to the source

Awesome! I've been doing lots of webpack in the past month, so if you have any questions let me know. The issue has a branch with my first attempt, which was just 20 minutes of messing around. 

I recommend adding console logs to the node_module/webpack-loader-x you're playing with! Also, don't be afraid of webpack's internals it's just a fancy lifecycle game with compiler jargon. Also, there are plenty of more gratifying issues in the up for grabs, this is especially gnarly, so don't take to bad if it's hard / weird! 

Yeah, simpler is better 

I've got this. Something I thought of though, after adding [this](https://github.com/devtools-html/debugger.html/pull/1204), would we want this same behavior here? Pressing Ctrl+G/Ctrl+Shift+G with a selection puts that in the search bar?

tests

One quick change, would you mind removing the features in the development.json and firefox.json as well :)

@jasonLaster Thank you so much! Sorry for not catching that detail!
Looking forward to continue contributing to the project!

Thanks @shlomif we have an issue for that https://github.com/devtools-html/debugger.html/issues/1216.

Out of curiosity, did `npm start` still work?

@jasonLaster : `npm start` still works but `npm i` was very noisy with many WARNings .

Thanks!

of course!

I'm going to close this for now.

I think that this work might have been pre-mature. The major issue was accessing the toolbox dev environment, which works with `require("devtools-local-toolbox/index")`

I moved this to our enhancements project https://github.com/devtools-html/debugger.html/projects/5

And I'm closing it now because we'll be able to revisit this when we work on enhancements in Q1.

One note, I'd like to leave here is that there should be some way to prevent conflicting from other Firefox or system shortcuts, because that just messes everything. I've been affected by that before.

good point.

As a side-note, i hope the conversation doesn't stop because the issue is closed! It's closed because open issues should be actionable within two sprints (4 weeks).

Looks like we need to alter the id used here: https://github.com/devtools-html/debugger.html/blob/master/src/components/Editor.js#L225-L261

Hey @Zacqary I just rebased the work on top of some of the recent PRs that touched the types and some other call stack changes. Everything looks good, but would you mind reading it over once more.

@jlongster I'm not sure how to track this down, but I'm seeing `browser_dbg-sources.js` pass when I run it by itself, but fail when it's run as part of the entire suite. It looks like when it's run along side other tests, the sources don't load. I also saw that the [browser.ini](https://github.com/devtools-html/debugger.html/blob/master/src/test/mochitest/browser.ini#L57-L60) has a skip clause. Any ideas why this might be happening?

Looks good to me if it looks good to you

Thanks @shlomif 

Thanks @magicp-github. 

I'm curious what use case did you run into here?

Hello @jasonLaster,
Firstly, I confused this debugging of new debugger in foreign language Firefox (e.g. Arabic). I am checking any elements by Id or class, because I cannot read Arabic.
Secondly, I could not add context menu icons correctly. Context menu icons helps me in foreign language.

This doesn't fix #1216, but it should help others not run into the trap... When Yarn fixes these issues we can close #1216 and also drop the 16.1 requirement

> re browser_dbg-sources.js

I'm finding the flakiness on master, so I don't think it's related to this PR. If it is, we can investigate / revert.

Cool, thanks!

thanks!
PR coming!

@juliandescottes helped me hunt this down! This issue:

```
Error: Cannot find module '../../devtools-local-toolbox/public/js/test/test-flag'
```

is caused by the debugger's node_modules not properly linking the packages like `devtools-config`. This can be fixed by nuking the node_modules and re-running npm or yarn install.

``` shell
rm -rf node_modules packages/*/node_modules
```

@juliandescottes here is the `roadrunner` bug. I'm surprised that you were seeing it with `0.16.1`. Lets see if we can come up with a fix soon. Happy to help later.

opened #1237

opened #1237.

I started a [test plan](https://docs.google.com/document/d/1oBMRxV8A2ag2t22YsQOxTdEv0mXKzIg0tggJjRkU1S0/edit#) doc.

Great, we can alway improve

Hi! I'm working on it.

will handle in #1237

@shlomif nice job discovering the "Enable" Case, missed it the first time! 

bumped w/ the frame fix

The run failed after **1 hour 14 minutes** lol.

https://circleci.com/gh/jasonLaster/debugger.html/1507

I'm not sure what that says about our suite except that we'd need to do some splitting... and likely add retries. 

Closing as this is not really needed at the moment.

@jasonLaster  May I work on this? I'm a first time contributor to debugger.html. 

@arthur801031 go for it. It's always great to get new contributors.

#1244 has the previous version

@wldcordeiro  @clarkbw 
I don't know what's the shortcut key for bringing up the file search bar.

I tried "cmd+f" and "cmd+g", and it gave me a normal search bar:
<img width="1227" alt="screen shot 2016-11-18 at 3 32 30 pm" src="https://cloud.githubusercontent.com/assets/4562118/20422276/5a1778ae-ada4-11e6-8d56-a97949b83a32.png">

I also tried "cmd+p", and it gave me this:
<img width="1223" alt="screen shot 2016-11-18 at 3 35 29 pm" src="https://cloud.githubusercontent.com/assets/4562118/20422333/adc92c90-ada4-11e6-9288-8e9d2cc821da.png">

Thank you!

closing this as we _don't_ need npm. and it's being removed

got the expected error. We can bump the docker image and see this go green.

Looks good to me, if you make sure the the firefox panel config is getting used correctly!

Closing the PR, @jasonLaster is already working on a dependencies cleanup.

Here are my highlevel thoughts on the activity:
1. setup and free form hack
2. style a theme based on an image
3. have the debugger do something cool when adding a breakpoint
4. have the debugger do something cool when pausing

I don't know what 3 and 4 should be :)

Obviously, open to lots of ideas here! Everyone submit cool things

@helenvholmes I think you'd be especially good at this!!!

Also @helenvholmes do you have time to whip up a crazy fast debugger retro theme people could try and implement for funzies...

Here are some thoughts that informed the getting started doc
- focus on the happy path (mac, debugging Firefox). We can have secondary material
- have common questions
- provide screenshots
- provide more space for beginners. Team members can scan it. 

Great question @arthur801031. You need to run the [debugger locally](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md) and then you can do cmd+f.

You also need to enable editorSearch [configs](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#configs). You'll see the search flag in development.json, which you can override in local.json

I am going to work on an outline for the initial document today. That way we have something to discuss.

I'll reference the existing stuff with some salt. Then analyze my own understanding of what people should know. Cross-compare and trim out some fat and we should have a good basic outline to work from.

![yarn1](https://cloud.githubusercontent.com/assets/3799600/20441831/1ba828fa-adec-11e6-9408-2d770f1ecee0.JPG)
Running 
Node 5.6
Npm  4.0.1
Yarn 0.16.1
but got this error!

The preinstall script is bash-only right now. So only UNIX systems can handle it. We need to investigate writing that script within node itself so we can make it platform-independent. This goes for all of the non-js bins we have.

@juliandescottes I sanitized the console packages quite a bit with the latest commit to this PR.

Now the console.html package.json looks like this: 
https://github.com/jasonLaster/console.html/blob/master/package.json#L12

You'll notice that the dep for the toolbox is a path to the toolbox, that's because I kept updating the dep. Once this PR lands, we can bump the toolbox to "0.0.9" and tools should be alright.

I also created this [issue](https://github.com/devtools-html/debugger.html/issues/1251) for cleaning up the debugger's deps

@viswanathamsantosh try dropping the preinstall

``` diff
diff --git a/package.json b/package.json
index 9f2444b..7543507 100644
--- a/package.json
+++ b/package.json
@@ -31,8 +31,7 @@
     "prepush": "npm run lint; node src/test/node-unit-tests.js --dots",
     "storybook": "start-storybook -p 6006",
     "build-storybook": "build-storybook",
-    "flow-coverage": "flow-coverage-report -i 'src/actions/*.js' -i 'src/reducers/*.js' -i 'src/utils/*.js' -t html -t text",
-    "preinstall": "./bin/preinstall"
+    "flow-coverage": "flow-coverage-report -i 'src/actions/*.js' -i 'src/reducers/*.js' -i 'src/utils/*.js' -t html -t text"
   },
   "dependencies": {
     "codemirror": "^5.1.0",
```

and then manually running 

```
  npm i -g jasonlaster/lerna
  lerna bootstrap
  yarn install
```

Hmm, strange. This could likely be a bug in our webpack setup perhaps...

I'm going to change the issue title until we can generalize it

One thought, while i'm thinking about it.

At this point, we don't update the docker image that often. We could change the script pretty easily so the docker pull only happens when the cache is empty...

This way our process would be:
1. update the docker image
2. clear the circle cache
3. profit.

might be easier than updating the status check

Here's how we clear the [cache](https://cloud.githubusercontent.com/assets/254562/20451908/38fbf28e-adcd-11e6-9032-bd07e9a79bd5.png)

Here's a sketch of that idea

``` diff
diff --git a/bin/update-docker b/bin/update-docker
index 7d7fe54..39d6096 100755
--- a/bin/update-docker
+++ b/bin/update-docker
@@ -5,12 +5,11 @@ DOWNLOADS_PATH=${DOWNLOADS_PATH:-"$HOME/downloads"}
 mkdir -p $DOWNLOADS_PATH

 if [[ -e $DOWNLOADS_PATH/mochitest-runner.tar ]]; then
-  time docker load -i $DOWNLOADS_PATH/mochitest-runner.tar;
+    time docker pull jlongster/mochitest-runner
 fi

 docker images

-time docker pull jlongster/mochitest-runner

 docker images

```

@juliandescottes landed!

I'm going to close this issue as we have https://github.com/devtools-html/debugger.html/issues/417

We should prioritize vertical mode soon though

This is smilar #1233 

Thanks for filing.

Done!

I took another look with `ssh-build` and found two things:
1. if i tag the image id, the image is 752.8mb. 

11.25 GB seems really large, which makes me think that perhaps it saves each of the previous versions? If we could bring the size down to 4.3 GB, which is what my `obj-frontend` is then we'd be in a better spot. Also, i [scanned](https://cloud.githubusercontent.com/assets/254562/20452798/2f7056ca-ade0-11e6-9f3c-de1109d9b6da.png)
 the dir to see if there was cruft we could remove and didn't find any likely candidates.

```
docker tag 4390fc091451 mochitest-runner/11.18.16
```

```
REPOSITORY                   TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
jlongster/mochitest-runner   latest              4390fc091451        3 weeks ago         11.25 GB
mochitest-runner/11.18.16    latest              a93b25789168        4 weeks ago         752.8 MB
```
1. I took a look at the times for each operation in the script 

I was surprised to see that the pull time was negligent. The real time is load and save. If we know that the pull was a no-op, we can avoid saving, which is like the same thing as before but with saving be the step we avoid.
- _docker load_  3 minutes
- _docker pull_  30 seconds
- _docker save_ 6 minutes

**Ideally we can do two things:**
1. cut the image size down significantly
2. avoid saving unchanged images

Hey @Zacqary I feel like you would enjoy this one :P 

Hey @bomsy how's it going?

Hey @jagtalon I took another stab at the solution this morning. It's actually pretty similar to the first approach, but probably more up to date as the code has changed a bit

https://gist.github.com/dc054cf627109a9d1921dfe0bec2961a

as a reference, you can take a look at how we persist breakpoints and the selected source as well.

Ping me with any questions, this is a tricky one

Hey, @montogeek I think you might like this one. It's a small UX improvement, with a cool editor integration for the line.

@bomsy do you have an idea a good idea for how this might be done?

@monicau I think you might enjoy this one :) 
It involves styling the editor, which as you know is pretty cool.

This is actually slightly more interesting because the style is applied in the panel for the light theme as well.

It would be nice to have a plan for what we want:
a) if we like the line selection we should add the style to our local css
b) if we don't like the line selection we should be able to remove it in the panel.

@helenvholmes assigning you to it so that you can evaluate :)

Setting things up on a new system, the preinstall script is also failing on Linux machines. I had to do a manual `npm i jasonlaster/lerna` before `yarn install` would work.

Line 8 of `preinstall` was causing the failure. I'll look into trying to make this script a thing of the past by building it into the package install flow in `package.json`. I don't see why it is necessary right off. By removing this we'll also get built-in Windows support to makes things easier there.

@Garbee perhaps we do `postinstall: "lerna bootstrap"`

Updated the classnames to not be BEM-style. However, did continue to rename from `command-bar` to `commands` to have isolation from the right sidebar. Always targeted under `source-footer` for scoping.

In the last update I did remove the pretty stroke styling when prettify was triggered, as the button is hidden on prettified sources and it doesn't seem to have any apparent effect on triggering the button. Therefore this rule change seemed useless.

Yup, looking into this now that the flexbox footer PR is updated.

PR #1264 is open for addressing that problem. Moving bootstrap to postinstall is exactly what was needed.

heya, stuck at a point. The scope section opens but the children of the first node on the scope do not load. i'll push my PR as a WIP and we can work on it from there.

closing this issue and making a more actionable issue

Just tested and worked great. This is a great simplification.

Also worth considering the "latest" tag isn't our friend. See articles like this http://container-solutions.com/docker-latest-confusion/

@jasonLaster i think i've found a solution! Will cleanup an push a PR tommorow!

Closing this for now as i think it's addressed

@viswanathamsantosh please ping if you see other issues

closing as this is not actionable.

perhaps it will be useful when we work on editor integrations

ahh - that makes sense.

I don't think we want to support Firefox 49. Thanks for reporting though

merged

This is now working well with [console.html](https://github.com/jasonlaster/console.html).

wow, it took a lot of work though :)

https://github.com/devtools-html/debugger.html/pull/1249
https://github.com/devtools-html/debugger.html/pull/1181

Thanks @shlomif for the great work

Fixed by merging #1217.

So far I'm starting by trying to replicate the behavior of the old code but I'm running into an issue. I figured, just to get some results on the screen, I'd try this ugly hack involving mutating the preview:

``` javascript
function getPromiseProperties(variable) {
  const { class: varClass, promiseState } = variable.contents.value;
  if (varClass === "Promise" && Boolean(promiseState)) {
    variable.contents.value.preview.ownProperties.promiseState =
      promiseState.state;
  }
  return variable;
}
```

The expected result, I'm thinking, is:

```
x: Promise
    promiseState: "rejected"
    __proto__: PromisePrototype
```

but that's not happening. It's still just:

```
x: Promise
    __proto__: PromisePrototype
```

Just to make sure I wasn't missing something, I also tried making sure the changes I was making to the preview exactly matched what another, working, Object preview looked like:

``` javascript
function getPromiseProperties(variable) {
  const { class: varClass, promiseState } = variable.contents.value;
  if (varClass === "Promise" && Boolean(promiseState)) {
    variable.contents.value.preview.ownProperties.promiseState = {
      value: promiseState.state,
      configurable: true,
      enumerable: true,
      writable: true
    };
    variable.contents.value.preview.ownPropertiesLength++;
    variable.contents.value.ownPropertyLength++;
  }
  return variable;
}
```

And still nothing.

Of course, as I found out, `variable.contents.value.preview` seems to only be relevant for rendering the non-tiny grip preview:
![screen shot 2016-11-20 at 5 15 15 pm](https://cloud.githubusercontent.com/assets/1445834/20466663/fef740d8-af44-11e6-860e-9c9ba1ba4974.png)

So obviously that's not what I'm looking for, but I still haven't been able to track down how to add anything to the actual list of properties that gets rendered when you expand one of the grips.

Side note: it seems really weird to me that there are two sources of truth for what appears in the preview, and what appears when you expand the grip. 

Maybe I'm missing something but when I try to reproduce this the browser's default search bar is shown instead the debugger's one. 

(When I hit `cmd+p`the debugger search bar is shown but the results dialog is different since this searches on every file)


Could it be some incompatible version of something ?

Debugger.html: 0.0.8
OSX: 10.11.5 (15F34)
NODE: 7.1.0
FFOX-DEV: 51.0a2 (2016-11-14) (64-bit)

Also tested on chrome:
CHROME: 54.0.2840.98 (64-bit)


Same here. I was thinking that I was doing something wrong and it did not appear :)
Hi @IagoLast, @andreicristianpetcu 

Sorry it wasn't clear. You'll need to go through the [getting started](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#getting-started) setup and enable `editorSearch` in the [local config](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#configs).

Running the local setup will look like this :)

![](http://g.recordit.co/3ZBUGvC2PC.gif)
@jasonLaster here it is!
Yeah...that was part of why it took a bit of a while. I really needed to understand what was going on, so as to make the least amount of changes. haha
Hey @jasonLaster thanks for flagging me down. I was able to reproduce this issue. I'll take this if no one is working on it at the moment. Let me know :) 
@jasonLaster @clarkbw @wldcordeiro  I've added the code to remove outlines. Please check. Thank you very much! :)
@jasonLaster May I work on this? Thank you!
Hmm. Really interesting. I haven't looked at this either. I'd be happy to
check it out tomorrow morning though

@jasonLaster or @jlongster can I get some assistance? CI seemed to have issues with this step:

```bash
$ npm run flow
```

The build exceeded a 4GB memory limit at that step. I ran the command locally and it worked. I'm not sure why it exceeded the limit. I don't think I can rerun CI build, so I'm not sure what to do here. If you could let me know what I need to do that would be great!
@jasonLaster  

I have looked at the attributes in `this.props.editor.codeMirror`, `this.props`, and `this.props.editor`, but I still couldn't find `selectedSource`. How do I get this variable? Thank you!
Thanks! CI passed. 
Here's the modified light theme.
![debugger-file-search](https://cloud.githubusercontent.com/assets/2848472/20470087/3c9b2070-af73-11e6-83bc-552f4ccad8d0.png)
For the dark-theme, yellow highlighting also looks good but I can't seem to change the colour of the text itself to make it more readable.
![debugger-file-search-dark](https://cloud.githubusercontent.com/assets/2848472/20470134/9969dc56-af73-11e6-880b-36987b13002c.png)
In dark-theme.css I tried setting the color in the same class that affects the highlight but it doesn't seem to work:
```
.cm-s-mozilla .CodeMirror-selected {
background: rgb(255, 255, 0);
color: rgb(0, 0, 0);
}
```
Is it being overwritten by something else?  When I inspect element, the selected text has classes `cm-overlay cm-selecting`, so do the other matches in the document.  Oddly the currently selected match doesn't have  the class `CodeMirror-selected` or any other classes to differentiate itself from the other matches in the file.. so I'm kinda stumped.  Any ideas?
@arthur801031, oh you might need to pass it in :)

Sorry, that was a quick code sketch and i missed that detail

```diff
diff --git a/src/components/Editor.js b/src/components/Editor.js
index ae71d2d..ff35d60 100644
--- a/src/components/Editor.js
+++ b/src/components/Editor.js
@@ -414,13 +414,14 @@ const Editor = React.createClass({
   },

   render() {
-    const { sourceText } = this.props;
+    const { sourceText, selectedSource } = this.props;

     return (
       dom.div(
         { className: "editor-wrapper devtools-monospace" },
         EditorSearchBar({
           editor: this.editor,
+          selectedSource,
           sourceText
         }),
         dom.div({
```
Thanks @arthur801031 this looks really good

I found a couple things that were slightly off and updated the [test plans](https://docs.google.com/document/d/1oBMRxV8A2ag2t22YsQOxTdEv0mXKzIg0tggJjRkU1S0/edit#) doc with some of these requirements. The doc is *really* new so feel free to add requirements i might have missed.

1. when the search bar is closed, Command+G stops working
2. when the search bar re-opens, Enter removes the query
3. when the search bar re-opens, Command+G removes the query

Honestly, I think (2) was there beforehand, but it is pretty similar so I hope you don't mind fixing that nit.

![](http://g.recordit.co/PwTZZXFQc8.gif)
Thanks @warjet777 this looks great.

One thing I'd add to your test plan is:
- [ ] Select a JS source and observe the pretty print button 


@warjet777 while I was testing your patch I found that we don't get the source contentType field in the client, which makes it impossible to detect if a console eval'd source is JS!

https://github.com/devtools-html/debugger.html/issues/1273

(Thought I'd share)


Thanks for the help. I hope you snag another [up for grab](https://github.com/devtools-html/debugger.html/issues?q=is%3Aissue+is%3Aopen+label%3A%22up+for+grabs%22)

Thanks @Zacqary, I just looked into it for a bit and I think we might want to format Promises with the Reps module, which you've already looked at before :)

@janodvarko, @linclark, @nchevobbe is there a ticket for using Reps to format promises? It looks like `GripMap` and `GripArray` might be similar, but I couldn't find where they're used.
@jasonLaster Hi Jason. The Promise Rep (PromiseRep from reps/promise.js ) already landed some times ago (see https://bugzilla.mozilla.org/show_bug.cgi?id=1310608 ). It looks like you don't have it in debugger.html yet though, merging from mozilla-central should be good.
@jasonLaster ok I might not be able to get to this this week. :( All you, @bomsy @kareniel!
no worries, i'll drop the in progress label
On Sun, 20 Nov 2016 13:54:58 -0800
Jason Laster notifications@github.com wrote:

> Thanks @shlomif for the great work

Thanks Jason for merging it and for your comments!

On Sun, 20 Nov 2016 11:58:06 -0800
Jason Laster notifications@github.com wrote:

> ahh - that makes sense.
> 
> I don't think we want to support Firefox 49. Thanks for reporting though

Got you! Fair enough - I'll use later firefoxen.

Had a private conversation with @jasonlaster about some things that are bugging me about the data model that I was playing with in `getScopes` and we figured I should copy it here:

I think the most frustrating thing was the fact that there's this preview prop which is solely for generating the properties displayed in the non-tiny preview (which is for, I assume, when we display a rep in the console as opposed to the Scopes dropdown?) And that one, by the way, has two different ownPropertiesLength and ownPropertyLength props, which could both simply be computed by getting Object.keys(ownProperties).length or equivalent. It seems to me like there's a lot of precomputed data which would be better served by selector functions. Especially given that there's no clear link between the ownProperties in the preview and the properties that show when you open the dropdown. If it's memoizing all that for performance reasons, then it ought to be doing that using a memoized function that points to the original source of truth, so that it's easier to reason about the code.

Maybe the previews are being calculated server-side, e.g. if there are 100,000 variables in a scope. I can see why that might be the case, and I admit that I'm still coming from a place of ignorance because I still don't actually know where the dropdown props are coming from. That's my main concern. My instinct is that the preview and the dropdown should be different views of the same data, but if that's not possible then I'd still like to see a clearer connection between what's going on in getScopes and the props that appear when you expand a scope's dropdown.

In short, the old code patterns that were lifted wholesale from the old debugger are confusing to me as a seasoned Redux dev, and I think it'd benefit contributors with a Redux/Elm-architecture background if they were rethought with a fresh perspective.
Talked to @viswanathamsantosh offline and he mentioned issues with

```
`"C:\Program Files (x86)\Mozilla Firefox\firefox.exe" -start-debugger-server 6080 -P development`
```

> I didn't get any error but the firefox didn't start either. Any thoughts?

c.c. @Garbee 
>`"C:\Program Files (x86)\Mozilla Firefox\firefox.exe" -start-debugger-server 6080 -P development`

Perhaps `--start-debugging-server` ?
Also @auchenberg, @clarkbw  thoughts?

Our [docs](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#open-the-debugger
) recommend

```
C:\Program Files (x86)\Mozilla Firefox\firefox.exe -start-debugger-server 6080 -P development
```

and our driver [has](https://github.com/devtools-html/debugger.html/blame/master/bin/firefox-driver.js#L22-L28)



`--start-debugging-server` worked perfectly for me now! Thank you jason. :D
oh great. perhaps we need to update the driver then to use two dashes. Mind making a PR for that so you can run 

```
npm run firefox
```

We can discuss the tradeoffs in the PR
do you have an example of a shrunk sad face? :)

I'm mostly asking for a friend @helenvholmes 
ping @Zacqary. Mind if I take this bug back so that I can pull in the latest greatest Reps?

Thank you for helping me with this! Here's a treat for you:

<img width="332" alt="screen shot 2016-11-21 at 22 05 29" src="https://cloud.githubusercontent.com/assets/985504/20500653/a5ed4a12-b036-11e6-815a-3936b67756d5.png">

@kdzwinel let me know if you have any questions. This PR can easily grow in scope!
Hey @bomsy, I hope you don't mind, but I
1) squashed your commits
2) removed the right sidebar auto-expand feature for scopes and breakpoints
  - I found that toggling them based on paused caused them to open/close quickly when stepping
  - It's probably better to open them if they're closed when we pause and then leave them open
  - This will be easier when #1277 lands
  - The tree expanding is plenty of logic for one PR :)


that's cool.
ping @gregtatum mind doing a sanity check.

James' initially worked on the Accordion component, so we can put this on the back burner until he gets back.
ping @clarkbw, @auchenberg mind doing a sanity check? 

@viswanathamsantosh mind updating [this](https://github.com/devtools-html/debugger.html/blob/master/bin/firefox-driver.js#L22-L28) call site as well so that `npm run firefox` works on windows!


I like the idea.  We could just do a live coding session if no one else shows.

Your Event link seems to require a Mozilla Okta account... Is there a public version?
This makes a lot of sense to me. I remember joining slack or IRC channels for OSS projects to ask for help or mentor ship but due to time zone or other issues, not be able to get much help. 
I'd be down for this :)
Cool idea! down for this :)
Can we close this?

> Also @clarkbw thoughts?

Strange, I thought we tested the single dash but now that I look at my windows box I can see it definitely needs the double dash.

Thanks for finding this!

Super! happy to get this out!
hmm - super strange. 

@monicau Mind opening a WIP PR and I'll take a look. Sorry that i missed this earlier
I'm getting my windows box updated right now.  I'm a bit confused about this though.  In #1248 I thought this was just about the dashes.  

Can someone paste the output of `C:\Program Files (x86)\Mozilla Firefox\firefox.exe -h` ?
Yep, I'll open a follow up issue for the panes being open. 

I missed that until your PR started the work.
Also, we should double check Firefox versions here just in case there has been some kind of update I'm not aware of.  A subtle change in the args like this would be like winning a lifetime supply of footguns
@clarkbw et al, does the event link work for you?
@jbhoosreddy yeah. One thing I like about it, is if we get stuck trying to help someone in IRC or Github we can suggest they stop by and we can help them out in person.
@monicau same here, seems like only `.cm-selecting` is being applied.
I'll take a look Wednesday, if you guys run out of leads. 

I'm afraid I'd, likely just be digging with the inspector as well. 
I like it! Won't be able to attend though, as those are work hours for me. :/
@jasonLaster I've fixed the bugs that you mentioned. Thank you! :)

This is a WIP.  I'm having trouble changing the text color of the highlighted text in the dark theme.  In dark-theme.css I tried setting the text color in the same class that affects the highlight but it doesn't seem to work:
```
.cm-s-mozilla .CodeMirror-selected {
background: rgb(255, 255, 0);
color: rgb(0, 0, 0);
}
```
When I inspect element, the selected text has classes `cm-overlay cm-selecting`, so do the other matches in the document.  Oddly the currently selected match doesn't have  the class `CodeMirror-selected` or any other classes to differentiate itself from the other matches in the file.. so I'm kinda stumped.
Alright I created a WIP pull request! 
> @clarkbw et al, does the event link work for you?

I don't think so, I keep trying it in Opera where I'm not logged into anything.  It seems to require a google account, maybe that's intended but I had assumed it would just show a calendar event or listing with the dates / times.  
@jasonLaster I've added the code for this issue. Please check. Thank you very much! :)
@jasonLaster May I work on this? Thank you! :)
@jasonLaster it looks like this will be dependent on changes from #1277 
i'll get on this!
Thanks @arthur801031!

I just tried it locally and it works smoothly.

I took a shot at cleaning up some of the code, but I'm not sure if I got it right because there are some weird issues as I type with keys being dropped lol

https://gist.github.com/jasonLaster/3354799646a76927f817282fd8871c2b

Would you mind taking a look at this and letting me know what you think? 

I'd also be happy to merge your patch as is and then clean up some of the searching behavior.


@jasonLaster I like it! But a bit busy these days, sorry!
@arthur801031 it's yours
@helenvholmes mind taking a quick look at this?
@clarkbw what do you think about also including a link to our vidyo #devtools room, so others can listen in as well?

[url](https://v.mozilla.com/flex.html?roomdirect.html&key=n9vJUD3L1vRMHKQC5OCNRT3UBjw)

My one concern is that we'll confuse contributors who don't know which call to join :)
> My one concern is that we'll confuse contributors who don't know which call to join :)

I share that concern.  Anyone is welcome to join our weekly call but I would worry that they wouldn't get enough value from it so I wouldn't want to direct them there.  I'd rather direct them to some where else where we can more directly work with them.
I think having some kind of open channel for people to try and find someone involved to help them out is great. Not everyone works on this kind of schedule though (or some of us may just have "whatever comes up" for ours.) I think having a directory of contact points to get in touch with people to try and setup a time to discuss things as-needed would be more beneficial compared to a set office-hour(s) period.

The only thing I'll say on promoting the weekly status meetings is proceed with caution. I can easily see having too many people trying to jump in becoming a problem of some kind (not sure on the technical side since I haven't been in one of these yet.)
Thanks @magicp-github 
Here is the link to the hangout - https://hangouts.google.com/hangouts/_/calendar/amFzb24ubGFzdGVyLjExQGdtYWlsLmNvbQ.30mdpa6ncqn8uttvmrj9b9d3jc?authuser=0
Hmm, looks like we're having some mochitest failures. Shouldn't be a big issue, i'll run locally in a little big. Thanks again for the great PR!
Great fix! 

I've gotten a vague message about it hard to editing configs, now i get it! Thanks
Thanks @jasonLaster !!
I keep wondering if this is going to be as simple as something like this:

```diff
diff --git a/packages/devtools-local-toolbox/src/clients/chrome.js b/packages/devtools-local-toolbox/src/clients/chrome.js
index a58b424..dc4b022 100644
--- a/packages/devtools-local-toolbox/src/clients/chrome.js
+++ b/packages/devtools-local-toolbox/src/clients/chrome.js
@@ -53,6 +53,10 @@ function connectClient() {
 function connectTab(tab) {
   return connect(tab.webSocketDebuggerUrl).then(conn => {
     connection = conn;
+    window.addEventListener("beforeunload", () => {
+      conn.onclose = function disable() {};
+      conn.close();
+    });
   });
 }
```
@clarkbw yeah! that looks like it... if there's a close function. or likely conn.Runtime.close()

So many of these issues are quick once you get in there!
@jasonLaster 

1. We need `this.props.sourceText.get("text") != undefined ` because  `this.props.sourceText.get("text")` would be undefined when you open a new file tab, which would throw an error when getting "text".

2. We need `const count = countMatches(query, this.props.sourceText.get("text")); this.setState({ count: count, index: 0 });` because we need to update the count of text that match the query for the tab you're selecting.

3. I have made the changes that you suggested from line 24 to 30 and line 38 to 46 (https://gist.github.com/jasonLaster/3354799646a76927f817282fd8871c2b)

Thank you! :)
@jasonLaster  I've added the code for this issue. Please check. Thank you very much! :)
@jasonLaster May I work on this? Thank you! :)
Looks good. Will review tomorrow!
Really great idea ! Definitely interested by it too :)
This sounds cool in theory. I'm personally worried about whether or not I can make it if it's during the week, but I'd say give it a try and I'll do my best to show up once in a while.

As far as helping people who need it, I'd also suggest some more official way of scheduling time to talk to people who are hopping into IRC or Slack at the wrong time to get attention.
closing this PR as switching to `chrome-remote-interface` required switching the HTTP request layer, which currently uses `networkRequest`
We can try this and see if it works.

@jasonLaster It does feel like perhaps we need something more like Office (after) Hours than something during the regular working hours.  What do you think?
I think it's great to have a time when mentors dedicate to answer longer questions and have deeper discussions with contributors (if that is indeed the intent).
Regardless, for smaller on-the-spot issues the IRC is still beneficial, and for async communication there should also be a medium like email or a discussion forum, or like @Garbee suggested - a directory of contact points.


Thanks for filing this!  We plan on getting this feature added back to the debugger and I agree that a transient popup would be the right thing.  The only gotcha there is to make sure the move movement wasn't toward the popup itself.

This was the old variables view code: https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/views/variable-bubble-view.js
@jasonLaster just out of curiosity, why do you need to interact with the remote debugging endpoint (port 9992) from the browser context instead of from the [backend][1]?

[1]: https://github.com/devtools-html/debugger.html/pull/1279#discussion_r89082143
@cyrus-and I'll file a more detailed writeup in the CRI issue, but it's pretty simple. We run our debugger as a web app, which handles the websocket connection with the different targets. Because of this, our backend is pretty dumb and has only a couple of responsibilities:
- serve webpack dev-server with the bundled JS
- handle CORS requests for things like source maps
- serve css

It's much more natural for our app to ask the backend to fetch a URL like `localhost:9222/json/list` than it is for the backend to know about which target we want to get the debuggable tabs from...
I'll try to tackle it.
Hey @arthur801031 this looks great. I'm glad that codeMirror.getCursor() did the trick

I think, the `shortcuts.on` handlers passing shortcut in is kind of a smell. so I investigated adding some anonymous functions and they seemed to work really well. My big concern was that `shortcuts.off` would not release the handler, but it also seemed to work and remove all the listeners.

Here's a patch where I cleaned up your handlers and the editor search bar. If you'd like, it'd be great to have a new PR that cleans up those handlers too!

https://gist.github.com/jasonLaster/2b9d515ea0c134c3d1cfa5f72189c871

Thanks for all the hard work this week. You're killing it!
@clarkbw yeah - w/r/t to after hours. Lets play it by ear, it's harder to schedule but maybe we can do something :)

I'm already scheduling lots of calls with people too. It could be fun to explore a monthly 3 hour after hours hacking session, or something like that.
Thanks @jnachtigall. I'm closing this as it's a dupe of #626.
Here's the old code

https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/views/variable-bubble-view.js
Ah, all good points.

I'm sorry i did not have a chance to look at the failing tests today. I got caught up working on #1295 and #1294. Unfortunately, I'll be busy over the next couple days doing thanksgivingy things, but I'll get back to this soon.


Nice one! i'll start hacking at this to see what we can come up with.
this seems to be OK in commit bc99a6ca3b4f9443fda8a27d5f92371cabfd6281 without any changes. See my screencast at http://www.shlomifish.org/Files/files/video/debugger-dot-html--issue-1287.ogv .
@shlomif which commit? I think that was a copy / pasta
Odd that lines other than 17 don't behave this way...

I tracked this down to here: https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-local-toolbox/src/clients/firefox/commands.js#L80-L84

It seems the `remove()` function is failing for some reason.
Thanks for the explanation!
But since there actually **is** a backend, my point was to ask it:

    http://localhost:8000/list?host=localhost&port=9222

instead of:

    http://localhost:8000/fetchme?url=localhost%3A9222%2Fjson%sFlist

But this, as you say, implies a slight less dump backend due to the fact that now it has to recognize the `list` operation and whatever else you need (`new`, `close`, etc.). Anyway I see your point, just different design choices.
This issue is done, though our flow coverage could improve lets open other individual issues for that.


Oops. mistyped below;;

>   Expected Results:  > Actual Results:

>   Actual Results:  > Expected Results:


Hi @jasonLaster

Is the new PR for cleaning up handlers in different files? Or are you referring to the handlers in EditorSearchBar.js? Thank you very much for your help and feedback. Have a great Thanksgiving! :) 
Nice. Will look more closely later. 


Hi @jasonLaster  

I've made changes based on your comments. Please check. Thank you! :)
Did you do a `yarn upgrade` to update package dependencies?
Edit: `yarn upgrade` is the correct/better solution.

I just realized that chrome-remote-debugging-protocol has been moved removed (#1263), so I downloaded chrome-remote-debugging-protocol from https://github.com/jasonLaster/chrome-remote-debugging-protocol and put that folder inside the packages folder, and it worked! 
@bomsy  

`yarn upgrade` works! Thank you so much! :)
Thanks @bomsy. 

Arthur, I meant to tell you because I ran into the same thing on your branch and just nuked the node modules sir and reinstalled. 

Yarn upgrade is the better solution though :)
Thanks! Looking good.


going to close this as we'll clean up the debugger's deps in #1251
@clarkbw  : 

```
shlomif[debugger.html]:$trunk$ git show
commit bc99a6ca3b4f9443fda8a27d5f92371cabfd6281
Author: Fernando Montoya <montogeek@gmail.com>
Date:   Tue Nov 22 15:33:07 2016 -0500

    Update CONTRIBUTING.md (#1289)

    * Update CONTRIBUTING.md

    * Update CONTRIBUTING.md

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 0b5f2b8..8c4e0f0 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -363,7 +363,7 @@ For a list of all the configuration options see the [packages/devtools-config/RE

 ### Create a local config file

-* Copy the [`packages/devtools-config/configs/development.json`](./packages/devtools-config/configs/development.json) to `packages/devtools-config/configs/local.json`
+* Copy the [`configs/development.json`](./configs/development.json) to `configs/local.json`

 ## Issues and Pull Request labels

shlomif[debugger.html]:$trunk$
```

on the master branch. Running the debugger there with the dark theme yields a different hover background on breakpoints, which seems to indicate this issue was already remedied.
@jasonLaster what 's the best way init prefs outside the scope of an app refresh?
```
   pauseOnExceptions: ["Bool", "debugger.pause-on-exceptions"]
   ignoreCaughtExceptions: ["Bool", "debugger.ignore-caught-exceptions"]
```
Because the code above  causes a `Services.js:294 Uncaught Error: could not find pref branch devtools.debugger.pause-on-exceptions` error.
do you mean this pref call ? `pref("debugger.pause-on-exceptions", true);`? 
So on refresh of the page , that always get called .. thereby resetting the value of the prefs to the default.
Ok. thanks. that's good know. i'll  have a look.  I just wanted to make sure i understood what should be happening... Sorry for disturbing ur Thanksgiving! :)
Thanks @jnachtigall for reporting. This looks like a regression on our end.

We had implemented it here: https://github.com/devtools-html/debugger.html/pull/774

@wldcordeiro interested in investigating?
CC @shlomif, @Garbee, @auchenberg 

@clarkbw how should we move forward here? I'm tempted to accept and then we can discuss if others find outliers...
errors look legit. I'll investigate next week
@nchevobbe is this covered?

By the way, we're pulling in the latest Reps early next week.


it should be handled by the reps just fine.
if I take Jarda function and add logging to it, I get the following in today's Nightly : 
![capture du 2016-11-24 15-55-24](https://cloud.githubusercontent.com/assets/578107/20602638/7f9200e0-b25e-11e6-9032-ef04ef81aade.png)

So the rep does handle it like it should in the console.
In the debugger, it does show the correct type, but not much else.
The thing @jsnajdr  was pointing at, I think, is that even when you expand `e` in the scope panel in the debugger, there isn't any of the properties of the `MouseEvent` object, and, from what I understand, the part where you get the properties of an expanded object does not deal with the Reps, right ?

The only thing that could be a problem for Reps is if you were passing a `mode` props to it (last time I checked, you were not), since https://bugzilla.mozilla.org/show_bug.cgi?id=1312178 changed how we handle modes in Reps.


Here's another simpler test case: http://wbamberg.github.io/example-websites/source-mapping/index.html
My guess is that "--theme-search-overlays-semitransparent" variable is not available in dark-theme.

![theme-dark-variables](https://cloud.githubusercontent.com/assets/13914314/20606071/f6a9d1d2-b2b1-11e6-982f-b116e4e3404e.png)

Here's the output I get and Firefox says debugger, not debugging.  I'll have to try it out to know

```
 "C:\Program Files (x86)\Mozilla Firefox\firefox.exe" -h
Usage: C:\Program Files (x86)\Mozilla Firefox\firefox.exe [ options ... ] [URL]
       where options include:

  -h or --help       Print this message.
  -v or --version    Print Firefox version.
  -P <profile>       Start with <profile>.
  --profile <path>   Start with profile at <path>.
  --migration        Start with migration wizard.
  --ProfileManager   Start with ProfileManager.
  --no-remote        Do not accept or send remote commands; implies --new-instance.
  --new-instance     Open new instance, not a new window in running instance.
  --UILocale <locale> Start with <locale> resources as UI Locale.
  --safe-mode        Disables extensions and themes for this session.
  --console          Start Firefox with a debugging console.
  --browser          Open a browser window.
  --new-window <url> Open <url> in a new window.
  --new-tab <url>    Open <url> in a new tab.
  --private-window <url> Open <url> in a new private window.
  --preferences      Open Options dialog.
  --search <term>    Search <term> with your default search engine.
  --jsconsole        Open the Browser Console.
  --jsdebugger       Open the Browser Toolbox.
  --devtools         Open DevTools on initial load.
  --start-debugger-server [port|path] Start the debugger server on a TCP port or Unix domain socket path.  Defaults to TCP port 6000.
  --recording <file> Record drawing for a given URL.
  --recording-output <file> Specify destination file for a drawing recording.
  --setDefaultBrowser Set this app as the default browser.
```
Here's the output I get:

```
Bryan@BryanWin10  ~/Documents/GitHub
$ "C:\Program Files (x86)\Mozilla Firefox\firefox.exe" -start-debugger-server 6080 -P dev-edition-default
Started debugger server on 6080

Bryan@BryanWin10  ~/Documents/GitHub
$ "C:\Program Files (x86)\Mozilla Firefox\firefox.exe" -start-debugging-server 6080 -P dev-edition-default
```

From this it appears to me that we want `-start-debugger-server`.  From the command line like this none of the flags work if you haven't set the about:config values correctly.
> From this it appears to me that we want -start-debugger-server

Also I did test that the connection only works with the above flag.
CC @MoLow 
CC @MoLow 
@jasonLaster whats this?
Do you plan on using the CDP directly from the front-end or have a server-side layer in between to enable CORS, etc?
We plan on using it in the front end with a simple HTTP proxy for cors. 


Thanks @nt1m for sharing. I noticed something last month that was similar in the panel, but not locally. Happy to investigate. 
closing as we'll be able to discuss this as one of many enhancements

feel free to add to the discussion even though it's closed
@jasonLaster while trying to test this , i get `networkRequest.js:6 Fetch API cannot load file:///get?url=http://localhost:9229/json/list. URL scheme "file" is not supported.` in the electron app console when running  `jsdebug`. 

Am i missing something?

It's not making the request because `file:///` is not supported. I noticed  of the browser based debugger uses `http://localhost:8000/`. 
@jasonLaster 

So, let's *defrag* the discussion about this feature and use this thread as a common point. For completeness, here are the previous threads:
- devtools-html/debugger.html#1279
- cyrus-and/chrome-remote-interface#63

Despite what I said, that CRI is meant to run in a Node.js context and so on, I'm interested to fully understand your requirements and to help you in this adoption, if possible.

---

Let's forget for a moment about the CORS issues. I haven't much experience about *browserifying* modules but I see at least these problems:

1. the well-known use of `http/s` modules;

2. the dependency on [ws][1] for WebSockets (possibly related to 1. as the browser has its own API for this too);

3. the fact that CRI comes with a bundled command line utility which is useless in this case;

4. **Edit:** Node.js event emitter.

It seems that all the above can be addressed at bundling/packing time, so I was wondering if we couldn't inject the custom fetcher in the same way. I'd be happy to add a `rollup.config.js` or a`webpack.config.js` to CRI so that you can add the custom fetcher to it.

Of course, I'd love to hear thought from @auchenberg and @juliandescottes too.

[1]: https://github.com/websockets/ws
it works when i change this `fetch('/get?url=${url}')` to `fetch('http://localhost:8000/get?url=${url}')` in https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-network-request/networkRequest.js#L6

How do you get this to work when running  the electron app?

Thanks :)
A suggestion is do we want to pick up the `development.serverPort` from `configs/development.json` and use that for running the networkRequests?
Thanks for taking a look @bomsy + @juliandescottes. 

I believe the electron app was failing for you because you need to run `yarn run start-app` from the debugger so it reads in the `application.json` config.

You might also have to run `yarn upgrade`, but it sounds like you did if you got node running.
@jasonLaster ahh cool thanks. i knew i was missing something! thanks. do we need to doc this somewhere?

This LGTM, and work fine!
haha - yeah we're down from three threads to one. 

Yeah, webpack could do the trick

1. webpack handles browserifying `http`, `https`, and `event-emitter` out of the box
2. I mapped `ws` to the browser global `WebSocket` in my config
3. if we moved `fetchObject` to its own module, then it would be fairly easy to swap that module out at build time.

I'll take a look early next week. That *does* sound better than forking :)
> I mapped ws to the browser global WebSocket in my config

But does it actually work? I'm trying the same but the API is different (constructor, `.on()`, etc.), it would need a wrapper I think.
Additional resources for this change: 

* http://eslint.org/docs/rules/prefer-template
* https://jsperf.com/es6-string-literals-vs-string-concatenation
@clarkbw Strange but I dont see any output for `firefox.exe -h` . Any thoughts?
![firefox](https://cloud.githubusercontent.com/assets/3799600/20639140/71e92ce6-b3e1-11e6-8138-d42e4c4d3ba5.JPG)

I came up with a possible solution in a [new branch][1]; [here][2] is the documentation.

Now `chrome-remote-interface` should run mostly out-of-the box into a browser context: the user must provide a global `criRequest` function in order to implement a custom HTTP fetcher.

Let me know what you think.

[1]: https://github.com/cyrus-and/chrome-remote-interface/tree/webpack
[2]: https://github.com/cyrus-and/chrome-remote-interface/tree/webpack#browser-usage
This looks good! I like `externalRequest`

My one concern is in requiring CRI in the webpack bundle. 

I'd like to be able to `require("chrome-remote-interface")` and have it work. I'm not sure what the best way is to set this up, so l'll explore some options and get back to you. 

Thanks for putting the time in to help so far! 
> I'd like to be able to require("chrome-remote-interface") and have it work. I'm not sure what the best way is to set this up, so l'll explore some options and get back to you.

So I guess you'll have to include that config into yours, I'm pretty newbie when it comes to webpack though. But at least we should have all the ingredients now.
yeah, definitely. perhaps the first step is to expose the webpack in the list of package.json files

then we might be good...

I'll pull it down and let you know. or feel free to do the same :P the debugger is easy to setup. Especially if you get the protocol / websocket setup :P
You should be able to manually simulate it, I'd happily add it the next time I npm-publish, if it turns out that's enough. Let me know...
I will into that tomorrow when I'm near my windows box. Can't say I have an idea right now. 
Try `\h`. That is typically how windows CLI handles those types of flags.
![screen shot 2016-11-27 at 10 15 10 am](https://cloud.githubusercontent.com/assets/254562/20649302/87bcacb0-b48a-11e6-85e2-ff914d8e36b5.png)

noticed chrome got some useragent styling that was easy to clean up with some background/border noneing
Thanks @monicau for the help styling the background color and outline for matches.

I just looked into styling the highlighted element's color and **it is hard** to do with codemirror's api. I mean really hard.

You probably know this, but the yellow overlay is an element absolutely positioned on top of the matched text... and there's no CSS class for the currently highlighted matched text...

* Another problem I noticed is that the matched text is already styled differently and doesn't look great.  This happened before your PR. I filed #1315 to address it too :)

* one other observation, your garrish yellow background makes it easier to read the selected matches than the grey.

With all of that mentioned, I think what you have is an improvement and we can fix the matched text color in another issue.

Here's a GIF of the matched color problem:
![](http://g.recordit.co/OHT3Se7C8B.gif)
![](http://g.recordit.co/CmRLrEuCw6.gif)
@helenvholmes I think this PR makes sense landing and then we can update the styles in M-C. What do you think?
closed in favor of a more actionable issue #1317
Thanks for filing the issue @bjorn3.

I just added it to our Enhancements board https://github.com/devtools-html/debugger.html/projects/5. I'm closing this issue now because we're not going to be able to act on it in the next two sprints, but feel free to continue commenting on it. 

Out of curiosity, 
* when would you use this in the old debugger
* how often did you use this feature in the old debugger?
Thanks @arthur801031! 

> closing as we'll be able to discuss this as one of many enhancements

Where will this discussion take place?

Sebastian
Ahh, just looked at the failing test and found the bug:

```
JavaScript error: resource://devtools/client/debugger/new/bundle.js, line 48484: TypeError: this.props.sourceText is undefined

1089 INFO Console message: [JavaScript Error: "TypeError: this.props.sourceText is undefined" {file: "resource://devtools/client/debugger/new/bundle.js" line: 48484}]

1090 INFO TEST-UNEXPECTED-FAIL | devtools/client/debugger/new/test/mochitest/browser_dbg_keyboard-shortcuts.js | Test timed out - 
```

I pushed a fix and hopefully this will be green soon and we can merge. In the future, it's possible to grep the mochitest output for unexpected fail and javascript error. and often you'll find the problem in the sea of text!
Good question:

Here are the other [enhancements](https://github.com/devtools-html/debugger.html/projects/5).

The conversation can continue here and perhaps subsequent feature issues. 

Sorry that this process is not that clear, I think we might adopt an RFC style repo process at some point so we can have open issues to discuss and plan. and perhaps roadmap issues as well where we can openly prioritize. 

@SebastianZ if you're interested in helping implement this feature we can prioritize it and figure out an action plan. Part of it is limited man power
looks like the test failures are all linting things
So am I missing something or is the fix actually this easy?
```diff
diff --git a/src/utils/source-search.js b/src/utils/source-search.js
index b12a675..c31bd1d 100644
--- a/src/utils/source-search.js
+++ b/src/utils/source-search.js
@@ -80,7 +80,7 @@ function searchOverlay(query) {
 function startSearch(cm, state, query) {
   cm.removeOverlay(state.overlay);
   state.overlay = searchOverlay(query);
-  cm.addOverlay(state.overlay, { opaque: true });
+  cm.addOverlay(state.overlay, { opaque: false });
 }
 
 /**
```

haha - it might be that easy... what does opaque do?
From the [CodeMirror Docs](https://codemirror.net/doc/manual.html):

>cm.addOverlay(mode: string|object, ?options: object)
    Enable a highlighting overlay. This is a stateless mini-mode that can be used to add extra highlighting.


> opaque: bool
        Defaults to off, but can be given to allow the overlay styling, when not null, to override the styling of the base mode entirely, instead of the two being applied together.

Setting it to `false` retains the `cm-property` class and preserves the underlying text color.

So, yeah, I think that's it.
oh sweet, i like it! PR it up
As for fixing the dark mode style, that's going to be more difficult to track down. 

When I highlight this:
![screen shot 2016-11-27 at 1 26 30 pm](https://cloud.githubusercontent.com/assets/1445834/20650793/21ac1206-b4a5-11e6-9fbd-571eed258e71.png)
it has the classes `cm-property cm-overlay cm-selecting`.

Then I highlight the next thing, and look at it again:
![screen shot 2016-11-27 at 1 27 11 pm](https://cloud.githubusercontent.com/assets/1445834/20650801/435d45a0-b4a5-11e6-9409-424d3c39e723.png)
but it still has the classes `cm-property cm-overlay cm-selecting`.

`cm-overlay` appears to be a class that CodeMirror is using internally, and has no style properties. `cm-selecting` provides the outline. It's unclear where the gray background is coming from, because the style of the `<span>` element containing `render` doesn't change at all when you select or deselect it. And I don't see any pseudo-elements immediately attached to it.
Thanks @Zacqary! Looks great
this should help here: https://github.com/devtools-html/debugger.html/pull/1318

it could also give us a good class to match on
@Zacqary hmm, i think we also have a debounce here which is probably the problem

https://github.com/devtools-html/debugger.html/blame/master/src/components/EditorSearchBar.js#L176-L191

This should definitely be fixed!
@jasonLaster  Thank you very much for your help! I really appreciate it! :) 
@jasonLaster  No problem, I will take a look at this today :) 
Quick update: Now that we're using lerna as a post-install, it's very easy to start deleting dependencies from the debugger!
This is now supported 
Hi @jasonLaster 

I'm trying to figure out why the `circleci` tests have failed, and I found this error message: `1377 INFO TEST-UNEXPECTED-FAIL | devtools/client/debugger/new/test/mochitest/browser_dbg-navigation.js | uncaught exception - TypeError: sourceText is undefined at Debugger</EditorSearchBar<.search<@resource://devtools/client/debugger/new/bundle.js:48621:10`. For the if condition inside `componentWillReceiveProps `, `sourceText ` has already been checked, so I'm not sure where this error is coming from. 

I tried installing `docker` and running `./bin/run-mochitests-docker` on my machine, and it required me to download 4GB+ of data. Is there a way to test this on my machine without downloading 4GB of data?

Please help. Thank you so much! :)
@jasonLaster I would like to take a look at this. Thank you!
@jasonLaster  I have fixed the issue. Please check. Thank you! :)
Hi @jasonLaster

I've an off topic question. I used `git fetch upstream` and `git merge upstream/master` to fetch the latest commits from master. In the terminal, it asked me to enter a commit message. Then, this commit message show up whenever I create a new branch. For instance, `Merge pull request #1 from devtools-html/master` and `mergeMerge remote-tracking branch 'upstream/master'` commits in this PR came from this merge. How do I remove these commits messages when I create a new PR?

Thank you! :)
@arthur801031 Do `git rebase upstream/master` instead of `git merge upstream/master`, that should squash the commits.
Good one!
Interesting effect of `opaque: false` to note.
It breaks up the outlining based on each of the tokens, therefore keeping the `cm-property` and the coloring.

![ft](https://cloud.githubusercontent.com/assets/792924/20667007/0479fbc0-b55f-11e6-826f-262315a101f8.gif)

When `opaque: true`
It outlines them together, ignoring what type of token they are, therefore the colorings are removed!

![ft2](https://cloud.githubusercontent.com/assets/792924/20667022/201fe3f8-b55f-11e6-826d-cfe933396230.gif)

Most editors (e.g atom) merge the outlines together, but it depends what we want ATM. We can fix the coloring issue now, see how to get the outlines together later.
Interesting note!
Setting `opaque: false` causes the outlines for searched phrase to be split based on tokens. `opaque: true ` brings them together.
See https://github.com/devtools-html/debugger.html/pull/1318#issuecomment-263252063
Here's a patch that should be close to what we need to do.



```diff
diff --git a/src/components/SourceTabs.js b/src/components/SourceTabs.js
index 20a7e8e..82721ac 100644
--- a/src/components/SourceTabs.js
+++ b/src/components/SourceTabs.js
@@ -61,7 +61,16 @@ const SourceTabs = React.createClass({
   },

   componentDidUpdate() {
-    this.updateHiddenSourceTabs(this.props.sourceTabs);
+    this.updateHiddenSourceTabs();
+  },
+
+  componentDidMount() {
+    this.updateHiddenSourceTabs();
+    window.addEventListener("resize", this.updateHiddenSourceTabs, false);
+  },
+
+  componentDidDismount() {
+    window.removeEventListener("resize", this.updateHiddenSourceTabs);
   },

   onTabContextMenu(event, tab) {
@@ -127,7 +136,8 @@ const SourceTabs = React.createClass({
    * Updates the hiddenSourceTabs state, by
    * finding the source tabs who have wrapped and are not on the top row.
    */
-  updateHiddenSourceTabs(sourceTabs) {
+  updateHiddenSourceTabs() {
+    const sourceTabs = this.props.sourceTabs;
     if (!this.refs.sourceTabs) {
       return;
     }
```
Hey @arthur801031 unfortunately, the tests require a full version of gecko-dev which can be that big. I'd be happy to run the tests for you on my machine for the time being.

I'm working on a test runner that can be run locally without gecko-dev.
Hmm, will look into this later, but a quick check of Chrome's debugger and it looks like they have a solution with codemirror. Might be worth doing a quick check of what they do https://github.com/ChromeDevTools/devtools-frontend

![screen shot 2016-11-28 at 7 45 18 am](https://cloud.githubusercontent.com/assets/254562/20669743/cef33112-b543-11e6-857d-13de1eb7ce80.png)

Hi @jasonLaster

yes please, thank you!  
Hmm, @bomsy @arthur801031 is there a way to update the input as you type and *just* debounce the search function? This way we won't lose characters, but we won't be as distracting.
Don't have the code in front of me right now to check, but is the search box using a `value` instead of a `defaultValue`? If we're debouncing the search function, that means the `value` of the field isn't necessarily going to match the search string currently stored in state at all times, so we shouldn't be having React override the `value` on every render.

That would create an issue with x-ing out the search box to clear it, I'm guessing. I'm wary to use `shouldComponentUpdate` because that's caused massive time-destroying bugs in my experience.

What if the search operation could be made into an asynchronous side effect instead? That way we wouldn't have to add any non-determinism by letting React stop tracking the `input` value.

Yes I just kind of argued with myself in these last three paragraphs but maybe that context is helpful.
CC @arthur801031  might be fun

```diff
diff --git a/src/utils/sources-tree.js b/src/utils/sources-tree.js
index 9c85739..9dd63d3 100644
--- a/src/utils/sources-tree.js
+++ b/src/utils/sources-tree.js
@@ -257,6 +257,8 @@ function createTree(sources: any) {
   for (let source of sources.valueSeq()) {
     addToTree(uncollapsedTree, source);
   }
+
+  // => perhaps the solution is in this code...
   const sourceTree = collapseTree(uncollapsedTree);

   return { uncollapsedTree,
```
```diff

     if (sourceText && sourceText.get("text") &&
-      selectedSource != nextProps.selectedSource) {
+      selectedSource != prevProps.selectedSource) {
       const query = this.state.query;
       const count = countMatches(query, sourceText.get("text"));
-      this.setState({ count: count, index: 0 });
+      this.setState({ count: count, index: 0 }); // eslint-disable-no-did-update-set-state
+      this.replaceState({  ... })
       this.search(query);
     }
```
here are some options:

```diff

     if (sourceText && sourceText.get("text") &&
-      selectedSource != nextProps.selectedSource) {
+      selectedSource != prevProps.selectedSource) {
       const query = this.state.query;
       const count = countMatches(query, sourceText.get("text"));
-      this.setState({ count: count, index: 0 });
+      this.setState({ count: count, index: 0 }); // eslint-disable-no-did-update-set-state
+      this.replaceState({  ... })
       this.search(query);
     }
```
@jasonLaster I will take a look at this tomorrow! :) 
i had a quick peek .. This looks like the useful section in Chrome debugger code.
https://github.com/ChromeDevTools/devtools-frontend/blob/d8b14aea25a93cb6bbceb6aaaf45765c107d1fd9/front_end/source_frame/SourcesTextEditor.js#L727

closing, I can land this in the sanitize deps work
Off the top of my head,  i think we can fix with a smarter token function.
@arthur801031 can we keep the debounce for *doing the search* but immediately update the search input with the query and not lose any chars?
This is a step in the right direction.

Merging and we can sort out the tokenizer business in a new PR.
closing this PR so we can work on https://github.com/devtools-html/debugger.html/pull/1309
@jasonLaster FYI I'm using a wrapper now (cyrus-and/chrome-remote-interface@b046e46155508778f19f1cbccabeb38f411815aa), should not impact your work though as you're not using my `webpack.config.js`.
thanks for the heads up. 

that's an improvement over this: https://github.com/devtools-html/debugger.html/pull/1320/files#diff-e90849efb3b26f4c34edad35df5d77efR66

going to come back to this soon and sort out the WS things. 

I'd like to use your webpack.config, but i'm not sure how to compose them...
CC @Zacqary, @bomsy interested?
Hi, sorry for the delay in answering. In the meanwhile i tested on a computer with no admin priviligaes, so I could not install yarn, neither update node to > 6.9.0, so I tried running it directly, and this is the results:

![image](https://cloud.githubusercontent.com/assets/8221854/20674763/beee4032-b592-11e6-95e1-aab3b026df15.png)

I'l try it later today on my computer using npm run/yarn start/yarn run.

BTW, I havent tried yet, but this maybe a simple solution: https://www.npmjs.com/package/npm-run-path
> yarn start firefox vs yarn run firefox

I believe with `yarn start firefox` yarn is just actually starting the server and it actually passes 'firefox' as an argument to the server.  

When you run `yarn run firefox` you're seeing the issue we seem to be having running Firefox on windows.
> I didn't bump the toolbox version here because I don't think other tools need the bump, but I can do that later if we need it

I was planning on bumping it this week to get Windows env. support from #1308 . So if you want to do it here that's fine by me! 
Ok, and I just looked into this further.  I think the first solution is to update our instructions.

The error you're seeing in that screenshot is because you don't have the `geckodriver.exe` file in your local path.  Here are some quick instructions so solve this:

* Open https://github.com/mozilla/geckodriver/releases/latest
* Download the build file that matches your system (like `geckodriver-v0.11.1-win64.zip`)
* Create a local bin directory by doing `mkdir ~/bin`
* Extract the `gecokdriver.exe` file into the `bin` directory you just created

Now when you run `yarn run firefox` Firefox should start up.  

I am seeing a problem where you I don't believe the debugger server is running, looking into that now.
I'm going to close this PR now as I don't think `AccordionPane` buys us too much in terms of functionality we did not have before. @kdzwinel please correct me if i'm wrong and you need it for vertical layout.
@clarkbw well, the question is  if this could be done automatically on npm install or on npm run firefox, since the exe is installed to node_modules\geckodriver, and it only needs to get into the path in runtime.
Hmm, it works for me locally 

and `ls node_modules/eslint-*` shows
```
eslint/                  eslint-plugin-babel/     eslint-plugin-flowtype/  eslint-plugin-mozilla/   eslint-plugin-react/
```
> could be done automatically on npm install or on npm run firefox, since the exe is installed to node_modules\geckodriver, and it only needs to get into the path in runtime.

Yes, sorry.  What I have above shouldn't actually be the solution, just short term.  On the Mac this is done automatically and it should be on Windows as well.
@clarkbw perhaps look at npm run path issues for windows
Oh, hmm.  I'm seeing `node_modules/.bin/geckodriver` where i believe it should be `node_modules/.bin/geckodriver.exe`
Or, actually `geckodriver.cmd`
The `.bin/` directory has files with the `.cmd` extension, which run just fine.  I found that if I change this line with a `s/exe/cmd/` then it works just fine.

https://github.com/SeleniumHQ/selenium/blob/ba56ad1ae0b98a1fe1efdd2163c62fc847950178/javascript/node/selenium-webdriver/firefox/index.js#L288
> It will show variables and arguments that have been optimized out with a special message:

Do you have a test jsfiddle or something where I can play with it?
I experience slowness with just scrolling a 175676 byte file.
Thanks @monicau!

I spoke with @helenvholmes offline and we'll update the m-c versions of these files
closing in favor of #1333
closing in favor of #1333
I've been trying out this solution, creating the driver manually, but still not having success:

```js
  let options = new firefox.Options();
  let service = new firefox.ServiceBuilder(__dirname + '\\..\\node_modules\\.bin\\geckodriver.cmd').build();

  options.setProfile(firefoxProfile());
  options.setBinary(firefoxBinary());

  const driver = new firefox.Driver(options, service);
```

It finds the local gecko driver but errors out elsewhere before running anything.
@clarkbw Sure, go to http://jlongster.com/s/foo.html and click the button. When it's paused, select the 2nd stack frame and look at the second block scope.
Let me know if there are any problems @clarkbw.
well, now I ran it on another machine, and it seems the correct directory is prepended to PATH - only when running via `npm run firefox`;

this the result of `echo $PATH` and adding `console.log(process.env.PATH);` to firefox-driver.js

![image](https://cloud.githubusercontent.com/assets/8221854/20685280/758c6c8c-b5bc-11e6-815f-e3717efe583c.png)

however, I created a file called "path.js" which only contains `console.log(process.env.PATH);`, and the directory is not prepended:
![image](https://cloud.githubusercontent.com/assets/8221854/20685534/76ed22b4-b5bd-11e6-93d8-cd8e95483ec4.png)

when I changethe `firefox` command in `package.json` to `node path.js`, the path is prepended again:

![image](https://cloud.githubusercontent.com/assets/8221854/20685666/f5c99ac2-b5bd-11e6-9519-372e3b904e9d.png)


Mabe the simplest solution is to add these lines to firefox-driver.js?:

`
var path = require('path');
process.env.PATH = path.resolve(__dirname, '../node_modules/.bin') + ';' + process.env.PATH;
`

is this a BAD idea?
would it work in linux?
It works, trying it out now.

> look at the second block scope

Just looking at this like its the first time.  I don't really understand why there is a 2nd block scope.  At the very least it would make more sense to me if they were given more context.
CC @jlongster @montogeek 
#1330
fixed here https://github.com/devtools-html/debugger.html/pull/1318
@bomsy we dropped the accordion refactor you're no longer blocked.
i can take this!
Nice! 
Thanks @monicau!
Hi @jasonLaster 

I found a bug in the code where if you have a file tab and the search bar open and you open a new file tab, the new file tab does not re-search its file based on the query. For example, when `jquery.js` is opened for the first time, it should show `1 of 94 results`.
![bug](https://cloud.githubusercontent.com/assets/4562118/20694386/bcbafd72-b61f-11e6-9917-18d3778c5f76.gif)

I have added a fix to this issue. Please let me know if this fix is okay. Thank you!

Awesome, thanks @jasonLaster!
we haven't seen this in awhile, so closing for now. lets re-open if they appear
Closing this as we have a working node app... 

Going forward the app issues are tracked in that repo https://github.com/jasonlaster/debugger.app
closing as Yarn is not being flakey on CI and others aren't reporting this. We can re-open if they do.

#1235 
This patch is likely the fix

```diff
diff --git a/packages/devtools-local-toolbox/src/index.js b/packages/devtools-local-toolbox/src/index.js
index a1dd65c..8e32bdf 100644
--- a/packages/devtools-local-toolbox/src/index.js
+++ b/packages/devtools-local-toolbox/src/index.js
@@ -114,6 +114,9 @@ function bootstrap(React, ReactDOM, App, appActions, appStore) {
     });
     chrome.connectNodeClient().then(tabs => {
       actions.newTabs(tabs);
+    }).catch(e => {
+      console.log("Connect to node:");
+      console.log("https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#node");
     });
     return firefox.connectClient().then(tabs => {
       actions.newTabs(tabs);
```
@helenvholmes @clarkbw @jlongster  curious to see what you think?
closing as this is not a priority
@jasonLaster

I think this fixes the issue. Please check. Thank you! 
Thanks for fixing it!
I don't understand the font sizing issues, are you saying they should be even smaller? The fonts are locked in as they are though because they match the devtools defaults and changing them requires you to convince the rest of the team to change our default font size (and we aren't going to have a different one only locally).

The real solution is media queries, as you mentioned, and I think there is some work being done on a vertical layout?
Thanks @jlongster.  I think this is two things:

1. narrow widths, which vertical layout will help with
2. zoom'd in screens which are likely out of scope
@afeld just landed #1334 which should help in this department! 


@Garbee, @viswanathamsantosh, @clarkbw just landed #1334, #1331, and #1323 which should really help with the docs

Here are some links

https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md
https://github.com/devtools-html/debugger.html/blob/master/docs/getting-setup.md
https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md
https://github.com/devtools-html/debugger.html/blob/master/docs/debugging-the-debugger.md

https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-client-adapters/README.md
https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-local-toolbox/README.md

Hopefully, this will have improved the structure enough where you guys can work your magic and really make it good... I think prior to this work everything was so scattered that it was hard to get your head around it.
@monicau, @jacobjzhang, @akhillb, @svenvNL, @SezginEge, @gavlu, @samuelfullerthomas, @Dalimil we just re-wrote our getting started docs. Do you have any suggestions on how to make them more beginner friendly?

@JasonWeathersby any constructive criticism?

[CONTRIBUTING.md](https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md)
[docs/getting-setup.md](https://github.com/devtools-html/debugger.html/blob/master/docs/getting-setup.md)
[docs/local-development.md](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md)
[docs/debugging-the-debugger.md](https://github.com/devtools-html/debugger.html/blob/master/docs/debugging-the-debugger.md)

[packages/devtools-client-adapters/README.md](https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-client-adapters/README.md)
[packages/devtools-local-toolbox/README.md](https://github.com/devtools-html/debugger.html/blob/master/packages/devtools-local-toolbox/README.md)

@kareniel you might find this one interesting?
@jacobjzhang interested? 
Before merging this it might be good if @jasonLaster pulled this down locally and tested it to make sure all the fuzzy searching you use works. Looks like there are a good bit of changes.
> organize an OSS workshop

I can get this started on this with some help from the Vancouver tech podcast team
Thanks @clarkbw this is a cool idea and a great thing we can experiment with in 2017.

Could you put it behind a feature flag so that we can setup some experiments.
@Zacqary I think the vertical layout will help a lot with this.
'Getting Started' link in /CONTRIBUTING.md is dead... I guess it should link to getting-setup.md instead...?
Attaching a conversation between James and I on this topic:

```
hey, i got tripped up thinking about how this feature could be implemented... curious to see if you have a simple idea - https://github.com/devtools-html/debugger.html/issues/1280
12:30 PM i probably am missing something obvious
12:45 PM J<jlongster> yeah, I knew it wasn't going to be super simple because the accordion needs to be updated to listen to new props
12:45 PM I think you can use the `opened` property itself, but make it based on the state. So it would be `opened: this.props.isPaused` or whatever
12:46 PM and the accordion needs to update it's state in `componentWillReceiveProps` to reflect whatever open state is in the latest props
12:48 PM J<jlast> Jason Laster jlongster, yeah - i think we could do that on the caveat that it it's `opened = this.props.opened || this.state.opened so it doesn't close when not paused
12:48 PM  a little counter intuitive, but no biggie
12:50 PM J<jlongster> that's true, the property becomes an initial "kick" to open it but we can make it so it can't ever close it. we can rename the property to make that more clear, like `forceOpen` or something
12:51 PM J<jlast> Jason Laster or shouldOpen
12:51 PM cool. thanks for talking it through
```
Oh, I think that's supposed to be https://github.com/devtools-html/debugger.html/blob/master/docs/getting-setup.md
We have a meetup scheduled for [January 23rd](https://www.meetup.com/VancouverTechMeetup/events/235789664/). Will add more details as we decide on the venue & sponsors.

Planning on going through the resources linked above this week. Looks great so far!
Hmm, it *is* failing, but not for obvious reasons

```diff
diff --git a/src/utils/source-map-worker.js b/src/utils/source-map-worker.js
index ade35e8..634410c 100644
--- a/src/utils/source-map-worker.js
+++ b/src/utils/source-map-worker.js
@@ -20,8 +20,11 @@ const {
   isOriginalId
 } = require("./source-map-util");

-const { setConfig } = require("devtools-config");
-setConfig(DebuggerConfig);
+console.log("YOOOOOOOOO\n\n\n\n");
+dump(`YOOOOOOOOO\n\n\n\n${ JSON.stringify(DebuggerConfig)}`);
+
+// const { setConfig } = require("devtools-config");
+// setConfig(DebuggerConfig);

 import type { Location, Source } from "../types";
```

`DebuggerConfig` is defined, but it looks like `setConfig` fails

```
{"environment":"firefox-panel","baseWorkerURL":"resource://devtools/client/debugger/new/","host":"","logging":false,"clientLogging":false}```





Right on-- I'll support Drew with organizing the meetup, and when I have some free time, I'll have a look at the Getting Started guide and give some thoughts on how the session could look.
closing this as it was too vague
@amitzur is on it
Hmm, this is a really interesting bug and we've seen it come up in other forms as well.

The underlying problem is that there are some bugs with how webpack builds the bundle, where you don't have a guarantee that a module is only bundled once. Consequently, it's possible that there are two places where `clientType` are defined. I'm looking into this as well with the source maps bug.

This fixes the problem, but we'd have to always use the same `getClient` function because of the issue so I'd like to find a better solution.
I wish I could remember the problem. I just remember it ended up being a lot easier keeping this isolated and not pulling in the config, and passing down any config to it. Why is `host` a config variable?
Hey @arthur801031, I hope you don't mind but I took a stab at a slightly different  logic.

I read your `shouldLoad` as asking these two questions
1. has the source changed, and is it loaded
2. has the source just loaded

anyways, those two queries were not fun to write but i think it helps.
Did someone break the favicon path after swapping /index.html and /packages/devtools-local-toolbox/index.html ? It doesn't seem to appear anymore...
> passing down any config to it

not sure how we solve for this...

> why is host a variable

the application does not know what the dev server host is, so it needs to be set

I think this is related to #1351 where the bundle has some weird module scope. I'm going to investigate soon.
yep - thanks for filing @Dalimil. Want to PR a fix?

In an initial look into the structure of source maps, I gathered that the "." is something that webpack places, probably to reflect structure in the consuming dev tools.
i.e. in bundle.js.map of this project the sources entries look like this:
`webpack:///./public/js/main.js`

Having `webpack:///` as the prefix (they could have placed it in the sourceRoot) creates the separate entry (with the cloud icon) and from that point it's just a matter of splitting by "/".

I'll keep updating with more info as I continue to study this.
@jlongster re-running the tests to see if we're green now
it might help to look at 

```js
appStore.getState().sources.toJS()
```

*might work*
```js
appStore.getState().sources.get("sources").map(s => s.get("url")).toJS()
```


to see how we store the URLs
Was not sure if the behavior was expected or not, but I can spend some time trying to find a better solution than this workaround. 
Here's a list of [source urls](https://gist.github.com/jasonLaster/3e6d9944c2ea3a82f575352fd82263c6)

and a script to get it
```js
const sources = Object.values(
  appStore.getState()
    .sources.get("sources")
    .map(s => s.get("url"))
    .toJS()
)

const formattedSources = sources
    .filter(so => so && so.includes("webpack"))
    .sort()
    .join("\n")

console.log(formattedSources);
copy(formattedSources)
```
and ugh that list is way too massive so i created a simplified case: 

To be fair, the only thing we *really* care about here is adding the inferred "*" dir

#### Raw
```
webpack:///Users/jlaster/src/mozilla/debugger.html/assets/images/Svg.js

webpack:///Users/jlaster/src/mozilla/debugger.html/packages/devtools-client-adapters/index.js
webpack:///Users/jlaster/src/mozilla/debugger.html/packages/devtools-client-adapters/src/chrome.js

webpack:///Users/jlaster/src/mozilla/debugger.html/packages/devtools-config/src/feature.js
webpack:///Users/jlaster/src/mozilla/debugger.html/packages/devtools-config/src/test-flag.js
webpack:///Users/jlaster/src/mozilla/debugger.html/packages/devtools-modules/client/shared/components/reps/attribute.js

webpack:///Users/jlaster/src/mozilla/debugger.html/src/actions/ui.js
webpack:///Users/jlaster/src/mozilla/debugger.html/src/components/Accordion.css
webpack:///Users/jlaster/src/mozilla/debugger.html/src/components/Accordion.css?19b6

webpack:///Users/jlaster/src/mozilla/debugger.html/src/utils/menu.js
webpack:///Users/jlaster/src/mozilla/debugger.html/~/charenc/charenc.js
webpack:///Users/jlaster/src/mozilla/debugger.html/~/classnames/index.js
webpack:///Users/jlaster/src/mozilla/debugger.html/~/co/index.js
webpack:///Users/jlaster/src/mozilla/debugger.html/~/codemirror/addon/search/searchcursor.js

webpack:///Users/jlaster/src/mozilla/debugger.html/~/url/~/punycode/punycode.js
webpack:///actions/index.js
webpack:///actions/tabs.js
webpack:///components/LandingPage.css
webpack:///~/ansi-html/index.js
webpack:///~/ansi-regex/index.js
webpack:///~/classnames/index.js
webpack:///~/co/index.js
webpack:///~/css-loader/lib/css-base.js

webpack:///~/webpack/buildin/module.js
webpack:/webpack/bootstrap f2641195698c65f0200c
```

#### Tree
```
|-- webpack:///
|  |-- Users/jlaster/src/mozilla/debugger.html/
|  |  |-- assets/images
|  |  |  |-- Svg.js
|  |  |-- src
|  |  |  |-- actions
|  |  |  |  |-- ui.js
|  |  |  |  |-- Accordion.css
|  |  |  |  |-- Accordion.css?19b6
|  |  |  |-- utils
|  |  |  |  |-- menu.js
|  |  |-- packages/devtools-client-adapters
|  |  | |-- index.js
|  |  | |  |-- src
|  |  | |  |  |-- chrome.js
|  |  |-- ~
|  |  |  |--charenc
|  |  |  |  |--charenc.js
|  |  |  |--classnames
|  |  |  |  |--classnames.js
|  |-- . 
|  |  |-- actions
|  |  |  |-- index.js
|  |  |  |-- tabs.js
|  |  |-- components
|  |  |  |-- LandingPage.css
|  |-- ~
|  |  |-- ansi-html
|  |  |  |-- index.js
|  |-- webpack
|  |  |-- bootstrap f2641195698c65f0200c
```
@jasonLaster alternatively, it looks like using https://www.npmjs.com/package/single-module-instance-webpack-plugin also fixes the issue here.

edit: looks like this should be coupled with [webpack.optimize.DedupePlugin](https://webpack.github.io/docs/list-of-plugins.html#dedupeplugin), which should not be used in watch mode (our case ?). Not sure which way to go either.
looks good, i'm going to try pulling it for the source maps issue as well
@jlongster ahah, this was the problem you ran into `devtoolsRequire` is not a function in source map worker. 

We run into this problem because `devtools-config/feature` tries to `require("./test-flag")` which maps to a devtoolsRequire.

I fixed this by removing the `isTesting` function is feature.js and the one call site, which wasn't necessary. If we want some globals to debug a test they're easy to get :)
Thanks @Dalimil 

mind adding a unit test here as well
https://github.com/devtools-html/debugger.html/blob/master/src/utils/tests/sources-tree.js

I forgot to mention it in the description, but source trees are really complex and tests help :)
I thought I would just be able to change line 92 (`app.use(express.static("assets/build"));`) of `/packages/devtools-local-toolbox/bin/development-server.js` but I'm unable to reach the favicon.png filepath for some reason. 
Ideas:

1. we should make it really clear how to run targets from the landing page
2. we could add a terminal instruction
3. we could point people to a section of the getting started doc for runnign targets
Ideas:
- fail if any of the lints fail
- make a snazzy node script that makes it clear what will run and afterwards what the results were
@Dalimil good thought.

my bet is that it would be easier if we move the favicon to a directory in the toolbox... 

not too much context here though, so your guess is as good as mine
@jasonLaster I don't mind. The code looks great!  :)
Great fix @Dalimil. That's a really cool edge case
@kdzwinel I'm blown away by how elegant this PR is.

I really like how you focused on flipping the `vertical` state and everything else flowed from there. You're a react natural!
That would be good to add to the docs somewhere 
@jasonLaster Can I get the next "easy" task? I see tasks are getting assigned imediatly after creation :)
Hi @jasonLaster @clarkbw 

I'm not sure where to pass a reference of the sources tree to `SourceTabs.js`. I've looked at `SourcesTree.js`, `sources-tree.js`, `tree.js`, `ManagedTree.js`, and `Sources.js`, and I'm still confused... Please help. Thank you!
Hmm, @amitzur perhaps chrome's devtools source map interprets the URLs differently

![screen shot 2016-11-30 at 9 20 52 am](https://cloud.githubusercontent.com/assets/254562/20755836/61200132-b6de-11e6-8488-28b81b598284.png)


The best thing to do might be to see if we want to update how the source map worker builds the URL paths to include a "." there
@andreicristianpetcu interested in claiming this one? It's marked as medium, but is not too bad :)
> the application does not know what the dev server host is, so it needs to be set

What does it use `host` for though? Whatever it uses it for, it seems like that could be hardcoded as part of the build process for generating the app. The real product is going to be a downloading app, it's not going to need a running server anywhere.

I'd like to avoid adding the complexity of pulling in the config in the sourcemap server and removing `isTesting` just for a temporary fix for the app. The app can hardcode it if needed for now and when it's a normal app it will run the server itself.
I've been trying to test this change against http://wbamberg.github.io/example-websites/source-mapping/index.html but I'm not seeing the source mapped files anymore.  I'll look more into it and file another issue.
Thanks for bringing up the question about `host`. This forced me to go back and look at some assumptions.

1. I think `host` is a bad name. A better name is `devServerOrigin`.

2. We can remove the config field and have a query:

```js
location.origin == "file://" ? "http://localhost:8000" : location.origin
```

the drawback with this approach is that the landing page also needs the dev server origin, so this would be duplicated logic.

3. how does this affect the app

At the moment, the electron app opens `file://index.html` which pulls in `localhost:8000/assets/bundle.js`. 
* This system is naive, but does avoid some issues with instantiating workers with a cross origin asset. 
* At the moment, we're running a separate `application.json` config when the app is running. This could also change.
* I'm going to play with an application development server as well as realistic options for hosted / cached assets at somepoint and will re-evaluate some of these decisions.

---

At the moment, I prefer keeping the `devServerOrigin` config field and removing the `devtools-config` isTesting piece. (what's in the PR now)

But, I'm open keeping the isTesting requirement and dropping the devServerOrigin field as that does require the source-map-worker to have the config. 

I don't feel too strongly here. Sorry for the book, there's a lot of context here :)
Really cool! 

Lets make sure we can schedule the design time to land this in Q1
Hey @arthur801031 that's a genuinely difficult problem :)

I recommend doing this to get `revealSource` working and we can brainstorm a good approach on thursday.

Generally, I'm not sure what the best way for one react component to talk to another is if not through redux. @jlongster any suggestions?


```diff
diff --git a/src/components/SourceTabs.js b/src/components/SourceTabs.js
index 20a7e8e..e627640 100644
--- a/src/components/SourceTabs.js
+++ b/src/components/SourceTabs.js
@@ -114,6 +114,16 @@ const SourceTabs = React.createClass({
       click: () => closeTabs(tabs)
     };

+    const revealSource = {
+      id: "node-menu-close-all-tabs",
+      label: closeAllTabsLabel,
+      accesskey: "A",
+      disabled: false,
+      click: () => {
+        tree.revealSource(tab.url);
+      }
+    };
+
     showMenu(e, buildMenu([
       { item: closeTabMenuItem },
       { item: closeOtherTabsMenuItem, hidden: () => tabs.size === 1 },
diff --git a/src/components/SourcesTree.js b/src/components/SourcesTree.js
index fe5ce95..37978b1 100644
--- a/src/components/SourcesTree.js
+++ b/src/components/SourcesTree.js
@@ -139,6 +139,7 @@ let SourcesTree = React.createClass({
       onFocus: this.focusItem,
       renderItem: this.renderItem
     });
+    window.tree = tree;

     return dom.div({
       className: "sources-list",
diff --git a/src/components/utils/ManagedTree.js b/src/components/utils/ManagedTree.js
index 289dc2b..6cada38 100644
--- a/src/components/utils/ManagedTree.js
+++ b/src/components/utils/ManagedTree.js
@@ -29,6 +29,10 @@ let ManagedTree = React.createClass({
     }
   },

+  revealSource(url) {
+    // ...
+  },
+
   focusItem(item) {
     if (!this.props.disabledFocus && this.state.focusedItem !== item) {
       this.setState({ focusedItem: item });
```
I think the flag will be useful down the road, and we've used a similar flag before in devtools. One use case is only enabling assertions in dev/test mode for performance reasons. I could definitely see us wanting to do that. There are are things that we probably could enable in dev/test mode. The reason it's different than dev mode is because because Firefox in production mode is run on try.

I think it's a good thing for workers not to require the config, and instead be explicitly configured. It makes them more isolated. Sourcemaps in fact will be moved to the toolbox so that's a perfect use case; it can't depend on the config but needs to be configured externally.
> Generally, I'm not sure what the best way for one react component to talk to another is if not through redux. @jlongster any suggestions?

You're not really supposed to. The closest you should get is passing props down that happen to affect the state.

You should somewhere maintain state that is a list of sources that should be opened in the source tree, and then pass it down into the tree as items that it should make sure are expanded. This is transient state: a later rendering of a different list will not force the other sources to be closed, you're just telling the source tree "make sure these nodes are expanded".

You'll need to add that functionality to the `ManagedTree`. Take an array of items and make it automatically add those to the `expanded` local state.

Now it's a question of where you store this list. It's probably easiest to do it in redux. You could probably add it to the `ui` reducer, and then it's just a matter of creating a new action and making the `SourceTree` subscribe to it.

Thanks, one point here is that having the state in `redux` means that if the source tree is re-rendered it will expand to that source.

We can always clear that value later too.
This is blocked by #1364 
This is blocked by #1364 

happy to take this off your plate if you've got a lot.
@bjorn3 I believe that's a different issue, but also important.
#1327 landed
@amitzur is working on this
Hey @montogeek have you had a chance to take a stab at this?

If so, let me know if you're blocked or have any questions. happy to assist
@jasonLaster I am so sorry, this week I am busy. I can start working on it this weekend
no worries. not time sensitive :) 
That's a good point. This is a problem generally with transient state. We'll have to think of a way to solve it. Sometimes there is a better way to structure things but I can't think of a way off the top of my head.

It's OK to use refs sometimes in the parent, but reaching across the entire tree like this is just wrong. It breaks encapsulation of the component. There is a lot out there on transient state with redux so we could look at patterns that others are using.

Another option would be for the source tree to simply not use `ManagedTree`, but use `Tree` instead and store the tree state in redux. That way you're free to manipulate it however you please. `SourceTree` would then use actions and such to expand items.
I like ours better, what's the issue exactly? The only thing mentioned is that it's different from Chrome, why is that a bad thing?

And yes, this is definitely because of how sourcemap URLs are resolved. This is part of the `source-map` library and definitely can't change because it would be backwards incompatible and that library is basically frozen (unless there are major problems with a feature, but those have mostly been worked out over the years).
I'll try it out @jasonLaster. I will look at it next week if it's not an urgent issue.
Probably worth looking into still, I *think* it's because we give the `source-map` library a sourcemap and it gives us back URLs, and it resolves things to solve a of use cases. Check the input sourcemap and the output original URLs.
> Check the input sourcemap and the output original URLs.

Good idea. If there's nothing we can do there, we can close this.

I prefer having a "." directory as it nice to have ".", "~", "webpack" as sibling dirs. 

In reality, the better fix would be to have directories that line closer with what is on disk, which is the direction the chrome team is headed in.
As far as I can tell this work was already done.
> I prefer having a "." directory as it nice to have ".", "~", "webpack" as sibling dirs.

I guess I don't understand where `.` is coming from: if the URL in the sourcemap is `webpack:///actions/index.js` (which you pasted above) it makes sense that it would map `/actions/index.js` to a top-level `actions` folder with `index.js` inside of it.

> In reality, the better fix would be to have directories that line closer with what is on disk, which is the direction the chrome team is headed in.

Sourcemaps are completely made up, so it's up to whatever is generating the sourcemaps to do that. I don't see how we could do anything else when dealing with sourcemaps. We use whatever the tool generates, so if it's not generating ideal URLs, the tool needs fixing, not us (for the most part, there may be some things we can do of course)
perhaps - @Dalimil mind PRing that fix?
@wldcordeiro It was but then the project structure changed and the favicon path stopped being valid and it disappeared again...
Thanks for sharing.

@jnachtigall would you like to try and submit a fix?

I think the patch would look something like this?

I don't have a windows computer, so it is tough for me to asses.

Here's our [getting started](https://github.com/devtools-html/debugger.html/blob/master/docs/getting-setup.md) guide, it should be ~ 5 mins.

```diff
diff --git a/src/components/CommandBar.js b/src/components/CommandBar.js
index 22d4663..dcba347 100644
--- a/src/components/CommandBar.js
+++ b/src/components/CommandBar.js
@@ -53,15 +53,20 @@ const CommandBar = React.createClass({

   componentWillUnmount() {
     const shortcuts = this.context.shortcuts;
-    shortcuts.off("F8", this.props.resume);
-    shortcuts.off("F10", this.props.stepOver);
-    shortcuts.off(`${ctrlKey}F11`, this.props.stepIn);
-    shortcuts.off(`${ctrlKey}Shift+F11`, this.props.stepOut);
+    shortcuts.off("F8");
+    shortcuts.off("F10");
+    shortcuts.off(`${ctrlKey}F11`);
+    shortcuts.off(`${ctrlKey}Shift+F11`);
   },

   componentDidMount() {
     const shortcuts = this.context.shortcuts;
-    shortcuts.on("F8", this.props.resume);
+    shortcuts.on("F8", (_, e) => {
+      e.stopPropogation();
+      this.props.resume();
+    });
+
+    // repeat for other handlers
     shortcuts.on("F10", this.props.stepOver);
     shortcuts.on(`${ctrlKey}F11`, this.props.stepIn);
     shortcuts.on(`${ctrlKey}Shift+F11`, this.props.stepOut);
```


I think there's some confusion here, which I intend to resolve by resorting to the increment example.
I'm going to show 3 ways to create the source maps, and include what chrome and debugger.html do for each.
The bottom line IMO is, whatever the source maps generated should be reflected in the sources pane. Seems like `source-map` does its job, as @jlongster mentioned, but the client should construct a tree in a optimally visual way (e.g. merge folder levels).

### 1) webpack
Right now, bundled with webpack, this is the source map (extracted from [bundle.js.map](https://github.com/devtools-html/debugger.html/blob/master/src/test/examples/increment/bundle.js.map))
```
webpack:///webpack/bootstrap 4f282b30eeca6ec69a5d
webpack:///./increment/example.js
webpack:///./increment/increment.js
webpack:///./increment/math.j
```

So, it's obvious where the "." comes from. And here's how it shows up in chrome and debugger.html (we can see that debugger.html drops the "."):
![screen shot 2016-12-01 at 15 06 30](https://cloud.githubusercontent.com/assets/394320/20795284/02a773c8-b7d9-11e6-804f-8524a2b1cfbb.png)
![screen shot 2016-12-01 at 15 28 09](https://cloud.githubusercontent.com/assets/394320/20795626/cf1e0b1e-b7da-11e6-9034-5c1433757251.png)

### 2) browserify
Now, if I bundle the example sources with browserify using this line:
`browserify example.js --debug | exorcist bundle.js.map > bundle.js`
Then this is the source map:
```
../../../../../../../../usr/local/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js
example.js
increment.js
math.js
```

And I get these results (notice that debugger.html shows better separation between the bundle and the source mapped sources):
![screen shot 2016-12-01 at 15 32 15](https://cloud.githubusercontent.com/assets/394320/20795769/922085ba-b7db-11e6-8fbd-cd37e59df697.png)
![screen shot 2016-12-01 at 15 30 56](https://cloud.githubusercontent.com/assets/394320/20795772/943c38ee-b7db-11e6-82f6-639c35533908.png)

### 3) browserify with sourceRoot URI
And finally there's the ability to also specify the sourceRoot with the browserify way, and if it's with a URI protocol prefix:
`browserify example.js --debug | exorcist bundle.js.map --root=browserify:/// > bundle.js`

Then it's the same source map, except for sourceRoot, and it shows up like this:
![screen shot 2016-12-01 at 16 57 36](https://cloud.githubusercontent.com/assets/394320/20798399/5dacc008-b7e7-11e6-8f52-9dd263dfe483.png)
![screen shot 2016-12-01 at 16 57 57](https://cloud.githubusercontent.com/assets/394320/20798404/5f4c5da6-b7e7-11e6-977b-5e2ce7b70fdd.png)


These are all failures in the docker/mochitests, not flow, i'm going to rerun this
I would like to take a stab at this over the weekend.
So first, the `devtools-sham-modules` tree component with `autoExpand(roots[0], 0);` will throw an undefined error for an empty `roots` array so that had to be fixed. I wasn't quite sure if this should be filed in Bugzilla for the whole devtools project or if this code is local only to the debugger.html project...
Then I was trying to implement a source tree ordering that would be similar to the one used in Chrome - they keep the root domain on top and then only alphabetically sort the rest. (see the attached screenshot - `www.mozilla.org` needs to go before `www.google-analytics` even though `g` is before `m` ). 
![screenshot_2016-12-01_22-26-54](https://cloud.githubusercontent.com/assets/4202539/20815811/5b077912-b817-11e6-873b-a02cd46926fe.png)
I just pinned the first group of sources to the top - which in most cases happens to be the domain corresponding to the opened tab but I think to implement this properly you'd need to change the way that reducers mergeIn a new source on `ADD_SOURCE` action or somehow keep track of the tab URL so that it can be compared later...
This looks really good.

Mind trying to add some unit tests here for the source-tree utils?

Roping in @gregtatum who has lots of source-tree experience.


Thanks @liorpr!

Mind giving some context on what wrong and what the fix was?

This looks like a mystery to me!
Thanks @liorpr!

Mind giving some context on what wrong and what the fix was?

This looks like a mystery to me!
But it's not ideal, because it always picks the domain of the first script it receives as the top one... Keeping track of the tab url in the sources-tree would require more work + I'm not sure which group should be expanded when a website has all its scripts hosted externally. 
Haha that's a really interesting problem. 

Perhaps we create a new issue for sorting domains. I don't want to clutter those issue
https://github.com/devtools-html/debugger.html/issues/1374
It seemed like the border of the editor div(where the code is mounted with CodeMirror) was taking over so I just subtracted 1px from the tab and added 1px  as a (transparent) border

@jasonLaster 
Uhoh. We'll definitely look into that. 

Hmm. Could you try creating a test case?

Also is it possible for me to go to your page?
Minimal reproduction:
```javascript
localStorage[1] = "a test";
localStorage[2] = "a";
localStorage[66261280] = "another test";
let data = JSON.parse(JSON.stringify(localStorage));
console.log(data) // Put breakpoint here
```
Needs two low numbers and then a high number.
Happens with me every time. Even if I put the focus inside the file and don't use ctrl+p.
Its a database key.
Screencast debugging debugger.html while debugging the snippet above: https://vid.me/OoQd.

Crash location: resource://devtools/client/debugger/new/bundle.js:22647

Note: mouse position seems to be off quite a bit.

I am confused as to whether debugger.html has _any_ kind of tooltip when hovering any kind of variable variable.  The initial description here implies that it does (and requests an enhancement for the function-valued variables), while #1293 (marked as a duplicate of this issue) implies that it doesn't... Can anyone clarify?
Sorry it's not clear. 

We're missing the tooltip, but that'd be a great next step. 
> I am confused as to whether debugger.html has any kind of tooltip

My initial bug report was about the Firefox devtools as they existed at the point when I filed the bug.  I was told to file it in this repo.  Those devtools did have a tooltip, but it was missing some information I wanted.  The change to debugger.html then removed even the info that we _used_ to have.  :(
And I think marking https://github.com/devtools-html/debugger.html/issues/1293 as a duplicate of this one wasn't correct; if this issue is resolved as written we'll have the link to the function definition, but not the info https://github.com/devtools-html/debugger.html/issues/1293 is asking for!
Sorry for the regression :/. 

The debugger was a total rewrite. I'll clean up the issue description soon as we have a much better product doc in the works. 

In reality, were not great about talking about upcoming work. We should get a lot better on that front!

We're planning on having a link to the definition and a formatted variable. 

We also want some goodies like add to watch expression. What extra info are you looking for?


I believe this is addressed by our recent vertical layout PRs. However I don't think that has been pushed upstream to nightly yet or dev edition.
The extra info that used to be there was some information about scope chain, as I said.  It doesn't have to be in the popup, if it's accessible some other way.
@wldcordeiro Thanks for info. Is there a way to see which version is deployed in Nightly or Dev edition? Something like `<some-global-debugger-object>.VERSION` (`VERSION` being a time snapshot or similar)

Also, since I use Dev edition for work and face with many issues with the new debugger, an uplift outside of the 6 weeks train schedule would be very much appreciated.
@jnachtigall We don't currently export a version number, but that is a great idea. I'll file an issue for it.
Ctrl+F works for me when focus is set (Windows 10 and Ubuntu). But AFAIK shortcuts are OS dependent, @bjorn3, which OS do you use?
I will have a meeting scheduled in January end with my community Reps to discuss more about this! we have been into different camps and initiatives like Rust, WebVR etc. and introducing this as an activity will give us more insights from the community.
@jnachtigall macOS
Going through the documents:
*I really loved the restructuring of documents. they seem to be very clear
*# create a new terminal tab and # close firefox if it's already running : this comment will definitely solve the one mega problem for a newbie in getting started. two of the people i introduced this project got struck up here and this comment will help them now.
*Including images instead of using image links?
refer: line 41 in [getting-setup.md](https://github.com/devtools-html/debugger.html/blob/master/docs/getting-setup.md)
Any reason on why we open images in new tabs? I believe guides generally show the screenshots along with the instructions no?

When it comes to a talk, there are two possibilities of talks.
*one: a talk to contributors asking them to join our project and contribute. I believe we have enough resources in giving a talk and helping them to get involved.
*two: a talk to increase the User base. A talk giving them an overview of debugger.html, in what scenario is it useful? who is it for? a guide to debugging a webapp using this debugger? when to prefer devtools and when to prefer debugger.html? 
I m still not aware of how debugger.html should be preferred over devtools to debug my web applications. Having such guide would be really helpful to understand this webapp. 
Thanks for sharing @nickolay! And thank you for the perf analysis as well.

SMP seems pretty inefficient on the surface. I apologize, I've tested the perf on chrome, but this regression is unacceptable and we will fix it.

By the way, it might get worse before it gets better :)

https://github.com/devtools-html/debugger.html/pull/1372

I think what we might need to do, is find a way to tree shake at compile time and avoid the problem all together.

@jnachtigall is this what you're running into: https://github.com/devtools-html/debugger.html/issues/856?
> Including images instead of using image links

I didn't want to affect the readability... but i could be off here and maybe i crop them vertically too...

> a talk to contributors asking them to join our project and contribute

Yeah, I like the talk format where the subject is how the debugger works and the call to action is contribute.

> I m still not aware of how debugger.html should be preferred over devtools

:) I think this is a major bug in our documentation! The debugger.html project *is* the devtools debugger. I'll update the docs to make this more clear. I'll also add docs on how you can see your changes immediately in firefox, while it's rare and requires downloading and building firefox we should provide instructions on how to do it.
Nice find!

We recently opened a PR for stopping propagation on function shortcuts like F8. https://github.com/devtools-html/debugger.html/pull/1373/files

Here's what I see. Is that what you get?

![](http://g.recordit.co/bAQn58GlPw.gif)

I think the right UX would be to just suppress the handler and do nothing. We don't really have a file to search...
@jnachtigall that is *quite* bad. 

* I'll add a quick 5mb file example so that it is easy for others to test this
* Would it be possible for you to reach out me at jlaster at mozilla <dot> com? It'd be nice to get some more information here

@clarkbw, @Garbee, @viswanathamsantosh mind investigating as well?
Just took a look and you're absolutely right. It looks like there is tremendous GC pressure with all of the new strings created.

<img width="1259" alt="screen shot 2016-12-06 at 1 01 19 pm" src="https://cloud.githubusercontent.com/assets/254562/20937263/34fbaa5e-bbb4-11e6-86ea-9973d0d46220.png">

@juliandescottes looks like we should start caching those sanitized module strings! 

Looks great in firefox and chrome

![](http://g.recordit.co/Br5ulsD1t4.gif)
Sorry that this sat @Dalimil I was traveling on the past three days :/

This is some great work, but I'm noticing that the "first source" rule might be racey. 

I got this when i went to mozilla.com.

<img width="787" alt="screen shot 2016-12-06 at 1 13 33 pm" src="https://cloud.githubusercontent.com/assets/254562/20937680/f980fbda-bbb5-11e6-81f1-ad2b927b97cc.png">
<img width="895" alt="screen shot 2016-12-06 at 1 12 20 pm" src="https://cloud.githubusercontent.com/assets/254562/20937679/f97fe682-bbb5-11e6-868a-cf98ead1076f.png">

How about with this PR we drop the domain sorting and then do it properly in a new issue. I agree that we want to use the tab URL as the point of reference. I'll stub out a reducer update that stores it.
> Here's what I see. Is that what you get?

@jasonLaster Yes, the native searchtool opens instead of the debugger's in-file search. Whereas for @bjorn3 it seems like the debugger's in-file search is not available at all on macOS
> @jnachtigall is this what you're running into: #856?

I looked at #856 already before opening this bug and it's hard to tell because there's no screenshot and only a few words in the report there. I'd say it's something different. 

But you can simply side-dock the devtools in Nightly and try to use resize the splitters of the debugger - it's not working at all. So should be very easy to reproduce.
@jasonLaster I'll look into this tomorrow. And in case I cannot reproduce with your 5mb.js file then I'll try to send you a minimal working example by mail.
Yeah, the right sidebar splitter has its issues for sure

![](http://g.recordit.co/22uDFijXxg.gif)

This is something we knew and decided it wasnt a release blocker even though it is frustrating.

We now have vertical mode and will fix the splitter in this case and the zoomed in case soon. I'm sorry its frustrating at the moment. 
Albeit the UX issues you seem to be able to resize at least. In my case (monitor resolution 1920x1080) I cannot resize at all. So the image above in 1378#issue-193480486 is static, that's no dragging of the splitters possible at (not sure if this was clear).
Is "the list" in the first checkbox "the list of event listeners"?
yeah, the list is the list of event listeners
Just added a cache and saw requires went down from 6 seconds to 1 second.

https://github.com/jasonLaster/single-module-instance-webpack-plugin

<img width="1433" alt="screen shot 2016-12-06 at 3 16 43 pm" src="https://cloud.githubusercontent.com/assets/254562/20942307/e0ac37ba-bbc8-11e6-9693-77b747f08bf7.png">

OK, makes sense.
This appears to be fixed and ticket should be closed.
Thanks @Dalimil! 
Thanks, I still think though that is valid from above:

> You might also want to check the separating line between line number and content. There's no such separating line in VSCode or Sublime and to me it irritates the eye especially when this line hits the tabs header.

Created #1394 for it for further discussion...
@jnachtigall Thanks! Heh, missed it. I think it'd be nice to make `VERSION` equal to a format like `x.y.z-git-hash` this way it shows our planned version numbers that will be published to npm/Firefox and then in development you'll have a hash to check against.
@jasonLaster I tried to do a profiling with this example. Strange thing is that I cannot even see the 5mb.js in the Sources panel:
![2016-12-07 13_29_56-firefox debugger - firefox developer edition](https://cloud.githubusercontent.com/assets/3307404/20967844/94f713ee-bc81-11e6-86ac-79a1aebf73a1.png)

@jasonLaster I tried with my big file, all the same: Does not even turn up in the sources panel. Only after deleting many, many lines out of it, it shows up. Here's the code:
```html
<html>
  <head>
    <title>Large Files</title>

    <!--  5mb JS file-->
    <!-- This does not show up in the Debugger's sources panel: -->
    <!--<script src="https://rawgit.com/jasonLaster/20e76123b0c1f1e3584261c7f0c7d60f/raw/1177fc5d37804663dd20b389f468c2150fac8eaf/5mb.js"></script>-->
    
    <!-- This does not show up in the Debugger's sources panel: -->
    <!--<script src="https://rawgit.com/jnachtigall/b6a9071ccb2da6605c5ff1b5c4e1f4aa/raw/9ed2617dcae2112801c5923e3182a3447657fd98/debugger-test.js"></script>-->

    <!-- This WORKS, it's the file as above but much truncated: -->
    <script src="https://rawgit.com/jnachtigall/b6a9071ccb2da6605c5ff1b5c4e1f4aa/raw/85ace6c5c14a36c7b067c3d69fa6be1994f7b8e1/debugger-test.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
  </head>

  <body>
  </body>

</html>
```

Giving up for now...
LGTM!
Strange! I cannot see the 5mb.js file in the source panel. However i was able to find the jquery.js file. Regarding the browser not responding, I always face this issue when i open a tab to debug irrespective of the size of js file.

System configuration is Intel(R) Core i5-4200U CPU @ 1.6Ghz 2.30 GHz with 6:00GB RAM.
this is definitely the case when debugging chrome. I thought we had locked this down w/ firefox.

thanks for sharing
Nice idea!

It's kinda funny that we don't have an obvious debugger global object to namespace it in.

Also, yea using the SHA makes sense. 
I don't think we want to semver the debugger yet...
Here's a patch for how I would do it:

```diff
diff --git a/packages/devtools-local-toolbox/webpack.config.js b/packages/devtools-local-toolbox/webpack.config.js
@@ -69,7 +69,8 @@ module.exports = (webpackConfig, envConfig) => {
         NODE_ENV: JSON.stringify(NODE_ENV),
         TARGET: JSON.stringify(TARGET)
       },
-      "DebuggerConfig": JSON.stringify(envConfig)
+      "DebuggerConfig": JSON.stringify(envConfig),
+      "VERSION": JSON.stringify("do some git foo w/ a lib or a shell command")
     })
   );
 
diff --git a/src/main.js b/src/main.js
index 44cb9ec..57804ce 100644
--- a/src/main.js
+++ b/src/main.js
@@ -32,6 +32,7 @@ if (!isFirefoxPanel()) {
 }
 
 window.appStore = store;
+window.debuggerVersion = VERSION;
 
 // Expose the bound actions so external things can do things like
 // selecting a source.
```
oops, sorry created a dupe here #1400
Yes, it will!

That's a great point. Thanks for connecting it to the use case of copy pasting it into the url bar. I would have totally replied, differently had you not mentioned that :) 

It's nice to distinguish between pretty and ugly code but not at the expense of hurting the user.

P.S. way to keep punk themes and mootools yui alive!
Here's a quick patch to get started

```diff
diff --git a/src/components/SourceTabs.js b/src/components/SourceTabs.js
index 20a7e8e..11b3810 100644
--- a/src/components/SourceTabs.js
+++ b/src/components/SourceTabs.js
@@ -8,7 +8,7 @@ const {
   getSourceTabs,
   getFileSearchState
 } = require("../selectors");
-const { getFilename } = require("../utils/source");
+const { getFilename } = require("../utils/source", { excludeFormatted: true });
 const classnames = require("classnames");
 const actions = require("../actions");
 const CloseButton = require("./CloseButton");
@@ -148,7 +148,7 @@ const SourceTabs = React.createClass({
 
   renderDropdownSource(source) {
     const { selectSource } = this.props;
-    const filename = getFilename(source.toJS());
+    const filename = getFilename(source.toJS(), { excludeFormatted: true });
 
     return dom.li({
       key: source.get("id"),
diff --git a/src/utils/source.js b/src/utils/source.js
index 4e08a05..c44ab59 100644
--- a/src/utils/source.js
+++ b/src/utils/source.js
@@ -66,7 +66,7 @@ function getPrettySourceURL(url: string): string {
  * @memberof utils/source
  * @static
  */
-function getFilename(source: Source) {
+function getFilename(source: Source, { excludeFormatted: false } = {}) {
   const { url, id } = source;
   if (!url) {
     const sourceId = id.split("/")[1];
@@ -74,6 +74,11 @@ function getFilename(source: Source) {
   }
 
   const name = basename(source.url || "") || "(index)";
+
+  if (excludeFormatted) {
+    name = name.replace(/:formatted$/,"")
+  }
+
   return endTruncateStr(name, 50);
 }
 ```

@darkwing interested in grabbing this one? We've refined the [getting started](https://github.com/devtools-html/debugger.html) process since July. And, I remember, tab titles are your baby :)

> A light yellow background on the "(index)" row

I think that it being on the top will help a lot. I'm in favor of something that distinguishes it, but a yellow background sounds jarring. perhaps italicized, or slightly grayer font, or different color?

> Always show the hostname for "(index)" at the top of the left side list

Yup, #1374 

ahah! I think we need to bump the yarn lockfile too!
Closing as #1374 should address the issue.
>  I cannot see the 5mb.js file in the source panel.

@viswanathamsantosh Me neither. I had this reported in https://github.com/devtools-html/debugger.html/pull/1384#issuecomment-265435911 (Sorry, should have shared before) @jasonLaster maybe open a separate bug for the large file not being visible in the source panel?

@jasonLaster  n00b question: am I doing something wrong or is there some issue with the build? It used to work last week.

```bash
$yarn install && yarn start
...
...
...
ERROR in ./~/devtools-client-adapters/index.js
Module not found: Error: Cannot resolve 'file' or 'directory' ../utils/debug in /home/andrei/Dev/debugger.html/node_modules/devtools-client-adapters
 @ ./~/devtools-client-adapters/index.js 4:24-49

ERROR in ./~/devtools-client-adapters/index.js
Module not found: Error: Cannot resolve 'file' or 'directory' ./firefox/create in /home/andrei/Dev/debugger.html/node_modules/devtools-client-adapters
 @ ./~/devtools-client-adapters/index.js 5:25-52

ERROR in ./~/devtools-client-adapters/src/firefox/commands.js
Module not found: Error: Cannot resolve 'file' or 'directory' ../../tcomb-types in /home/andrei/Dev/debugger.html/node_modules/devtools-client-adapters/src/firefox
 @ ./~/devtools-client-adapters/src/firefox/commands.js 1:15-43

ERROR in ./~/devtools-client-adapters/src/chrome/commands.js
Module not found: Error: Cannot resolve 'file' or 'directory' ../../tcomb-types in /home/andrei/Dev/debugger.html/node_modules/devtools-client-adapters/src/chrome
 @ ./~/devtools-client-adapters/src/chrome/commands.js 1:15-43

ERROR in ./~/devtools-client-adapters/src/chrome/events.js
Module not found: Error: Cannot resolve 'file' or 'directory' ../../tcomb-types in /home/andrei/Dev/debugger.html/node_modules/devtools-client-adapters/src/chrome
 @ ./~/devtools-client-adapters/src/chrome/events.js 34:15-43

ERROR in ./~/devtools-client-adapters/src/firefox/commands.js
Module not found: Error: Cannot resolve 'file' or 'directory' ../../utils/defer in /home/andrei/Dev/debugger.html/node_modules/devtools-client-adapters/src/firefox
 @ ./~/devtools-client-adapters/src/firefox/commands.js 5:12-40

ERROR in ./~/devtools-client-adapters/src/firefox/create.js
Module not found: Error: Cannot resolve 'file' or 'directory' ../../tcomb-types in /home/andrei/Dev/debugger.html/node_modules/devtools-client-adapters/src/firefox
 @ ./~/devtools-client-adapters/src/firefox/create.js 1:15-43
```

I have Fedora 24 with node v6.9.2 installed locally with ndenv.
Thanks @leibale!

Could we keep the footer on the bottom, without overlaying the tabs?
By "bottom" you mean bottom of the window (and not bottom of the page)?
yup - bottom of the window

OK, Will do it soon
> Can we avoid stop propagation as we're listening on the window? Not much higher to go!

I tried this but I believe if you don't stop propagation the event is bubbled out of the window context because this is a key the browser / OS handles.  I tried using just one or the other and it required both to be used in order to stop the default action from happening.

> Also I wonder if you could add a helper
> 
> stopPropogation(() => this.stepIn())

Sounds like a good plan.  Will update soon.
Sorry I did not catch this message on time, I will take a look on this now
Happily, thanks.
I gave it a bit more thought and I want to say maybe the better solution is not to generate a single stylesheet which has both LTR and RTL rules, but rather generate 2 stylesheets and use them conditionally on the desired direction.

That will prevent css bloat, which as we add more features and style might become a real problem.
@amitzur good point, although doesn't sound MVPy :)

we can always add that in later
Hmm, we might want to do conditional statements for margin-inline-start and other firefox features

http://www.quirksmode.org/css/condcom.html
Hi @jasonLaster

I got it working! But I'm failing a test in`src/utils/tests/sources-tree.js`. I'm trying to debug the code in this test file. Could you help me out with node testing/debugging in Thursday's office hours if I haven't resolved the issue before then?

Thank you!!


Hmm, I'm traveling this week so i wont be at office hours. Happy to pull it down locally tomorrow and try though
> I gave it a bit more thought and I want to say maybe the better solution is not to generate a single stylesheet which has both LTR and RTL rules, but rather generate 2 stylesheets and use them conditionally on the desired direction.

I do not like this solution for RTL styles. These are modifications against given components and having them as an additional sheet entirely could lead to rule wonkyness to get the specificity right where it otherwise wouldn't be needed. Everything for a given component should be isolated to itself. The RTL styling shouldn't be too much overhead if we do things well enough. Further, as far as the DevTools is concerned this is an inclusive app preloaded onto developers systems, so there is no real overhead that cutting the styles in two solves.
The reason is `postcss` changed its node/container api therefore it didn't expose `node.each` method to plugins, which lead to `tcomp` type check fail.  

Current `postcss-bidirectional` implementation needs `node.each` method to traverse declarations in each node, modify it and then append the cloned node with reversed syntax after current node.

I can rewrite the logic to produce the same result.
generate 2 separate  stylesheets are not a common practice and rtl styles does not have much performance overhead so I don't recommend it.
I think the less-risky way for `debuggrer.html` might be to keep using firefox supported syntaxes at this moment, and only include `postcss-bidirectional` for cross browser build. The additional task is to add margin-left transpiler rule in `postcss-bidirectional` untill firefox support `margin-inline-start` natively.

EDIT: for simplicity and the 'do one task' principle of postcss, I could create a separate `postcss-margin-inline` plugin, therefore we can use ideal `margin-inline-xxx` in codebase, config webpack to generate proper syntax to firefox with `postcss-margin-inline` plugin, and generate cross-browser syntax with `postcss-bidirectional` plugin.
Hi @jasonLaster

I have resolved all the previous issues. Please check!
I have finished the following tasks:
- [x] Rebase
- [x] Resolve failing test
- [x] Remove the list of items from redux
- [x] Use `setState` instead of redux
 
Thank you very much!
That's a nice idea. We now have a draggable library that could help. 

The big blocker is identifying the UX we want. If someone could writeup what other editors do that would help.
I think the UI is pretty much the same everywhere:

1. Your left-click (and hold) on the tab header
2. While holding you move the mouse somewhere else on the "tab panel" 
3.a) Drop on the tab panel: Whereever you drop (release left mouse), the tab will be put into that place effectively rearranging the order
3.b) Dropping anywhere else or pressing ESC in between: Nothing happens

I've never seen it anything else. In the end just do it like the Firefox Tabs work and it should be fine and a UX users have learnt and are familar with  ;)

The `action` object doesn't seem to contain the URL - there is no `action.value`...
Hi guys, are we having an office hour today? :) 
@Garbee 

So no more office hour on Thursday?
`yarn install && yarn start` works now :) `yarn run firefox` fails with some gekodriver error. Will investigate some more tomorrow.
When I tried to hunt this down it looked like it broke here: https://github.com/devtools-html/debugger.html/blob/master/src/reducers/pause.js#L45 the `fromJS(pauseInfo)` call was spinning. Not sure if other people are seeing that as well.
@clarkbw @bjorn3 just added a test case here https://github.com/devtools-html/debugger.html/pull/1407. Is this right? I'm not seeing it on a mac...
Yeah, this works on the Mac so perhaps something with Windows broke.  

I'm traveling right now and won't be back at my Windows box until later next week.  So if someone else could look into it sooner that would be nice.
If we start tagging releases you can use `git describe --abbrev=0` to get the latest tag description that can point to the version.  I went through some of this in #633
Hi @jasonLaster 

No worries :) 
I've made the changes that you suggested. Please check! 
@jasonLaster  I will take a look at it :)
I'm confused why circle isn't running.

@clarkbw,  @jlongster, @Garbee, @wldcordeiro any ideas? Is it related to the new reviewer system?
Hmm, we have this test which should catch this:

https://github.com/devtools-html/debugger.html/blob/master/src/test/mochitest/browser_dbg-console.js#L29-L33

I believe the toolbox handles showing the console splitbox, so perhaps @juliandescottes or @gregtatum would have some insights.
Great!

Two things:
1. Lets try and land this incrementally - as in lets restrict to first pass to just *patch 1* which ignores the panel.
2. I found this article on using the clipboard - https://hacks.mozilla.org/2015/09/flash-free-clipboard-for-the-web/. It should just work for you in the click handler!
Just tested: Works in Ubuntu, too.
@jnachtigall  on Windows 10 with FF52 dev-edition I have the following behavior:
* if the focus is in the debugger editor, ESC does not open the split console
* if the focus is anywhere else in the debugger, ESC opens the split console

However I have the same behavior on OSX. Is ESC doing nothing even if you have the focus outside of the editor?
Hi @jasonLaster 

I got patch 1 working, but for the clipboard function, I'm using the `copyString` function from https://dxr.mozilla.org/mozilla-central/source/devtools/shared/platform/content/clipboard.js, which you provided in your post under the **privileges** section.

I will make a PR right now. Thank you! :)
@jasonLaster 

Please check. Thank you!
I've rewrote `postcss-bidirectional` to fix above stated API missing issue for postcss. All test passed https://github.com/gasolin/postcss-bidirection/blob/master/test.js

@amitzur  maybe you want to check if your patch just works now? 
Yea, let's file the PR and we can discuss tomorrow with honza and the team 
@juliandescottes It's exactly as you describe. On Ubuntu and Windows. Thanks for nailing it done. 

The first time I noticed this, I was debugging at a breakpoint on Windows (at work) which obviously focuses in the debugger editor. Later on when quickly retesting with Ubuntu (at home) I did not care to set a breakpoint or look into where I set the focus.
So, here are the two handlers I know off the top of my head:

* the search bar seems to not stop bubbling
* autocomplete was *fixed* earlier :)
* the best way to test this is to add an event handler to **window** and see if you can get this to be called... 

```diff
diff --git a/src/components/EditorSearchBar.js b/src/components/EditorSearchBar.js
index 75c3a53..d1e91b0 100644
--- a/src/components/EditorSearchBar.js
+++ b/src/components/EditorSearchBar.js
@@ -85,6 +85,7 @@ const EditorSearchBar = React.createClass({
   },

   onEscape(e) {
+    // => one handler
     this.closeSearch(e);
   },

diff --git a/src/components/SourceSearch.js b/src/components/SourceSearch.js
index a5d9fa6..cbdf96e 100644
--- a/src/components/SourceSearch.js
+++ b/src/components/SourceSearch.js
@@ -73,6 +73,7 @@ const Search = React.createClass({
   },

   onEscape(shortcut, e) {
+    // => another handler
     if (this.props.searchOn) {
       e.preventDefault();
       this.setState({ inputValue: "" });
```
Hi @jasonLaster 

I'm working on patch 2, and I'm getting `Ci is undefined` error in this function:
```
function getBrowser(ownerDoc) {
  return ownerDoc.defaultView
   .QueryInterface(Ci.nsIInterfaceRequestor)
   .getInterface(Ci.nsIWebNavigation)
   .QueryInterface(Ci.nsIDocShell)
   .chromeEventHandler;
}
```

I looked it up online, but I haven't been able to find the import file that I need. Which file should I include to have Ci? :)
To be fair, Chrome Devtools do not handle this use case either :-) 
(But I personally have it quite often when looking at smaller source code examples like above; or very often embedding data structures from a CMS doing so with inline using JS/JSON is very common). At right now it's rather cumbersome to look at these embedded snippets using the debugger...
@jlongster and I have discussed this in the past. 

One option is for us to better improve `sourceURL`, which we want to do here https://github.com/devtools-html/debugger.html/issues/958

Another option is to name these sources and have them appear in the tree as you suggest. I forgot what the technical challenges are here, but I'm sure there are several in the debugger server.

@jnachtigall this is a great issue to raise. What I'm going to do at the moment is to close the issue and add it to the enhancements board. https://github.com/devtools-html/debugger.html/projects/5

Lets keep discussing the issue though as that will help us when we plan.
The new `postcss-bidirectional` support `postcss-debugger`, just follow https://github.com/gasolin/postcss-bidirection#debugging to install postcss-debug and put modified `Source.css` into the folder to check result page.

![Imgur](http://i.imgur.com/XR2b7Lu.png)

I modified `.sources-header` style to 

```
.sources-header {
  padding-inline-start: 10px;
}
```

And the result looks good to me (an dir=ltr bug is shown on image but its resolvable)

I only have the Performance problems on large files. I cannot reproduce in the exteme form I had when I originally posted this bug ( @viswanathamsantosh maybe can?) , but here's a here's Call Tree screenshot for when having a concatenated 2MB js:

STR:
1. Set breakpoint at end of the js file which make the editor jump to this position when opening
2. Reload
2. Start Performance Recording in Browser Toolbox
3. Browser freezes
4. Stop Recording

![2016-12-09 14_58_31- kartenausschnitt-2 importiert -2 0 rgb-farben 1 ebene 1240x640 gimp](https://cloud.githubusercontent.com/assets/3307404/21051379/4277a4b2-be20-11e6-8389-18ad8904cee2.png)

TBH, Firefox 50 with the old debugger also hangs. Chrome debugger is also does not feel fast, but at least does not go into Windows' "Not Responding" mode. 

Actually, just scrolling or opening at the middle/end (if you have a previously remembered pos) in a large js file makes Firefox hang. 

And here's a screenshot for stepping over a breakpoint 5 times (which also feels slow) in a large file:

![2016-12-09 15_18_49- kartenausschnitt-2 importiert -2 0 rgb-farben 1 ebene 1240x640 gimp](https://cloud.githubusercontent.com/assets/3307404/21051949/d504323a-be22-11e6-8d7d-44fce4d480df.png)
(I don't know what Startup::XRE_Main is so not sure how useful this is)

Investigated a bit, the issue comes from the fact that the escape key is used as a Shortcut for the "singleSelection" command. As soon as a key has any handler defined, code mirror will e.preventDefault() on the keydown event, which prevents the keypress event from being triggered, which is used by the toolbox to toggle the split console.

This is only useful when multiple selections are used, so I propose we disable the default keymap and add a key shortcut on Esc that does the same, except it only calls prevent default if the selection was modified by the handler.
Fixed!
> I wonder why this works for the old debugger?

The old debugger is already setting the Escape key shortcut to false in http://searchfox.org/mozilla-central/source/devtools/client/debugger/debugger-view.js#250 

I don't think they go the extra mile and try to restore the behaviour as I suggested though. 
Thanks for the writeup amit. 

This was very helpful. 

Closing the issue as I think we agree that there isn't anything actionable. 


Hmm, interesting... with Ci and patch two you need to run `npm run mochitests-watch` and `./mach run` I don't really recommend it honestly
@arthur801031 I pushed some updates for getting the source tab url. 

I think this should be good once the tests pass
This PR is because I've updated greenkeeper, which converts it to the new github installation system. Now it won't appear that everything is coming from my account anymore.
Lets talk about this with @helenvholmes 
I have no idea why circle didn't run, I'm not exactly sure how to kick it.  Perhaps adding another test commit will do it?
This is hitting the same error that hit #1171 it looks like a webpack thing
> is this a BAD idea?
> would it work in linux?

As I understand it, the `.bin/` path *is* being added correctly, however it is looking for `geckodriver.exe` on windows and that `.exe` isn't found in that `.bin/` path.  

I think you need to do something like this: 
```js
if (isWindows) { 
var path = require('path'); 
process.env.PATH = path.resolve(__dirname, '../node_modules/geckodriver/bin') + ';' + process.env.PATH; 
}
```
above issue fixed, its now good to use https://pageshot.net/8bSY3LKvXn2AoaDD/file
Thanks for the PR.

Your patch brings up an interesting question about why we add a suffix to the URL in the first place.

I'll give a more detailed answer on monday, when we're back home, but here goes a quick response.

URLs generally *should* refer to the resource they came from... There are four edge cases:
* original sources (a.k.a. a source that we created from a sourcemap+bundle) we want to show the source as the user is acostemed to seeing it in the original editor
* console evals. these are also sources that we create on the fly
* scripts inside of HTML with a sourceURL stanza
* formatted *pretty* sources. these are very similar to original sources in that we use a source map to map them back
   * we want two tabs pretty and ugly. Tabs should be keyed by URL, so the formatted aspect is helpful
   * we hide the formatted source in the source tree and source search box
  

I'm sure i'm missing something here, but that is the gist.

At the moment, I prefer formatting the URL because that avoids another source field like `trueUrl`, which could be misinterpreted... This is somewhat of a sensitive decision because as you can imagine the debugger is all about sources and thus URLs, so lets talk about it and think it through :) 




thanks for updating greenkeeper!

lets look into this on monday, something weird is happening with webpack and CI. CI is often *not* running
Thanks @juliandescottes. This patch looks good. I'd be happy to test in the panel on monday.

I'll also update our mochitest on monday so that we make sure that we don't regress in this area again.

It'd be easy to make sure that focusing on the editor does not break this...

I checked the test plan as I *assume* you followed it. Perhaps the checkboxes are a silly UX requirement :)

<img width="759" alt="screen shot 2016-12-09 at 7 31 37 pm" src="https://cloud.githubusercontent.com/assets/254562/21069270/2766653e-be46-11e6-8dba-238a6589f57c.png">


```diff

diff --git a/src/test/mochitest/browser_dbg-console.js b/src/test/mochitest/browser_dbg-console.js
index c571036..96af521 100644
--- a/src/test/mochitest/browser_dbg-console.js
+++ b/src/test/mochitest/browser_dbg-console.js
@@ -13,7 +13,7 @@ function getSplitConsole(dbg) {
   }

   if (!toolbox.splitConsole) {
-    EventUtils.synthesizeKey("VK_ESCAPE", {}, win);
+    pressKey(dbg, "Escape");
   }

   return new Promise(resolve => {
@@ -29,6 +29,12 @@ add_task(function* () {
   Services.prefs.setBoolPref("devtools.toolbox.splitconsoleEnabled", true);
   const dbg = yield initDebugger("doc-script-switching.html");

+  // test without focusing on the editor
   yield getSplitConsole(dbg);
   ok(dbg.toolbox.splitConsole, "Split console is shown.");
+
+  // test after focusing on the editor
+  clickElement(dbg, "codeMirror");
+  pressKey(dbg, "Escape");
+  ok(!dbg.toolbox.splitConsole, "Split console is hidden.");
 });
diff --git a/src/test/mochitest/head.js b/src/test/mochitest/head.js
index b0964d8..fb4ff6f 100644
--- a/src/test/mochitest/head.js
+++ b/src/test/mochitest/head.js
@@ -534,6 +534,7 @@ const keyMappings = {
   "Enter": { code: "VK_RETURN" },
   "Up": { code: "VK_UP" },
   "Down": { code: "VK_DOWN" },
+  "Escape": { code: "VK_DOWN" },
   pauseKey: { code: "VK_F8" },
   resumeKey: { code: "VK_F8" },
   stepOverKey: { code: "VK_F10" },
```
Yes I did follow the plan :) 

I just misunderstood the purpose of the check boxes, thought the reviewer should be the one ticking them after verifying the test plan on their side.
Going to have a stab at this.
I have a couple of questions after tackling this:

* I've seen that `packages/devtools-local-toolbox/webpack.config.devtools.js` overrides the `DefinePlugin`, so it won't have the `VERSION` defined. It seems to be the config used to generate the version embedded in the Firefox panel, so should it be modified to include this too?
* As suggested on the issue, this exposes a global variable in the devtool *environment*, not on the page that is being debugged. Is that the correct idea? How would someone with the debugger open actually inspect the version? It seems like the only way right now is to open devtools on the debugger. Should this be exposed somewhere in the UI?

---

And a some comments:
* I've used the root package.json version. The first commit used the version of `packages/devtools-local-toolbox/` but it didn't seem right. If it is not the correct version to show I'll change it.
* I've used the short sha since it should be enough to pin point the last commit, but maybe it makes more sense to have the full sha instead.
Ping @jasonLaster @jlongster for review.
Regarding the solution of 2 separate stylesheets:
> having them as an additional sheet entirely could lead to rule wonkyness to get the specificity right where it otherwise wouldn't be needed.

Oh, I didn't intend to have a main css file and then overlay it with direction-specific rules. That *would* make the rules specificity hard to understand and maintain.
What I meant was to generate 2 sheets that contain the entire css, 1 for each direction. I understand that this inflicts knowing what file to serve, but that can be handled in the same place that put the dir="rtl" on the html element in the first place.

> generate 2 separate stylesheets are not a common practice and rtl styles does not have much performance overhead so I don't recommend it.

I do acknowledge that the concern I raised isn't that grave. But for the sake of analysis, let me ask you guys this: Is it safe to say that given the LTR stylesheet, the RTL stylesheet could be derived from it by running a postcss plugin very similar to postcss-bidirection, where all the same rules are applied?
If so, then one css for both directions doesn't sound like a best practice to me.

That said, I agree with @jasonLaster that it's not a main concern for any MVP.
> webpack.config.devtools.js overrides the DefinePlugin

that's a good find. we would *definitely* want the version in the panel. 

> devtool environment, not on the page that is being debugged

I agree, both solutions have drawbacks.

1. environment - requires browser toolbox
2. ui - clutters the UI with something not helpful

---

At the moment, I'm reconsidering the value of this feature. The reason is this, if the user reports a bug with the debugger and provides the firefox version number, we *could* figure out what the debugger sha is.

I apologize for adding this issue as up for grabs before it was ready. That is my fault, we are on a team retreat and I didn't give this issue the kind of thought it required. I hope you snag another up for grab. Your PR and questions were spot on.
Hey @clarkbw, @joakin, @jnachtigall 

Joaquin, implemented `debuggerVersion` in #1417. 

I'm reconsidering the value of having a debugger version though. The thinking is, if the user reports a bug with the debugger and provides the firefox version number, we could figure out what the debugger sha is.

What do you guys think? 
Hey @sankha93 have you had a chance to look at this?
Are you blocked by anything that I can help with?
Hey @amitzur have you had a chance to look at this?
Are you blocked by anything that I can help with?
Hey @andreicristianpetcu hmm, perhaps you can do the [manual start](https://github.com/devtools-html/debugger.html/blob/master/docs/getting-setup.md#starting-firefox)

I thought we had fedora working, but hard to say.
ping @montogeek still have time to pick this up?
Thanks @arthur801031! This is an awesome feature
I originally came up with the version number idea, because:
I saw a bug in Dev Edition and Nightly which looked pretty obvious to me, but I did not know if it's worthwhile to report. If the version in Firefox (date) would have been much older than the one in HEAD I would not have cared to report as usually the bug has already been reported and fixed by someone else. I think there's some value to users to know that the Nightly version is almost the same as HEAD (I usually only report bugs if I can reproduce with Nightly).

> The thinking is, if the user reports a bug with the debugger and provides the firefox version number, we could figure out what the debugger sha is.

I guess you were able to do this mapping from firefox version => debugger sha. But I would not know how to look this up ;) So if I have a firefox version as of today (52.0a2 (2016-12-09)), how would i know which debugger version is in there?

Besides, the debugger's is also to be used outside of Firefox afaik. 

Just my opinion, up to you :)

PS
Though, I would recommend a namespaced variable like `dbggr.VERSION` or similar instead of a global variable `debuggerVersion` (in case you want to add further global vars or methods later, and also just out of a habit because this is how it's done for most libs)

Yeah, you hit the nail on the head: *I would not know how to map from firefox version to sha*.

I believe we will be able to address this with:
1. more frequent releases 
2. tagging each release and adding it [here](https://github.com/devtools-html/debugger.html/releases)

> Besides, the debugger's is also to be used outside of Firefox afaik.

Yeah, that's another good point. I'm inclined to cross that bridge when we get there because we'll be deploying very differently there. Hopefully continuously deploying actually.
Actually I meant to surface it before. I think the crux of the matter is how isDir is decided.
Unless I got something wrong, when going over the path, if current part is the last part, it should not be a directory unless it's the actual html file of the frame. Is there a way to detect that? Maybe by accessing the location of the associated frame/window?
Assuming anything on file name (e.g. has a ".") is clearly not the way.

This was done in #1371
> Assuming anything on file name (e.g. has a ".") is clearly not the way

great point.

> it should not be a directory unless it's the actual html of the frame

perhaps we can check to see if the source's contentType is html. That way, we'll know if we're looking for this case
@darkwing one other point here is that chrome has some really useful coloring for the icons that help:

* yellow directory
* gray is index

<img width="253" alt="screen shot 2016-12-10 at 3 10 14 pm" src="https://cloud.githubusercontent.com/assets/254562/21075862/cabc14fa-beea-11e6-84ce-64845191b1f2.png">

I think we could do something similar that would help a lot
it used to work... yes...
This has to do with our heuristics for which mode to use.
atm it defaults to "text" .
This looks like the relevant code section 
https://github.com/devtools-html/debugger.html/blob/master/src/components/Editor.js#L242-L256
Good point. I suppose we try and get the contentType on the server from the extension:

https://dxr.mozilla.org/mozilla-central/source/devtools/server/actors/utils/TabSources.js#292-343

I wonder what chrome does.
Also what we should do...

@jlongster thoughts?
Just another thought. Can we safely default our mode to `javascript` rather than `text`?
Are there any scenarios for defaulting to `text`?
> Good point. I suppose we try and get the contentType on the server from the extension:

This will be cool to do, i'll also see what chrome does.
@bomsy did a little bit more digging:

1. in this case we're getting the source from source map worker, so we're not talking to the server
2. we can't safely assume it is JS because it could be typescript or closurescript
3. chrome devtools handles this well... reverse engineering the on file item click was pretty helpful
I'm going to try to tackle this issue.
Good call. I tried punting on UX here so that we could discuss
@Dalimil, @bomsy, @gregtatum, @jlongster mind taking a look at this PR?

I think we can simplify the logic for expanding the tree, buy you guys have more experience than I do. 
Thanks. 

This is a little difficult for a couple reasons. 

1. Adding to the right means knowing if we need to hide a tab

2. Sublime and other editors add a new tab to the right of the selected tab


Updated SMP 
OK, I was able to reproduce this issue. I'll try to fix it now.
I don't think the code works... Constant variable reassignments will produce TypeErrors I think...
Two small mentiones:
 - I use Firefox Nightly;
 - [It works manually](https://github.com/devtools-html/debugger.html/blob/master/docs/getting-setup.md#starting-firefox);
Hi all!

The commit at https://github.com/shlomif/debugger.html/tree/issue1418-tabs-should-open-on-right fixes the symptoms of the problem while adding a new previously-failing-now-succeeding test and passing all existing tests.

Note that for now I have not followed all of @jasonLaster 's guidelines.
Strange, this looks like a gecko driver bug. 

The create session is the tell for me

Perhaps file there as well
Hi @jasonLaster @Dalimil 

I've been testing my code on http://cnn.com, and I found some cases which my previous code would crash. They have now been resolved with the exception of the files in `extensions://`. This requires writing a special case. Please check and let me know if I need to handle this case. Thank you! :)
CNN is a great test case. 

I do think we should handle extensions:// and I suppose javascript:// 

This would be great example of where we can write don't unit tests to build confidence. I'll be at my desk tomorrow and will help you stay them. I'm also optimistic about simplifying the code. But tests will help there:)
Hi @jasonLaster 

- I have added the code to handle `extensions://`, but I haven't come across a folder named `javascript://`, so I haven't implemented that.
- I have tested my code on http://cnn.com, https://www.cnet.com/, http://www.wsj.com/, and every file that I tested could be revealed in the tree.
- While I was testing the function on those websites, I saw warnings in the console, so I commented out the code that I've written, and the program still produced those warnings when I click on any folders or files in `Sources`.
<img width="1378" alt="screen shot 2016-12-12 at 2 01 19 pm" src="https://cloud.githubusercontent.com/assets/4562118/21089797/f8dd78a6-c075-11e6-9c71-1e2fd1188ab6.png">

- Please let me know where unit tests should be placed and how to write them. I'm not really familiar with them. Thank you very much! :)

> Sublime and other editors add a new tab to the right of the selected tab

That's a point. But I think there's a suble difference: Sublime has no newtab `+` button at the very right. I think, if the newtab button is at the very right (like in the Firefox browser or Chrome browser) then it's consequent to also open at the very right.

@jasonLaster : pull-req sent - https://github.com/devtools-html/debugger.html/pull/1425
Just looked at the old debugger, which shows the full URL path on mouseover (in the source tree). Like this would be good.
oh, just discovered https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Highlight_and_inspect_DOM_nodes which describes this feature and has a note that this is not yet available. Maybe the note should add a link to a bug report one can follow (in case there is one, could not find any)
Hmm, this could likely *open* a tab that would immediately be hidden. We would want to do something smarter here :)
@jnachtigall I think that's a good point.

Perhaps:
* *Cmd+P*  *new tab button* open tabs to the right
* selecting a source in the tree open a tab to the right of the selected tab

CC @helenvholmes, @jlongster, @clarkbw what do you think?
Thanks @arthur801031 for the extensive testing. I think you'll like the testing aspect, it's our way of quickly working on a complicated feature like reveal and making sure that we can test all of the edge cases and then make changes quickly.

* I took the liberty of moving `getExpandedItems` to our `utils/sources-tree` module where we keep the utility functions for the tree.
* I added one test that you can run with either `yarn run test` or `yarn run mocha-server` and then see in the browser*. You should add lots more tests
* While working on the test I thought of a **MUCH** simpler approach to `getExpandedParts`. The way I understand your algorithm works, is that it tries to find each part of the path as you traverse down the tree. Here's what I propose: lets update the tree so that: a) it's easy to get the leaf nodes (sources), b) each node has a parent reference so you can get the ancestor directory. This way, we can re-write our function as a) find the source in the tree with the same path and then b) get it's ancestor directories.


[1] You'll need to apply this [gist](https://gist.github.com/jasonLaster/da3f9b855a732c5a42abfa2b6d10b5df) to see the tests in the browser, the runner sadly needs some love. You can also change your test to `it.only` to only run that test.

I'd keep it simple and always open to the right like in the PR, of course making sure it is also visible.  I think that's why the current behavior (to the left) is what it is.

These tab management issues would be good side projects but I would prioritize other things right now.
Alright, so i messed around for a bit and this is what I learned. 

* The tree has a really helpful thing called a parentMap. the parentMap will help us find the a parent of any node, given the node
* the parentMap uses the tree nodes as keys, so we have to add a new `findSource` function for finding leaves
* we can get the directory path by using the parentMap
* this should be very similar to what expandedPaths did, but there might be edge cases! needs lots of testing :)
* also, noticed that this branch needs a rebase pretty badly. in these cases, i usually [git squash](https://ariejan.net/2011/07/05/git-squash-your-latests-commits-into-one/) my branch down to one commit to make it easy.

I pushed a bunch of new code that probably doesn't work :) didn't run it.
@jnachtigall great find! 

* we should use CSS to truncate based on the width of the pane. You have lots of space, why are we cutting it off at 50 
* I agree we should show a tooltip, it's a little extra noise but could help in this case. 
* I actually got the tooltip in chrome devtools source modal. So, I hear your pain :)

#### where we truncate

```diff
diff --git a/src/components/SourceSearch.js b/src/components/SourceSearch.js
index a5d9fa6..c61a724 100644
--- a/src/components/SourceSearch.js
+++ b/src/components/SourceSearch.js
@@ -19,6 +19,8 @@ const Autocomplete = createFactory(require("./Autocomplete"));
 function searchResults(sources) {
   function getSourcePath(source) {
     const { path, href } = parseURL(source.get("url"));
+
+    // => why are we always trunctating here?
     // for URLs like "about:home" the path is null so we pass the full href
     return endTruncateStr((path || href), 50);
   }
```

#### what the tooltip would look like

![screen shot 2016-12-12 at 10 55 09 am](https://cloud.githubusercontent.com/assets/254562/21105795/8985dd0c-c059-11e6-9eee-fbbbff13c20d.png)

Good find!  I believe that was supposed to link here: https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#testing
@andreicristianpetcu just saw your commit :) Was about to say that the `yarn run firefox` command should not block you :)
@tromey do you run fedora 24? Would you mind [trying](https://github.com/devtools-html/debugger.html/blob/master/docs/getting-setup.md#step-3-open-firefox) this? 
I updated the UX on the plane to be a bit more opinionated

![](http://g.recordit.co/X0tcGOa1mn.gif)

It's very similar to [safari's](https://webkit.org/blog/3846/type-profiling-and-code-coverage-profiling-for-javascript/) CC.
Here's a GIF

![](http://g.recordit.co/J3Ao9p9OPO.gif)


@amitzur, @gasolin what do you think about using [autoprefixer](https://github.com/postcss/autoprefixer)? This is a slightly different approach, instead of using `margin-inline-start`, we would use `margin-start`. and the output is slightly different as well. With autoprefixer, it would generate the two prefixed properties `-moz-margin-start` and `-webkit-margin-start`. 


closing this PR as we're not sure if we're going to use devtools-reps yet. Should be easy to re-open later.
Hey @amitzur I just looked into this and unfortunately a `source` does not have its contentType, but a `sourceText` does.

For example, if you update the todomvc example to have an inline script with a debugger statement, you'll see `(index)` in the tree. The source however does not have a contentType, but when you select the source and load the source text you see the type.

Based on this, I think the best thing to do is to compare the source URL with the debuggee URL and see if it is the index case or all the other cases where it's just a filename.

---
#### appStore.getState().sources.toJS()
![screen shot 2016-12-12 at 2 12 04 pm](https://cloud.githubusercontent.com/assets/254562/21112895/82b1991e-c075-11e6-81f8-17f6c3e4fc00.png)

#### new inline script with debugger statement
![screen shot 2016-12-12 at 2 12 01 pm](https://cloud.githubusercontent.com/assets/254562/21112897/82b93642-c075-11e6-982c-cef505ed4bbe.png)

#### updated source tree with index
![screen shot 2016-12-12 at 2 11 56 pm](https://cloud.githubusercontent.com/assets/254562/21112898/82ba3ef2-c075-11e6-8803-70c8fefeecda.png)

Just spoke with @jlongster and he had a good observation that we could take a more generic approach

```
something can only be directory if multiple files are inside of it
2:19 PM if `http://example.com/foo` is a source, always only show `foo` as a path. but if `/foo` and `/foo/bar.js` is a source, show two sources `foo/(index)` and `foo/bar.js`
2:19 PM you can never really know if something remote is a directory or not
2:20 PM I guarantee chrome just has similar fuzzy heuristics
a server could easily serve up `/foo` as a normal JS file, but also `/foo/bar.js` as a JS file, so both would have normal JS content types
```

There's also another edge case where it's possible the page has an iframe, which serves another HTML index file, with a different url than the debuggee url.


Based on this, I think we should do something that is not based on content types. and just assume the last part is a filename it it s the only node. If there is a sibling node then we should use (index).

if `/foo` and `/foo/bar.js` are sources, show directory `foo` and sources `(index)` `bar.js`
![watch_expressions](https://cloud.githubusercontent.com/assets/922368/21114739/0053ea22-c0a6-11e6-8d2c-38b252e6ab24.png)

@jasonLaster please check if the hover color is ok. It seems like the refresh button gets grayed out but the + button does not. What should be for both?

PS: this is the first time I write ReactJS code, the first time I use CSS Flexbox and the first time I submit a pull request to a Mozilla project :D
Here's a gif of the current functionality:

![](http://g.recordit.co/MG5U8LdAdX.gif)
we can do some css touchups here or in another PR for the interactions:

1. center and size the plus button. it's pretty small
2. remove the click outline (border:none, or outline:none)
3. add a tooltip, it's a simple title attribute on the outer button element


the plus button is a little awkward, but it's the interaction that chrome has and it's not the worst. the refresh button should re-evaluate expressions.
closing this as it'll have to be done incrementally.

it's a good source for where we could head though
Cmd+P doesn't bring up a new tab, so I don't know how this impacts that.

Opening always to the right though makes sense.
Getting close! Thanks for all the hard work so far
@clarkbw mind reading this over. I feel like the language could use some cleaning up, especially the readme... :)
@jasonLaster that might work, but counting on those non-standard syntax makes some stability concern to me. 

At least we will see no further bug fix or any support from platfrom for `-moz-margin-start` syntax (because we have `margin-inline-start` instead). Especially when they are super busy during migrating to new layout engine... In contrast, failback to margin-right/margin-left make style 100% behave well with no surprise.

@jasonLaster  The dotted border has been removed and the tooltip added. The only thing that remains is 
> 1) center and size the plus button. it's pretty small

My CSS skils are not that good. I need to read up some more :) I increased the size but I'm not sure it is the best solution and I don't understand why it is so badly positioned.
Thanks Andrei, just shared a couple style tweaks to help out on chrome!

![screen shot 2016-12-12 at 8 30 03 pm](https://cloud.githubusercontent.com/assets/254562/21123920/c2887a74-c0a9-11e6-86f3-ddb7df1b5f66.png)

ping @ppold will you be able to look at this?

Hey @wldcordeiro have you had a chance to look at this? happy to move it back to up for grabs
Hi @jasonLaster ,

I took a look at the `getDirectories ` method. From what I understand, `findSource` finds the leaf/source node by going into each directory and traverse through that directory's folders and files before moving onto the next directory. For example, if our target file is file2, `findSource` would check dir1 -> subdir1 -> subdir2 -> file1 -> dir2 -> subdir1 -> file2 to find the target file. Then, `getDirectories ` method would use that target file's leaf node to find its ancestors, which means processing file2 -> subdir1 -> dir2.
```
root
  |
  - - ->dir1
             |
             --->subdir1
             --->subdir2
                        |
                        ---> file1
  - - ->dir2
             |
             --->subdir1
                        |
                        ---> file2
```

`getExpandedItems`, on the other hand, traverse dir1 -> dir2 -> subdir1 -> file2, and while it finds dir2, subdir1, and file2, the program adds them to the array. So, I think `getExpandedItems` is faster and doesn't check other irrelevant folders and files and does not traverse back to find the target leaf's ancestor items.

Please let me know if this is correct. Thank you! :)

> for new tab + button: Open a new tab (Ctrl+P)

Rethinking this: Actually it does not really open a new tab as @jlongster correctly pointed out in [this comment](https://github.com/devtools-html/debugger.html/issues/1418#issuecomment-266570569) . So I guess the tooltip should rather be `Search for files (Ctrl+P)` so it's in line with the other wording around Ctrl+P stuff
Hi, @arthur801031 that's a good point. I don't think it should be a performance problem though, and if it is, we can always optimize it by maintaining a list of references to the leaf nodes.

What we gain with `getDirectories` is the guarantee that it *willI* work in all cases because it re-uses the tree's logic.


Hey @andreicristianpetcu sorry, I accidentally nuked your branch while trying to push my commit to it.

In the future, it is easier to open a feature branch and create a PR with that:

```
git checkout -b watch-buttons
git push me watch-points
```

:)

With that said, I think we can land what you have soon.
This does seem like a lot of complicated code so it'd take me a while to think about how I'd implement it to give reasonable feedback, so I don't have much to say right now. I'm not sure why in `componentWillReceiveProps` of `SourcesTree` you can't do a search of the entire tree for a specific source item and build a list of nested sources to expand when you find the right source. You wouldn't have to add anything to `utils/source-tree.js` then; you already have the source tree structure, so just search it?

No problem @jasonLaster :) [here is part two](https://github.com/andreicristianpetcu/debugger.html/pull/1)

Since I use the dark theme on Firefox DevTools I had to test that my pull request works well with it also.

![dark](https://cloud.githubusercontent.com/assets/922368/21157027/e231cd28-c16f-11e6-8e36-5649b7d990e1.png)

The actual text background of the "Add watch expression" does not look that great but I guess this can be a good easy bug for a new contributor.

 - Do the devs of debugger.html use some IRC channel or some other means of communication besides GitHub? For general Debugger or ReactJS n00b questions that are not specific to a task.
 - I'll start hunting for another issue to work on the Debugger.html. Probably a more difficult "medium" issue. Your input is welcome :)
Do you think I can pick this one up @jasonLaster ? Since I worked on [Watch Expressions] in the previous task.
yup - https://github.com/devtools-html/debugger.html#discussion
and stop by our office hours now too https://hangouts.google.com/hangouts/_/calendar/amFzb24ubGFzdGVyLjExQGdtYWlsLmNvbQ.30mdpa6ncqn8uttvmrj9b9d3jc?authuser=0


@andreicristianpetcu sounds great
@jasonLaster third attempt to a pull request. I hope I got this one right. :)
I resolved the conflicts in the [other PR](https://github.com/devtools-html/debugger.html/pull/1437). Sorry for the mixup.
Mind rebasing off of master. https://robots.thoughtbot.com/keeping-a-github-fork-updated

Also, could you attach screenshots from the debugger in chrome and firefox. One thing I'm checking for is the height of the header, which i saw changed quite a bit.
Thanks for talking this through today @bomsy.

Here's the [branch](https://github.com/devtools-html/debugger.html/compare/master...jasonLaster:chrome-vars) that we worked on.

The key here was:
* we fetched the local variables and associated it with the scope they were from. This will likely need to be parentId or some other field similar to what we do with firefox loaded objects
* we saved the loaded objects to the reducer
* we started fetching them in the component and got scared! 
This is fixed here https://github.com/devtools-html/debugger.html/pull/1379
moved this issue to our enhancements project as i don't see someone being able to jump on this soon. 

If someone would like to work on it, mention it in the issue and we can re-open it.
How's it going @shlomif? Let me know if you're blocked, happy to answer any questions
This was fixed in #1415
I'm closing this because locally the new editor search bar will always handle cmd+f

![](http://g.recordit.co/74nkcFStkr.gif)
closing this for now as I don't think it's actionable. We'll be working on updating our release process over the next month and so hopefully things will be smoother.

Lets continue talking here though about the value of having a local version in the debugger app like `window.debuggerVersion = "<sha>"`
Closing this issue as we've done the **copy source url** feature. I'll open a new more focused issue for viewing source later. It's less important though and there's plenty of other work to go around.
Closing this issue as we'll be able to move the scripts over incrementally
talked about this offline and we're not going to do this as the server is optimized now without infering content types
FYI: I'll be moving the packages directory out soon.  

Also, the bin script is going to get smaller soon as scripts move to the local toolbox

Also, we're now adding more README.mds to directories like docs.

With all of that said, I've talked myself into closing this ticket.

@Garbee et al, feel free to re-open with specific proposals though
@jasonLaster thanks! it was great, learnt alot.
> it adds a new chrome scopes component

Why choose this path?  I'm guessing our scopes are fairly tied to the actors and even tcomb.

Just wondering since this is the first split like this.
This is worth doing, but we aren't working on it right now.  Feel free to reopen this for further discussion.
[bug 1297113](https://bugzilla.mozilla.org/show_bug.cgi?id=1297113) landed, is this still an issue @jasonLaster @juliandescottes ?
I wanted to figure this out, but I can't make it past the basics of mochitest. Like "How do I pause the test so I can debug the test?"  grrr...

This is my basic test: 

```js
  // Make sure new sources appear in the list.
  ContentTask.spawn(gBrowser.selectedBrowser, null, function() {
    const script = content.document.createElement("script");
    script.textContent = `(function() {
      console.log('this should appear to be coming from the pen.js file');
    })();
    //# sourceURL=pen.js`;
    content.document.body.appendChild(script);
  });

  yield waitForSourceCount(dbg, 9);
  is(findElement(dbg, "sourceNode", 7).textContent,
    "pen.js",
    "The dynamic script exists");
```

@jasonLaster  Sorry but I don't understand. Did you copy [something](https://github.com/devtools-html/debugger.html/commit/56684cfbaa323787587d601f45da78d38a34289e) from my pull request before it was accepted or I'm reading this wrong? I keep having merge issues and I'm trying to understand what happened.

I'l first resolve all the issues and then I will put the print screens.
I just finished `findSource ` and `getDirectories`, and I've tested on http://cnn.com. It seems to be working without any issue. Please check! Thank you!

I tried to git squash my commits, but after I saved the file, I received this error:
```
error: could not apply 73add1d... Add show source redux backend (#1370)
When you have resolved this problem, run "git rebase --continue".
```
Do I need to manually resolve the conflicts?
> I'm closing this because locally the new editor search bar will always handle cmd+f

@jasonLaster I do not understand this and rereading the whole thread I think there is a misunderstanding about the STR:

What I (user) wants to do is going to a certain string/method within a certain file. Quite common workflow

So I 
1. First Ctl-P to open this particular file => File opens
2. Immediately after this I do Ctrl-F to search whithin this opened file => Opens Firefox native search instead of the Debugger's search. Only after manually focussing within the debugger editor with mouse the Debugger's search is opened.

Or has there been a commit that fixes this behaviour?

@clarkbw I think this is still needed. 

The new debugger frontend needs to use `toolbox::useKeyWithSplitConsole` in order to forward some key shortcuts to the split console.
@jasonLaster : sorry, I have not done any more work on this issue beyond my pull-req - I've been busy with non-debugger.html-related stuff. I'd be OK if someone else try to tackles the remaining issues,
sounds good, I'll close the PR and we can re-open the issue
Yeah, sorry your first patch landed: https://github.com/devtools-html/debugger.html/commit/56684cfbaa323787587d601f45da78d38a34289e

sadly under my name, but that shouldn't matter :)
Instead of `${url}:formatted`, what if we instead used the `view-source://`protocol?  It's more representative (prettified source) and it would open properly in a browser?
Cool. Lets see what we can do here, 

perhaps we want to start by creating an example like https://github.com/devtools-html/debugger.html/pull/1407

Then we can see what is going on in the server such that it is ignored
![screenshot from 2016-12-14 21-56-49](https://cloud.githubusercontent.com/assets/922368/21198534/b13bb31e-c237-11e6-9971-18b795486752.png)
![screenshot from 2016-12-14 21-57-08](https://cloud.githubusercontent.com/assets/922368/21198538/b327a070-c237-11e6-8b98-194f2320e43b.png)
![selection_001](https://cloud.githubusercontent.com/assets/922368/21198540/b4c02498-c237-11e6-8335-937e58b13e4e.png)
![selection_002](https://cloud.githubusercontent.com/assets/922368/21198543/b6479666-c237-11e6-9c99-b07b3e4d6188.png)
![selection_003](https://cloud.githubusercontent.com/assets/922368/21198548/b7caf690-c237-11e6-8a55-955540963093.png)
![selection_004](https://cloud.githubusercontent.com/assets/922368/21198550/b97fcccc-c237-11e6-85f0-bc8e1161e1ab.png)

@jasonLaster I rebased based on upstream. I added print screens with Chrome vs Firefox, Dark vs Light theme (as I said there is one small issue with the dark theme but I will fix it in the future and not in this PR) and print screens with tooltips.

If you cherry pick things from my remote on top of upstream master then git gets really confused and I get 3 way merge conflicts between my new changes and my old changes. I get this both at normal merges and on rebases. Please try to avoid this in the future since it makes things hard for me. It does not bother me that some changes [landed with your name](https://github.com/devtools-html/debugger.html/pull/1437#issuecomment-267062971) :) My only problem was with these merge conflicts.
Looks good now, thanks!
Hi @jasonLaster  

I will take a look at this tomorrow. :)
We can iterate here
@darkwing hmm, I hadn't considered that. Mind sharing a little more?


landed!
landed!
closing as we'll do this work in the toolbox and on m-c.

when the pause ends, should they close?
@jasonLaster 
This is blocked by the kill-packages PR.
moving this over to https://github.com/jasonLaster/debugger-examples
moving over here
https://github.com/jasonLaster/debugger-examples
Hey, I'm new to the repo, but this seems pretty straight-forward. Mind if I give it a shot?
Hey @petrgazarov go for it!
Fwiw, I've found Safari's UX for code coverage relatively low-friction to toggle and use.

Discoverability was the biggest challenge (realised they had CC a year after it was implemented) but docs/advocacy may be sufficient to address that for FF.
we can add conditional titles and better truncating another day :)
I just recalled that `serve-index` and `express` packages might need to be removed as well.  However I think you can do it in #1443 
@jasonLaster This looks good overall since it's just moving things. Seems like the mochitests are timing out for some of them though. Also I think we should move this to the devtools-html org since there are a few issues associated with things now in a separate repo.
This PR has been in queue for a long time and has a merge conflict now, should we close or rebase?
good comments @wldcordeiro. 
* I found the mochitest error.  
* and we'll move it to devtools-html soon
@addyosmani I agree. I think they made some nice decisions on the UX as well. 
* The greyed out lines are borrowed from their design
* I'd like to try a streaming API where while coverage is on it gets sent down as event packets
* Their summary view by folder and project is also very interesting, but likely out of scope here at the moment :)
I dropped the `if` because it's part of the DOM spec lol. if we break anything we can fix it :)

https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation
Hi @jasonLaster ,

I have cleaned up the code and added 1 additional unit test for reveal. I have tested the code on  http://cnn.com and https://www.cnet.com/. If you would like the code to be simpler, you could remove the `else if ` from line 280 ~ line 287 in `findSource`. This special case only came up 3 times when I tested the code on those 2 websites. Please check. Thank you! :)

<img width="1504" alt="special2" src="https://cloud.githubusercontent.com/assets/4562118/21249859/0a677406-c37c-11e6-9e7f-434dbc2b7a41.png">

<img width="1503" alt="special2-cnet" src="https://cloud.githubusercontent.com/assets/4562118/21249860/0d20baae-c37c-11e6-843f-5092067e8807.png">

<img width="1504" alt="special2-cnet2" src="https://cloud.githubusercontent.com/assets/4562118/21249862/10086622-c37c-11e6-8848-c6d347031b67.png">


I just ran into this as well you need to `rm -rf packages/` as for whatever reason the rebase doesn't remove those folders. It might also help to `rm -rf node_modules/`
@wldcordeiro Thank you so much! It worked! I ran
```
rm -rf packages/
rm -rf node_modules/
yarn upgrade
```
> warning Unmet peer dependency "react@^0.14.0 || ^15.0.0".
The error has nothing to do with this change, but yarn is not happy.  We should figure out where that started happening.
@jasonLaster can this be closed now that #1428 was merged?
Just seeing this -- yep, will look at this later today!
closing this in favor of #1455
Fixed in #1455
haha - cool. This will also help with prettifying the tab!
Closing as there is actually a button in Circle to do this.  I guess I don't have the permissions to see it.
Love it. 

@viswanathamsantosh, @MoLow, @Garbee, @wldcordeiro really happy that windows users will be able to have a smoother getting started process.
> what problem is this solving?

NPM isn't the recommended way to install yarn, this method is more secure and faster.

> **Note**: Installation via npm is generally not recommended. npm is non-determinstic, packages are not signed, and npm does not perform any integrity checks other than a basic SHA1 hash, which is a security risk when installing system-wide apps.
> For these reasons, it is highly recommended that you install Yarn through the installation method best suited to your operating system.

via https://yarnpkg.com/en/docs/install#alternatives-tab

Also this should be faster since it checks that yarn is already installed instead of trying to NPM install it every time.
Updated the PR to land SplitBox in devtools core

![](http://g.recordit.co/AARobi7JKu.gif)
> the source search placeholder should be "Search Sources..." not "Search..." because it can be confused with searching for code

I think this text might read a little long, we're low on space here and this is supposed to be secondary to the larger "search for files" that lives in the editor space.
Ok, installing yarn works with these changes.  We're still seeing some `yarn install` error related to something else.
Here's a gif of what it looks like for the record:

![](http://g.recordit.co/4slfR7SAO6.gif)
@darkwing so... this is kind of funny, I can't find our other conversation where I list the URL edge cases :) do you know how to find it again because the conversation looks like its attached to an old commit
Figured this out!

The expand takes place here:
https://github.com/devtools-html/debugger.html/blob/master/src/components/ObjectInspector.js#L86-L107

You can add a `sort()` function like I did here:

```js
  makeNodesForProperties(objProps, parentPath) {
    const { ownProperties, prototype } = objProps;

    const nodes = Object.keys(ownProperties).filter(name => {
      // Ignore non-concrete values like getters and setters
      // for now by making sure we have a value.
      return "value" in ownProperties[name];
    }).sort((a, b) => a.localeCompare(b)).map(name => {
      return createNode(name, `${parentPath}/${name}`, ownProperties[name]);
    });

    // Add the prototype if it exists and is not null
    if (prototype && prototype.type !== "null") {
      nodes.push(createNode(
        "__proto__",
        `${parentPath}/__proto__`,
        { value: prototype }
      ));
    }

    return nodes;
  },
```

The question becomes what kind of sort?

`.sort((a, b) => a.localeCompare(b))` ignores case

![screen shot 2016-12-16 at 1 43 21 pm](https://cloud.githubusercontent.com/assets/2134/21279630/00ebb508-c396-11e6-9214-081e09008d66.png)

And `.sort()` sorts by case first

![screen shot 2016-12-16 at 1 47 01 pm](https://cloud.githubusercontent.com/assets/2134/21279661/2a3c6830-c396-11e6-8cd4-ff13e8829122.png)

We should probably look at what we previously did and what chrome does here.  @jasonLaster any ideas?
Looks like everyone uses the `sort()` method.
Thanks @arthur801031! I just squashed your work which was crazy in its own right :)

Will review now some of the other details

we're getting close
yup
I still kind of like surfacing more than just the search command in center pane. Atom does this rather nicely with tips and other shortcuts. I had opened an issue #776  to do this, it's not a hard change though we could come up with a list of tips/tricks to display.
Yup, @wldcordeiro i think you're right it just requires coming up with compelling tips. Add them to #776 and we'll re-open :)
Hi @jasonLaster 

I simplified the code for reveal in ManagedTree.js. Please check. Thank you very much for your help on this PR!! :) 
Hi @jasonLaster ,

Great comments/suggestions! Please check. Thank you!
another yarn hiccup.

cleared the cache and re-built.

I hope it's an artifact of us doing lots of weird package things.
Hi @jasonLaster ,
Please check. Thank you!! :)


Wow. At this rate we'll have a three line PR by Monday. 

Seriously though, will treat and likely never tomorrow morning. 
Not sure if this will always be unique, I was thinking host + value but it seems to work based on the CNN case.  Using `id + value` appears to give me a unique id for the Wheel of Fortune test (RSTLNE).  IDs look like: `"server1.conn4.child4/41"` and values look like: `"/esf.js"` so combined they are `"server1.conn4.child4/41/esf.js"`.

```js
  renderSearchItem(result, index) {
    return dom.li(
      {
        onClick: () => this.props.selectItem(result),
        key: `${result.id}${result.value}`,
        title: result.value,
        className: classnames({
          selected: index === this.state.selectedIndex
        })
      },
      dom.div({ className: "title" }, result.title),
      dom.div({ className: "subtitle" }, result.subtitle)
    );
  },
```
Most of the issues here are fixed up.  And as of #1309  `npm run firefox` works on Windows.  I'm going to close this for now and we can open up a new issue to investigate further issues.   Thanks a lot everyone!
A "simple" sort is fine, but I think we could do better :) Normally, a user is looking into the global scope for some custom `MyApp` property and not so much for all these standard methods/properties. So I think it would be better to somehow (visually) groups these differently, e.g.:

```
MyApp
YetAnotherMyApp
-- separator ---------------
AnalyerNode
Animation
Array
<and-so-on>
...
```

or even having a section for common lib properties in between:
```
MyApp
YetAnotherMyApp
-- separator (libs) ---------------
$ (jQuery)
_ (lodash)
Backbone
-- separator (known prototype stuff) ---------------
AnalyerNode
Animation
Array
<and-so-on>
...
```


Maybe this could be added to the future enhancement whiteboard for reevaluation (and maybe also looking into how other IDEs do it for different languages)


Hmm, I suppose for the the properties/strings file it would make sense to have keys per OS, so `stepIn.mac`, `stepIn.Windows` I don't think that L10N has something fancy here.
Yup, I like the idea of calling out non-default window properties too. 

Will open in a new issue
> when the pause ends, should they close?

sorry, i missed this earlier. I think, they can stay open :)
Yeah, I'd like to see a grouping.

I think as a baseline you could probably easily group the non-default Window props up to the top.  
![scopes-grouped](https://cloud.githubusercontent.com/assets/2134/21290251/294a8498-c468-11e6-9a5d-bd6551cc1fa4.png)

To further the feature you could try separating out known  library props but I think that would be an entirely different project in scope.
I think the final step is to add a r/w ssh key to circle so it has write permissions to the repo
> the properties/strings file it would make sense to have keys per OS, so stepIn.mac, stepIn.Windows I don't think that L10N has something fancy here.

The L10N strings are in the format `pauseButtonTooltip=Click to pause (%S)` but if I remember the L10N rules correctly you cannot just change the string without also changing the key name.  So to change up the strings we would need to do something like `pauseButtonKeyTooltip=Pause %S` or more commonly `pauseButtonTooltip1=Pause %S`.  But I wanted to get some approval on the string changes before doing all that work to change up the property values.
This looks like it is working for me.  At least I can't repro in Nightly right now.
Hi @jasonLaster 

I'm not sure if I have this correct, but it seems we cannot know which tabs will be hidden in  `src/reducers/sources.js`. So I'm wondering if it's a good idea to use redux to store the new tab at https://github.com/devtools-html/debugger.html/blob/master/src/reducers/sources.js#L166. When we're determining which tabs should be hidden at https://github.com/devtools-html/debugger.html/blob/master/src/components/SourceTabs.js#L41, we try inserting the new tab at different index of `sourceTabs ` to see where it can be placed.

Please let me know if this approach is ok. Thank you! :)


Hmm, another challenge is variable width tabs. 

So, if you always put the new tab to the left of the last visible tab there's a chance that the new tab is really wide and won't fit. 

What I'm thinking is measure the width of the tabs element and then figure out where the new tab should go. 

We can always pass the index of the tab location to the reducer. 

One challenge is measuring the width of the tab before it's been shown. You might need to make a fake tab with js just to measure it. 

Also, determining the widths needs to factor in margins between tabs. 

There's potentially a lot of math :/

Yeah, looks like we need to start using the constants file or `Symbol("TINY")` instead of what we are using in the ObjectInspector.

Though this doesn't solve the expansion, it does show those props in the TINY view.
> Yeah, looks like we need to start using the constants file or Symbol("TINY") instead of what we are using in the ObjectInspector.

I don't think that the constant file has been copied here yet, since `mode: "tiny" ` is still working.
Yet, using the tiny mode would display the same thing as we already have (i.e. `MouseEvent`)
If you'd want to have at least some properties displayed, you could either use the constants.SHORT mode, or omitting it (which defaults to short mode), like we do in the DomPanel. This would show the first three items of the event.

![screenshot at dec 18 21-56-31](https://cloud.githubusercontent.com/assets/578107/21296473/e8668138-c56c-11e6-8e3e-d34ce322b835.png)

Or maybe this is too long, and that we should modify how object are displayed in TINY mode.


This looks like a flow error. Maybe we need to ignore that directory in the flow configure? 
> I don't think that the constant file has been copied here yet, since mode: "tiny" is still working.

Oh right.  When I change the mode I can see the values we want.

<img width="295" alt="screen shot 2016-12-18 at 3 54 21 pm" src="https://cloud.githubusercontent.com/assets/2134/21297756/53fa4840-c53a-11e6-81ab-f95cb6a523ce.png">

But they still don't appear in the scope view when we request properties because that isn't handled by the Reps, like you said before.  I get it now.
Hi @jasonLaster 

How do we make a fake tab in `src/reducers/sources.js`? I tried constructing a list of dom div of tabs
```
function renderTab(source) {
  const filename = getFilename(source.toJS());
  return dom.div(
    {
      className: classnames("source-tab", { active: false }),
      key: source.get("id"),
      title: getRawSourceURL(source.get("url"))
    },
    dom.div({ className: "filename" }, filename));
}

function updateTabList(state, source, tabIndex) {
  const tabs = state.get("tabs");
  const sourceIndex = tabs.indexOf(source);
  const includesSource = !!tabs.find((t) => t.get("id") == source.get("id"));

  if (includesSource) {
    if (tabIndex != undefined) {
      return tabs
        .delete(sourceIndex)
        .insert(tabIndex, source);
    }

    return tabs;
  }

  const listOfDoms = dom.div(
    { className: "source-tabs", ref: "sourceTabs" },
    tabs.map(renderTab)
  );

  // more stuff to write....
  // return tabs.insert(tabs.size, source);
}
```

I'm not sure what to call to determine those dom elements' width.
Ok, looked into this a bunch more.  I tracked it down to the ObjectInspector.

Right here:
https://github.com/devtools-html/debugger.html/blob/master/src/components/ObjectInspector.js#L90-L92

```js
    const nodes = Object.keys(ownProperties).sort().filter(name => {
      // Ignore non-concrete values like getters and setters
      // for now by making sure we have a value.
      return "value" in ownProperties[name];
    }).map(name => {
      return createNode(name, `${parentPath}/${name}`, ownProperties[name]);
    });
```

We only take the objects which have `value` properties.  And the `clientX` etc are all getters so they are skipped by the filter.  The getters need to be handled such that they are no longer filtered from the list and can be represented with their values.
Dug in a little deeper.

[Chrome seems to use](https://github.com/ChromeDevTools/devtools-frontend/blob/bd5f705d0f6851f6ce7d6b2089f8cf7baafd27b4/front_end/components/ObjectPropertiesSection.js#L765) the `enumerable` property for deciding to fade out the item.  This creates a number of hit or miss properties.  But probably works better than nothing.  Given its not a great system I don't think grouping would work out well here.

You can get some nice separation like this:

<img width="298" alt="screen shot 2016-12-18 at 10 40 30 pm" src="https://cloud.githubusercontent.com/assets/2134/21303435/3c197c12-c573-11e6-9cb8-8d2af08ab4bb.png">

But you can also get lots of not really useful ones like these: (`btoa`?)

<img width="291" alt="screen shot 2016-12-18 at 10 40 51 pm" src="https://cloud.githubusercontent.com/assets/2134/21303439/3f5119ee-c573-11e6-8cd0-201e8c490b4d.png">

Might be worth trying as it is a little helpful, but I think we could do better.
Here's what it would take to do that (in ObjectInspector)

```js
      dom.span({ className: classnames("object-label",
               { enumerable: !item.contents.enumerable && !nodeHasChildren(item) }) },
               item.name),
```

```css

.object-node .enumerable {
  opacity: 0.5;
}
```
Hi @jasonLaster 

Please check. Thank you! :)

haha that's pretty funny, i was using `cnet` as my testing site, and also found  `moatad.js` and the tab value as well!!!

This is definitely an issue.

I recommend doing 

```js
Object.values(appStore.getState().sources.toJS().sources))
```

and taking a look at what that source URL really is

Thanks!

Two thoughts on UI:
* perhaps blue `fill: var(--something-here)` could be nice colors are in `variables.css`
* the left padding could perhaps be reduced a bit.

@clarkbw what do you think?
New GIF

![](http://g.recordit.co/ESkcM7lB8H.gif)
@clarkbw I made a small change to how `onResize` is setup. I believe it's more consistent

https://github.com/liorpr/debugger.html/blob/open_panes_on_pause/src/components/EditorSearchBar.js#L188-L199

Let me know what you think
For some reason 'Search sources' doesn't initially read well for me.  Maybe it needs to sink in a bit.  

Also, I think the smaller version above the left side bar could remain shortened. It already has the word "Sources" to the left and is just supposed to act as a reminder.

Heads up that I was making some changes to the strings here as well #1469 Though I believe I used file there.
> Let me know what you think

@jasonLaster I just rebased to get the yarn error and lost your changes.  Mind doing that again?
Updated!
#1477 added the pretty print icon
I believe this was done in #1379 
looks like it's just a circle issue.
https://circleci.com/gh/jasonLaster/debugger.html/1748
#1347 
Hey @andreicristianpetcu have you been able to make progress on this?

If so, are you blocked by anything or have questions?
@amitzur moving this out of in progress. 

Feel free to re-claim if interested.
Hey @bomsy have you had a chance to look at this?

hmm, @bomsy Prefs should work again.
done in #1471.
done in #1403
Prefs should be working again :)
@wldcordeiro cleaned up this issue.

@arthur801031 finished working on "reveal source" which should give you some nice APIs for focusing on the selected source. https://github.com/devtools-html/debugger.html/pull/1403

Are you interested in taking a stab at this with the new APIs?


closing this issue as it is probably harder than it's worth. 
https://circleci.com/gh/jasonLaster/debugger.html/1754
Done in #1469
Hmm, things have moved a bit:
* client-adapter is now here: https://github.com/devtools-html/devtools-core/tree/master/packages/devtools-client-adapters
* i predict that the client adapter stuff will need to be manually re-applied so nothing is lost
@juliandescottes were you looking at this?
closing this as most of the work will be done in devtools-core
we are no longer saving unchanged images. step 2 is to cut down the image size, but that can be done later when i take over james' docker image
closing this as i don't think that we need to show "x files named "y"". 

It's a small UI detail that is largely unnecessary in this context
added to devtools-core
moved to devtools-core https://github.com/devtools-html/debugger.html/issues/1485
I believe this is supported. We can always re-open
this is no no longer relevant post postcss landing. We can make a new RTL follow up later
closing this as we haven't heard about it in awhile. We can always re-open
closing this as it's stale.

our command buttons are pixel snapped, search is different, ...
I believe the globe is okay
closing this as it is not a priority to clean this up. 

We don't use it in the panel. 

If we need to use this in other contexts or upgrade `main.js` we can revisit the issue
oops, meant to add this to devtools-core :)
oops, meant to add this to devtools-core
strange - looks like it's still not saving the artifact...
I saw this the other night so here's some reference points.

This is where a `DOMNode` is detected.  Our location might be [somewhere here](https://github.com/devtools-html/debugger.html/blob/master/src/components/ObjectInspector.js#L142-L172)

https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/widgets/VariablesView.jsm#2483

```js
    // DOMNodes get special treatment since they can be linked to the inspector
    if (this._valueGrip.preview && this._valueGrip.preview.kind === "DOMNode") {
      this._linkToInspector();
    }
```

And starting from here on down is where the action is.

https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/widgets/VariablesView.jsm#2741

```js
  _isLinkableToInspector: function () {
    let isDomNode = this._valueGrip && this._valueGrip.preview.kind === "DOMNode";
    let hasBeenLinked = this._linkedToInspector;
    let hasToolbox = !!this.toolbox;

    return isDomNode && !hasBeenLinked && hasToolbox;
  },
```

```js
  _linkToInspector: function () {
    if (!this._isLinkableToInspector()) {
      return;
    }

    // Listen to value mouseover/click events to highlight and jump
    this._valueLabel.addEventListener("mouseover", this.highlightDomNode, false);
    this._valueLabel.addEventListener("mouseout", this.unhighlightDomNode, false);

    // Add a button to open the node in the inspector
    this._openInspectorNode = this.document.createElement("toolbarbutton");
    this._openInspectorNode.className = "plain variables-view-open-inspector";
    this._openInspectorNode.addEventListener("mousedown", this.openNodeInInspector, false);
    this._title.appendChild(this._openInspectorNode);

    this._linkedToInspector = true;
  },
```

```js
  openNodeInInspector: function (event) {
    if (!this.toolbox) {
      return promise.reject(new Error("Toolbox not available"));
    }

    event && event.stopPropagation();

    return Task.spawn(function* () {
      yield this.toolbox.initInspector();

      let nodeFront = this._nodeFront;
      if (!nodeFront) {
        nodeFront = yield this.toolbox.walker.getNodeActorFromObjectActor(this._valueGrip.actor);
      }

      if (nodeFront) {
        yield this.toolbox.selectTool("inspector");

        let inspectorReady = defer();
        this.toolbox.getPanel("inspector").once("inspector-updated", inspectorReady.resolve);
        yield this.toolbox.selection.setNodeFront(nodeFront, "variables-view");
        yield inspectorReady.promise;
      }
    }.bind(this));
  },
```
> strange - looks like it's still not saving the artifact...

I feel like something strange is going on with my circleci...
Hi @jasonLaster 

I found a different solution to this problem. Instead of using a random number to ensure `this.props.shownSource` is updated every time when we reveal a source, I reset `this.props.shownSource` every time we finish revealing a source. So every time before we reveal a source `this.props.shownSource` is an empty string, it will be updated every time and `componentWillReceiveProps` will be called. 

I think this approach is better than my previous attempt because it's deterministic and simpler. :)  
@arthur801031 did you know you can use the `local` config to set feature flags: https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#creating-a-local-config. You also have hot-reloading, which would help here too!
@jasonLaster I didn't know that. That's really helpful! Thanks! :)
Hmm, I have a pretty good solution here, but I know you're not going to like it :)

Lets not let you do it. i.e. lets only show the context menu for "show source" if the source is not already shown. This is a little lame, but I think it is fine and it's better than adding additional complexity to our actions or components. :)

If you want to feel better, atom doesn't let you reveal a non-selected source :) so they also cop out on occassion

![](http://g.recordit.co/Va8FNTuwsq.gif)
That's a good find!

Ahh, i see. Does this happen if you pause in the global scope?


Here's some context:
```diff



diff --git a/src/components/ObjectInspector.js b/src/components/ObjectInspector.js
index f546cb0..f683913 100644
--- a/src/components/ObjectInspector.js
+++ b/src/components/ObjectInspector.js
@@ -185,9 +185,17 @@ const ObjectInspector = React.createClass({
       getChildren: this.getChildren,
       getRoots: () => roots,
       getKey: item => item.path,
+
       autoExpand: 0,
+
+      // this is the key, we expand one level deep
       autoExpandDepth: 1,
+
+      // and only the first scope
       autoExpandAll: false,
+
+      // autoExpandDepth should be 0 if we only have one scope a.k.a just a global scope
+
```
The context menu doesn't seem to work in Firefox, only in Chrome.
@arthur801031 this will probably work :) 

https://gist.github.com/jasonLaster/b89e693a7d40fafff8b1c0dd3ad5e763
@clarkbw hmm the `line - 1` looks like it's coming from the generated source. I wonder why that is...
> The context menu doesn't seem to work in Firefox, only in Chrome

Take a look at the code again. It is trying to tell us, watch out for firefox!
I'll update the docs in a separate PR
closing this as it's probably more work than it's worth.
closing it as it's probably more work than it's worth
@jasonLaster 

I will take a look at this tomorrow :)
Sorry @jasonLaster but I did not have time. I was kind of busy lately. Nothing blocks me except that. I will ping you if I have any trouble.
If it is urgent and you want to give it to somebody else not problem then. I contribute when I can how much I can and I hope I do not slow down the project :)
@jasonLaster thanks for the review! 

I'll keep working on the old version that still had the /packages folder in debugger.html for now. When we feel this is ready to merge I'll open a PR on devtools-core.
Nice! Didn't realize flex would just work. 

By the way, I believe breakpoints might have something crazy. 

mind sharing screenshots with rtl and ltr and both chrome and Firefox?
I guess the right way to handle the "clicking away (unfocusing) the input closes it" is to add a click event listener on the whole debugger when the RightSidebar component mounts, and toggle the expressionInputVisibility flag.

@jasonLaster  what do you think? 
on this now!
@liorpr are you on this?
@jacobjzhang are you interested in grabbing this
Yeah, this happened to me too and I thought it was me.

You keep filing the issues that confuse me.
Thanks @liorpr! Here's the breakpoints issue https://github.com/devtools-html/debugger.html/issues/1506

Interestingly, we're using https://github.com/gasolin/postcss-bidirection, which turns out that it worked with the floats as well.

I'll update the [docs](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#rtl) here to mention that.

![screen shot 2016-12-20 at 5 17 44 pm](https://cloud.githubusercontent.com/assets/254562/21370166/7d9e3dc4-c6d8-11e6-8569-563cfaae28b9.png)

Here's a gif of how well the call stack deals with small widths!

![](http://g.recordit.co/rypMnmr2iS.gif)
"Reveal in Tree" sounds excellent to me.
@Zacqary interested in this gnarly bug? 
@clarkbw  is this done? :)
Hi @jasonLaster 

Please check. Thank you!
I will take a stab at this :)
@jasonLaster 

Another approach is using `getURL()` from `sources-tree.js`. I've tried this on `moatad.js` from https://www.cnet.com/. `getURL(source.get("url"));` would give us 

<img width="240" alt="screen shot 2016-12-21 at 10 58 46 am" src="https://cloud.githubusercontent.com/assets/4562118/21375952/3e3b57a4-c76c-11e6-92f1-c5530e49a2c7.png">

So we would have to process `path` object by removing the folder name that comes before the filename. Please let me know which approach you would like me to take. Thank you! :)

Nice idea
Hey @zspitzer!

Funny you ask, we just landed this https://github.com/devtools-html/debugger.html/pull/1474

I think this should address it. Clicking the gutter is an interesting idea. What we have is a little awkward now ... 
Hmm, do you need a yarn update. Do you expect that to happen automatically?
Hmm, could  getURL return filename?
@jasonLaster  

Please check. Thank you! :)
well, circle is passing lol
> Do you expect that to happen automatically?

I do! 

Seems I have an upstream branch issue...
This **really is** a cool feature!
@jasonLaster 

Please check. Thank you! :)
I'm not able to reproduce this on Nightly anymore. The disable breakpoint works just fine on line 17 now.  Please reopen this if we're able to reproduce again.
Just checked again and this is still an issue.
CC @juliandescottes are you working on this?
Need to further figure this out.  Our docker image is too large.
Putting up a PR for this initial change.  We can talk about doing further work but this moves us in a good direction for now.
I looked quickly into this and it turns out that for some reason F8 maps to the `keyD` keydown event in chrome, but not firefox...


```js
shortcuts.on("F8", () => alert("why"))
```
> F8 maps to the keyD keydown event in chrome, but not firefox...

I assume our library for shortcuts has been tested in Firefox but actually has little or no testing in Chrome.  Overtime this might be a reason to look at something else like [mousetrap](https://craig.is/killing/mice) which has much broader test coverage.
@Garbee is on it
Here's a re-write of the issue overview based on what we know now:

### Steps to Reproduce

1. Open localhost:8000
2. Open a new tab and select "localhost:8000: Debugger" (basically start inception)

#### Actual Result
Observe that in the "webpack://" domain we show a directory `webpack/bootstrap 5aa234` and file `(index)`

#### Expected Result
We would like to see a directory `webpack` and file `bootstrap 5aa234`

### How do we do this:

Well, there are plenty of traps here, but the key understanding is that our `sources-tree` utils logic should be smarter:

* Currently we assume a path part is a file if it's at the end and we see a period
* We should be smarter than that and say, we know a path part is a file if it's the last part and there aren't and there aren't any child files.

#### Examples

* bar file: `foo/bar` should become directory `foo` file `bar`
* index, `foo/bar`, `foo/bar/bazz` should become directories `foo/bar`, with files `(index)` and `bazz`. We know we need inex because `bar` in this case has a child file!

```diff
diff --git a/src/utils/sources-tree.js b/src/utils/sources-tree.js
index 9c85739..2c1adba 100644
--- a/src/utils/sources-tree.js
+++ b/src/utils/sources-tree.js
@@ -142,6 +142,8 @@ function addToTree(tree: any, source: TmpSource) {
   url.path = decodeURIComponent(url.path);

   const parts = url.path.split("/").filter(p => p !== "");
+
+  // this is should be smarter...
   const isDir = (parts.length === 0 ||
                  parts[parts.length - 1].indexOf(".") === -1);
   parts.unshift(url.group);
@@ -183,6 +185,7 @@ function addToTree(tree: any, source: TmpSource) {

   // Overwrite the contents of the final node to store the source
   // there.
+  // => this is likely where the problem is ...
   if (isDir) {
     subtree.contents.unshift(createNode("(index)", source.get("url"), source));
   } else {
```


### Our Debugger
![screen shot 2016-11-29 at 4 29 25 pm](https://cloud.githubusercontent.com/assets/254562/20729676/1086fff6-b651-11e6-8abb-857cef9fb7e6.png)

### Chrome Debugger
![screen shot 2016-11-29 at 4 30 06 pm](https://cloud.githubusercontent.com/assets/254562/20729698/253e3fae-b651-11e6-82ea-b6b335a3c1b7.png)

I was not able to reproduce this 
No worries, if it's okay I think I'm going to take this one over. I have some ideas about how i want to do some refactoring beforehand :)

We've got lots of other "bugs" and "up for grabs"
@jasonLaster Sure.... Pick it up if you wish. I'll just ping you when I have some time. I have some side projects that I need to finish before I dedicate more time to debugger.html.
@jasonLaster 

Really great suggestion! There is much less code without using redux :) Please check. Thank you!

**Edit:** 
I also added `return` in `findSource` because once the program finds the target url it should just exit the function. Otherwise, it would check for other unnecessary directories/files.
@jasonLaster 

Thank you very much! :) 
I'll take this if you don't mind @jasonLaster.
removed the "in-progress" label as this bug seems like it's not as important as other bugs
hang on, what about wrapping?
now that #1474 has landed, a hover tooltip with the source file and line number would be possible?
Thanks @clarkbw. @arthur801031 welcome to the flow club!

Flow is one of the coolest things we're doing on the project, gives us lots of confidence with some of these low level changes
@wldcordeiro nah - i want this one :) 


BTW, this is where Chrome has the logic for their feature: https://github.com/ChromeDevTools/devtools-frontend/blob/master/front_end/sources/DebuggerPausedMessage.js#L34-L71
Not sure if I found the right long term solution but I think its subtle yet still indicates the difference.
> Here's the old code
> https://dxr.mozilla.org/mozilla-central/source/devtools/client/debugger/views/variable-bubble-view.js

For the popup to be _transient_: There's already a html tooltip popup widget as used for the [image thumbnails](https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor#Image_thumbnails) of Network+Inspector and the [cause js column](https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor#Cause_column). I think it's in https://dxr.mozilla.org/mozilla-central/source/devtools/client/shared/widgets/tooltip/HTMLTooltip.js
I think it's safe to copy over the SVG code from m-c and inline it here.
The assets in m-c went through my review where I nitpicked about the blurry pause icon, I'm guessing debugger-html has the wrong version ?

Here's a pixel snapped version: 
https://firefoxux.github.io/firefox-svg-icons/viewer/#pause
I think a very light goldish background would be good too.  Nice work though, this looks great!
@darkwing hmm that could be tough on the eyes for dark mode unless we do something different there. 
Meh, maybe we don't do it for dark mode, it's really just nice for the default white theme.
@darkwing i think this is also one of those things where you've got to see it first.

> light goldish background

to be honest. When I hear that I think, hmm background colors generally can be awkward and this one could come off as pee like... 

Now, to be fair... as we're talking about this, i just remembered that we landed another potential pee like background fill today :) so who knows

Here's the other [PR](https://github.com/devtools-html/debugger.html/pull/1529). And the color is [lemonchiffon](https://github.com/clarkbw/debugger.html/blob/373b8fe59964a63925e6bc840e89ae1b672f76d4/src/components/WhyPaused.css#L3). 

Thanks @nt1m I never knew about firefoxux, which is an awesome name by the way!

I just made this issue up for grabs, because I believe the task is to simply replace the pause svg we have on file with this new one and perhaps adjust the CSS so that it lines up.

Thanks again!
>  I'll be sure to investigate soon, unless you want to hack on a prototype.

@jasonLaster Appreciated, but sorry, no time, unfortunately (kids, job, life - in random order ;-) Filing a bug report is much easier (and something I can do "in between") than actually fixing it. Kudos to you and your team, thus.
Happy to look. 
So does this mean we need to have duplicate keys?  Leave the keys for the old debugger and then add new keys for the new strings we want?  This patch reverts things and I don't understand where that puts us.
> I think we use 24px for toolbars

I'm not sure if this was intentional or not.  Will need to investigate.
Sorry for being clear. 

In this case it's completely fine to use the same key as before because the old translations are valid. 

We only need a new key when the translations would change dramatically 
> Here's the other PR. And the color is lemonchiffon.

That color choice should be reviewed.  I originally chose it because I thought it was funny and now its not so funny but we still don't have a theme variable color.
I could have sworn there was an effort for the vertical rhythm not too long ago and we followed guidelines @helenvholmes shared with us, but I agree that we should be consistent between tools.
I'll be taking this.
Great write up! 

One critique, you should have made the screenshot a GIF!

@clarkbw,@wldcordeiro I think the current height (24px) was decided before Helen's arrival (I remember it was discussed with Brian and Darrin). Our toolbars used a lot of vertical space before then, and 24px seemed like a reasonable height.

Either way, if there are new guidelines, all tools should follow them, not just debugger-html
First I got:

```
warning fsevents@1.0.15: The platform "linux" is incompatible with this module.
info "fsevents@1.0.15" is an optional dependency and failed compatibility check. Excluding it from installation.
```

Doesn't seem to be fatal.

Other than this it all worked for me.  I had to uninstall the Fedora `node` and instead install the `nodejs` package from the nodesource repository.

If I'm understanding correctly, the expected behavior is:

- When you click on a breakpoint in the Breakpoints sidebar, only that breakpoint's line should be highlighted
- When you switch tabs to a new source, all of its breakpoints' lines should be highlighted

And the actual behavior is:

- When you click on a breakpoint in the Breakpoints sidebar that's in a different source, it will switch the tab, and then default to the behavior where it highlights all breakpoints instead of only highlighting the one you clicked on?
Oh actually it looks like in the GIF it's not even highlighting *all* of them when you switch the tab, just one or two.

So what's the expected behavior on tab-switch then? Is it supposed to be highlighting any breakpoints when you switch the tab or not?
Hey @arthur801031 just pushed a fix for the test failure. 
@jasonLaster 

Thank you very much! :)
No problem!

Thanks for the great work
@jasonLaster I can grab this
Merging.

https://circleci.com/gh/jasonLaster/debugger.html/1789

^ getting a green on my circle :/
@jasonLaster The vast majority of the typing for Editor.js is going to be around CodeMirror. What are your thoughts on integrating https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/codemirror types into the project? I'm not sure what the level of effort here would be.
@jasonLaster I think this could be interesting. May I?
@jasonLaster Hey dumb question, where do I find how to get the source URL for frames and the source tree? I see getSelectedSource in Editor.js but am assuming getSelectedFrame is more useful-- do we need to write a function to keep the URL structures the same?
@jacobjzhang looks like frames already have a source

https://github.com/devtools-html/debugger.html/blob/master/src/components/Frames.js#L119-L122
@jasonLaster  

I will take a stab at this :)
Rebased with the editor not being rendered twice.
Looking good!
Will play with it tomorrow morning
@jasonLaster 

Please check. Thank you! :)
Looks like this is fixed on Nightly. We have been fixing a lot of issues on the event bubble recently, I'll try to find the bugzilla reference.
I think this was fixed by [Bug 1315639](https://bugzilla.mozilla.org/show_bug.cgi?id=1315639) according to [comment 4](https://bugzilla.mozilla.org/show_bug.cgi?id=1315639#c4)

Closing.
Running `yarn test-all` is successful locally :/ Just rebased on master and pushed again, let's see if CI is still complaining.
@tromey It still does not work for me. I fetched the latest sources from debugger.html, I have nodejs package installed and not node. I also get the warning you are mentioning while running yarn install.
@andreicristianpetcu I know this is a big ask, but mind re-installing node v7 from nodesource?
Hey jason, newbie here.. new to yarn too but when I run yarn run chrome, it kind of assumes that I'm on a mac and gives an error. FF works fine. Does that mean I'll have to use only ff while debugging? I'm on ubuntu.

Hmm, could not find the path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome.
Try looking for chrome with ls /Applications
chrome exited with code -2
Done in 0.92s.

tbh I'm just trying to get my head around oss contributions and I sort of picked this one for my first stab. I'm fine working on ff. I've opened 8000 on chrome. Just set up the dev env and it's too late in the night. I'll try looking at it tomorrow first thing in the morning see if I can fix this and submit a PR. :D
@jasonLaster 

I will take a stab at this :)
Hi @jasonLaster,

I added the persistTabs (sourcesURL) code to the reducers and connected them to SourceTabs.js. For the persistent storage of those URLs, are we using [localStorage](http://www.w3schools.com/html/html5_webstorage.asp) ?
Hmm, there's a patch in the issue that's a good start. 

Couple notes 
- we don't need a new persiatTabs action. We just need to persist tabs in the selectSource and closeTab reducer event 
- we need to save source URLs and not IDs. The patch switches from ids to urls. We do this be urls are the same across refreshes. 
- local storage is easy. Just localStorage.set("tabs", tabs)
Hi @jasonLaster , I've got a question.

It seems Chrome's debugger keeps each debuggee's persistTabs. Is the following approach ok?
```
tabs = [object1, object2,...] 

where object1 is ["cnn.com", list of sources urls] and 
object2 is ["yahoo.com", list of sources urls]

localStorage.set("persistTabs", tabs)
```

Investigated a bit more and the require('mocha/mocha.css') from integration/tests.js creates another styles.css bundle which overrides the one created by the main bundle.

We could create a dedicated CSS file for each webpack bundle or allow tools to provide an exclude regexp for the CSS bundling. I'll load mocha.css differently to get this to work and will open another PR on devtools-core to discuss the issue mentioned above. 
@jasonLaster tests are now passing, I'll let you do a final check before merging!
Nice catch! 

This one was pretty frustrating. Good call on the CSS. 

Eventually we'll write our own reporter and ignore the mocha CSS. I'd be happy to write that now and punt on the problem of different CSS bundles. 
Thanks @binarybaba! Just played with it and found a couple things

* the new tab button is slightly higher than the tabs
* the new tab button could use some hover styles (`cursor: pointer`, perhaps slightly darker)
* when the header is narrowed, the more tabs button overlays the new tab button

sorry if this is some new requirements that were unmentioned earlier

![](http://g.recordit.co/LjUTzJujad.gif)
Yea, that looks :)

Perhaps just tabs
I think this is a "CodeMirror" thing with the built in search. Try turning on 'editorSearch' in your local confit.  See: https://github.com/devtools-html/debugger.html/blob/master/docs/feature-flags.md

Let me know if that helps!
I believe we should be trending towards having more space (vertical space and bigger fonts) - since this helps with legibility as our font is already really tiny. I would hate to see the debugger.html adapt to the old standard when it should be the other way around where all the other tools should be adapting to the new standard.
@jasonLaster this is cool, let me do it please :-)
hokay I just came home a while ago and man I did not see that coming. I thought github would give me a space to write the summary but it didn't. Here's the stuff I changed:

- Changed the drop down button size to align more with the add new button
- Changed the toggle buttons alignment so they horizontally align better with right sidebar buttons
- Fixed the overlay problem
- Stylized the add new button a bit on hover (I've refrained from adding my own color.. chosen the theme's source tree active color )
- Allowed overflow on source tabs hence when they're active, there is no bottom border.. so it looks more like a tab
- Removed the new lines finally haha

I think I've covered the stuff and don't see any odd stuff.. but if you find one, please bear with me and let me know!
Yep, I agree. There really isn't enough space with 24px. 
I dropped the new tab button styling from this PR because I'm not sure what treatment would be best.

Using the close button UI is not a bad idea though. Perhaps it's a little strong through.
Nice!

I just merged @binarybaba's work on the source header which touched some styles as well.

RE: @gabrielluong's point about going in the direction of more space. I agree that more vertical space is better, but perhaps would prefer to be consistent.  
Hey it was your call in the end so kudos to you! I had real fun though. Thanks!
Yeah, one of those changes we should do at the same time. 
Wow, the CSS really needs some reworking, it seems to rely a lot on dimensions of each others elements, which is quite fragile. I suspect the CSS could be improved with flexbox, I might take a look if I have some time.
@gabrielluong @clarkbw 
For debugger.html, I would agree 24px is not enough vertical space (considering the crowded tabbar), but for the other tools, considering the low amount of content in the toolbars, 30px would be a waste, and the content would fit fine in 24px.

Here's how the toolbox used to look like if you're curious: https://people-mozilla.org/~shorlander/files/devTools-toolbox-i02/devTools-toolbox-i02.html

Our default toolbox height is 250px, and I don't think we should go above 10% for the toolbar height.


@gabrielluong Also, about the font-size, it really depends on the platform you're on: Windows uses 12px, OSX uses 11px, Linux uses something huge.
@nt1m @clarkbw @jasonLaster  Honestly, the toolbox you have shown me looks fine to me. I am sure there will be situations where you are correct such as if i had a MBA 11", but what if you had a 27" monitor instead. I know full well of the fight for consistency among our tool, but I can just as well point out as many inconsistencies we already currently have such as the filter bar in the new console and all the other tools or how the style editor does search compare to the old debugger. 

So, we should be moving forward because if we undo this change now, I know very well we will never move back towards this direction and we go back into this endless cycle where our current UX never really improves. This is an inconsistency but it is also an UX direction so let's not be undoing work and decisions that were already clearly thought out.
Likewise! 

Stick around. Stop by our office hours next week!
@gabrielluong The toolbars do take quite some vertical space (percentage-wise). I don't know about people monitors, but I refer to the default toolbox height which is 250px. 

> I know full well of the fight for consistency among our tool, but I can just as well point out as many inconsistencies we already currently have such as the filter bar in the new console and all the other tools or how the style editor does search compare to the old debugger.

Unfortunately, having those inconsistencies build up makes the unpolished devtools we have today.
I understand the inconsistencies will go over time, but there are absolutely no bugs filed, no official specs about those details, which makes me think that "over time" is not close from soon and that we'll end up shipping the current mess.

If I'm filing this issue, it's just to get action/attention on this inconsistency, either in debugger-html, or either within m-c.

It would be much faster to take action on those issues if we could share CSS between m-c and debugger-html. Not sure if there are plans for that, but I thought I'd mention it. 


> Our default toolbox height is 250px, and I don't think we should go above 10% for the toolbar height.

That's an interesting rule, I'm not sure where it is derived from.

I'm worried less about the inconsistency in height of toolbars (which should be fixed with shared CSS as you point out) as the inconsistent experiences of search and other actions which should be shared widgets as well.
@nt1m I think we should track this, perhaps somewhere else.  But its good that you filed this, I wasn't aware of it before now.
I'm closing this out for now.

I think it would be awesome if someone, like @nt1m, moved our CSS to something like flexbox to make it more manageable than what it is now.
@jasonLaster 

Please check. Thank you! :)
OK, fixed.
From my inital investigations, As seen [here](https://github.com/ChromeDevTools/devtools-frontend/blob/master/front_end/components/RemoteObjectPreviewFormatter.js#L7) Chrome debugger frontend makes use an experimental [`preview`](https://chromedevtools.github.io/debugger-protocol-viewer/tot/Runtime/#type-ObjectPreview) property object which exists on the [`RemoteObject`](https://chromedevtools.github.io/debugger-protocol-viewer/tot/Runtime/#type-RemoteObject), as the main entry point for variables formatting.

The `RemoteObject` we get back from the scopeChain at the moment does not include the desired `preview` object as shown below.

	 "value": {
	   "type": "function",
	   "className": "Function",
	   "description": "function () {\n this.$el.remove();\n this.stopListening();\n returnthis;\n }",
	   "objectId": "{\"injectedScriptId\":2,\"id\":129}"
     },

i looked at the `protocol.json` it seems to be fine. Any ideas? 
@jasonLaster 

i'm still digging, might just figure it out. :)
Absolutely!
@binarybaba mind sharing screenshots 
* with chrome and firefox.
* clicked and unclicked
* and light theme dark theme [themes](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#themes)

Hmm, my guess is that this will slow down dragging the sidebars.

Give it a try and let me know.

If it does, we will need to add an `animating` class that applies the transition and then remove it after the animation is done. perhaps with an `animationend` handler
@jasonLaster 

For small files, the restore is fine, but when the tabs that we're restoring are large files, we restore too early. I'm not sure where to execute the restore, so that we wait long enough for the large files to finish loading. Right now I'm executing the restore when `this.props.sources == prevProps.sources` inside `SourcesTree's componentDidUpdate()`.
You _are_ right. I actually resorted to lesser timing function because it was going glitchy over 0.3s. Lemme work on this and get back to you.
@clarkbw that fixed it!
Sounds good. Thanks for investigating 
Great. We'll get the new search bar out soon
hmm, I think we should suppress search on the window so that this is never available.

This is a little bit difficult because we bind cmd+f in EditorSearchBar which might only be bound once we've shown a source
Nice find @joshunger. I think this is mostly a question of adding a firefox feature, and not adding it to V8 yet.

We should have saved the *reason* in the pause data, but it is likely that we missed something or the reason is different

https://github.com/juliandescottes/devtools-core/blob/storybook/packages/devtools-client-adapters/src/chrome/events.js#L51-L54

```diff
diff --git a/src/components/WhyPaused.js b/src/components/WhyPaused.js
index 6b4f90d..c528016 100644
--- a/src/components/WhyPaused.js
+++ b/src/components/WhyPaused.js
@@ -19,6 +19,7 @@ const WhyPaused = React.createClass({

   render() {
     const { pauseInfo } = this.props;
+    // => here
     const reason = getPauseReason(pauseInfo);

     return reason ?
diff --git a/src/utils/pause.js b/src/utils/pause.js
index ded7e0b..51cabc5 100644
--- a/src/utils/pause.js
+++ b/src/utils/pause.js
@@ -23,6 +23,8 @@ function updateFrameLocations(frames: FrameType[]): Promise<FrameType[]> {
 // These are the known unhandled reasons:
 // "breakpointConditionThrown", "clientEvaluated"
 // "interrupted", "attached"
+
+// we might need a new mapping for V8
 const reasons = {
   "debuggerStatement": "whyPaused.debuggerStatement",
   "breakpoint": "whyPaused.breakpoint",
```
That's a great call.

Here's a quick patch for what it could look like: 

```diff
 const args = minimist(process.argv.slice(2),
 {
-  boolean: ["start", "tests", "websocket"],
+  boolean: ["start", "tests", "websocket", "nightly"],
   string: ["location"],
 });

 const isWindows = /^win/.test(process.platform);
 const shouldStart = args.start;
 const isTests = args.tests;
+const useNightly = args.nightly;
 const useWebSocket = args.websocket;

 if (isWindows) {
@@ -33,7 +34,12 @@ function binaryArgs() {
 }

 function firefoxBinary() {
-  let binary = new firefox.Binary();
+  let binary;
+  if (useNightly) {
+    binary = new firefox.Binary('/Applications/FirefoxNightly.app/Contents/MacOS/firefox-bin')
+  } else {
+    binary = new firefox.Binary();
+  }
```




>  share CSS between m-c and debugger-html

we do share css https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/src/lib/themes
closing as this is not actionable.

this is a useful discussion, so lets keep talking
closing this now as this is likely a node issue. Lets re-open it if something new comes in
renamed the issue to split out two duplicate issues. here's the new one #1562 
@jasonLaster on second thought, do you loose your history every time you `yarn run firefox`?  I was seeing weird behavior.
Yeah so if I'm just calling FF bin directly maybe this isn't necessary
Feel free to close if we don't want to go this route.
Oh nice - the bug comes from @fitzgen's https://github.com/mozilla/pretty-fast lib. 

Closing as this is something that we'll need to do there.
Unfortunately, issue tracking is turned off and points to the debugger component :)
Nice find!

<img width="738" alt="screen shot 2016-12-28 at 2 03 40 pm" src="https://cloud.githubusercontent.com/assets/254562/21529314/7cba6a0c-cd06-11e6-92a1-7452f01732b3.png">


The splitbox is a shared component and now lives in [devtools-core](https://github.com/devtools-html/devtools-core). It's still fairly easy to make the change and see it locally.

here's a patch that will help get started
```diff
client/shared/components/splitter/SplitBox.js
index 91f3804..fbb54cc 100644
--- a/packages/devtools-modules/client/shared/components/splitter/SplitBox.js
+++ b/packages/devtools-modules/client/shared/components/splitter/SplitBox.js
@@ -193,7 +193,7 @@ const SplitBox = React.createClass({

   render() {
     const vert = this.state.vert;
-    const { startPanel, endPanel, endPanelControl, splitterSize } = this.props;
+    const { startPanel, endPanel, endPanelControl, splitterSize, endPanelCollapsed } = this.props;

     let style = Object.assign({}, this.props.style);

@@ -217,6 +217,8 @@ const SplitBox = React.createClass({
         style: style },
         startPanel ?
           dom.div({
+
+            // we should add a 'collapsed' classname
             className: endPanelControl ? "uncontrolled" : "controlled",
             style: leftPanelStyle },
             startPanel
@@ -230,7 +232,13 @@ const SplitBox = React.createClass({
         }),
         endPanel ?
           dom.div({
+            // we should add a 'collapsed' classname
             className: endPanelControl ? "controlled" : "uncontrolled",
+            className: classnames({
+              controlled: endPanelControl,
+              uncontrolled: !endPanelControl,
+              collapsed: endPanelCollapsed
+            })
             style: rightPanelStyle },
             endPanel
           ) : null
```
James and I talked about creating a temp profile on first run that could be reused. I think it's a good idea.  
I like it. I still want some hover effect for the non active tabs, perhaps just the background. 
@darkwing I like it!
I installed latest node with ndenv. I have v7.3.0 and it still failed. It's ok to close it.
Hey really sorry for not putting up screenshots. I made gifs. Here's the stuff so you can compare:

**Chrome Light current**
![pc-l](https://cloud.githubusercontent.com/assets/6381439/21531224/450fdee6-cd6c-11e6-9f65-ee27f80e8736.gif)

**Chrome Light in PR**
![c-l](https://cloud.githubusercontent.com/assets/6381439/21531244/71327c18-cd6c-11e6-83fd-c8b999dd49b0.gif)

**Chrome Dark current**
![pc-d](https://cloud.githubusercontent.com/assets/6381439/21531263/957cc678-cd6c-11e6-8c06-53afd56bebaa.gif)

**Chrome Dark in PR**
![c-d](https://cloud.githubusercontent.com/assets/6381439/21531270/a0050fa6-cd6c-11e6-9f6d-b351c62932c6.gif)

**Firefox Light current**
![pf-l](https://cloud.githubusercontent.com/assets/6381439/21531283/b533afea-cd6c-11e6-8df0-704249baaf9c.gif)

**Firefox Light in PR**
![f-l](https://cloud.githubusercontent.com/assets/6381439/21531289/bd63dec4-cd6c-11e6-86d6-2498a27caa98.gif)

**Firefox Dark current**
![pf-d](https://cloud.githubusercontent.com/assets/6381439/21531293/c56fb6ba-cd6c-11e6-991b-b8b65e432ed3.gif)

**Firefox Dark in PR**
![f-d](https://cloud.githubusercontent.com/assets/6381439/21531297/ccf02794-cd6c-11e6-8ece-0db6e1569ec3.gif)


Haha! phew!
hmm, @andreicristianpetcu weird. mind trying this for node 7.x- https://github.com/nodesource/distributions#installation-instructions

Also, perhaps try getting node 7.0. maybe 7.3 is broken :/
@liorpr mind if i snag this? I'm still not thrilled with the UX 
@jasonLaster oh sorry! totally missed it! hmm I guess I don't mind, would be happy to take it after you make up your mind about it :)
Hey @bomsy here's what i've got so far by the way

https://github.com/devtools-html/debugger.html/compare/master...jasonLaster:chrome-vars?expand=1
An uplift of this fix would be appreciated.
Okay I was trying not to touch the js even to add classes since it's react... Can't do this one. Transition surely is glitchy. I officially quit lol.
Hi @jasonLaster 

I'm trying this way to only load the active tab's source text. In `SourcesTree.js`, I added the following code:
```
componentDidUpdate(prevProps, prevState) {
    // Load the selectedSource's source text when all the sources are
    // loaded.
    if (this.props.selectedSource &&
      prevProps.sources.size == this.props.sources.size) {
      this.props.selectSource(this.props.selectedSource.get("id"));
    }
}
```
What this does is that we only load the active tab's source text when all the sources in the tree are finished loading at this given time. However, there is an  **issue**. This code would be executed if you select a tab or open a new file. 

@jasonLaster There are lots of things that differ, we use inline SVGs (something I'd like to avoid) for debugger-html, we don't re-use any classes (devtools-button, devtools-*input, ...) in debugger-html, ...
On the contrary, I would argue that there are many compelling reasons to be embracing inline SVGs. One simple example is the frustration we are dealing with SVGs in responsive.html. I do not believe the current CSS architecture in DevTools is serving us well and we do need to change how we should be doing things, but this is a bigger team discussion.
@gabrielluong Using inline SVGs goes against the semantics. Let's say we want a button with an icon, the logical way to go is to use a button with a background-image , not to use a span and some random svg markup inside it (which is what debugger-html does FYI). Or maybe that's normal in today's web development, I don't know anymore...

Also, it turns out we can use filter: url(chrome://global/skin/filters.svg#fill) to make the fill property apply (which is something I've been trying to push in m-c), which solves the problem you've pointed out.



The modern way you will typically see it is "\<button>\<svg>\</button>". Simply, inlining SVGs provide far more benefits than not inlining.
Updated.  
<img width="686" alt="with-background-color" src="https://cloud.githubusercontent.com/assets/46655/21550465/9e48adc8-cdbf-11e6-9371-1d0ef384ce96.png">

The border does become somewhat awkward, let me know what you think.

@gabrielluong Looks like my comment didn't render properly, corrected it now.

Irony aside, I think it's better to use correct semantics, for accessibilty and other reasons
NM, updated and now looks cool:

<img width="561" alt="updated" src="https://cloud.githubusercontent.com/assets/46655/21550730/d2d8ef92-cdc1-11e6-90d1-4c79c01c97fb.png">

@nt1m See my previous comment for the proper semantics. Again, inline svg really is not disadvantaged by anything you have mention - there are proper ARIA tags available for SVGs. I would prefer to comment on inline SVG in a more relevant bug if you still hold strong opinions here, but I would suggest taking a step back to explore practical SVG usage.
I love this thread. So much nice polish. 

Have you thought about the new tab button relative to an inactive and active tab? Looks okay now, just curious 
This needs a launchpad version bump to be true, but given that it doesn't break I think it's safe to merge. 
haha - closing this PR. Feel free to re-open, but also there are plenty of other fish in the sea
Hey @arthur801031, I hope you dont mind, but I threw a lot of code onto this pr :)

Honestly, a lot of is probably meh, but there is something that kinda works and there *are* a lot of things that I like

* tabs are saved as just URLs. The advantage is that they're a lot easier to sync w/ storage
* tabs are loaded when the debugger starts as initialState
* tabs are saved to local storage all the time

some things that are meh
* the selectedSource is not loaded right away. there's lots of code that has to protect against that, but in reality we should always have the selected url, which we can use in the source tabs UI
* elements are not always shown, but we should be able to show them for the same reason (just use the URL)

anyways, feel free to drop a lot of my code if you want to go another direction, but thought i'd share and I got carried away. This is a fun PR as I said earlier.

Hi @jasonLaster

1.  The tabs do not restore immediately when the window is refresh or close/open. The tabs are restored when you select or open a file. Is this the intended behavior?
2. Some unit tests are failing. I think some require modifying the code. Should I modify them?
Thanks for the bug fixes @arthur801031 

1. the tabs *should* show up on refresh. it's a bug :)
2. yup we should fix the code so the unit tests pass
@clarkbw where is this stuff at?

Should we merge? Is it blocked?
Actually, this is fixed with the new editor search bar
Yup. I think it's good enough for now :)
Ahh, @juliandescottes I believe you were looking at the inverse, linking from the inspector to the debugger.
Here's a patch to get started

```diff
diff --git a/src/components/Breakpoints.js b/src/components/Breakpoints.js
index 9db77d2..b81e598 100644
--- a/src/components/Breakpoints.js
+++ b/src/components/Breakpoints.js
@@ -106,7 +106,8 @@ const Breakpoints = React.createClass({
       ),
       dom.div({ className: "breakpoint-snippet" }, snippet),
       CloseButton({
-        handleClick: (ev) => this.removeBreakpoint(ev, breakpoint)
+        handleClick: (ev) => this.removeBreakpoint(ev, breakpoint),
+        title: "" // <--
       }));
   },

diff --git a/src/components/SourceTabs.js b/src/components/SourceTabs.js
index 1866182..aad0481 100755
--- a/src/components/SourceTabs.js
+++ b/src/components/SourceTabs.js
@@ -255,12 +255,16 @@ const SourceTabs = React.createClass({
       },
       isPrettyCode ? Svg("prettyPrint") : null,
       dom.div({ className: "filename" }, filename),
-      CloseButton({ handleClick: onClickClose }));
+      CloseButton({
+        handleClick: onClickClose,
+        title: "" // <---
+      }));
   },

   renderNewButton() {
     return dom.div({
       className: "new-tab-btn",
+      title: ""// <---
       onClick: () => this.props.toggleFileSearch(true)
     }, Svg("plus"));
   },
```
This is a dupe of #1378 
changed the label to server
closing this as the work will be tracked in #1574
here's a patch to get started:

```diff
diff --git a/bin/lint.js b/bin/lint.js
new file mode 100644
index 0000000..19a97ad
--- /dev/null
+++ b/bin/lint.js
@@ -0,0 +1,5 @@
+const ps = require("child_process");
+
+
+ps.execSync("npm run lint-css -s;")
+ps.execSync("npm run lint-js -s")
diff --git a/package.json b/package.json
index 655bd69..689ef37 100644
--- a/package.json
+++ b/package.json
@@ -18,7 +18,7 @@
     "start": "node bin/dev-server",
     "start-app": "TARGET=application node bin/dev-server",
     "flow": "flow",
-    "lint": "npm run lint-css -s; npm run lint-js -s",
+    "lint": "node bin/lint",
     "lint-css": "stylelint src/components/*.css",
     "lint-js": "eslint src/**/*.js",
     "lint-fix": "npm run lint-js -- --fix",
```
We can merge this. Need to open a new issue to review why the yarn lock file isn't updating 
@jasonLaster How will the work be tracked there if the information about what work needs to happen isn't present there?  ;)
*shrug*.  I'm giving up on spending time on this, but I don't see how you will keep track of the specific feature requested here without having an issue about that feature, and in that case why that shouldn't be this issue.  The most likely outcome is that it will just get forgotten.
@jasonLaster @clarkbw what about a quick start script instead?  It was a bit confusing to run `yarn run firefox` the first time and not have my profile.
@jasonLaster I don't think your calendar link is repeating?  Is is supposed to be every Tuesday? 
![image](https://cloud.githubusercontent.com/assets/2301847/21578100/1b475b36-cf31-11e6-9366-6aa266dc2ab1.png)

Thanks! We're struggling with this link. 
Hmm, what do you mean?
That issue is being tracked here: https://github.com/devtools-html/devtools-core/issues/47
@jasonLaster hmm should it remain open? 
Nope!
I'm working on this... but the component state is a bit complicated to maintain because 'indeterminate' can only be sent via JavaScript and 'checked=true' seems to override 'indeterminate=true'. It would need to be an uncontrolled input that is initialized after it mounts...
Great GIF! Looks awesome. 

@clarkbw thoughts?


I don't have a great solution for the flickering. We can brainstorm later
Nice fix. I like how you simplified the logic. 

@arthur801031 mind taking a look?
Hey @jasonLaster, initially watch expressions was evaluated as soon as it was inputted by the user but I changed it at the time to evaluate on pause. It should be an simple fix to revert it back and an easy bug to get myself back into the project. Could I take a stab at it? 
@joshunger I switched the link to the hangouts, which is probably slightly better. Devs can always add their own event in their calendar :)

@clarkbw curious what you think
added a couple of small stylistic tweaks, but this was so much great work. 

It was fun to work on this with you, lots of naming and moving things around
@wldcordeiro and @kdzwinel landed all of the major features. Lets review the UI and file some small polish bugs before we release this.
@jasonLaster awesome! It's great landing features like this. Glad to work on it.
@petrgazarov Apologies. I had meant to ping the appropriate people when I did this work. If you're looking for issues to work on feel free to ping me or @jasonLaster and we can direct you to some open ones. Again, apologies for the lack of communication.
I like the idea, there's definitely some college connotations with "office hours".
Nice!
looking at this now!
Thanks @bomsy, @jbhoosreddy, @wldcordeiro. 

Definitely don't want to make people think they're in college.
@clarkbw is this needed after the last yarn PR?
@jasonLaster looks good how do you drink with the team? 
Haha - we all have a beer at our own computers. Basically, when you open a tab, you're just using your browser...
closing as it's a dupe of https://github.com/devtools-html/debugger.html/issues/1586
looks great!
@jasonLaster Does https://github.com/devtools-html/debugger.html/issues/960 fit in here as well?

@bomsy oops, i linked to the wrong issue for #960. #1471 was about auto-expanding :)
CC @clarkbw Jaideep and I talked about the UI and agreed that persisting the select box was a *simpler* design and perhaps a little cleaner. What do you think?
> @clarkbw is this needed after the last yarn PR?

pulling out the yarn update work and just checking the original PR
looks good
I'll grab this issue. Would it be nice to move our collapse work into reducer state and not the internal? I can do either @jasonLaster.
What is broken? I'm able to open the menu with things as they were.
This needs a rebase on top of the changes for vertical layout. @Dalimil 
nice catch, I think this was chrome specific!

@wldcordeiro right clicking on the gutter menu:

```js
        (cm, line, eventName, event) => this.onGutterContextMenu(event)
```

@bomsy is an update coming? :P
Yup :)
@jasonLaster I have this working in a branch but I can't get my test passing because the value from the prefs is undefined in the tests.
I worry the tab related ones would interfere with workflows.  The find (text) feels less like it could be part of a developer workflow on a web page so I'm not worried about that, or taking over printing `cmd+P`.  
Hey @wldcordeiro I pushed some changes to make the reducer less magical with concatenation because flow got scared. I think if you finish this up flow will be happy.
@jasonLaster Can you kick CI or spot what the issue with the check is?
@jasonLaster @clarkbw let me know if there are any code changes / UI changes that could be made to improve the original PR. Thanks!
@jacobjzhang mind sharing the branch you were working on
This is likely an issue with the server so adding that tag as well.  This might be a good project for someone who wants to learn more about the debug server while also fixing an issue on the client side of things.
Hi! I'd like to try to tackle this bug.
@jasonLaster forgot to commit before switching branches so I lost my changes. Fortunately because of the scoping issues we talked about, didn't get much farther than your initial patch.
sorry @shlomif, I just did this as part of a larger fix.


closing as we'll do this in the larger polish UI issue
did leave a small comment there, but in either case this looks very good!
Here's a patch for getting started

```patch
diff --git a/src/utils/menu.js b/src/utils/menu.js
index 8242913..6b1303b 100644
--- a/src/utils/menu.js
+++ b/src/utils/menu.js
@@ -49,6 +49,11 @@ if (!isFirefoxPanel()) {
 function onShown(menu, popup) {
   popup.childNodes.forEach((menuitem, index) => {
     const item = menu.items[index];
+
+    // we'll want to do something here
+    item.disabled; // or something better
+
+    // definitely don't want this onclick
     menuitem.onclick = () => {
       item.click();
       popup.hidePopup();
```
@jasonLaster I made some of the changes as per the review. The context menu disable behavior would be a separate issue. Let me know if you think other changes should be made.
ping @jacobjzhang do you have time to finish this up?
@jasonLaster Flow is being weird, the issues left were a line that was too long and a type that was used but didn't exist. Oddly enough though I still see two errors from Flow but one is from something already in the codebase and the other is the same error but for some new code.

```
src/reducers/ui.js:32
 32:       return state.set("searchOn", action.searchOn);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ intersection. This type is incompatible with
 17: export type Record<T: Object> = {
                                     ^ object type. See: src/utils/makeRecord.js:17
  Member 1:
   17: export type Record<T: Object> = {
                                       ^ object type. See: src/utils/makeRecord.js:17
  Error:
   42:       return state.set(paneCollapsed, action.paneCollapsed);
                          ^^^ property `set`. Property not found in
   29: function update(state = State(), action: Action): Record<UIState> {
                                                                ^^^^^^^ object type
  Member 2:
   32:       return state.set("searchOn", action.searchOn);
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `set`
  Error:
   17: export type Record<T: Object> = {
                                       ^ property `delete`. Property not found in. See: src/utils/makeRecord.js:17
   29: function update(state = State(), action: Action): Record<UIState> {
                                                                ^^^^^^^ object type

src/reducers/ui.js:42
 42:       return state.set(paneCollapsed, action.paneCollapsed);
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `set`. Method cannot be called on any member of intersection type
 42:       return state.set(paneCollapsed, action.paneCollapsed);
                  ^^^^^ intersection
  Member 1:
   17: export type Record<T: Object> = {
                                       ^ object type. See: src/utils/makeRecord.js:17
  Error:
   42:       return state.set(paneCollapsed, action.paneCollapsed);
                              ^^^^^^^^^^^^^ some string with unknown value. Property not found in
   19:   set<A>(key: $Keys<T>, value: A): Record<T>;
                     ^^^^^^^^ object type. See: src/utils/makeRecord.js:19
  Member 2:
   42:       return state.set(paneCollapsed, action.paneCollapsed);
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` of call of method `set`
  Error:
   42:       return state.set(paneCollapsed, action.paneCollapsed);
                          ^^^ property `set`. Property not found in
   27: } : UIState));
           ^^^^^^^ object type
```
Sorry, that was a long process for just some string changes :)


@wldcordeiro lets look at it tomorrow... 
@clarkbw it's neat that merging https://github.com/devtools-html/devtools-core/pull/54 closed this issue. Github's NLP has gotten good!
#1599
I have moved the 'checked' property from the `ref` code and also hopefully fixed some of the flickering by putting the `breakpointLoading` condition as a toggle for the `disabled` state of the input (instead of returning some kind of a new default checkbox, it just greys out the existing in that case).
![out](https://cloud.githubusercontent.com/assets/4202539/21635222/4cd39996-d254-11e6-8f69-a24981afafa7.gif)

Ah, after clicking the "Prettify Source" the bar vanishes. I wonder why it's there in the first place since my JS is "pretty" already. 

Anyway: A whole bar for just one action seems wasteful. Also the button is really hard to discover being at right bottom which is almost the farthest away for the user's eye and mouse.
I pushed a couple of changes. Unfortunately they're amended to your flickering commit.

* updated checked logic so that we don't show the checkbox as checked when there aren't any breakpoints
* updated the `if` to just be `if (input)`
Thanks @MattCain. I liked your testing approach, I did something similar as well.

I hope you don't mind, I added a couple extra details as well like the cursor. Also, this helped me notice that we still let you select items in the context menu.

By the way, one fun anecdote, when the debugger is in the Firefox toolbox panel we can actually create our own context menus so we don't use this code. This is just about adding fake context menus locally.
CI still failing... i'm not sure what's going on @jasonLaster any ideas?
@bomsy yup! Was just looking into it :)

This is the first time we're adding a new pref to the debugger and we need to update our process to do it.

Here's an issue I just created:
https://github.com/devtools-html/debugger.html/issues/1616

@tromey found: 

```
if I use the scroll wheel, then the cursor changes to an arrow, and when that happens I can grab the scrollbar
```
closing, but lets keep talking here if you find something.
closing as it's not actionable at the moment, we can keep tracking issues here though.
closing as we're not seeing this anymore
We've moved the button from the right to the left, that hasn't landed in Firefox yet.

![screen shot 2017-01-04 at 08 47 58](https://cloud.githubusercontent.com/assets/2134/21650650/825a70c0-d25a-11e6-9d62-dfed3c1f49b6.png)

I'm closing this for now since we've tried a bunch of variations before that didn't work out.  If we have a new location we feel is better we can try that and we should also dig up all the old PRs and issues to review.  Feel free to keep using this issue for discussion even though its closed.  
This is similar for maintaining expanded state for watch expression objects

CC @bomsy 
@clarkbw Since Prettify is a file/tab concerned action I'd move it to the tab header. Just left of the close button ("close" actually is also a single file/tab concerned action). 

Plus: Ideally, I think that it should also be a toggle instead of a one-off button: This would show the status of the file ("Prettify" being "on" meaning that the file is different than the original) and one could also switch between Prettified and Original. This would seem intuitive to me.
To be honest, I have a good workaround and I do not have much interest in troubleshooting this. If it bugs other people then it might be important but for now it is not.
> we currently index on the docs repo, but I think we should move that to root for the project README.md

Yeah, especially if we linked to the various docs from the README this would make sense to me.
I would like to work on this
https://bugzilla.mozilla.org/show_bug.cgi?id=1328679
* input bar
  * This feels pretty good to me
  * One changed I'd suggest is having a more "focused" state, right now its very subtle that you are focused on the input.  Not sure what that should look like, we need @devtools-html/design 
* scroll bar
  * Feels like we need to eliminate this and use some kind of tooltip / title instead
  * On my screen the scrolling makes this unusable:  ![watch-expressions](https://cloud.githubusercontent.com/assets/2134/21660125/f4856cae-d282-11e6-974d-bd6717494cc1.png)
* close button
  * This should probably just take up a little more space and own the end cap of the element instead of floating.
  * The button looks uneven and could probably use a larger hit target
Thanks @irfanhudda! I hope you don't mind but i pushed a quick css tweak as well.
So, this is also blocked on #1616 as it's adding a new pref
Here's a patch to help you get started:

```patch

diff --git a/assets/locales/debugger.properties b/assets/locales/debugger.properties
index b83e282..7dfd02f 100644
--- a/assets/locales/debugger.properties
+++ b/assets/locales/debugger.properties
@@ -269,6 +269,10 @@ sourceTabs.closeOtherTabs=Close others
 # for closing the tabs to the right of the selected tab.
 sourceTabs.closeTabsToRight=Close tabs to the right

+# LOCALIZATION NOTE (sourceTabs.closeTabsToRight): Editor source tab context menu item
+# for closing the tabs to the right of the selected tab.
+sourceTabs.closeTabsToRight.accesskey=X
+
 # LOCALIZATION NOTE (sourceTabs.closeAllTabs): Editor source tab context menu item
 # for closing all tabs.
 sourceTabs.closeAllTabs=Close all tabs
diff --git a/src/components/Editor.js b/src/components/Editor.js
index ef778b1..4885e2d 100644
--- a/src/components/Editor.js
+++ b/src/components/Editor.js
@@ -106,6 +106,7 @@ const Editor = React.createClass({
     event.stopPropagation();
     event.preventDefault();

+  // editor content menu
     const { line, ch } = this.editor.codeMirror.coordsChar({
       left: event.clientX,
       top: event.clientY
diff --git a/src/components/SourceTabs.js b/src/components/SourceTabs.js
index 1375647..5eb02c1 100755
--- a/src/components/SourceTabs.js
+++ b/src/components/SourceTabs.js
@@ -159,12 +159,17 @@ const SourceTabs = React.createClass({

     const copySourceUrl = {
       id: "node-menu-close-tabs-to-right",
+
+      // while we're here we should also add missing labels
       label: "Copy Link Address",
-      accesskey: "X",
+
+      // we should add these to strings.json and debugger.properties
+      accesskey: L10N.getStr("sourceTabs.closeTabsToRight.accesskey"),
       disabled: false,
       click: () => copyToTheClipboard(sourceTab.get("url"))
     };

+    // source tab content menu
     const items = [
       { item: closeTabMenuItem },
       { item: closeOtherTabsMenuItem, hidden: () => tabs.size === 1 },
diff --git a/src/strings.json b/src/strings.json
index 9c915be..f7d48d6 100644
--- a/src/strings.json
+++ b/src/strings.json
@@ -50,6 +50,7 @@
   "sourceTabs.closeTab": "Close tab",
   "sourceTabs.closeOtherTabs": "Close others",
   "sourceTabs.closeTabsToRight": "Close tabs to the right",
+  "sourceTabs.closeTabsToRight.accesskey": "X",
   "sourceTabs.closeAllTabs": "Close all tabs",
   "loadingText": "Loading\u2026",
   "whyPaused.debuggerStatement": "Paused on debugger statement",
```
@jnachtigall i'm concerned about tab header as it's a fairly in frequent action.

Hmm, perhaps we add it as a context menu item. We could offer it in both the source tree item and source tab.

one argument for the footer is that we'll likely use that space for more things going forward.
* black boxing
* perhaps cursor location
* really cool things yet discovered...
@binarybaba @nt1m think you could help here? Sorry I think you two are my SVG people :)
@jasonLaster here it is.
@bomsy wow - it's so small... 

I'll be sure to check this out soon. Just figured out how to land the most up to date launchpad version
# Yippee!


@jasonLaster Thanks a lot for css tweak.

And this is my first pull request :tada:
# :man_astronaut: 

**Congrats!**

Come back soon!
I believe @Garbee is on this
@jasonLaster I use the dark theme. Can I pick this one up?
I blame the timezone for me being late to the party. 
Hi @jasonLaster

There are 2 bugs that I'm trying to crush. It would be great if you could help me out with these :)
1.  When we close the currently selected tab, all the tabs are closed.
2. When we close the non-selected tab, the sourceText for the selected tab is gone.

**Edit:**
Fixed 1.
Fixed 2.
Hi @wldcordeiro 

Here is the first bug :( 

![gb8xjshkip](https://cloud.githubusercontent.com/assets/4562118/21672852/1014899a-d360-11e6-9ec2-514f5ba7c3bc.gif)

Looking into this
@jasonLaster Correct me if I'm wrong, but I believe that this require changes to [https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/src/lib/themes/dark-theme.css#L210](https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/src/lib/themes/dark-theme.css#L210) file.
@irfanhudda thanks, that looks like the spot. It's easy to work on devtools-modules and see the change in the debugger. https://github.com/devtools-html/devtools-core#installing-locally

^ @andreicristianpetcu 
Thanks! Enjoyed been part of figuring it out! :)
i'm interested in this!
I'd like to work on this issue, @jasonLaster , if it's not already taken by someone else :)

This would be my first ever contribution to OS ever,  so I'm pretty sure I'd make a lot of whoopsies. 
@jasonLaster if this is actionable I'd like to take a stab at this. 
Yea - i think so... follow @bomsy's work with the source-search utils. should be a fun ride :) similar to your selections api, but with Editor dom events on mouse up or something :P
Thanks!
Hi @krishnagopinath. It's yours, feel free to reach out with any questions
Here's a good place to look:

```diff
diff --git a/src/components/Expressions.js b/src/components/Expressions.js
index 976e73b..739edd4 100644
--- a/src/components/Expressions.js
+++ b/src/components/Expressions.js
@@ -48,6 +48,8 @@ const Expressions = React.createClass({
     if (e.key !== "Enter") {
       return;
     }
+
+// => something in here
     const { addExpression } = this.props;
     const expression = {
       input: e.target.value,
```
Good point. Closing for now
closing this as the drivers moved to devtools core.
@binarybaba i think this might help if you're interested in picking it up again: 
https://github.com/devtools-html/debugger.html/issues/1503#issuecomment-270721409
closing as we have this working I think
closing as the other issues are broken out.
moving this to the enhancements board https://github.com/devtools-html/debugger.html/projects/5

Thanks!
moving this to the bug triage board as a note because it's low priority and i don't see us getting to it anytime soon.
closing this for now as we're tracking enhancements decently well and I don't mind closing issues now and moving them to enhancements. seems to be fine...

let me know if you have thoughts though.
it's not that bad :) 
closing as we'll improve this process on the m-c side
closing and moving to the bugs board as a note. We can always re-open when we're ready to tackle it.
@jasonLaster the buttons themselves are animated. It's the `SplitBox` itself that isn't https://github.com/devtools-html/debugger.html/blob/master/src/components/PaneToggleButton.css#L6
I'm scared of react but I'll definitely try it tomorrow.. Will see if I can wrap my head around it and tomorrow update you guys!
@jasonLaster [ping](https://github.com/devtools-html/devtools-core/pull/63) :)
@tromey approved so I'm merging, this should unblock our PRs adding some new prefs though they may need a rebase to work with these changes?
@jbhoosreddy updated, let me know what you think
I would like to work on this since I worked in the past on watch expressions
I'm adding some features to the list. Don't know if we want them in nice to have or requirements @jasonLaster 
@wldcordeiro is on this
Here's a screenshot:

![](https://cloud.githubusercontent.com/assets/254562/21696191/e4a17e30-d35a-11e6-8675-4bb7ff191ca7.png)
Here's where you can see Chrome's implementation: https://github.com/ChromeDevTools/devtools-frontend/blob/master/front_end/sources/DebuggerPausedMessage.js#L34-L71

And you'll just need to grab the strings they use (aka `DK.DebuggerModel.BreakReason.DOM`) from here: https://github.com/ChromeDevTools/devtools-frontend/blob/4b57ce79c205a38d78d7d9af6e724e7c24683eb7/front_end/sdk/DebuggerModel.js#L869

```js
SDK.DebuggerModel.BreakReason = {
  DOM: 'DOM',
  EventListener: 'EventListener',
  XHR: 'XHR',
  Exception: 'exception',
  PromiseRejection: 'promiseRejection',
  Assert: 'assert',
  DebugCommand: 'debugCommand',
  Other: 'other'
};
```
@wldcordeiro merged it as you're traveling. Let me know if you have any comments and we can easily do a follow up.
Possibly some CSS is causing the scrollbar to appear when its not actually visible.  On the Mac you need to start scrolling to see the scrollbar as normal behavior.
Need to investigate how reliably this is failing on try
Pushed up what I had for now as to not delay the project further, need help with the Frames click behavior and getting showSource to work in Editor. Initial issue has been resolved and tested.
By the way, un-related, you might like to squash your commits:

https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history

I notice that you have a lot of commits :)
#### YES

The key was to also trigger a firefox build, because the prefs get set in the build step
So, I've got a couple of suggestions for this (thanks to the chat I had with @jasonLaster ), other than reducing the font size, and the height, and adding borders :

* The red dot - Here's a little preview as to how it'll look.. of course, this looks rough and ugly but once I've done some CSS work on it, it'll look much better! (Look for the red dot next to the "Paused on breakpoint" message

![why-paused-badge](https://cloud.githubusercontent.com/assets/4935809/21704211/c42b2da6-d385-11e6-9bb4-6a75b16d187d.png)

If I were to consider adding the small red dot before the text in the `why-paused` div, I'd have to use an SVG, from the looks of it. [Can I use an SVG from anywhere on the web?](https://commons.wikimedia.org/wiki/File:Location_dot_red.svg) 

I see that other SVGs in the `assets/images` folder have an MPL as the first line, hence the question. 

* Set the message background to whatever the `--breakpoint-active-color` is. This would make sure that the user will know that this is paused, and using the same color will unify the message intent with the screen visual. I haven't looked at the entire code base, but I'm assuming the `--breakpoint-active-color` is different for the "dark" mode, which will solve the problem of visibility in the dark mode. 

![whypaused-break](https://cloud.githubusercontent.com/assets/4935809/21704353/d0737892-d386-11e6-9e22-3206f5b750d7.png)

Thoughts? 
I'd leave out the red dot.  Our goal isn't to _draw attention_ to this space as much as it is to give the user information if they are unsure why the debugger is paused. 

I like matching the breakpoint color, that makes sense to me, perhaps even dropping the opacity on that color by a bit so it fades out more than the actual breakpoint. 

And cleaning up the padding etc is def a good thing.

With this cleaned up we could start looking at #1611 next!
It's coming together, looks like it needs a rebase and some more polish.
Hi @jasonLaster 

I moved the code in previous `RESTORE_TABS` to `ADD_SOURCE`, [Line 52 - 60 in `reducers/sources.js`](https://github.com/devtools-html/debugger.html/pull/1547/files#diff-701eb9ae1383078fc8b17995acdd81bbR52), to simplify the code. While I was working on this, I discovered that while we restored tabs in the initial state, we only had to set `selectedLocation` once to make those tabs appear. So, on line 52 - 60 in `reducers/sources.js`, we set the selectedLocation if it's undefined and it's one of the persist tabs that we need to restore, which means this would only be executed once :) 


Can I start working on this?
I changed GH Pages directory to be master
If somebody has **GH Pages** or **Jekyll** experience and would be able to help us improve this, it would be really appreciated.
@nchevobbe thoughts here?
Tweaked things a little :)

![peek 06-01-2017 17-05](https://cloud.githubusercontent.com/assets/578107/21724151/8142d846-d433-11e6-9f89-39ec5e883c50.gif)

Like @krishnagopinath  I think it makes sense to have a similar hue to the one we're using for the paused-line background.
I have maybe an issue with using green to indicate something is paused, because in my mind green would mean "running" (like in traffic lights), but it's a bit out of scope here.

I think centering the label makes sense so it doesn't feel like the other label on the break point and call stack panels. I also reduced the font-size to be the same as the panel titles, i think it was a bit to prominent with the higher font-size.

I added some darker border in the same shade than the background so it feels a little more "on top" (don't know how to express it well) of the scrolled elements. The border could be shorter, or of another color, or both. I can test other combination to see what we like best.

Maybe adding a little paused ("II") icon in front of it would help, but I'm not sure since it could clash with the one in the upper toolbar.

Tell me what you think about it
Looks great, @nchevobbe ! :) 

Here's how it looks in dark mode.

![image](https://cloud.githubusercontent.com/assets/4935809/21725590/0b22ef56-d407-11e6-9a74-70ac419f5cbc.png)

> Maybe adding a little paused ("II") icon in front of it would help, but I'm not sure since it could clash with the one in the upper toolbar.

I agree with your thought. It could clash.

Shall we move on with this? 

_Excitedly hurried cos this will be my first ever PR ;)_ 

Came here to open a bug about TypeScript not having any syntax highlighting.

Just want to say that using JavaScript seems like a much better default than text to me -- ClojureScript might not highlight well in some cases, but most things would highlight pretty well. At least assuming you can tell that it's for a script and not e.g. a stylesheet?
hmm... if we're using source maps the source *should* have an extension and we can do the right thing.

The main use case is bad source maps!
@irfanhudda looks good to me. Keep it up!
@jasonLaster I've added tooltips for new tab, close tab, delete breakpoint and toggle side-pane buttins.

I'm not sure what should be tooltip text for new tab button. Let me know if this requires any changes.
Here's a quick video on how to break on these errors and find the root cause... 
![use-callstack](https://cloud.githubusercontent.com/assets/2134/21728620/110f0310-d3fc-11e6-970c-7ffcff5adfcf.gif)

* Click location in the console
* Break on that error
* Use the call stack to go up the stack until you find code that looks like the problem

@clarkbw Thanks for suggestion. I've changed tooltip text to "Search of sources (Ctrl+P)"

Thanks @irfanhudda! This looks great.

I just merged the changes from wellington's PR recently. And I'll review in a little bit!
Thanks so much for the help @irfanhudda 

Thinks for the early PR and the stream of updates. Worked the first time!
@wldcordeiro Did you have any luck with that?

@wldcordeiro cool,  will do!
@jasonLaster and @clarkbw  Thanks for quick suggestions. They helped a lot.
re tests: you could test the regex sans code mirror. We don't need to test code mirror;)

We could also try writing storybook stories or integration tests. But not a big deal
I'd like to take a look at this, if its not yet taken up by anyone, @clarkbw @jasonLaster 
I couldn't check this layout in vertical mode because, try as I could, I couldn't make the layout to switch to that mode. Wasn't it supposed to "flip" when the width was at 700px?
Go for it!
@krishnagopinath you can turn on vertical mode in local.json. 

Checkout our local development doc for more info. 
@krishnagopinath It probably means that you need to avoid using "!important" whenever possible.  It is not considered as good practice. 

Most of the times you can avoid them by using better(more specific) CSS selectors. 
@jasonLaster check the latest changes. Tell me if I need to change anything more
This is likely about supporting [CodeMirror TypeScript mode](https://codemirror.net/mode/javascript/typescript.html) which is just a one off of [CodeMirror JS mode](https://codemirror.net/mode/javascript/index.html).  I'm not sure if we get the right MIME typing to be able to differentiate TypeScript or not.
I think we could handle this pretty similar to #1611 

When paused on an exception you get some information back that could be displayed.  Either highlighted in the scope (as it used to be) but I also think the WhyPaused component could be displaying this information as well.

Here's some of the data coming back from this page: https://devtools-html.github.io/debugger-examples/examples/exceptions.html

```json
{
  "type": "PAUSED",
  "pauseInfo": {
    "why": {
      "type": "exception",
      "exception": "reachable"
    },
    "frame": {
      "id": "server1.conn10.child2/72",
      "displayName": "caughtException",
      "location": {
        "sourceId": "server1.conn10.child2/30",
        "line": 24,
        "column": 10
      },
      "this": {
        "type": "object",
        "actor": "server1.conn10.child2/pausedobj80",
        "class": "Window",
        "extensible": true,
        "frozen": false,
        "sealed": false,
        "ownPropertyLength": 805,
        "preview": {
          "kind": "ObjectWithURL",
          "url": "https://devtools-html.github.io/debugger-examples/examples/exceptions.html"
        }
      }
```

```json
{
  "type": "PAUSED",
  "pauseInfo": {
    "why": {
      "type": "exception",
      "exception": {
        "type": "object",
        "actor": "server1.conn10.child2/pausedobj93",
        "class": "Error",
        "extensible": true,
        "frozen": false,
        "sealed": false,
        "ownPropertyLength": 4,
        "preview": {
          "kind": "Error",
          "name": "Error",
          "message": "error",
          "stack": "caughtError@https://devtools-html.github.io/debugger-examples/examples/exceptions.html:16:17\n@https://devtools-html.github.io/debugger-examples/examples/exceptions.html:31:7\n",
          "fileName": "https://devtools-html.github.io/debugger-examples/examples/exceptions.html",
          "lineNumber": 16,
          "columnNumber": 17
        }
      }
    },
    "frame": {
      "id": "server1.conn10.child2/87",
      "displayName": "caughtError",
      "location": {
        "sourceId": "server1.conn10.child2/30",
        "line": 16,
        "column": 1...
```
started to look into this, here's what I got so far:

1. the deprecation mechanism works per function for the whole app, so it's not about where its happening, but why(tried to remove the mentioned render call and got this warning from somewhere else)
2. don't know why but it seems like the app does not require the correct react-dom package, but the react one, that's why the render method is considered deprecated. can't figure out how to correct this, maybe someone have an idea? didn't see explicit definition of react-dom package in package.json
@clarkbw I'm not sure what you're suggesting :)
Lets create a debugger example [here](https://devtools-html.github.io/debugger-examples/)

We can set the mode here:

```patch
diff --git a/src/components/Editor.js b/src/components/Editor.js
index 0aaafd1..f7c8306 100644
--- a/src/components/Editor.js
+++ b/src/components/Editor.js
@@ -302,6 +302,8 @@ const Editor = React.createClass({
   setMode(sourceText) {
     const contentType = sourceText.get("contentType");

+    // => we can set the mode here
+
     if (contentType.includes("javascript")) {
       this.editor.setMode({ name: "javascript" });
     } else if (contentType === "text/wasm") {
```


@Garbee are you on this? 

I believe we decided to use an `if` statement in the render to just not show the splitbox content.
Thanks @krishnagopinath we're handling that here https://github.com/devtools-html/debugger.html/issues/1564
Thanks for the great writeup. We'll work on it here:

https://github.com/devtools-html/debugger.html/issues/1108
I think we decided to use an `if` in the splitbox render to remove the content
Here are some screens

dark:
![screen shot 2017-01-09 at 10 00 25 am](https://cloud.githubusercontent.com/assets/254562/21770721/7a8e40f0-d652-11e6-9ee5-81575371e41b.png)

light:
![screen shot 2017-01-09 at 9 59 39 am](https://cloud.githubusercontent.com/assets/254562/21770722/7aaf79e6-d652-11e6-8691-6ade3dd08836.png)


firebug:
![screen shot 2017-01-09 at 10 02 55 am](https://cloud.githubusercontent.com/assets/254562/21770795/d381cb46-d652-11e6-9ade-342152fc4504.png)

@andreicristianpetcu it's yours
@amitzur are you interested in doing some of this cleanup? I trust your eye for UI detail!
@binarybaba interested in this one? The tree libraries are neat
@clarkbw we have the pause reason done. Conditional BPs should be pretty straight forward unless we need to change the theme css files which could be a pain
@Zacqary are you you still interested in this?

@joshunger, @AbhiGulati, @sankha93 would you enjoy taking a look at this super weird bug?
@irfanhudda, @krishnagopinath easy one
@amitzur this is another style one that could be nice
no worries. happy to play it by ear. 
@jasonLaster I might be interested but busy at the moment... hard to find time
@clarkbw, @jasonLaster, I'm not sure as to what is expected as a completion to this, as the patch in the issue description seems to have done almost everything about it.. 

better UX, styling? or something else? 

One thing I could think of is, if `breakpointConditionThrown`  is triggered, the debugger could offer to show up an edit action on the conditional breakpoint, thereby, pointing (/spoon-feeding) the user to that position they need to take an action on.. 

Thoughts?
Leave it as `Up for grabs` since if someone wants to jump in and do this before I get around to finishing it then I'm cool. Doing a major refactor in another project for a good chunk of today. Working on this in my spare time.

Now that I have the linking working right this should be much easier to work on. I'll try to have a working patch this evening after more of this refactor is done.
@krishnagopinath often the patches are pretty close. No worries :)


> debugger could offer to show up an edit action

Or, just open the panel... this doesn't seem to necessary though :) Unfortunately, we're not great at triggering UI things from other components
thanks for filing this. I'd be curious to see what @clarkbw says, but my instinct is to close this as the old debugger is deprecated and we hope to be at parity by the end of Q1.
Thanks for filing. 

There are a couple of challenges with lining up the breakpoint gutter and debug line, but it would be nice to have a normal and maybe comfortable size. 15px or so...
@jasonLaster Is this just renaming context menu item?
@liorpr could it be because of us doing this in a lot of our components?

```js
const React = require("react");
const { DOM: dom, PropTypes } = React;
```

Shouldn't `dom` come from the `react-dom` lib and not `react`?
nice idea @wldcordeiro we should definitely fix these!
yup
thanks @belen-albeza 
I'll try :)
I'll take this then.
fixed in #1600 
This looks interesting. How about I take a look at this one next @jasonLaster?
yeah that's definitely shouldn't be there, but even when I break on EditorBreakpoint.js(like in the image above) it happens, and it requires("react-dom")
@wldcordeiro 
started to implement this, but got kinda stuck. the buttons are re-rendered so fast(due to the change of the app state and thus the component's props after the action is triggered) that you can't even see the animation.
I'd like to hear your thoughts :)
@jasonLaster @clarkbw 
I made a commit. It seems to work. I will test more in the following days to see if I missed something. The Expressions seem to have no unit tests. I will try to make a new test similar to the [other ones](https://github.com/devtools-html/debugger.html/tree/45a276cb6864cf826ddb2c94d933ecef3c9f3272/src/components/tests) but I will cover just this functionality.
PR is up: https://github.com/devtools-html/devtools-core/pull/75
That should do it with an updated build @darkwing. Thank you so much for the great report!
Oh, FTR here as well in case anyone comes across this later...

We chose to simply *not render* the side panels when collapsed. This saves us from having to deal with any of this extra class stuff and adding in more CSS rules. It also avoids any potential pitfalls of keyboard navigation going into that area as well by accident if we don't account for that in the scripting. Plus side bonus, it gives us some precious pixel space back. Overall, nothing but wins.
Just updated the PR to also add an `aria-label` since the checkbox doesn't have a label. To increase a11y handling. Also refactored a little bit to remove the `breakpointsExist` variable that is no longer necessary for re-use since the node is never rendered unless it is true and all of its usages within the node were checking for it to be true.
Hmmm. It seems adding a test is a little more complicated. The current component tests [don't seem like they are run at the moment](https://github.com/devtools-html/debugger.html/blob/45a276cb6864cf826ddb2c94d933ecef3c9f3272/src/test/node-unit-tests.js#L61-L64) and they pass if I [run them but don't seem to check anything](https://github.com/devtools-html/debugger.html/blob/45a276cb6864cf826ddb2c94d933ecef3c9f3272/src/components/tests/Breakpoints.js#L18).

I will make a pull request with the current work. I will start making unit tests in the future on a future task and start working on an existing unit test and not add support for it on some file that are never run. I think it probably is a good reason why they are not run at the moment.

What do you think?
@Garbee Maybe only show it when we have more than one? A toggle for all breakpoints when there's only one seems a little pointless.
I think we need a dep bump on the launchpad and then the issue will be fixed up. Also there will be a follow-up bit of work to add the bottom panel collapse in vertical mode (I can handle this @Garbee)
Found some issues with the current implementation. I will send a new PR.
@andreicristianpetcu you could use the same PR and amend the previous commit and force push the changes.

`git commit --amend`
`git push -f` 
Sorry if that wasn't clear.  

Given an exception I think you could create a message below the reason by passing the preview directly to the ObjectInspector, so something like this `ObjectInspector(pauseInfo.get(["why"]).get("exception").get("preview"))`

Given something like this seen over the protocol:

```json
{
  "type": "PAUSED",
  "pauseInfo": {
    "why": {
      "type": "exception",
      "exception": {
        "type": "object",
        "actor": "server1.conn10.child2/pausedobj93",
        "class": "Error",
        "extensible": true,
        "frozen": false,
        "sealed": false,
        "ownPropertyLength": 4,
        "preview": {
          "kind": "Error",
          "name": "Error",
          "message": "error",
          "stack": "caughtError@https://devtools-html.github.io/debugger-examples/examples/exceptions.html:16:17\n@https://devtools-html.github.io/debugger-examples/examples/exceptions.html:31:7\n",
          "fileName": "https://devtools-html.github.io/debugger-examples/examples/exceptions.html",
          "lineNumber": 16,
          "columnNumber": 17
        }
      }
    }
```
Yeah, you could look over the [shouldcomponentupdate](https://facebook.github.io/react/docs/react-component.html#shouldcomponentupdate) docs.  Its also possible that CommandBar should be a `React.PureComponent` instead since its not doing anything complicated.  These are all interesting areas of React performance that I'm only just getting into so I don't want to steer you in the wrong direction.  But without looking into it deeply I think that's worth investigating.
Yeah, we tried to avoid regressing the old debugger but we won't be prioritizing fixes for it so we'll have to live with this for a little while.
https://bugzilla.mozilla.org/show_bug.cgi?id=1328679 has landed. 

@cy6erGn0m can you test this with the [latest Nightly](http://nightly.mozilla.org/)?
Lets first look into why the font sizes are so different from the rest of the editor.  The other text is a much more readable size.
Hmm, not sure how we have links that work in HTML and the README at the same time.  In HTML you want to link to [https://github.com/devtools-html/debugger.html/blob/master/docs/debugging-the-debugger](https://github.com/devtools-html/debugger.html/blob/master/docs/debugging-the-debugger.md) but in Markdown you need to link to [https://github.com/devtools-html/debugger.html/blob/master/docs/debugging-the-debugger](https://github.com/devtools-html/debugger.html/blob/master/docs/debugging-the-debugger.md)**.md**
I wonder if this is related to #1439
> Shouldn't dom come from the react-dom lib and not react?

I don't think [ReactDOM](https://facebook.github.io/react/docs/react-dom.html) provides a `DOM` object.  I believe that is supposed to come from React itself, though it is somewhat undocumented, you'll find it in their [examples](https://github.com/facebook/react/blob/master/examples/basic/index.html#L36)
@clarkbw how'd you know that @jbhoosreddy and I were talking about this today!

@bomsy, @wldcordeiro what do you think of this change? Wellington, it reminds me of `public/js` which feels like forever ago.
Looks like something minor like `this.editor.resizeBreakpointGutter` is not defined... I'll take a look tomorrow and help get this in!
> I don't think ReactDOM provides a DOM object. I believe that is supposed to come from React itself, though it is somewhat undocumented, you'll find it in their examples

I agree with this. There is some documentation [here](https://facebook.github.io/react/docs/react-api.html#createelement).
My next guess is that webpack is possibly doing something strange given the https://github.com/devtools-html/debugger.html/issues/1640#issuecomment-271255082 from @liorpr 
This is  really cool !
I find the styling of the outlined element a bit strange, it looks like it cuts-off a bit of them

![capture du 2017-01-10 08-41-07](https://cloud.githubusercontent.com/assets/578107/21797641/95e01cfc-d710-11e6-8738-58e6efc831cf.png)

And a bit weird on the selection too (looks like a double border) : 
![capture du 2017-01-10 08-42-39](https://cloud.githubusercontent.com/assets/578107/21797679/cf5a7108-d710-11e6-905e-971ba3b5a40c.png)

If we could have some padding on this outline it would be great

Another nit, out of scope here, is the selection color in dark mode, which isn't contrasted enough with the text's color (see http://leaverou.github.io/contrast-ratio/#%23E4EEFA-on-%23BDD5FD)


@wldcordeiro I will do as you say if you wish since you one of the maintainers of debugger.html but I generally try to avoid rewriting git history and `git push -f`. I think I can reuse this PR without amending. I can just reopen it. I tend to prefer small commits.
Can you join in on our call today at 3 EST? I'm basically rethinking this entire interface today. Will discuss more there first to show things running for clarity.
> Also there will be a follow-up bit of work to add the bottom panel collapse in vertical mode (I can handle this @Garbee)

If you want, go for it. I actually just realized I can't even get vertical mode to trigger. Which is kinda weird... Looks like something was broken recently regarding that.
@nchevobbe good points. @jbhoosreddy if it's not easy to address, we'll likely want to open a new issue for that.

@bomsy probably has thoughts on class names for styling here
@Garbee I'll be there. Excited about this work.

I pushed a small style nit fix: replace the ternary with a guard statement. let me know if it's alright and we can merge. otherwise happy to revert
@Garbee nope - just need to turn it on

https://github.com/devtools-html/debugger.html/blob/f9482d9ad5d3b1fb034261d72be2c03c8dea6d6c/docs/local-development.md#updating-the-config-locally
@andreicristianpetcu yeah - it's unfortunate, but the way github works. you generally have to update local history with a rebase and force push to your remote branch to keep the PR.

The benefit ofcourse to having one PR is issues and PRs have the same Unique ID, and it's nice to have a small number and smaller history to search through.
yeah ... we can definitely make the styling better, with paddings and a lil bit of rounded corners. 
The classes responsible are 

https://github.com/devtools-html/debugger.html/blob/master/src/lib/codemirror-mozilla.css#L128-L161

We can do it as another ticket.
I can reopen the pull request without messing with the git history. I don't need to change anything. I'll close it back.

I think I'll give another try at writing a test. I managed to break editing and I think it's better to add a test with that feature even if it is a little more complicated.

I think I need to rebase only if I have merge conflicts. Rebasing is not mandatory. I can also merge from your branch into mine instead of rebasing. I prefere merging over rebasing but I see you guys prefer rebasing. I will rebase but only if there will be merge conflicts.
We could use [https://devtools-html.github.io/](https://devtools-html.github.io/) which will require a separate repository to host website, docs and other related things. It could also have documentation for other packages in `devtools-core` and of `devtools-reps` in single repository. But I'm not sure how feasible this would be.
heh @andreicristianpetcu I was going to merge this as it's an improvement

I found a similar bug with hitting enter immediately. I believe that's because we don't clear the updating flag.

Frankly, I think this would be simpler if expressions had its own reducer and action and we had a CRUD api, so add, update, get, list etc... right now I think addExpression is working overtime.

also expression ID should not be needed now that expression values are unique!
hmm, that makes sense. so basically a long highlight which we can do with a `selectLocation` param like `highlightDuration: "long"`
This is how it looks now. Somehow this doesn't sit well with me. The centering seems weird after an extra line is added to the message.

Doing anything more than showing this up, could be feature-creepy, IMO.

![image](https://cloud.githubusercontent.com/assets/4935809/21814559/ac0cab64-d727-11e6-90ed-085b9ef64f79.png)

Thoughts? @jasonLaster @clarkbw 

I agree @krishnagopinath. 

@clarkbw and I had a similar conversation about the line wrapping.

We'll be having a community call call at 3pm EST today https://github.com/devtools-html/debugger.html/#discussion. It would be great if you could stop by.

@Garbee is working on some command bar UI work that could help us here quite a bit.
@clarkbw I'm on Debian 8, Chromium(without extensions). Here editor font defaults to `monospace` which could probably be the cause for this.
In my opinion, it follows a style guide different from the one we follow, or I'm used to following. Which is not a bad thing.. If it brings consistency, it could help saving time like style nits and such. Especially for new contributors. Consistency would be a great plus!
I like how the "Paused at a Breakpoint" section is placed. Looks clean, doesn't waste real estate and just does one thing - conveys the message loud and clear :) 

This gives way for using other color tones for the text, like when there's an error, etc.
hey @wldcordeiro what's your timeline here?
@jbhoosreddy this PR has gotten really good. 
CC @clarkbw 
Note this bug on the backbone example - http://todomvc.com/examples/backbone/
Good call @irfanhudda I'm sure at some point we'll want that to describe the larger project!
Didn't see it before but I can look into this.
Could I grab this one? I've already looked into it
sure!
cool, so it looks like we're pulling properties  with the new reps

![](http://g.recordit.co/CUiqsMR3NA.gif)
haha - it's the main one. I'll think about it. easy to add more :)
The rep looks better. Now we just need the fields

![screen shot 2017-01-10 at 4 39 44 pm](https://cloud.githubusercontent.com/assets/254562/21825877/77cc0c1a-d753-11e6-9fc9-7b3892d3520c.png)

@jasonLaster rebasing and working on it today, I'm hoping to have it ready for review tomorrow.
You're right :/

We'll be looking into an improvement to the UI in #1665 and other issues.


So, the padding issues aside, I was dealing with the selection color. Since different tokens can have different text colors, having a fit-all selection color doesn't seem to work as well as I hoped. I'm trying to keep in mind what Nicholas mentioned about color contrasts.
I went back to sublime to see how they handle it. It seems it's a "light" muted color which might also have transparency. But I like how they handle it. What do you think @jasonLaster @nchevobbe?
Agreed.  I don't think the centering is going to work well with messages like this and we'll need to change the UI or go back to the original left aligned.

Perhaps the messages sit below the top level green area, they could use a regular white background.  Need to think more about it.
I'm a fan of it.

I think a pre-commit hook would work well.  That would allow anyone to essentially ignore styling concerns completely but the end result is still styled.  Of course it might surprise people when they see their PR / final output.

We can also recommend the atom plugin as well for regular contributors.
I just tracked this down to here: https://github.com/devtools-html/debugger.html/blob/master/src/utils/editor.js#L8

In the example above the `jquery.min.js` file includes a source map and therefore shows a `jquery.js` (pretty version) in the same directory.  The `shouldShowPrettyPrint` uses the presence of a source map to indicate that pretty print isn't available. 

@jasonLaster it looks like this came from #959 and I'm not sure what we do here.  Direct people to the source mapped version?

I found an interesting case as well where the source map file wasn't found (404) and so there's no way to view a pretty version of that minified file.  Perhaps there's a way of knowing that we successfully found the source mapped version?
> Should we have a pre-commit hook?

I haven't had time to figure out the layer which makes sure that PRs have been appropriately formatted. I think the CLI is going to provide the functionality for editing files in-place and also check if the passed in files are printed. It's up to you when to run this functionality.

I don't think a pre-commit hook will work, because running the printer across an entire project is just too slow. I wouldn't want to slow down making commits, but the CI should fail if things aren't appropriately printed. Or even better, the CI could potentially automatically print the code. I'm not sure if that would work, but would be cool if so.

> Should we run this on pre-push and if there are changes encourage contributors to commit them?

As I said I think it's just too slow. Maybe you could only run it on files that have changed, I don't know. I think ideally it would just be auto-formatted for them somehow, since that's possible. It's just a question of when and how to do it.
Seeing that docker mochitest failure again...
Just resolved the conflict, lets see how the CI run goes but this should also get another review.
Being tracked in bugzilla in [bug 1322062](https://bugzilla.mozilla.org/show_bug.cgi?id=1322062)
@jasonLaster I reopened the pull request.

It's not clear for me what I should do. Do you want me to rebase this change on the latest stuff and remove the ID?

Expressions seem to be just a list of strings now. I don't understand how you want that converted to a CRUD.
Webpack is definitely doing something strange, `require("react-dom");` is returning react rather than react-dom.

![screen shot 2017-01-11 at 11 28 53](https://cloud.githubusercontent.com/assets/3685626/21846935/459fcd50-d7f1-11e6-92e0-9dc161ca237f.png)

can someone please explain what this means? couldn't find the devtools/client/shared......

<img width="610" alt="screen shot 2017-01-11 at 1 34 42 pm" src="https://cloud.githubusercontent.com/assets/6891569/21847154/fda29d36-d802-11e6-8022-075e7f297d5f.png">

@liorpr this is coming from when we make a build for firefox. not relevant here.

@MattCain Have you looked in the`node_modules/react-dom` it could be that they reference react...
Sorry @andreicristianpetcu I think you walked into a mess honestly. Mind if I take this over in #1650?
@Dalimil I cleaned up the codemirror iteration code a bit. 

Let me know what you think and we can get it in.

Thanks so much for looking into it. This was an annoying one :)
@clarkbw i think this is blocked on us updating the docker image actually
No problem @jasonLaster. I will pick something else up and try to avoid [these](https://github.com/devtools-html/debugger.html/labels/Release%3A%20Commitment) and [these](https://github.com/devtools-html/debugger.html/milestone/15) :)

I want to work on something without slowing you down.
@jasonLaster checked the react-dom package, it references to react.DOM but that's ok because the react team switched to use that separate package only in 15.x. it looks like a webpack related problem

further reading about the reference thing:
https://www.reddit.com/r/javascript/comments/3m6wyu/found_this_line_in_the_react_codebase_made_me/cvcyo4a/
@andreicristianpetcu: Talking about something else entirely, you could always keep adding commits to your development branch and it'll automatically update the PR. That way you don't have to think worry about rebasing, merging or changing history.
That being said, changing history does have its advantages when you work on a local branch with commits that are not live on master. rebasing, squashing, cherry-picking are great to have as an option.
that being said, you could work with big or small commits, it wouldn't matter because when it's added to the main repo, it'll be generally merged/rebased by the maintainers as a single commit.
I like [this video by David Baumgold on Advanced Git](https://www.youtube.com/watch?v=4EOZvow1mk4). You may or may not find it interesting.
In my initial design these exception triggers are all radios in the main breakpoint list. The idea being dropdowns/dialogs/etc. all obscure the functionality away. Some developers may not realize this functionality exists except by accident if it is tucked away behind a dropdown/dialog/multi-trigger button.

I'll share the look I am going for tomorrow when I have a bit more of the functionality moved around so the fuller idea is there. Once the main move is done changing the design from there to whatever is desired will be fairly seamless.
Thanks @nt1m. That's a nice idea - i'll draw it up.

Thanks @Garbee. Don't put too much time into wiring it all up, i'm not sure if we'll be ready to act on this now with the release coming up soon.
@jasonLaster I tried to replicate the bug following the STR provided, including the latest master branch. It doesn't seem to happen on my end. Could you reconfirm? If so, maybe we could pair for a quick session to track it down.
Some of the issues like highlight color don't seem to be there anymore, so I just worked on the remaining things and tweaked the margin and border radius a bit to make it look a little nicer. let me know what you think @nchevobbe @jasonLaster?
Thank you @jbhoosreddy for the video. I actually used all the features in that talk. Including reflog and bisect :)
Looks great!
okay. some initial questions on how to proceed. @jasonLaster @clarkbw 

1. my local installation has the latest version of codemirror@5.22.0 but it is missing the code to support typescript. [javascript/typescript](https://github.com/codemirror/CodeMirror/blob/master/mode/javascript/typescript.html)
Any suggestions on dealing with it in a nice way?
2. I am looking at a small set of languages which would be nice to support. Coffeescript, Typescript and JSX come to mind. Any thoughts on this?
@arthur801031 alright, i just got the unit tests and flow tests to pass *i think*.

Here's what I propose, re persisting tabs and navigating, lets land this work. And then address it in a subsequent issue. 

**Why if it's broken?** Well, this is really great work. It's represents weeks of really valuable progress and I want to land it! 

**How will we solve the navigating problem?** I think we might need to relax the notion that we always have a *selected* source. If we have some sources and some tabs, we might want to re-select the first tab :)  We can do this pretty easily.


@jryans mind giving a URL where we see this?

I mention that because [this](http://recordit.co/RAKyZIXvhI) works with [todomvc](https://devtools-html.github.io/debugger-examples/examples/todomvc/)
@jbhoosreddy Hmm, I still see it. But I think i've got a good lead, it misses every other one so there's probably two increments in there. like it does matches (0, 2, 4)
this should solve the error I think
````patch
diff --git a/src/components/SecondaryPanes.js b/src/components/SecondaryPanes.js
index 5649f4e..e8299e4 100644
--- a/src/components/SecondaryPanes.js
+++ b/src/components/SecondaryPanes.js
@@ -156,7 +156,7 @@ const SecondaryPanes = React.createClass({
     });
   },

-  getRightItems() {
+  getEndItems() {
     const items = [];

     if (!this.props.horizontal) {
@@ -170,6 +170,10 @@ const SecondaryPanes = React.createClass({
     return items;
   },

+  getItems() {
+    return [...this.getStartItems(), ...this.getEndItems()];
+  },
+
   renderVerticalLayout() {
     return SplitBox({
       style: { width: "100vw" },
````
@jasonLaster Well... I can't seem to reproduce now... Maybe I was just choosing a bad line...?

Sorry! Will reopen if there's more to say.
The wiring is easy and the bulk is done now. The only two things I have left to move is the pause on next execution and adding back the toggle all. Then adding a remove all button. All very easy and non time consuming. At that point I make the UX clearer to start showing off for further discussion. Should be ready in time for tomorrow's community call.
Oh, and "Pause on next execution" for the top label if we do have a dialog is a bad label. It in no way reflects the other two options underneath about exceptions, or that the actual toggle is a dialog and not that action. That is a dark UX pattern and should be avoided.
I was thinking of adding examples in devtools-html/debugger-examples next. I'll look at some nice examples and see I can link to them in a uniform manner.
I'll take a stab at this :)
I don't think anyone is currently working on this. Setting back to `up for grabs`
I'm thinking of going forward with the `shared` directory for now.  I think that will reduce things further and we can see if we want to move more of the items after.

I don't have a good feeling for the Panes organization right now so I'd like to punt on that.

So here's what it will look like:

* Components
  * Editor
    * Breakpoint
    * ConditionPanel
    * HitMarker
    * SearchBar
  * utils
    * ManagedTree
    * Svg
    * Accordion
  * shared
    * Autocomplete
    * CloseButton
    * PaneToggleButton
    * ObjectInspector
    * Rep
We could discuss this on the comm call tomorrow (I'm assuming there's one, the link says so), if time permits and is deemed important. @clarkbw @jasonLaster


Not sure about having both the `shared` and `utils` directory.  Might move to all `shared`.

Also not sure what to do about the `reps.css` file, if I can move that to `shared/Reps.css` assuming I update the `App.js` usage.
I believe #1684 also fixed this. Feel free to re-open if I'm wrong.
@jasonLaster to test it out I need to figure out enabling source-maps. With that, I can try different examples. I might have to fire-up nightly with the right flags, maybe. @clarkbw. I'm open to suggestions.
I believe #1684 fixed this too.
@Garbee I'm afraid having radio buttons will take up too much vertical space, especially in the devtools toolbox where the default tool height is (250 - 24)px. While it helps for the discoverability, I'd really want to avoid the sidebar turning into a giant form.
Here to collect brownie points...
https://github.com/devtools-html/devtools-core/pull/79

There is nothing specific about F8, but like any other functional key it has a digit in its mapped string name: `DOM_VK_F8`, and then I saw this azerty keyboard fix: `(shortcut.key.match(/[0-9]/) && event.keyCode == shortcut.key.charCodeAt(0));` and yeah, keycode of letter `d` matches the first letter of `DOM_VK_F8` so we emit an F8 keypress instead of typing `d`. 

I fixed this by changing the regex to `/^[0-9]$/` - although this might need to be tweaked further as I wasn't 100% sure what kind of shortcut needs the azerty code in the first place.

Sounds good. Shared is better than utils I think. 
Here are two more designs based on @Garbee's list and @janodvarko's command bar idea.


#### Use Command Bar
![design - honza](https://cloud.githubusercontent.com/assets/254562/21895534/1b942496-d8b1-11e6-9d58-904953805fd8.jpg)

#### Add a list of breakpoints
![breakpoints - garbee](https://cloud.githubusercontent.com/assets/254562/21895533/1b87b7ba-d8b1-11e6-9798-daaa4f1ed092.jpg)

Sounds good!

I did some clean up here already, which I think will help a lot, but it definitely needs a little bit more love
Here is a gif of what I have running right now:

![test](https://cloud.githubusercontent.com/assets/868301/21898124/c9ba71b2-d8b9-11e6-9b70-19c0b806d4e4.gif)

1. Exception radios are underneath a collapse pane. The summary of which updates to detail in text what mode it is in.
2. CommandBar only renders when paused at the top of the secondary panel.
3. Pause on next execution is a button to trigger under breakpoints.

The design side is not put together fully. This is more of a hacked up demo to have a functional idea to play with. This mode however puts the toggles inline with the existing breakpoint flow, which makes it clearer to developers what they will cause and why. It also allows for a concise area of space to relay all the information a developer needs about the breakpoint state without having to know colors or symbols. As everything is explained in clear text. The colors and symbols are an added bonus to the interface.

My current idea for the global toggle and removal actions is to have those in a command bar sitting on top of the user breakpoints once they exist. That way the correlation is direct as to what it is affecting since any of those actions wouldn't affect the global breakpoint toggles. I'll have that working momentarily.
I'll work on this if you don't mind @jasonLaster
Are the tasks marked as easy just for the people who never contributed to the debugger or anybody can work on them?
I would like to work on this
Thanks @irfanhudda 
@bomsy any updates? 
@bomsy any updates?
@clarkbw interested in writing this up

@wldcordeiro lets get some talk links here:
@amitzur mind re-sharing your talk
lets also include my 
* you-gotta-love-the-frontend, 
* james' react talk
* @viswanathamsantosh do you have a talk link?
I think that the checkbox to toggle breakpoints should also be aligned. Let me know if you have some thoughts about this or other suggestions.
Yeah, the checkboxes are a shame. We're doing some thinking here #1665. What you have seems like a step in the right direction though.
![screen shot 2017-01-12 at 2 43 14 pm](https://cloud.githubusercontent.com/assets/254562/21905459/7e28028e-d8d5-11e6-9cf1-da4df94e6804.png)

Thanks @irfanhudda!
One thing we just discussed to try is moving the "Why paused" message into the right of the command bar as well. Flex display the bar, move the reason to the end of the flex flow. Then the message can be left-aligned within that and overflow onto other lines just fine while staying legible. That would also save a little bit more screen real estate instead of having the message with so much extra padding.
yeah coming! :)
Ok, if this is something we want to do then I'll handle it with the breakpoint UX update I'm already working on.

### Coffee Script
![screen shot 2017-01-12 at 5 20 16 pm](https://cloud.githubusercontent.com/assets/254562/21910802/a52b8b6a-d8eb-11e6-8734-9b7785a809ba.png)

### Type Script
![screen shot 2017-01-12 at 5 19 46 pm](https://cloud.githubusercontent.com/assets/254562/21910803/a5371eda-d8eb-11e6-9aa1-db0920d539ec.png)

closing for now. but we can revisit
@jasonLaster hit a slight snag reconciling these changes with what I'm working on. https://github.com/devtools-html/debugger.html/commit/3b5da99f3f2c830b0c69baaa225e38f56a14246c Should be updating soon.

@jbhoosreddy you added this `keepSelection` logic but it's unused in the project and most of search stuff lives in `SearchBar` do you recall the plan for this code or is it removable? 
Grab it. Nah
Ahh @wldcordeiro was working on this: https://github.com/devtools-html/debugger.html/issues/1633 I can see it being confusing. for the rebase
@liorpr just updated after a rebase with master. It's looking pretty good, but i want to keep testing tomorrow :)
@wldcordeiro do you think this is them: https://github.com/atom/find-and-replace/pull/390/files

Here you go: https://github.com/atom/find-and-replace/blob/master/lib/find-view.coffee this should be it
@wldcordeiro It is used in the Editor component at just one place. [Editor.js#L79](https://github.com/devtools-html/debugger.html/blob/master/src/components/Editor.js#L79) It's purpose is to prevent the selection from being moved to the first selection. It is only required in the Editor component as far as I can see. But it is being used there.
Very cool! Found a couple of things

1. the search count and outlines don't seem to reflect the options (mostly whole word)
2. do we reset the search when we change options
3. I think it would be nice to try these buttons in a row below search on the right. I'm happy to jump in and help with the styling

Biggest thing would be, lets put this behind a feature flag and try and land and iterate. sorry for not suggesting this earlier.

We can land some of the functionality outside of the flag, but certainly the UI should be hidden so that you can't get in trouble. 
@jasonLaster 

> the search count and outlines don't seem to reflect the options (mostly whole word)

That's the area I was having the most trouble with. I'll keep testing there.

> do we reset the search when we change options

We don't. Should we though? In Atom/Sublime it seems like they can be used in combination without reseting.

> I think it would be nice to try these buttons in a row below search on the right. I'm happy to jump in and help with the styling

This was a first draft and I'm happy to iterate. @nt1m was mentioning the lack of vertical space in the panel which drove me to go with the buttons in the left hand side.

> Biggest thing would be, lets put this behind a feature flag and try and land and iterate. sorry for not suggesting this earlier.

Indeed. I'll update to put it behind a feature flag (searchModifiers).
I think I saw that `autoconf@213` was recently removed from homebrew
Try: `brew install autoconf@2.13`
The flow coverage isn't currently integrating into codecov

I did find that I could run regular coverage reports with `nyc` and might take that on as well.

`"test-coverage": "nyc mocha --compilers js:babel-core/register src/test/*.js src/**/tests/*.js",`

Oh and I forgot to mention in the review, it looks like some tests were broken by #1547 , we'll need to take care of that too.
Damn I broke CI :(

I didn't realize the unit tests would be also failing outside of Mocha. I'll back this out.
@jasonLaster really sorry about merging your other PR too early :( 
Can you approve the revert? 
Actually fixing the tests is easy ... 
@clarkbw @jasonLaster One thing i noticed is chrome is only passing only one reason type `"other"` back , no matter what is hit! 

Any ideas why?



I think the persist tabs could have made the tests flakey
https://circleci.com/gh/clarkbw/debugger.html/283?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link


updated the docs: https://github.com/devtools-html/debugger.html/blob/master/docs/mochitests.md
Hey ... yeah been thinking about what the best way to store the state of a particular path. Coming up with something
@thomcc making some progress in #1687
@jasonLaster this should be good to go.
hmm, not sure how your yarn file diverged. just removed that from the patch though...
Oooppps!   
Thanks!
Hey @jbhoosreddy, I made a couple tweaks. Mostly moving more logic to utils and adding some unit tests.

The mocha test runner is great here, you just have to go to `localhost:8000/mocha`

Thanks @juliandescottes for helping out today with it!

![](http://g.recordit.co/UwtuWuqAtq.gif)
@jasonLaster you did? I don't see them. +1 on the mocha test runner though! I'm trying it out. love it!
@jbhoosreddy lol you're too quick. had a test error :)
Sorry for the slow reply @liorpr could we get it so only the button activated flashes?

@clarkbw just confirming that's the behavior we're looking for

![](http://g.recordit.co/0P0W3qNoKi.gif)
Thanks @clarkbw  @jasonLaster `brew install autoconf@2.13` works, but I'm getting this error:
```
I-Chuns-MacBook-2:debugger.html i-chun$ brew install mercurial
Warning: mercurial-4.0.2 already installed
I-Chuns-MacBook-2:debugger.html i-chun$ brew install autoconf@2.13 && brew unlink autoconf
Warning: autoconf@2.13-2.13 already installed
Unlinking /usr/local/Cellar/autoconf/2.69... 0 symlinks removed
I-Chuns-MacBook-2:debugger.html i-chun$ ./bin/prepare-mochitests-dev
There are local changes to Firefox which will be overwritten. Are you sure? [Y/n] Y
reverting devtools/client/debugger/new/test/mochitest/.eslintrc
reverting devtools/client/debugger/new/test/mochitest/browser.ini
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-breaking-from-console.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-breaking.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-breakpoints-cond.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-breakpoints.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-call-stack.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-chrome-create.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-chrome-debugging.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-console.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-debugger-buttons.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-editor-gutter.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-editor-highlight.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-editor-mode.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-editor-select.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-iframes.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-navigation.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-pause-exceptions.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-pretty-print-paused.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-pretty-print.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-scopes.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-searching.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-sourcemaps-bogus.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-sourcemaps.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-sourcemaps2.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg-sources.js
reverting devtools/client/debugger/new/test/mochitest/browser_dbg_keyboard-shortcuts.js
reverting devtools/client/debugger/new/test/mochitest/examples/README.md
reverting devtools/client/debugger/new/test/mochitest/examples/bogus-map.js
reverting devtools/client/debugger/new/test/mochitest/examples/bundle.js
reverting devtools/client/debugger/new/test/mochitest/examples/bundle.js.map
reverting devtools/client/debugger/new/test/mochitest/examples/doc-debugger-statements.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-exceptions.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-frames.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-iframes.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-minified.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-script-switching.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-scripts.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-sourcemap-bogus.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-sourcemaps.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-sourcemaps2.html
reverting devtools/client/debugger/new/test/mochitest/examples/doc-sources.html
reverting devtools/client/debugger/new/test/mochitest/examples/entry.js
reverting devtools/client/debugger/new/test/mochitest/examples/exceptions.js
reverting devtools/client/debugger/new/test/mochitest/examples/frames.js
reverting devtools/client/debugger/new/test/mochitest/examples/long.js
reverting devtools/client/debugger/new/test/mochitest/examples/math.min.js
reverting devtools/client/debugger/new/test/mochitest/examples/nested/nested-source.js
reverting devtools/client/debugger/new/test/mochitest/examples/opts.js
reverting devtools/client/debugger/new/test/mochitest/examples/output.js
reverting devtools/client/debugger/new/test/mochitest/examples/script-switching-01.js
reverting devtools/client/debugger/new/test/mochitest/examples/script-switching-02.js
reverting devtools/client/debugger/new/test/mochitest/examples/simple1.js
reverting devtools/client/debugger/new/test/mochitest/examples/simple2.js
reverting devtools/client/debugger/new/test/mochitest/examples/sourcemaps/bundle.js
reverting devtools/client/debugger/new/test/mochitest/examples/sourcemaps/bundle.js.map
reverting devtools/client/debugger/new/test/mochitest/examples/sourcemaps2/main.js
reverting devtools/client/debugger/new/test/mochitest/examples/sourcemaps2/main.js.map
reverting devtools/client/debugger/new/test/mochitest/examples/sourcemaps2/main.min.js
reverting devtools/client/debugger/new/test/mochitest/examples/times2.js
reverting devtools/client/debugger/new/test/mochitest/examples/webpack.config.js
reverting devtools/client/debugger/new/test/mochitest/head.js
reverting devtools/client/locales/en-US/debugger.properties
reverting devtools/client/preferences/devtools.js
pulling from https://hg.mozilla.org/mozilla-central/
searching for changes
no changes found
0 files updated, 0 files merged, 0 files removed, 0 files unresolved
start: copy assets
starting: webpack
events.js:160
      throw er; // Unhandled 'error' event
      ^

Error: spawn webpack ENOENT
    at exports._errnoException (util.js:1026:11)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)
    at onErrorNT (internal/child_process.js:359:16)
    at _combinedTickCallback (internal/process/next_tick.js:74:11)
    at process._tickCallback (internal/process/next_tick.js:98:9)
    at Module.runMain (module.js:606:11)
    at run (bootstrap_node.js:394:7)
    at startup (bootstrap_node.js:149:9)
    at bootstrap_node.js:509:3
 0:00.25 /usr/bin/make -f client.mk -s configure
 0:01.10 cd /Users/i-chun/Documents/debugger.html/firefox/objdir-frontend
 0:01.10 /Users/i-chun/Documents/debugger.html/firefox/configure
 0:01.28 Creating Python environment
 0:01.45 New python executable in /Users/i-chun/Documents/debugger.html/firefox/objdir-frontend/_virtualenv/bin/python2.7
 0:01.45 Not overwriting existing python script /Users/i-chun/Documents/debugger.html/firefox/objdir-frontend/_virtualenv/bin/python (you must use /Users/i-chun/Documents/debugger.html/firefox/objdir-frontend/_virtualenv/bin/python2.7)
 0:01.45 Installing setuptools, pip, wheel...
 0:01.45   Complete output from command /Users/i-chun/Docume...ualenv/bin/python2.7 - setuptools pip wheel:
 0:01.45   Traceback (most recent call last):
 0:01.45   File "<stdin>", line 4, in <module>
 0:01.45   File "/Users/i-chun/anaconda/lib/python2.7/tempfile.py", line 32, in <module>
 0:01.45     import io as _io
 0:01.45   File "/Users/i-chun/anaconda/lib/python2.7/io.py", line 51, in <module>
 0:01.45     import _io
 0:01.45 ImportError: dlopen(/Users/i-chun/Documents/debugger.html/firefox/objdir-frontend/_virtualenv/lib/python2.7/lib-dynload/_io.so, 2): Symbol not found: __PyCodecInfo_GetIncrementalDecoder
 0:01.45   Referenced from: /Users/i-chun/Documents/debugger.html/firefox/objdir-frontend/_virtualenv/lib/python2.7/lib-dynload/_io.so
 0:01.45   Expected in: flat namespace
 0:01.45  in /Users/i-chun/Documents/debugger.html/firefox/objdir-frontend/_virtualenv/lib/python2.7/lib-dynload/_io.so
 0:01.45 ----------------------------------------
 0:01.45 ...Installing setuptools, pip, wheel...done.
 0:01.45 Traceback (most recent call last):
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/virtualenv/virtualenv.py", line 2325, in <module>
 0:01.45     main()
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/virtualenv/virtualenv.py", line 711, in main
 0:01.45     symlink=options.symlink and hasattr(os, 'symlink')) # MOZ: Make sure we don't use symlink when we don't have it
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/virtualenv/virtualenv.py", line 944, in create_environment
 0:01.45     download=download,
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/virtualenv/virtualenv.py", line 900, in install_wheel
 0:01.45     call_subprocess(cmd, show_stdout=False, extra_env=env, stdin=SCRIPT)
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/virtualenv/virtualenv.py", line 795, in call_subprocess
 0:01.45     % (cmd_desc, proc.returncode))
 0:01.45 OSError: Command /Users/i-chun/Docume...ualenv/bin/python2.7 - setuptools pip wheel failed with error code 1
 0:01.45 Traceback (most recent call last):
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/configure.py", line 124, in <module>
 0:01.45     sys.exit(main(sys.argv))
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/configure.py", line 29, in main
 0:01.45     sandbox.run(os.path.join(os.path.dirname(__file__), 'moz.configure'))
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 334, in run
 0:01.45     self.include_file(path)
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 325, in include_file
 0:01.45     exec_(code, self)
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/util.py", line 59, in exec_
 0:01.45     exec(object, globals, locals)
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/moz.configure", line 7, in <module>
 0:01.45     include('build/moz.configure/init.configure')
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 630, in include_impl
 0:01.45     self.include_file(what)
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 325, in include_file
 0:01.45     exec_(code, self)
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/util.py", line 59, in exec_
 0:01.45     exec(object, globals, locals)
 0:01.45   File "/Users/i-chun/Documents/debugger.html/firefox/build/moz.configure/init.configure", line 145, in <module>
 0:01.46     @imports('distutils.sysconfig')
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 613, in decorator
 0:01.46     depends = DependsFunction(self, func, dependencies, when=when)
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 69, in __init__
 0:01.46     sandbox._value_for(self)
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 409, in _value_for
 0:01.46     return self._value_for_depends(obj, need_help_dependency)
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/util.py", line 925, in method_call
 0:01.46     cache[args] = self.func(instance, *args)
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 419, in _value_for_depends
 0:01.46     return obj.result
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/util.py", line 943, in __get__
 0:01.46     setattr(instance, name, self.func(instance))
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 90, in result
 0:01.46     return self.func(*resolved_args)
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/configure/__init__.py", line 938, in wrapped
 0:01.46     return new_func(*args, **kwargs)
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/build/moz.configure/init.configure", line 192, in virtualenv_python
 0:01.46     manager.build(python)
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/virtualenv.py", line 439, in build
 0:01.46     self.create(python)
 0:01.46   File "/Users/i-chun/Documents/debugger.html/firefox/python/mozbuild/mozbuild/virtualenv.py", line 203, in create
 0:01.46     'Failed to create virtualenv: %s' % self.virtualenv_root)
 0:01.46 Exception: Failed to create virtualenv: /Users/i-chun/Documents/debugger.html/firefox/objdir-frontend/_virtualenv
 0:01.46 *** Fix above errors and then restart with               "/Applications/Xcode.app/Contents/Developer/usr/bin/make -f client.mk build"
 0:01.46 make: *** [configure] Error 1
```
Could I grab this one next @jasonLaster?
This looks helpful
https://github.com/github/markup/issues/900

https://github.com/devtools-html/debugger.html/pull/1706
Feel free to claim this. I couldn't get the mochitests setup to work :(
@jasonLaster  I'll take a stab at this :) 

Is `App.js` tab's bottom border the bottom border for the command bar?
> what do you think about "Sources" I could easily be persuaded to keep it

I'd argue to keep it.  It maintains a nice, consistent bar across the top.  And allows us to always show the key shortcut for search.  I know it gains us some vertical space but I think I would need to be convinced that we are lacking vertical space in that tree view.

I could be persuaded that we could do something better than just say "Sources" as that seems fairly useless.  I imagined an "iframe selector" would go there eventually.
Go for it. 
I think this is on the right track. 

We probably want one more refactor for secondary panes and then we're good. 
Hmm. This is great. Perhaps fixes the debugger bug where it's slow with big objects like window...

I'd like to move forward with this, but also see if we can get react-redux to solve this on the framework level later. 
how's this different from https://github.com/devtools-html/devtools-core/issues/86 :)
Hmm, #1706 didn't quite do it.

Here's a way to set up gh pages locally which could help
https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/


With this said, I'm okay waiting on this for now as it's a low priority compared to the developer workflow imo
We will need to do this in the `package.json` to use the changes from devtools-core

``` patch
diff --git a/package.json b/package.json
index ed74377..43ff4c9 100644
--- a/package.json
+++ b/package.json
@@ -26,7 +26,7 @@
     "test-all": "yarn run test; yarn run lint; yarn run flow",
     "mocha-server": "node bin/mocha-server.js",
     "firefox": "./node_modules/.bin/start-firefox --start --location https://devtools-html.github.io/debugger-examples/",
-    "chrome": "./node_modules/.bin/start-chrome",
+    "chrome": "./node_modules/.bin/start-chrome --location https://devtools-html.github.io/debugger-examples/",
     "copy-assets": "node bin/copy-assets",
     "copy-assets-watch": "node bin/copy-assets --watch",
     "build-docs": "documentation build --format html --sort-order alpha --shallow  --document-exported --output docs/reference/ src/types.js src/utils/ src/reducers/ src/actions/ src/test/mochitest/head.js",
```

Tried to follow the pattern used for the firefox one. :)
> I'd like to move forward with this, but also see if we can get react-redux to solve this on the framework level later.

I believe using [PureComponent](https://facebook.github.io/react/docs/react-api.html#react.purecomponent) is the cleaner route.  It will automatically do the simple compares that I'm doing.  `shouldComponentUpdate` is, as far as I know, really designed for doing some deeper compare that could speed things up.
But I am seeing some strange paint issues happening with the `ObjectInspector` but I haven't had much time to investigate that more.
PR #1712 is open with the actual code to look at. So anyone can pull that down and play around. This certainly needs a lot of discussion since the UX changes are quite major. As a side I also tested with JSX for the components I modified heavily. This is very easy to rollback if we don't want to go down that path though.
Here's a patch for what i started

https://gist.github.com/jasonLaster/849cac961391452b5bd8ba6fafbf8271
Thanks @Garbee!

@clarkbw, @wldcordeiro, @bomsy, John and I discussed using this branch to discuss some research questions:

1. do we like the JSX style (what questions do we have there)
2. do we like some of these UX changes (what questions do we have there) 

* With the UX changes, I'd like to ideally test the change with UR and AB (node electron app)
* With JSX, I'd like to make a decision after we cut the new release and come up with a plan for how we'll incrementally upgrade with a style doc that can evolve. 

Lastly, we should rope in the larger team before we pull in JSX
Sure. Let's definitely pair. The components look really good. Utilits will benefit from tests for sure
Minor comment: If we start going JSX and this lands let's open a tracking issue for JSX converting the rest of the codebase.
Actually the gif does not reflect my changes, the flash is caused by the classes switching and so the buttons opacity. I added code to the handleEvent function that's being run inside the key shortcuts event registration(figured it's ok because if you mouse-click a button, you know it's being clicked, no need for flashing)

@jasonLaster @clarkbw 
Oh, sorry @liorpr you're totally right

![](http://g.recordit.co/MypeYQSF53.gif)
oh shit - that's a really interesting problem. 

Perhaps we want to render the footer in App.js so that we can always show the footer... We do this for the SourceTabs as well.


It happens because the traverseResults method is called twice(and registered twice). In the Editor component, and in the SearchBar component. I'm on it!

fix: I'm thinking about registering this method once in the editor, and pass it as a prop. Problem is that the search bar keeps the index and count in its state to display them. So maybe keep them in the editor component's state and pass them all together?

@jasonLaster 
I can incorporate the fixed into my search modifier PR as I had already moved most of the state up into the Editor there.
@jasonLaster not really, but with @liorpr's suggestion having mostly been done in my PR I think it'd just make it easier with merge conflicts to have it incorporated.
@clarkbw if you think we should keep the Sources header, I can bring it back
Thanks @wldcordeiro!  

Your work looks really good. I took a stab at adding the end toggle button to the welcome box as well.
![](http://g.recordit.co/EUwfyvpO9s.gif)
Thanks @bomsy 
@jasonLaster  

Please check. Thank you! :)
Hmm. I'm not sure if we want to always overflow hidden. We do want scrollbars with wise elements
So we only want to set `overflow-x: hidden;` to ` .split-box.vert` when the sidebar(s) are closed?

What are wise elements?  
Overflow auto might be what you want so the scrollbars appear when needed?
Hmm, @wldcordeiro looks like `oveflow:auto` is already in affect. Actually this might be a case of the splitter still being 1px and the width being 100% or flex:1
This is very odd, seems like a bot PR trying to look like Greenkeeper, especially since launchpad 0.24 is the current version.
Hi @jasonLaster 

I tried setting splitterSize to 0, but it didn't work, so I used this approach instead :) 
I can help, but not sure how to approach this, where's the website repo? what are the changes need to be made?
It would be cool if this could be done more often, so Nightly users are able to get the changes and report bugs more quickly. This would make debugger-html better in terms of stability since a lot of our Nightly users are great bug filers :)
@liorpr At this time [https://devtools-html.github.io/debugger.html/](https://devtools-html.github.io/debugger.html/) is generated by github using this projects' `README.md`.

The problem with this approach is that links (for other articles in `docs/` folder) are not generated properly. They point to raw markdown files.

For now, it would be good to have them point to actual html pages. Jekyll appears to be a good option as github pages uses it.
Is this for Watch Expressions?
@clarkbw Yeah, the icon is currently a bit thicker, which is inconsistent.
I played a little bit with the colors before picking this one :D Here are the ones I did not like :P

Blue
![theme-highlight-blue](https://cloud.githubusercontent.com/assets/922368/21997544/c39c2278-dc27-11e6-9c6a-fd7c9e671011.png)

Green
![theme-highlight-green](https://cloud.githubusercontent.com/assets/922368/21997543/c39b5622-dc27-11e6-9e0b-77b130c8914c.png)

Red
![theme-highlight-red](https://cloud.githubusercontent.com/assets/922368/21997542/c3983f6e-dc27-11e6-8efd-b21a8bd00cad.png)

Purple
![theme-highlight-purple](https://cloud.githubusercontent.com/assets/922368/21997598/1621b44a-dc28-11e6-928c-955001c35f17.png)


I tested only existing theme colors.
@jasonLaster I read a lot about Enzyme, Jest and testing React+Redux stuff. I think I can write some tests on my next contribution. I still have Mochitest on my reading list.
@andreicristianpetcu If you are on Firefox the scrollbars aren't styleable.
Is there an upstream bug for this? If not then I will report one.
Yes..... I am in Firefox.
Thanks everyone. Wellington let's get your fix in soon
Found the bug :( https://bugzilla.mozilla.org/show_bug.cgi?id=77790
Slightly confused about the issue, can't seem to replicate it. Any STR? to test the PR.
Sorry @bomsy 

STR:
1. click on the POE button, refresh the debugger and see if it works. If you're supposed to pause on caught exceptions, does it... I used the exceptions examples page and just refreshed that.
Thanks @andreicristianpetcu for grabbing this!

Hmm, I'm not sure if i like the *color* secondary themes. Perhaps we use the "watch expressions label" color... Or something that is slightly softer than the call stack function label.

@clarkbw thoughts?
ahhh ... ok cool testing now! :)
yeah - so firefox does not support changing the scrollbar unless it's in the firefox devtools panel :/

Chrome does support it though
@andreicristianpetcu nice. yeah, mochitest is our  mozilla test framework. The way we use it, its pretty basic. 

We currently have node unit tests and we're working on getting the mochitests to run in a regular page
@nt1m you should file a PR fix :)


Hmm, @wldcordeiro i think this is actually #1705. I'm going to close preemptively. Let me know if you can confirm its a new bug. 
Hey, this is still up for grabs. Is it cool to take it?
Thank you!
sure @amitzur, this is a fun one!
@jasonLaster The watch expressions has the color --theme-body-color. I will use that color.
@nt1m mind sharing screenshots
<img width="353" alt="debugger-refresh-icon" src="https://cloud.githubusercontent.com/assets/1795135/22032951/d90c1c5c-dce6-11e6-91e7-b5bf48523587.png">

LGTM!
<img width="1212" alt="truncated_path" src="https://cloud.githubusercontent.com/assets/1753718/22035086/4f3d87d4-dcf7-11e6-8327-263472fc4f54.png">

#GoddessSquad rocks
#GoddessSquad rocks!
there is an issue with react and webpack where the `require` import the `react` library which cause `React = ReactDOM`. it will also effect future versions of react and react-dom.
the fix I did is to require the file directly while skipping the package.json of react-dom.
Apparently the color is --theme-body-color but it has [an opacity](https://github.com/devtools-html/debugger.html/blob/818c120885c28013333d45a1661366d38f71c95a/src/components/Scopes.css#L2-L4).

I updated my PR.

![theme-body-color-with-opacity](https://cloud.githubusercontent.com/assets/922368/22037975/4ab3841c-dcf1-11e6-9704-01deecfe708d.png)

patch:

```patch
diff --git a/src/components/Scopes.css b/src/components/Scopes.css
index 8863c13..2a342d0 100644
--- a/src/components/Scopes.css
+++ b/src/components/Scopes.css
@@ -1,5 +1,5 @@

-.object-node.not-enumerable {
+.object-node.default-property {
   opacity: 0.6;
 }

diff --git a/src/components/shared/ObjectInspector.js b/src/components/shared/ObjectInspector.js
index 468c8bd..6daded7 100644
--- a/src/components/shared/ObjectInspector.js
+++ b/src/components/shared/ObjectInspector.js
@@ -57,6 +57,11 @@ function nodeIsPrimitive(item) {
   return !nodeHasChildren(item) && !nodeHasProperties(item);
 }

+function isDefault(contents) {
+  const properties = Object.keys(window)
+  return properties.includes(contents.name)
+}
+
 function makeNodesForProperties(objProps, parentPath) {
   const { ownProperties, prototype } = objProps;

@@ -171,8 +176,7 @@ const ObjectInspector = React.createClass({
         className: classnames("node object-node",
           {
             focused,
-            "not-enumerable": (!item.contents.enumerable &&
-                               !nodeHasChildren(item))
+            "default-property": isDefault(item.contents)
           }),
         style: { marginLeft: depth * 15 },
         onClick: e => {
```
@Dalimil is looking at this
Hi @jasonLaster

I'll take a stab at this :) 
Awesome @assafdd looks great!
Thanks, I think this looks good.

I'd like to re-evaluate some of our variables as its kinda weird to use `--comment` or `--splitter` in lots of places :) 

I'm also tempted to move this to a variable, but I'm not sure if that's appropriate either
Thanks @amitmtrn, I really appreciate the help. this was a very old frustrating bug!
eagle eyes :)
Closing this ... still interested though why we get back only one reason type from chrome.
@jasonLaster 

Please check. Thank you :)
wow - that's awesome that flow passed on CI.

did you try testing this by changing one of the function types?
Hmm, @arthur801031 I tried making a *bad* change to see if the types were being applied and it looks like they weren't picked up.

I ran: `yarn run flow` and got `no errors!`. I think this might be a problem with client-adaptors exporting the types.

```patch
diff --git a/src/actions/breakpoints.js b/src/actions/breakpoints.js
index 1d2f8c0..a393d34 100644
--- a/src/actions/breakpoints.js
+++ b/src/actions/breakpoints.js
@@ -17,7 +17,7 @@ const {
 } = require("../utils/source-map");

 import type { ThunkArgs } from "./types";
-import type { Location } from "devtools-client-adapters";
+import type { Location, Source } from "devtools-client-adapters";

 type addBreakpointOptions = {
   condition: string,
@@ -53,7 +53,7 @@ function enableBreakpoint(location: Location) {
  * @param {Function} $1.getTextForLine Get the text to represent the line
  */
 function addBreakpoint(
-  location: Location,
+  location: Source,
   { condition, getTextForLine } : addBreakpointOptions = {}) {
   return ({ dispatch, getState, client }: ThunkArgs) => {
     if (_breakpointExists(getState(), location)) {
```
I don't have a talk link but a simple presentation< https://slides.com/isantoshv/devtools/fullscreen#/ > i used for my talk last week.
I spent most of the time demo'ing super cool things we can do with devtools instead of a presentation as my goal was to motivate the participants to use Firefox devtools instead of the rest.

I found a presentation made by a fellow speaker. it is more of a presentation we can use for a talk. Here goes the link < http://mte90.github.io/Talk-DevTools/ >
I'll work on this if it's free
Apparently there is a way to customize Firefox scrollbars. https://gromo.github.io/jquery.scrollbar/demo/basic.html
Hmmm... I'm not sure about the property list - `Object.keys(window)` gives me window's enumerable properties so I get `alert, scrollBy, ...` but not things like `String, Array, ...` 

I guess I can use `Object.getOwnPropertyNames(window)` instead
Thanks @clarkbw 
Thanks @Dalimil!

This looks like the fix. Mind sharing some before and after screenshots
Thanks @amitzur for fixing it in https://github.com/devtools-html/devtools-core/pull/94


Hmmm, now I'm not really sure if things like `__proto__` or `constructor` should be considered default or not...
Before:
![screenshot_2017-01-18_16-23-08](https://cloud.githubusercontent.com/assets/4202539/22072561/a7b2dbe6-dd9a-11e6-8917-090daf36307f.png)
After:
![screenshot_2017-01-18_16-20-32](https://cloud.githubusercontent.com/assets/4202539/22072560/a78cce06-dd9a-11e6-9baf-096f7191fe7a.png)
Yeah - this is awesome. I think we want to show `__proto__` with dark blue. `constructor` I care less about. 

@andreicristianpetcu it's yours
Thanks Reps!
If we get a 404 on a source map file we should clear the `sourceMapURL` field which should allow for pretty printing again.
Also, this bug exists with the old debugger as well as the new.  Just tried it out on release Firefox.
@wldcordeiro I have removed duplicate styles from `SourceTabs.css`. Let me know if I missed something.
Thanks for keeping us uptodate
Added the issue in core
@Garbee mind sharing some screens from #1712 so that we can see what the UX was like?
I believe #1707 has fixed this issue.  Can't reproduce it anymore.
Very cool. Great instinct
I'll add that I want this change.  We already have a webpack build step so the possible negative has already been taken on.  JSX makes the components easier to read and AFAIK was designed so that designers could more easily adapt components without needing to code.
Thanks for the assist @bomsy!
@clarkbw echoing your argument for JSX I think the biggest thing is familiarity for new contributors. Most React projects seem to use JSX so adopting it would make the barrier for entry a little lower. Also it seems like people are more conscious of the HTML element types they use when they're using JSX over the dom helpers and we end up with a lot more semantic HTML.
Hmm, i din't think that did anything for me in firefox :/
Hey @liorpr, I just made some tweaks to drop the ref usage and instead use a selector. Let me know what you think
We'll need to add these modes to MC before this lands, but that shouldn't be too bad
We should also update the docs to reflect this requirement so we can avoid it next time.
Just noticed this lodash: https://github.com/devtools-html/debugger.html/blob/master/src/components/Editor/SearchBar.js#L7
Hi @clarkbw

jasonLaster  and I are trying to figure out the problem that we have in this PR. However, when I ran `yarn run flow`, I got this error message:
<img width="868" alt="screen shot 2017-01-19 at 10 13 34 am" src="https://cloud.githubusercontent.com/assets/4562118/22092134/6eb8e262-de36-11e6-8526-c4b2425ea8fd.png">
(jasonLaster told me to CC you on this issue)


I've tried these solutions, but none of them worked. 
1. https://flowtype.org/docs/troubleshooting.html
2. https://github.com/facebook/flow/issues/2092 
I just looked into it and it looks associated with this line in the `flowconfig` `.*firefox/.*`


hopefully, this is the fix:

```patch
diff --git a/.flowconfig b/.flowconfig
index 87f5f23..be6b12c 100644
--- a/.flowconfig
+++ b/.flowconfig
@@ -4,8 +4,9 @@
 .*node_modules/npm.*
 .*node_modules/stylelint.*
 .*node_modules/config-chain.*
-.*firefox/.*
+.firefox/.*
 .*flow-coverage-report/.*
```


hmm, I think `cmd+O` makes sense. 

I'm not sure about `cmd-f`, in atom it opens file search which is a no-op :P
> I'm not sure about cmd-f, in atom it opens file search which is a no-op :P

Yeah, I agree.  We show exactly what key command is required in the UI.
> Ideally I think the debugger should always capture ctrl-f if it uses it sometimes.  If you're not in the right mode it should display "select a file or use ctrl-p to search file names" or something.

The only other thing to think about is that Ben asks that we at least always capture the cmd+f shortcut so that focus doesn't bump to the default content option.
Able to reproduce this.  Feels like some kind of debug server error.  When you increase the timeout this works as expected, but anything `100` or below means you get lots of `ADD_SOURCE` events which seem to screw things up.
Here's what you need to get started:

Take a look at the [localization](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#internationalization) docs.

Change the label here: https://github.com/clarkbw/debugger.html/blob/master/src/components/SourceTabs.js#L116 to use something like `closeTabsToTheEnd` and update all the references to the old `closeTabsToTheRight`.

Then also in [strings.json](http://github.com/clarkbw/debugger.html/blob/bd9f991ccda7952770a1f132a7a8d6a6fb5c76dc/src/strings.json#L52) and [debugger.properties](http://github.com/clarkbw/debugger.html/blob/bd9f991ccda7952770a1f132a7a8d6a6fb5c76dc/assets/locales/debugger.properties#L278)

Finally, open up the [RTL (Right To Left)](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#rtl) docs and update them with a note about using string identifiers like End or Start instead of Right or Left respectively.
@jbhoosreddy are you taking on this one?
#1642 fixed this
Most of this was fixed by  #1697
Looks like this wasn't wired up correctly.  I did some tracing down to the chrome commands.  I'm not sure why it errors out yet, but we only pass two options when 3 are available. `"none", "uncaught", "all"`
https://github.com/devtools-html/devtools-core/blob/9ba99c5b6f60209ff20cf64cec415f14ccb6178a/packages/devtools-client-adapters/src/chrome/commands.js#L29

Likely needs a fresh look.
Also I wonder if we should use the bottom bar to indicate a "Source Mapped Version" so people can see that there is a source map and click that to jump to it.  I know we have this in a context menu for jumping to lines but I think it would be good to surface the general jump option.
Did some more digging.  

I believe if you wanted to tackle this you would need to start here:
https://github.com/clarkbw/debugger.html/blob/master/src/utils/source-map-worker.js#L119-L121

```js
  // Fire off the request, set it in the cache, and return it.
  // Suppress any errors and just return null (ignores bogus
  // sourcemaps).
  const req = _resolveAndFetch(generatedSource); // drop the catch .catch(() => null);
  sourceMapRequests.set(generatedSource.id, req);
  return req;
```

Now the fetch error will be passed back to the caller.

Then handle the passed error somewhere like here:
https://github.com/clarkbw/debugger.html/blob/master/src/actions/sources.js#L75-L79
```js
    const urls = await getOriginalURLs(generatedSource);
    if (!urls) {
      // If this source doesn't have a sourcemap dispatch event to remove the sourceMapURL from the source
      dispatch({
        type: constants.SOURCE_MAP_MISSING,
        id: generatedSource.id
      });
      return;
    }
```

@clarkbw oh yeah. I am. 
This very similar to https://github.com/devtools-html/debugger.html/issues/1376#issuecomment-266974238 (which was closed - I think due to a misunderstanding and it's gone under the radar - but, anyway, it's still a valid bug in Nightly 53.0a1 (2017-01-18). Just tested now)
nice, looks clearer. I guess you can also drop the getRefCallback arg on the debugBtn function
@jasonLaster 
@liorpr good call. Mind cleaning it up?
It sounds reasonable to me to capture `cmd+f` and do a no-op to at least prevent the default from happening.   I can re-work this issue to reflect that.
Thanks @sole!
I can only talk from personal experience as I don't know too much about the lay of the land. But our way of using React was definitely tricky to pin point because there was little documentation. It might have taken me an even longer time to get things done without my mentors.

Since the official React docs follows JSX and ES6/ES7 JS, following that coding standard should make it much more easy for people to contribute to the project, as they will be familiar with it.

That being said, from recent experience I noticed many other companies face similar issues where their deployment could not have babel or a build step for various reasons. And there, they appreciated being able to utilize the features of React without that problem. This may be one of the few projects on the web where beginners can learn something like that.

That also being said, I'm in favor of JSX also.
Here's how I'd get started, this doesn't run yet but is close.

```js
/* @flow */

type Resolve = (result: any) => void;
type Reject = (result: any) => void;

export type Defer = {
  resolve: Resolve,
  reject: Reject,
  promise: Promise<*>
};

function defer(): Defer {
  let resolve: Resolve;
  let reject: Reject;
  const promise = new Promise(function(
    innerResolve: Resolve,
    innerReject: Reject
  ) {
    resolve = innerResolve;
    reject = innerReject;
  });
  return {
    resolve: resolve,
    reject: reject,
    promise: promise
  };
}

module.exports = defer;
```
Intro gif http://recordit.co/QYAyms9n3C
Cheat Sheet: http://www.saltycrane.com/blog/2016/06/flow-type-cheat-sheet/
#1760 has some new docs incuded
Fixed the nit.
We could check in a generated license disclaimer via `yarn licenses generate-disclaimer` and perhaps have a check in our CI that running that command isn't different than the file already checked in.
Good catch!  Can you update the docs to remove that?

We should probably add something about the triage process as well.
fixed in #1687 
One plus from my little experience with JSX, in its own way helps get a quick picture of what the dom structure might look like for some one new to it
 Might be kinda easier for someone familiar to basic markup
``` js
dom.div( null,
  dom.img( { src: "avatar.png", className: "profile" }),
  dom.h3( null, [user.firstName, user.lastName].join(" "))
);
```

vs

```js
<div>
  <img src="avatar.png" className="profile" />
  <h3>{[user.firstName, user.lastName].join(' ')}</h3>
</div>
```

@irfanhudda I was able to test this PR locally. There is one small change needed for vertical mode.

[PaneToggle.css line 21](https://github.com/irfanhudda/debugger.html/blob/d17a15cf6016378c1e40ea8f80ce03cf7fcbf1e6/src/components/shared/Button/PaneToggle.css#L21)
```css
.toggle-button-start.vertical svg,
html[dir="rtl"] .toggle-button-end.vertical svg {
  transform: rotate(-90deg);
}
```
@bomsy agreed with that, it definitely makes for a more familiar experience for designers and new contributors. I support the idea of transitioning to JSX. A tracking issue that has adding the babel transform, and then a list of components would be a nice start and encourage contributions.
FTR the primary things I found converting to keep in mind is this problem...

When we make functions to return a subset of markup, it still needs to be named with JSX. This is done by just [modifying the object property](https://github.com/Garbee/debugger.html/blob/garbee/breakpoints/src/components/CommandBar.js#L72) once the function is initialized.

The only part of the tools we use that has an issue is Eslint when calling things as elements. Let's say we `const CommandBar = require('./CommandBar');` then only ever do `<CommandBar />` to render it, eslint is throwing an error since `CommandBar` is unused, even though it actually is. I've seen some old issues pointing to where this problem should have been fixed in eslint like a year ago. So not sure exactly why it is happening in this context. Didn't dig into it too deeply because my PR for breakpoints was just a mockup to start discussing things against.
Small test case:

```html
<script>
var asmjs = (function () {
  "use asm";
  function f() {
    return 1|0;
  }
  return {f: f};
})()
</script>

<button onclick="console.log(asmjs.f());">test</button>
```

STR:
1. Open page with html in a browser (Firefox)
2. Open devtools console
3. Refresh

Actual result: console says that asm.js is compiled successfuly

Expected result: console says that asm.js is disabled
Here's a small patch that should work:

```patch
diff --git a/src/utils/client.js b/src/utils/client.js
index fe271d4..76a3a89 100644
--- a/src/utils/client.js
+++ b/src/utils/client.js
@@ -1,7 +1,7 @@
 const { createSource, firefox } = require("devtools-client-adapters");
 const { prefs } = require("./prefs");

-function onFirefoxConnect(actions) {
+async function onFirefoxConnect(actions) {
   const tabTarget = firefox.getTabTarget();
   const threadClient = firefox.getThreadClient();

@@ -18,19 +18,20 @@ function onFirefoxConnect(actions) {
   // the debugger (if it's paused already, or if loading the page from
   // bfcache) so explicity fire `newSource` events for all returned
   // sources.
-  return threadClient.getSources().then(({ sources }) => {
-    actions.newSources(sources.map(createSource));
-
-    // If the threadClient is already paused, make sure to show a
-    // paused state.
-    const pausedPacket = threadClient.getLastPausePacket();
-    if (pausedPacket) {
-      firefox.clientEvents.paused(null, pausedPacket);
-    }
-  });
+  await threadClient.reconfigure({ observeAsmJS: true });
+  const sources = await threadClient.getSources();
+
+  actions.newSources(sources.map(createSource));
+
+  // If the threadClient is already paused, make sure to show a
+  // paused state.
+  const pausedPacket = threadClient.getLastPausePacket();
+  if (pausedPacket) {
+    firefox.clientEvents.paused(null, pausedPacket);
+  }
 }

-function onConnect(connection, actions) {
+async function onConnect(connection, actions) {
   // NOTE: the landing page does not connect to a JS process
   if (!connection) {
     return;
```
We quickly looked into this patch and saw that there was an issue with debugging asm.js sources. 

The solution is to:
1. show a warning message when the user tries to add a breakpoint
2. reconfigure the thread when the debuggee is navigating (refreshing) the tab 

```diff
diff --git a/src/utils/client.js b/src/utils/client.js
index fe271d4..4da90b3 100644
--- a/src/utils/client.js
+++ b/src/utils/client.js

@@ -9,7 +9,12 @@ function onFirefoxConnect(actions) {
     return;
   }

-  tabTarget.on("will-navigate", actions.willNavigate);
+  tabTarget.on("will-navigate", () => {
+    threadClient.reconfigure({ observeAsmJS: true }).then(() => {
+      actions.willNavigate();
+    });
+  });
```

We'll also need to add some [tests](https://gist.github.com/jasonLaster/83912063c4a23d440d80739d5cb5583b)
```
curl https://gist.githubusercontent.com/jasonLaster/83912063c4a23d440d80739d5cb5583b/raw/2699523fd25ec5a692f4257e9b3606b8b8b59e9b/foo.diff | g apply
```

One other option is that we reconfigure the thread client right when it's created here:

```diff
diff --git a/packages/devtools-client-adapters/src/firefox.js b/packages/devtools-client-adapters/src/firefox.js
index ec743bc..0536d69 100644
--- a/packages/devtools-client-adapters/src/firefox.js
+++ b/packages/devtools-client-adapters/src/firefox.js
@@ -64,6 +64,7 @@ function connectClient() {

   return new Promise((resolve, reject) => {
     debuggerClient = new DebuggerClient(transport);
+
     debuggerClient.connect().then(() => {
       if (debuggerClient !== null) {
         return debuggerClient.listTabs().then(response => {
@@ -92,6 +93,7 @@ function connectTab(tab: Tab) {
       target.activeTab.attachThread({}, (res, _threadClient) => {
         threadClient = _threadClient;
         threadClient.resume();
+        // we might want to reconfigure the threadClient here ...
         resolve();
       });
     });
```
adding this video of wasm debugging. It's not related to the issue, but it's cool :)

https://www.youtube.com/watch?v=R1WtBkMeGds
Hi @jasonLaster 

The reason that it didn't work was because the file path `"devtools-client-adapters"` was wrong. We want this instead `devtools-client-adapters/src/types`.

**Edit**
We're also missing some export types, which I've made a PR for. https://github.com/devtools-html/devtools-core/pull/102
@jasonLaster up for review now.
I think it's a really good idea to do this. I noticed this here facebook/react#8803 (#8789) similar. Maybe we could come up with a similar solution. As part of the bundle creation process.
I will! (I can't assign myself to take the bug though :-D)
@wldcordeiro Thanks for pointing this out. I'll take a look at vertical + rtl layout
@wldcordeiro I had to make a few more changes to fix pane toggle button rotation in vertical mode, for both rtl and non-rtl layout.
Looks like we may just need to update the Selenium we use. The [current master](https://github.com/SeleniumHQ/selenium/blob/313e0911ccf584bcd965ff5f71f0ad17459ff2cb/dotnet/src/WebDriver/Firefox/Internal/Executable.cs#L178) has a fix in place for this. However the commit this is from goes back [four years](https://github.com/SeleniumHQ/selenium/blame/master/dotnet/src/webdriver/Firefox/Internal/Executable.cs#L170). So either we are using something very dated or the original fix isn't working as expected. It looks like there is [an open issue](https://github.com/seleniumhq/selenium/issues/1437) about just this upstream. It would be best to follow up there so the issue is fixed for everyone using Selenium.
The initial view with a few breakpoints provides:

1. A trigger button with good text to pause on the next execution.
2. A collapse area that contains the exception pausing state radios to switch between them.
3. The list of breakpoints with the toggle all and a new remove all button at the top of the list.
    * Note: The UX for removing all needs to be worked on. Currently it is hacked up with a `confirm` dialog. This is due to hearing complaints in the past with Chrome DevTools where some people have lost "hundreds" of breakpoints for one reason or another. We need either a guard to prevent one-click deletion or a short-term recovery method to get breakpoints back.

This provides direct actions to have the DevTools carry out different tasks without being obscured by buttons with only icons and hover text to know what they do.

<details>
<summary>
  Initial view of the breakpoints area.
</summary>

![initial-view](https://cloud.githubusercontent.com/assets/868301/22150941/d70f8baa-dee9-11e6-8836-e42691c58ff7.png)

</details>


If you expand the Exceptions section then you'll be provided the radios to toggle the various break-on states. This also will update the heading of the section with the current pausing mode. So even when collapsed, the developer is provided clear indication of what mode the tools are in.

<details>
<summary>
  Exception mode expanded view
</summary>

![exception-mode-expanded](https://cloud.githubusercontent.com/assets/868301/22151113/98aff4de-deea-11e6-8b35-99a106266ad0.png)

</details>


The trigger for pausing on next execution is a button at the top of the breakpoint area. Upon activating, the button becomes disabled and the text is updated to inform the developer of what will happen.

<details>
<summary>
  Pause on next execution when inactive
</summary>

![pause-inactive](https://cloud.githubusercontent.com/assets/868301/22151200/094d8eea-deeb-11e6-9997-b5072053035e.png)

</details>

<details>
<summary>
  Pause on next execution when active
</summary>

![pause-active](https://cloud.githubusercontent.com/assets/868301/22151207/10aaf5e2-deeb-11e6-838f-84aaf8f5e17d.png)

</details>


With this the CommandBar itself only shows itself when you are actively paused. As that is the only point in time when any of the actions are applicable to developing an application.

<details>
<summary>
  CommandBar displayed when paused
</summary>

![commandbar-when-paused](https://cloud.githubusercontent.com/assets/868301/22151463/0bbb2196-deec-11e6-9ede-ce8432bfc21a.png)


</details>
Also with this, disabled *conditional* breakpoints should be a lighter yellow.

I'll try to find the existing variables for these and if we don't have "breakpoint-specific" ones then I'll create those for easy re-use anywhere we may need them in the future for breakpoint-related actions.
Thanks @Garbee.

I'm really glad that you're bringing up accessibility as I'd like for us to have some clear goals and then we can measure our progress and prevent regressions.


**touch accessibility** personally, I'd like to do well here but acknowledge that it might be hard to be 100%.
* we use context menus to hide a lot of extra functionality that we should audit as well
* *hover* i believe we only hide close buttons for the moment. The biggest use case here is removing breakpoints, which is still two taps away. Tap on the breakpoint in the list, tap on the breakpoint marker.
* if we're shooting for windows laptops, we *can* assume that the user could always still use the mouse for other actions like close a tab.

**aria labels & tooltips** I'd like to have every action clearly labeled for new users and screen readers. We should be able to use a tool that counts buttons with / without a label.

**semantic elements** I really like what you started doing with switching our div/spans to buttons, labels, etc. We should be able to flag spans/divs that have event handlers and make sure that we don't regress.

**keyboard navigation** `<tab>`, `<enter>`, `<space>`, `<arrows>` are really important to get right. We should have some integration tests that lock down this behavior and prevent regressions. we should have happy paths to all of the major functionality.

**focus event** if we're showing a button on hover, we should also show it on container focus and make it tabbable. We should have integration tests here too.

Lastly, this is ofcourse a lot of work, but I think it's important that we set up some standards. I'd love to see us create a tracking issue and come up with some good small next steps and get community help here.

CC @npsecoding @clarkbw, @nchevobbe, @sole, @captainbrosset 
@jasonLaster said in IRC that it might be an issue in selenium https://github.com/devtools-html/devtools-core/issues/101

I've no experience with Selenium so I can't really say...

I suggested that another option is to maybe provide a way for the user to specify the path to the Firefox binary when running `yarn run firefox`. This should enable testing with different versions. 

Jason also suggested adding an option into configs.local to manually adding the path to the binary.

In the meantime I will need to put a `Firefox.app` on `/Applications` to get the debugger to work, right?
Try just symlinking it to `/Applications` instead of outright moving it. That should do the trick for you without incurring problems anywhere else.

Warning: I am not a MacOS user, this is just a guess based on my Linux experience and how similar the underlying systems are.
at the moment, we're updating the licenses in [M-C](https://bug1331654.bmoattachments.org/attachment.cgi?id=8828842). This process is not too cumbersome.

@clarkbw I like that idea as we could basically build the debugger's `licenses.html` page and check to make sure it's okay
Just to note that we also have #1540 about looking into a better color scheme for the conditional breakpoint.
@clarkbw sounds good. I can leave this open for a bit
Thanks @jbhoosreddy! This is pretty cool. I love when a feature is UI + redux.

I'm not sure if i'm a fan of using state in this way to handle the async side of the code, so i tried making the handler async.

* the async state seemed to scatter some of the logic so it was tough to follow
* i think this is the first async event handler, which is kinda cool

what do you think?
This is also one of the things I was considering but I wasn't sure if we wanted to go that way. I think I was thinking maybe it'd slow down the context menu appearance. Like perceived lag for the user as it is fetching this information on the event. @jasonLaster. The fact that it'll be mapped should be constant for each source.

That being said, I didn't see any lag when I tried it with an async function. What do you think?
> @clarkbw sounds good. I can leave this open for a bit

Ok, lets go ahead with this.  Everything I found hasn't worked and this is a good step forward.
> We're also missing some export types, which I've made a PR for. devtools-html/devtools-core#102

This has landed now but we need to update to a new version when it comes out and then rebase this.
Closing this as we recently added types to the SearchBar and learned a lot.

We can re-open new component flow issues now with better context and docs
We can always improve docs, but atleast we have a baseline
I believe this might require server side changes.

We currently have something in the inspector that pops up to indicate that the page is currently paused.  This only appears if you're paused and you try to use the inspector.

Here's the code:
https://dxr.mozilla.org/mozilla-central/source/devtools/client/inspector/inspector.js#238

Screenshot:
<img width="425" alt="screen shot 2017-01-20 at 3 06 57 pm" src="https://cloud.githubusercontent.com/assets/2134/22168552/388014b2-df22-11e6-9aa6-2bd43da3147b.png">

However the Chrome version: 
* Displays across the entire page no matter what tool is selected
* Offers the resume action
* Has a configurable message
* Is brought up via the client API (ours detects that the debugger is paused)

There are some positives and negatives there, but we should definitely be taking the good.
Thanks! These changes really help people getting started. 
I don't see any lag either. I think if there were some then I'd agree with you, but it's pretty snappy.

Communicating with a worker is now [~1ms](https://hacks.mozilla.org/2015/07/how-fast-are-web-workers/) and doing the lookup is fast. 
@jbhoosreddy I async'd `hasMappedSource` as well. Let me know what you think.
merging when it goes green

Thanks @arthur801031 for grabbing one of the hard ones!
I'll take a stab at this :)

Are `Resolve` and `Reject` = `any` type, like this [any](https://flowtype.org/docs/builtins.html#any)? 
@clarkbw @jasonLaster 

Please check. Thank you!
Also, this [invision doc](https://projects.invisionapp.com/share/AY8OEG3C6#/screens/117937554_Debugger) has designs for such a pause indicator. It doesn't have the reason but I think we could update it to include that.

![screen shot 2017-01-27 at 10 55 36 am](https://cloud.githubusercontent.com/assets/2134/22383567/2ffd2ce6-e47f-11e6-984b-d3f5a0ac2e53.png)

Our [README](https://github.com/devtools-html/debugger.html#getting-setup) now has this in the getting setup section.
I still believe this has to do with ImmutableJS and the `fromJS` method.

But I'm not able to reproduce this with the debugger anymore.  I am seeing it still on DeveloperEdition and in Nightly but not with the current master on GitHub.
@jasonLaster @clarkbw Can you take a look at this? 
Thanks.
Haha - this is great. 

- perhaps add a header like: next steps
- definitely chalk
- can the entire doc be in core's development server?
That's only part of the reverted strings. Also search tooltips were changed
https://hg.mozilla.org/mozilla-central/diff/2301f25d1595/devtools/client/locales/en-US/debugger.properties#l1.241
Hi @irfanhudda thanks for doing this work. I really appreciate the RTL help

I recently organized the components directory and moved Tabs into the Editor directory. Just rebased to update your branch.

While testing I noticed that the "hidden sources dropdown" button is on the right and overlaps the toggle button in RTL. Could you also move that to the left and clean up the positioning?

I realize that this is a lot to test and can be tricky. Thanks!

![screen shot 2017-01-22 at 10 13 17 am](https://cloud.githubusercontent.com/assets/254562/22183409/bc03fca8-e08b-11e6-8830-0d5b2b85a455.png)

Testing @devtools-html/debugger :)

Heads up, there might be a couple more PRs with this label usage. 
Thanks @flodolo!
@flodolo looks like this was the offending commit: https://github.com/devtools-html/debugger.html/commit/fb228318a76d274e3c83cb52926a2f266f1d9439
Closing this as we're turning this on. We can track these things separately

did the cleanup @jasonLaster 
If anyone wants to play with console messages and chaulk, here's a nice one.
We should update the description for block

>> - Block is a noun. I can update the comment to explain that we're referring
> to a block of code.

> @flodolo do you know the best way to handle RTL interpolated text?

Uhm, can you clarify what the problem is? I'm far from an expert with RTL content, but it should do the right thing on its own with the right `dir`, and I wonder if the confusion is created by having Latin text in a RTL layout (it would still go left to right).

This also gives a good coverage of the Bidi algorithm
http://www.iamcal.com/understanding-bidirectional-text/


CI was ok on https://github.com/devtools-html/debugger.html/pull/1793, so I guess this was just a temporary issue on Circle CI side.
I suggest we merge this to get CI green again, and work on fixing the new docker image in parallel.
Issue #1574 is now obviously used to reimplement this feature.

Sebastian
For what it's worth, here's a screenshot of how this feature looked in the old UI:

![Variable value infotip](https://cloud.githubusercontent.com/assets/958943/22205208/022b7220-e176-11e6-86f0-6b3c7dbf46a3.png)

And people are already [starting to wonder](http://stackoverflow.com/q/40800183/432681) where this feature is gone.

Because this is a regression in regard of the old UI and a feature that is presumably used quite often, I believe this should get some priority.

Also, the new Debugger UI should not ship in Firefox stable releases without that feature, otherwise I fear a lot of complains.

Sebastian
@clarkbw still no source files with 52.0a2 (2017-01-23)
![screenshot_20170123_164821](https://cloud.githubusercontent.com/assets/762598/22206370/177db17c-e18c-11e6-930e-720d48cce481.png)

![screenshot_20170123_164855](https://cloud.githubusercontent.com/assets/762598/22206376/1b6c7958-e18c-11e6-8f21-8c0b95ed1482.png)


Can you provide a test case for this?
There's a related [use case for this on Stack Overflow](http://stackoverflow.com/q/41801175/432681).

Sebastian
I wanted to write down my thoughts about a UX to handle this.  By adding debugger statements into the breakpoint list we create this intersection of items that aren't actually compatible.  Debugger statements would only appear in the list as they are encountered when paused, so unlike breakpoints they will disappear on refresh.  We could probably hide the complexity of the enable / disable with decent amount of engineering but I think for now we could offer a simple working solution.  In a future where we have a way to scan / search sources for debugger statements or have some reliable cache / storage of the source files I think we could more easily move to treating these like breakpoints.  This concept is taken mostly from what @jasonLaster wrote in https://github.com/devtools-html/debugger.html/issues/828#issuecomment-258638533 above.

When a debugger statement is encountered we explain this to users in the `WhyPaused` component.  I think we should add a method, in the `WhyPaused` component to disable the debugger statement. (that text / button is just placeholder)

<img width="306" alt="screen shot 2017-01-23 at 6 29 39 am" src="https://cloud.githubusercontent.com/assets/2134/22208005/28c8b950-e136-11e6-9cf5-9f30d38c16cf.png">

This method would simply create the conditional breakpoint `false` for this line which skips the debugger statement.  And actually the conditional breakpoint is almost self explanatory when it appears. We should likely explain how the disable system works because I'm not sure it will be clear to users that the condition breakpoint created is what does the disabling. 

<img width="306" alt="screen shot 2017-01-23 at 6 30 01 am" src="https://cloud.githubusercontent.com/assets/2134/22208148/b06513b8-e136-11e6-8eb4-74df13b59d19.png">

But this solution keeps the systems all fairly simple and allows for users to disable debugger statements as they encounter them. Users can also then enable / disable the conditional breakpoint so they have control over when the debugger statement is reached.  The only wonky part will be if the conditional breakpoint is disabled the `WhyPaused` component would appear and offer to disable the breakpoint again.  Not sure how that would play out.
Thanks @irfanhudda - mind sharing screens.

By the way, if you want a PRO way of showing the matrix of screens you can borrow from @clarkbw and show them in a table :) [tables](https://help.github.com/articles/organizing-information-with-tables/)


Light     | Dark      | Firebug
--------- | --------- | ---------
<a href="https://cloud.githubusercontent.com/assets/254562/20676302/4cb04a7c-b55d-11e6-855f-654395e2c26f.png"><img width="480" alt="light-theme" src="https://cloud.githubusercontent.com/assets/254562/20676302/4cb04a7c-b55d-11e6-855f-654395e2c26f.png"></a> | <a href="https://cloud.githubusercontent.com/assets/254562/20676304/4cbfbf16-b55d-11e6-9b84-3ee5595e36be.png"><img width="480" alt="dark-theme" src="https://cloud.githubusercontent.com/assets/254562/20676304/4cbfbf16-b55d-11e6-9b84-3ee5595e36be.png"></a> | <a href="https://cloud.githubusercontent.com/assets/254562/20676303/4cbb0570-b55d-11e6-98b5-d1dd124345cd.png"><img width="480" alt="firebug-theme" src="https://cloud.githubusercontent.com/assets/254562/20676303/4cbb0570-b55d-11e6-98b5-d1dd124345cd.png"></a>

@jasonLaster This is what I've got right now.
![screenshot from 2017-01-23 20-35-56](https://cloud.githubusercontent.com/assets/1755089/22209387/4ece28ee-e1ac-11e6-8eaf-027a479bf43f.png)

I'm not sure if this result is consistent across all platforms. (I'm testing on debian with chrome)

And thanks for the tip. I'll use it next time onwards.
Here are screens for other themes

|Firebug|Light|
|----------|------|
|![firebug](https://cloud.githubusercontent.com/assets/1755089/22209733/94970458-e1ad-11e6-83d4-8b082217b989.png)|![light](https://cloud.githubusercontent.com/assets/1755089/22209736/9b194f2a-e1ad-11e6-9de0-561dd529d5f0.png)|

I found that new tab button is noticeable thinner than dropdown button and toggle pane button.
@irfanhudda that's looking good. We should change the stroke width then.

Heh - didn't realize how much this stuff bothered me till I saw those screens
@irfanhudda mind sharing some vertical mode screens as well. and dark mode
@jasonLaster Sure. Here, light mode screenshot is for non-rtl and dark mode is for rtl layout.

|Light|Dark|
|-|-|
|![light_nrtl_vert](https://cloud.githubusercontent.com/assets/1755089/22210261/3b73c6d4-e1af-11e6-8da0-d28e58d9a90b.png)|![dark_rtl_vert](https://cloud.githubusercontent.com/assets/1755089/22210270/43b33c9e-e1af-11e6-824f-a1f422a05c2a.png)|


> dropdown button

This one is using text / fonts so it might be hard to match the SVGs.
@clarkbw i see. perhaps font-weight lighter. This is much better than before.
@irfanhudda I'll move the source search label problem to a new issue. 
pushed the lighter dropdown font. 
@jasonLaster  I've made some adjustments in positioning. This is what I got on chrome.
![dark](https://cloud.githubusercontent.com/assets/1755089/22212215/cf692dce-e1b5-11e6-92e8-255e2439c53f.png)
And this in firefox. There are some differences in both 
![dark_firefox](https://cloud.githubusercontent.com/assets/1755089/22212270/05848110-e1b6-11e6-8a11-5ae41f21c415.png)

I'm not sure if adjusting pixels is the right way in long term. We might have to use flexbox to get them aligned better.

We might also want to avoid showing empty context menu like this
![empty_context](https://cloud.githubusercontent.com/assets/1755089/22212616/6337bd9e-e1b7-11e6-9142-c465e7037447.gif)


Also I'm not sure about adjustments I made in last commit. If they don't work out well we can revert the changes.
@irfanhudda sounds good. This was a great iteration process. Thanks!
Fixed the generator signature with a default parameter now.
I feel like I need to research this more, I don't understand the accessible needs or best practices very well.  I just started reading this: http://simplyaccessible.com/article/danger-aria-tabs/ I'm not sure if that's useful for you as you investigate solutions.
This absolutely needs research and some user testing before rolling out. It isn't something we should change so rapidly.

That article is explaining essentially why you may not want to use the `aria` roles for a tab setup. My proposed solution is to avoid needing that at all, by just using radio inputs with good labels. That way the UA does the heavy lifting for us. For example, we wouldn't be handling keyboard events to detect whether the user wants to switch to that tab. Since, we'd just look for the radio becoming checked and switch contents and refocus on that. It alleviates a bunch of work on our part, however it would still need plenty of testing to make sure people who *rely* on screen readers would be able to navigate it as I expect.
[Source Tabs](https://github.com/devtools-html/debugger.html/issues/1801) are also a potential problem with the current setup.
@liorpr just rebased and squashed. should be good to go in a sec
Just rebased to resolve the merge conflicts from the localization fixes.
If someone who uses a native RTL language could clone #1803 to see if that fixes the problem as described. That simply forces RTL mode on the existing span. We apparently want it to continue displaying like that anyways, it is just the command that is off.

If it is that we in fact need the command at the end, then the solution isn't that exactly. But I should be able to modify the patch to get the expected functionality.
@Garbee mind sharing a screenshot?
@assafdd completely agreed. The problem is that I don't understand CSS ellipsis :)

@jasonLaster  PR on the way :)
![selection_025](https://cloud.githubusercontent.com/assets/868301/22219427/b6302548-e178-11e6-891b-406b60317acf.png)

That is however with or without the patch for me. By just toggling the direction via DevTools my machine isn't reproducing the problem. I asked on the original issue for someone who is non-English native to test this to see if it resolves it appropriately for them.
@clarkbw will do
@Garbee i think the animations also caused a merge conflict
We just landed https://github.com/devtools-html/debugger.html/pull/1666

maybe we can borrow the same approach https://github.com/liorpr/debugger.html/blob/3fc1900cec4fccd6234b0459b0d3a6d26f7dfc9e/src/components/SecondaryPanes/CommandBar.js#L66-L77
@Garbee try changing LTR locally

https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#rtl
Rebased
Even with the config handling it from first-render the issue still doesn't reproduce for me with `master` as it is now. Maybe it only affects Macs due to the symbol they get?
Yup, this definitely fixes the problem

![screen shot 2017-01-23 at 5 33 48 pm](https://cloud.githubusercontent.com/assets/254562/22225891/316feb9e-e192-11e6-9417-5887c2828006.png)

Thanks @assafdd
![](http://g.recordit.co/vPG5kJKlD2.gif)
Hmm, @Garbee what do you think about styling the focus state? You know, now that they can be styled...

I'm thinking we bump the color a bit when it's focused and lose the border. 
Yea, I can do that pretty well. :wink: I was trying to keep the initial merge minimal on any style changes. That way any active state stuff can be discussed on its own. We need a consistent UX here, I was thinking of copying how the file manager is styled when active.
Here's a good patch

```diff

diff --git a/src/utils/pause.js b/src/utils/pause.js
index dfc1502..87ddc0a 100644
--- a/src/utils/pause.js
+++ b/src/utils/pause.js
@@ -48,6 +48,18 @@ function getPauseReason(pauseInfo: Pause): string | null {
   }

   let reasonType = pauseInfo.getIn(["why"]).get("type");
+
+  if (reason == "exception") {
+    // do a special message here:
+    const preview = pauseInfo.getIn(["why", "exception", "preview"]);
+    const betterMessage = ObjectInspector(preview);
+
+    return dom.div({},
+      reasons[reasonType],
+      preview
+    );
+  }
+
```
ping @cy6erGn0m 
Lets check again after the next bundle lands.  Likely an issue with reps.
Hmm, I'm not sure if I like a blue background / white color. That's pretty intense :/
Thanks for finding this @Garbee!

* Could you share screenshots from Etsy + Github
* Could you share some quick mocks of what this would look like?

Here's a quick sketch of where I see the buttons:

I think the buttons would be nice default `--color-comment` and then the active blue. Just a guess though

![screen shot 2017-01-23 at 8 11 22 pm](https://cloud.githubusercontent.com/assets/254562/22229836/298e4d10-e1a8-11e6-866c-53902aba74ea.png)

@jasonLaster Huh weird, I had them on the left hand side of the search input and the svg color changes to white when active. 
![screenshot_20170123_183243](https://cloud.githubusercontent.com/assets/580982/22230369/5f15898e-e19a-11e6-8071-077f92da5d90.png)
![screenshot_20170123_183249](https://cloud.githubusercontent.com/assets/580982/22230370/5f1bbb38-e19a-11e6-83e9-64198650a615.png)

I'll take this!
I'll take this one!
Stand back guys, I got this.
check slack.. It's MINE! ;)
yeah just leave a message here first next time. 
I'm starting on the `editor.js`
From what I can tell by looking at your error log, you might need to upgrade your node engine to a newer version. I use v7.3.0 and I don't see any error on my end.

I recommend installing using nvm, if possible.

`husky` is preventing you from pushing your commits to origin because the unit tests are failing. `node src/test/node-unit-tests.js --dots`

you can bypass it by doing something like `git push origin --no-verify`

See if it works after you satisfy [this](https://github.com/devtools-html/debugger.html/blob/master/package.json#L15) criterion.
Seeing this in #1814
closing this issue for now. feel free to re-open if #1814 doesn't resolve your issue.
@atom888 all yours!
@adymitruk yours!
i'll take log.js
ok. I used it to demonstrate the fork-PR cycle and some dev stuff. The PR is [here](https://github.com/devtools-html/devtools-core/pull/120) (the other repo that has that code) can probably leave this issue open for others to learn on...
Could not find the styles.css file containing: `theme-light` or `objectLink-eventLog` using grep in the root dir of the repository. Did a search and the only file called `style.css` was at `/work/debugger/debugger.html/docs/reference/assets/styles.css`. Has this issue been solved already? 
Thanks @jbhoosreddy 
My node is on v6.9.4. Which should satisfy the requirement "node": ">=6.9.0". Should the above syntax error still appear?
Thanks Garrett! I'll review more closely tomorrow, but looks good!
@soheilhm wow! How can it be that easy :)

mind sharing some [screenshots](https://github.com/devtools-html/debugger.html/blob/master/docs/pull-requests.md#screenshots)? It'd be great to see:
* with a lot of tabs
* narrow with the "more dropdown"



So without all the information, it might be a little hard to debug but looking at your error log, this line gives me concern.

`npm ERR! argv "/Users/Owner/.nvm/versions/node/v4.4.5/bin/node" "/Users/Owner/.nvm/versions/node/v4.4.5/bin/npm" "run" "prepush"`

could you tell us the output of `node -v` and `npm -v`? Also `nvm ls`? Maybe your default version is not set to v6.9.4?

not sure why the tests failed, re-running them
Hmm, it looks like this is a duplicate of https://github.com/devtools-html/debugger.html/pull/1815...

Thanks @madebymak. I think it is now `debugger.css`. in `assets/build`.

You can generate it with `yarn run publish-assets` 
Thanks @adymitruk 
![screen shot 2017-01-23 at 8 47 56 pm](https://cloud.githubusercontent.com/assets/17885979/22234548/b3b19902-e1ad-11e6-9a62-146acde13bff.png)

Yep, same change.
Just updated the branch to fix the conflict
Found a couple of issues @soheilhm 

**chrome**

looks like flexbox might need to be prefixed here

![screen shot 2017-01-24 at 12 11 05 am](https://cloud.githubusercontent.com/assets/254562/22234892/a87c67bc-e1c9-11e6-96d7-f8d5fbc42596.png)

I think we want to keep the + button vertically aligned with the toggle buttons. So the tabs will need to shift up a bit so their labels are lined up.

![screen shot 2017-01-24 at 12 11 00 am](https://cloud.githubusercontent.com/assets/254562/22234894/a8813846-e1c9-11e6-8a03-a7b2faac7507.png)

When the tabs get narrow, things blow up :)

![screen shot 2017-01-24 at 12 10 50 am](https://cloud.githubusercontent.com/assets/254562/22234893/a87f927a-e1c9-11e6-9a6b-7258c80137c8.png)

Tabs have 100 edge cases, it comes with the territory. We've fixed them more than any other component
@liorpr are you on this?
Hmm, i couldn't reproduce this.
I think this is solid :)
I'll take a stab at this :)
I'm taking a look at fixing this one.
Here's what it output:
`node -v v6.9.4`
`npm -v 3.10.10`
`nvm ls` gives `nvm: command not found`.
Maybe my nvm wasn't properly installed?
Hi @jasonLaster 

Please check. Thank you! :)
@jasonLaster yes!
@arthur801031 this looks good, but wouldn't it be simpler if toggle *always* toggled the search bar. I guess I'm not sure if we *want* the bool param.
@jasonLaster 

Because [SourceSearch](https://github.com/devtools-html/debugger.html/blob/master/src/components/SourceSearch.js#L90-L101) decides whether or not to display the search container based on `this.props.searchOn`. Setting `this.props.searchOn` to always true would only display the search container and not toggle it :)


Hmm, @arthur801031 couldn't you also do the toggling in the action? 

https://github.com/devtools-html/debugger.html/issues/1806#issue-202647517

I could easily be missing something here...
Thanks @mattzeunert!

I'll test it in the morning, but looks good
Hi @jasonLaster 

Great point! Instead of passing `!searchOn` to toggle search bar, we could just toggle it in `action`.
Yea, I need to check the color contrast on that first. But, these things should be consistent. So if we don't want the blue over here if all checks out then we should look at changing it in the file manager. It's super easy to just do a nice 30% or whatever shade highlight of the current color of a button. Shades are an easy way to make distinct active and focus states.
We do need to check other places this component is used and verify it doesn't make them look worse.
Latest update has highlights based on the `currentColor` of the buttons.


<details>
<summary>Light Mode</summary>


![highlight-light](https://cloud.githubusercontent.com/assets/868301/22246357/84289c26-e202-11e6-94cf-cbabd64ba1a3.gif)


</details>

<details>
<summary>Dark Mode</summary>


![highlight-dark](https://cloud.githubusercontent.com/assets/868301/22246356/80a17136-e202-11e6-8682-b9c61d79de43.gif)


</details>
Hmm, @steffiau I tried `v6.9.4` and it worked. Hmm, try making a small test script with `let` or `const`


Thanks @Garbee. Two things:

1. looks like we've got a bar height problem

![screen shot 2017-01-24 at 9 34 37 am](https://cloud.githubusercontent.com/assets/254562/22251369/84f3da42-e218-11e6-8a62-bd4b21d2e589.png)


2. I think the background color is a bit much for my liking. Could you try using `--theme-color-bluegrey` fills and see what it looks like?
I can't get the overflow from the "Why" bar to go over the CommandBar. Maybe that is a mac-specific rendering issue?

Using `var(--theme-color-bluegray)` for the background doesn't provide enough contrast on the exception mode button for its different states. This can mean that developers are incapable of seeing which mode the button is in by color if it is being hovered or focused.

![bluegrey-highlight](https://cloud.githubusercontent.com/assets/868301/22253714/a1eb9042-e220-11e6-8811-e5faf08c37b1.gif)
> Maybe my nvm wasn't properly installed?

I think this has something to do with it.

You can see in this line of the error:

```bash
npm ERR! argv "/Users/Owner/.nvm/versions/node/v4.4.5/bin/node" "/Users/Owner/.nvm/versions/node/v4.4.5/bin/npm" "run" "prepush"
npm ERR! node v4.4.5
npm ERR! npm  v2.15.5
```

That the system is referencing nvm with an outdated node and npm, which is what I believe is causing the issue.  For some reason running this command, perhaps husky, is picking up the old version of node.

@steffiau if you're using [homebrew](http://brew.sh/) you might want to check that nvm is installed by running `brew list nvm`.  If that command errors out you can double check that running `command -v nvm` doesn't print `nvm` but instead prints nothing.  At this point you probably want to uninstall `nvm` if you're no longer using it by running `rm -r /Users/Owner/.nvm/` which removes `nvm` from your system.
Also, we *should* eventually shift to using a set color with known good contrast for all of these things. However, while we have the tri-mode button it makes a quirky case where the `currentColor` setup provides good contrast and feedback on the mode. So while we have that, this is a cheap way to have good contrast without needing to play with a lot of different colors underneath.
Ok, it looks like this is [husky](https://github.com/typicode/husky) doing this.  I found that in the husky source they look for `nvm` and use it if they can find it, you can see that here: https://github.com/typicode/husky/blob/master/src/index.js#L59-L63 So if you have that `.nvm` directory husky seems to prefer it.
@clarkbw that's crazy that you found this :)
@jbhoosreddy, @nchevobbe mind taking a look?


This is fantastic, I really appreciate you coming in and helping with the UI polish. this is the piece that falls through the crack the most
@garrettgsb It might be helpful to also update RTL section in the docs for future contributors.
@clarkbw refiled in core - https://github.com/devtools-html/devtools-core/issues/121
I had a hunch!
Lets start with an MVP of hover on:

* Variable
* Function

## Variable

Hover over a variable to inspect.  Popup should display:
* ObjectInspector for variable value
* Action to Add to Watch Expressions

## Function

Hover over a function to inspect.  Popup should display:
* Action to jump to function definition
* Action to find occurrences of function (in current file)

### Chrome

![](https://cloud.githubusercontent.com/assets/95570/18097151/9dbd7b6e-6e91-11e6-9515-2aa261a17772.png)

### DXR

<img width="300" alt="screen shot 2017-01-11 at 3 11 10 pm" src="https://cloud.githubusercontent.com/assets/2134/22262151/9c935090-e224-11e6-91a6-ee98a3fe378b.png">

@clarkbw crazy hunch!
got kinda stuck, when the pane collapses the split box actually just re-renders without the first pane(let's say I'm collapsing the first one) and the other one is just there, taking as much width as it needs with flex: 1. Tried to render the first pane with width: 0 and transition the width but it's so slow.

@jasonLaster 
Ok, I'm going to close this out because I believe #1828 will fix the issue.
@irfanhudda so thinking about @nchevobbe's point, I think it would be nice to have some differentiating factor between the watch expressions input and the text in the other accordian items.

I was thinking you could add an underline for watch expression input placeholder. what do you think @nchevobbe @jasonLaster?
Not seeing this in Chrome or Firefox Nightly
haha - screw it. this sounds too hard lol. I think react fiber will help.
@steffiau is doing this one in #1815 
#1790 updated the docker image, lets see what happens
hmm, worth investigating now :)
lets rebase, must be ancient
Hold onto your hat. @bomsy, @jbhoosreddy and I worked on the Settings page during the call:
https://github.com/devtools-html/devtools-core/issues/37

I'm in favor of *turning* it on because it might also introduce some weird behavior until we upgrade to webpack 2
Hey @steffiau when do you think you'll be able to look at this?
https://github.com/devtools-html/devtools-core/issues/123
Hi Bryan I'm walking through this one with my tutor right now.
@garrettgsb Landed!
LGTM! Merging.
Hi @jasonLaster 

Please check. Thank you! :)
@jasonLaster can you elaborate on this or maybe add a photo? not sure what to add here.
submitting my fix, imo we can choose between explicitly state !improtant or just use something like

`html:not([dir="rtl"]).toggle-button-end.vertical svg,
html[dir="rtl"] .toggle-button-start svg {
  transform: rotate(-90deg);
}
`
@liorpr Thanks for fixing this problem. This seems to have come from my previous commit #1745.

I have one suggestion though
> I was thinking you could add an underline for watch expression input placeholder. what do you think @nchevobbe @jasonLaster?

That's something to try. @irfanhudda if you have some time, could you experiment with this an post a couple of screenshots here ? thanks !
Next steps:
* remove right border
* add nice background color
* add right padding



I changed color of placeholder to `--theme-body-color-inactive` which is being used for placeholder at other places. Although, it looks like there is not much difference for dark mode

|Light|Dark|
|-|-|
|![chrome-light](https://cloud.githubusercontent.com/assets/1755089/22297870/acd3e11a-e344-11e6-8e09-3db7b74787d4.png)|![chrome-dark](https://cloud.githubusercontent.com/assets/1755089/22297887/b25cffc2-e344-11e6-88ee-83b555e3d725.png)|

Looks like `--theme-body-color` and `--theme-body-color-inactive` is same for dark-mode [https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/src/lib/themes/variables.css#L95](https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/src/lib/themes/variables.css#L95).

@nchevobbe I'll experiment with adding underline to input

> align the pretty print button with flex (align-items center i think)

It already is. The problem is the SVG creator we have rendering an `i` with the SVG element inside of that. It offsets the styling. We need to do more direct targeting of the SVG/i here to get it to look right. Ideally though, this shouldn't be necessary as the SVG node should return a plain SVG element non-wrapped. That way any styling outside is easy to touch it without knowing exactly what the internal markup structure is.
I tried adding underline to input and here's what I've got. (I used box-shadow for input)
![underline](https://cloud.githubusercontent.com/assets/1755089/22299773/618bcdf6-e34b-11e6-83fe-c080e33c7c07.gif)
Any suggestions? @jbhoosreddy @nchevobbe 

I'm in favor of this. It simplifies our css quite a bit. 

> already have autoprefixer in our setup

yarn pulls in a lot of things, you can check the file and see who pulls it in...

@clarkbw what do you think?

@irfanhudda maybe we switch to using a hover color, like the active blue? 

Either way, i think the cursor is pretty good.
`stylelint` and `cssnano` require it.

<details>
<summary>yarn why autoprefixer</summary>

```
yarn why autoprefixer
yarn why v0.19.1
[1/4] Why do we have the module "autoprefixer"...?
[2/4] Initialising dependency graph...
[3/4] Finding dependency...
[4/4] Calculating file sizes...
info Reasons this module exists
   - "stylelint" depends on it
   - "devtools-launchpad#css-loader#cssnano" depends on it
info Disk size without dependencies: "376kB"
info Disk size with unique dependencies: "9.16MB"
info Disk size with transitive dependencies: "10.17MB"
info Amount of shared dependencies: 13
Done in 1.44s.
```

</details>
We can swap configs on the moz builds pretty easily by just overriding it in the script that compiles the build. That tackle's the `moz` prefixes only for the internal stuff.
@irfanhudda it doesn't have to be an underline. feel free to experiment with it if you feel there is a better UX option definitely post it and others can also see it.

> Looks like --theme-body-color and --theme-body-color-inactive is same for dark-mode 

As @jasonLaster showed me, you can conditionally set different colors for the dark and light theme. Here's an [example](https://github.com/devtools-html/debugger.html/blob/master/src/components/SecondaryPanes/Expressions.css#L36-L42).
As for `cursor:pointer` for hover button. I would like to see cursor pointer for that button so that it matches behavior of other buttons in the debugger.

However, the refresh button is implemented [here](https://github.com/devtools-html/debugger.html/blob/master/src/components/SecondaryPanes/index.js#L30-L36). And it was originally borrowed from [here](https://github.com/devtools-html/debugger.html/blob/master/src/components/SecondaryPanes/CommandBar.js#L80-L92). But the original implementation seems to have changed somewhat. Maybe you could figure out what needs to be ported. Should be straightforward enough but looking at command bar buttons should help.

For your reference, there is also a Svg.css [here](https://github.com/devtools-html/debugger.html/blob/master/src/components/shared/Svg.css). But I don't think you'd need to use it.
I think the gif is too long lol
@clarkbw my guess is that we'll add all the prefixes, which is okay too...
> conditionally set different colors

https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#update-a-theme-style
> my guess is that we'll add all the prefixes, which is okay too...

Only for the Firefox build. I know we get bugs filed about this often.  The `-webkit` CSS prefix creates error logs in the browser console so if we could remove the unneeded prefixes we wouldn't see those bugs filed anymore.  

Otherwise I think we'd always want the prefixes for a target set of browsers we want to work with.
> Should we persist the selected tab for the user so that the application brings the user back to the same tab

Might be something nice to tackle in another PR
> Hi Bryan I'm walking through this one with my tutor right now.

All yours @AlannaHarlton!
Woo! ![screen shot 2017-01-25 at 12 06 52 pm](https://cloud.githubusercontent.com/assets/2134/22307143/ce9d14f4-e2f6-11e6-9d04-6c29436bad9e.png)

@liorpr I'm for avoiding `!important` at pretty much all costs. I feel like that property is a code smell. But thanks for reporting the issue.
@SezginEge nice catch!  That file moved here: https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/bin/chrome-driver.js

Want to make the update?
i'll take this!
All yours @SezginEge!
got it. This might be nice in an devtools-core bug where we strip out the bad prefixes when we publish.

https://github.com/devtools-html/devtools-core/issues/128
Yeah! We should do a toast to this victory during the next work week.

I think it will help us improve auto storybook deploy and a suite of post-push stuff too. It's really cool
Ping @soheilhm do you think you'll have time to look at this soon?
Landing these changes in MC!
Ping @clarkbw it'd be great to add your content on workshops and we can add some talk material too
As a record, the issue is that splitbox is a no-op when the pane is closed. This makes it really hard to animate. Fiber will help :)
ping @jbhoosreddy 
Hey @andreicristianpetcu do you think you'll have a chance to work on this soon?
@bomsy we *might* get this for free. try investigating a bit...
@bomsy i'm taking you off this as it's old and really hard :)
I will take a stab at this :)
closing as it's filed in core, where it can be fixed
Hey Jason.

This is the expected behavior for accessibility purposes, to give user's a way to navigate out of the code editor using the keyboard. The first escape focuses on the editor container and the second escape results in the default action of opening the console. If you press escape on any other point of the debugger the console should be brought up immediately. 
Hey, I added the badge in the latest commit and updated the wording. I'm not familiar with markdown, and wanted to use the var for [slack] in the badge but it didn't like that so I just used the full URL. I'm not sure if that is right. Also, it would be nice if all the badges opened in new tabs, but again I'm not sure about markdown. :)
cool!
Nice!
Yah. `esc` pulls you out of the editor but keeps the tab placement where it is at. So you can tab to the next area in the content flow if desired from that point. The second `esc` is perfectly fine in this scenario. Quirky to the majority that don't navigate with a keyboard, but expected for those that do.
I think that's one of the things I noticed when we upgraded the bundle in mc.

My main concerns about this were:
- after pressing escape once, the focus is on the editor container, which we can see with the dotted outline. Pressing TAB puts the focus back in the editor, so there's no way to actually get past the editor using keyboard navigation. Pressing shift+TAB does focus the previous element in the flow, but we don't have :focus outlines for those so it's easy to misunderstand.
- this is a behaviour change compared with the previous version of the bundle, or compared with the old debugger, or the chrome debugger.

Maybe it would be nice to have an alternate key for triggering the split-console, that doesn't conflict with keyboard navigation (shift+ESC?)
Hmm, didn't catch the focus going back into the editor. We should probably detect `esc` on the editor, and when done shift focus to the next focusable node? Need to do some research here to figure out the best way forward.

Chrome's tools can't really be checked against for a11y concerns as they don't support much keyboard navigation in their sources panel (and possibly other areas as well.)

+1 to investigating alternative shortcuts to not collide with more natural keyboard navigation patterns.
This seems to be spawning a raw child git process which we've seen cause issues with other things converted into node scripts. Since you're still relying on the OS level details and configuration being just right. An alternative could be to use [nodegit](https://github.com/nodegit/nodegit) or some other git wrapper to abstract all of that away and provide a more explicit API for what we are doing in node land.
You can't force new window opening through Markdown. It is an abstraction layer to handle *just* the core pieces needed to make HTML (or whatever you want your output to be.) Everything else is handled by the converting engine, which is in Github's control and not ours. So, that's totally fine having it open in the sam window/tab; we don't have a choice in the matter. ;)
Are there any mock ups/designs/something for this? 
Sorry @jasonLaster but I don't think so soon. I will try in the future not to ask for tasks unless I am 100% sure I am going to have time for them :( Some things I have to do poped up and ate all my spare time.
So, I added hover color with some transition for outline. Here's what it looks like 
![outline](https://cloud.githubusercontent.com/assets/1755089/22338169/b9cd43fc-e40c-11e6-95a8-ce4ae6056d45.gif)

<details>
<summary>
Some other things I tried
</summary>


|With underline|Svg `plus` icon|
|-|-|
![underline](https://cloud.githubusercontent.com/assets/1755089/22338292/082a7e84-e40d-11e6-9964-5d6594f9d0c5.gif)|![outline-svg](https://cloud.githubusercontent.com/assets/1755089/22338289/06039a46-e40d-11e6-9bca-19317bd1f148.gif)

Adding svg icon required more changes than I expected.
</details>

It might be better to go with hover color and outline because it requires minimal changes.

Let me know what you think.

no worries.
haha - we now need to add a threshold i think 

![screen shot 2017-01-26 at 11 16 55 am](https://cloud.githubusercontent.com/assets/254562/22339729/fd7a1048-e3b8-11e6-8871-f143521beeb7.png)

@liorpr mind sharing some screenshots?

* firefox / chrome.
* vertical and horizontal layout
![screen shot 2017-01-26 at 11 55 14 am](https://cloud.githubusercontent.com/assets/254562/22341306/5a032430-e3be-11e6-8662-4caf480af16d.png)

We've seen in the Chrome DevTools that some users don't know how to get their addition added without a control button. So, we may want to consider here a UX that offers a specific "add" button of some kind to trigger adding the value instead of just the `enter` key.

EDIT: That feedback specifically comes from our "Add a class" feature in the Elements panel. Where it provides a textbox with no triggers.
It also might be beneficial to keep the `+` icon on the front and also provide that the action which will focus the add watch expression input. We'd simply hide that from the tab order `tabindex="-1"` since it would just trigger what the input itself does.
Thanks!
haha - i think we just want it to be functional right now. A good place to start is getting the homepage links working.

https://devtools-html.github.io/debugger.html/
will do!
(Setting a breakpoint on asm.js that was AOT compiler causes https://bugzilla.mozilla.org/show_bug.cgi?id=1333219 )
thanks @Garbee! I'll look into this.
Nice find
saw a test failure with `asm.js`. Does the new push address that?
> saw a test failure with asm.js. Does the new push address that?

It's intermittent failure at `ok(!findElementWithSelector(dbg, ".sources-list .focused"), "Source is not focused");`-check. Why it's failing does not make any sense for me except that `clickElement(dbg, "sourceArrow", 2);` might select the line. I'm removing this check since it's not needed for asm.js functionality test.
If nobody is working on this, I can tackle it.
@SezginEge I think this is a great one. was just thinking about it earlier today!
thanks, great find
Hey @irfanhudda, hmm would it be alright if we hold off on the hover state of the input for now?

I think we want to figure out hover and focus states globally and see what patterns we should apply.

There's a lot of good stuff in here that i'd like to land.


I reverted the hover styling and this looked okay for me
https://gist.github.com/a5fef250583b3fe587feed740a2f87b6

The gif doesnt show the cursor changes, but they're there too

![](http://g.recordit.co/s4I5brEUdn.gif)
in that case, let us revert that change and try to land this. 
### Before
![](http://g.recordit.co/31bmZFflmL.gif)

### After
![](http://g.recordit.co/Uzwe4t3eoo.gif)
Looks good so far, I'll take a closer look later 
I'll take a look at this

EDIT: :expressionless: Another issue because postcss-bidirection changed specificity of selectors. I'll create a PR for this.
+1 for more maintainable CSS. Now that we are refactoring react components, we should also refactor CSS.

It might be good to also have CSS that is react component specific.(i.e. doesn't affect whole html page) It would help refactoring and maintaining in future.
> CSS that is react component specific.(i.e. doesn't affect whole html page)

This is what BEM does for us. It helps enforce isolated pieces. Currently, only the text direction stuff needs to be handled from the `html` scope check. However, that is not 100% accurate (as the mode *could* change internally.) Which is where the `dir` [psuedo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:dir) is very handy. However, only support in Firefox currently so that is a harder-to-use item since we are looking to have the UX run in other engines if manually built. That is something we can have as a `TODO` to refactor later when support for that gets wider.
I'm not very familiar with BEM. But from what I read it might help solve our problem.

If we use sass we should keep selector nesting to minimum. After nesting 2 to 3 times, it becomes hard to follow.
Yup, nesting can be handled through stylelint rules. The reason the commandbar had 4th level nesting is I just didn't care to trim it out for a demo. :wink: Also if we look at some of the places where the styles get too deeply nested and such, it shows we have a thing to abstract into another component to handle something.
> changed specificity of selectors

@irfanhudda what do you mean?

CC @gasolin

@jasonLaster When you say `float:left`, you might mean `float: inline-start`?
Thanks @irfanhudda. Looks great!

![](http://g.recordit.co/kQB6FKWtaC.gif)
Thanks @jbhoosreddy this was a great fix!
@garbee, @jbhoosreddy mind trying this on a windows computer?
This is a really interesting point. I've thought about it for the past week.

Ultimately, I don't think we should move forward with it for a couple reasons.

1. When I played with it, the border is a very strong visual that adds clutter to the UI.
2. Helen always said that we should use color only when it tells a clear story. In this case, I am not sure that it communicates that it is a *regular* breakpoint strongly.
3. We would like to re-think how we show breakpoints after we reach parity. This would give us a chance to re-evaluate the left border for conditional bps and showing the paused on bp.

Thanks for bringing this up again, these discussions help us think through every aspect of the UI.

closing, but feel free to comment of course.

closing this and opening a small actionable issue
actually, i can't reproduce on nightly, so not re-opening.
Fixed 
@wldcordeiro closing this as it will be much simpler to re-open it when we have #1858 in.

Also, it would be *just* add the Editor / SearchBar refactor in separately as well.
@wldcordeiro fixed this bug in https://github.com/devtools-html/debugger.html/pull/1644

The issue is that both the editor and the search bar listen for cmd-g and try to do find the next element.

We want to fix this by moving the search state and handling to the editor.

A good next step would be to take that refactoring logic out of #1644 and make a new PR with just that.
> Helen always said that we should use color only when it tells a clear story.

The best reason not to.
I'm closing this as it's no longer actionable. We should try an ping james and get some of his initial work here.
 @jlongster do you have a branch you can share?
Thanks @AlannaHarlton!
Thanks @jonathanKingston

I can see how this could be frustrating. 

At the moment we've setup the conditional pane to be one giant input, which makes this somewhat hard to fix.

Perhaps, one concrete fix would be to make the input the width of the editor so that it is always in view. 

Would that work?
Here's where the inspector show's the message:
https://dxr.mozilla.org/mozilla-central/source/devtools/client/inspector/inspector.js#235-258

https://dxr.mozilla.org/mozilla-central/source/devtools/client/framework/toolbox.js#832-847
Maybe @bwinton could help us with this?
The overlay is primarily useful in Chrome's case since you can have an un-docked debugger and lose track of it. Which if you can't click on your page and the debugger is hidden... is an issue. It also helps with just that though, knowing you can't click/hover on things since that could cause the expectation of JS to run, which it can't. Just some background context on why it happens there.

I do love the idea of the full-size Command Bar at the top of the page though. That looks very nice in the mocks.
Hmm, do you truly want the bar in the content itself, or as part of the browser UI above the web content?

Is this meant to happen just for Firefox or for all debuggees? (It seems hard to do for all debuggees, since you'd be injecting code into debuggee when paused, so it wouldn't be functional presumably.)
> as part of the browser UI above the web content?

This was designed to sit above the content as browser UI.

It is also necessary to be available without needing the developer tools open.  In the case of remote debugging Firefox will be paused / unresponsive because you've triggered a breakpoint but you have no idea unless you are looking at the debugger client.  Where currently we have a notification bar but it only appears when you open the Inspector panel.


> Maybe @bwinton could help us with this?

Maybe.  What sort of help were you looking for?
Here's an example of what Chrome looks like when it is paused:

![screen shot 2017-01-27 at 12 34 15 pm](https://cloud.githubusercontent.com/assets/2134/22386665/03596138-e48d-11e6-984c-9605645bbcf0.png)

Okay, it sounds like we're only concerned about the case of debugging Firefox for this.

@clarkbw pointed out the [`Page.configureOverlay` message][1] that Chrome uses for this (pretty poorly named and described, but anyway).

Seems reasonable for Firefox to take a similar approach then, and have an actor offer control of an overlay, which inserts itself above / around the content as needed.

[1]: https://chromedevtools.github.io/debugger-protocol-viewer/tot/Page/#method-configureOverlay
Interesting. I also just retested on Nightly 54 (Linux) and it's working now. I guess the recent search improvements fixed this too :thumbs-up:



hmm, I'm seeing this error:

```
$ yarn run postmerge
yarn run v0.19.1
$ node bin/post-merge.js 
stderr 
/Users/clarkbw/src/mozilla/debugger.html/bin/post-merge.js:11
    throw error;
    ^

Error: spawn git diff-tree ENOENT
    at exports._errnoException (util.js:1008:11)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:182:32)
    at onErrorNT (internal/child_process.js:348:16)
    at _combinedTickCallback (internal/process/next_tick.js:74:11)
    at process._tickCallback (internal/process/next_tick.js:98:9)
    at Module.runMain (module.js:577:11)
    at run (bootstrap_node.js:352:7)
    at startup (bootstrap_node.js:144:9)
    at bootstrap_node.js:467:3
error Command failed with exit code 1.
```
hmm, i'm not thinking of wrapping

jus that the conditional pane input is fixed to the editor so the first character is visible regardless of horizontal scroll. Tough to describe :)


Looks good. We'll need to bump the launchpad for this to go green. 

Mind quickly updating the docs as well?
Sure
@gr2m any suggestions on ninja naming? 

The issue describes the goal. We want to help people feel comfortable asking for help
Hmm, so wizards could be a good term. But I think it might promote a status symbol that I'm not as comfortable with. 

Perhaps we describe ppl as "helpful folks". I think the TOC could be "help". And in the body of the section say we have some helpful folks...
I really like the look of the code style here. Good work.
Going to pull this locally and run the tests, plus maybe push some changes. Looks great though @jasonLaster the search modifiers are a complicated set of features hah
@wldcordeiro sounds good! Thanks :)

great feedback
@gr2m that helps a lot. I *do* want to avoid hero culture. I like the context for *champion* in the case of championing a cause like pushing an RFC concept here.

 I'm happy with putting the action first "getting help" and then using friendly language *folks* and *emojis*. 

Perhaps we could reach for some educator terms if we wanted too, but I'm not sure if we need it. I'm thinking of tutor...

Here's what we have now. I'm pretty happy with it

![screen shot 2017-01-28 at 7 28 20 pm](https://cloud.githubusercontent.com/assets/254562/22400938/4f0c8304-e590-11e6-986e-d4a923534dd9.png)

The emojis are great :) Thanks for addressing my concerns <3
Hi @jasonLaster !

I've tried various ways to tackle this problem, but so far this is the one that works. This approach checks if a source is the first received source by looking at its `id`, and clears the `sources` and its `state` when it is the first received source. Based on my observations, the first received source always has `33` as its `id`.  I would like to confirm if this is the acceptable approach before I attempt to address the problem with missing the first source since there may be a better solution. 
In the process of getting this updated shortly: https://github.com/devtools-html/debugger.html/pull/1859
@jbhoosreddy Need any help here? We're starting to get reports about the current script failing. I'd like us to try and get this converted quickly so contributors aren't hitting issues.
closing this as it's chrome specific
@jasonLaster I reverted the hover colors for input-expression and outline on focus.
@irfanhudda interested in looking at this?
@Garbee was thinking that flexbox could really help solve these absolutely positioned buttons
This is not reproducing on Linux for me. So the rendering seems OS-specific.
@Garbee great find:

Firefox is fine. Looks like it's just chrome

![screen shot 2017-01-30 at 10 42 36 am](https://cloud.githubusercontent.com/assets/254562/22429512/dbe1c7e6-e6d8-11e6-8349-bb4c5faa89d9.png)

I just took a quick look at getting nodegit setup. Oh-boy. It adds about 6 minutes on average to `yarn install` time on Ubuntu due to needing to compile itself. Further, it's fairly error-prone and you won't know until runtime if you're missing dependencies on your system for the compile to work right.

Just based on that, we really *should not* switch to using it. If they had reliable prebuilt binaries then it would be an option. However, they do not. So we need to try and solve the Windows issue differently.
If it's Chrome-only then I think I know what the problem is relating to. I'll peek at it (since I am the one that caused this) once I've figured out something for this postmerge script problem.
@Garbee Not sure if this helps but I could not reproduce this in chromium(debian).
That helps. As it means it isn't *Chrome* related but *Chrome on Mac OS*. Which means I can't test that myself.

Someone with a Mac specifically will need to triage this. I should be able to backtrace a minimal report from whatever the fixing patch is for the Blink team to look at to fix their engine.
@jasonLaster can I still wrap this up?
So, I think the best way forward here is two physical scripts. One for Unix systems (just like the original) and one for Windows. The `post-merge.js` here will detect the OS, then execute the right script needed. The Windows script will need to run the same git command, but use `findstr` to look for `yarn.lock` in the output and return/log appropriately.

Edit:

And it looks like `findstr /l yarn.lock` is what we are looking for here. To literally match `yarn.lock` in the text. If the returned value is empty, then it's good. Otherwise we need to do the alert to run `yarn install`.
@Garbee this might help: https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/bin/firefox-driver.js#L28-L29
@jasonLaster I filed an issue here gasolin/postcss-bidirection#6
So I take that consensus is to use simple execFile to run two different commands based on the operating system.
The thing is, this command typing it in works perfect on Windows too. So I'm not sure why it is failing (except for that icky feeling I commented on.)

If that change doesn't work, then we should use keep the old bash script for Unix style systems and add a new Windows script and use `execFile` to call the right one yes. Keep them separated for clarity in case they ever need to get modified later.
So, do modify the parameter bit. and leave it alone.

Manually running `yarn run postmerge` to test this *will fail* always, since we aren't working in the right context for git to have an `ORIG_HEAD` set. We need to run this within the postmerge process to actually verify it is working right. Which means, running a merge with a yarn lock change.

This really LGTM even though it smells slightly due to the manual execution. As of right now though, what we have has no change of working on Windows. Let's get that nit fixed to make sure we have the right number of params (as right now I believe it gets quoted into a single param) and then merge. From there we can do a rollback test on a side repo and give it a run in-context to see if it works properly and go from there.
@jasonLaster any idea on how to fix the failing tests?
@jacobjzhang go for it
I'll take a look at this
I'm seeing this on Mac.  If I change `display: flex` for the command bar to `display: block` then the problem goes away.
Do we have an eslint rule for single or double quotes?  I'm seeing a lot of `import React from "react";` and `import React from 'react';` and this might be a good time to make it consistent.
hmmm - strange https://github.com/devtools-html/debugger.html/blob/master/.eslintrc#L333-L335
Squashed the two commits, did a rebase on master, cherry-picked them over. Did some cleanup, some basic testing (source code URL copy looks good on all 3 panels), then worked on ensuring the right-click on a non-selected frame does not switch it over. Should be good now, let me know if anything else needs to be fixed.
@jacobjzhang looking great. Found some flow issues, that are mostly minor. 

Try running `yarn run flow` locally and adding some `isRequired` calls https://github.com/devtools-html/debugger.html/blob/master/docs/flow.md#required-property
Cleaned up flow errors and tested. Unfortunately a lot of the errors were related to frames/sources which aren't required (e.g. there can be no frames, hence no frame source), so isRequired wasn't that useful.
I have this reproducing now. It depends on the *height* of the viewport due to the SecondaryPanel being a `flex` container as well. Working on getting the right solution in place now.

EDIT:

:eyes: 

>  the height of the command bar

Really didn't catch that bit in the description as to why this was happening. My bad.
This is fixed now.
> The only part of the tools we use that has an issue is Eslint when calling things as elements. Let's say we const CommandBar = require('./CommandBar'); then only ever do <CommandBar /> to render it, eslint is throwing an error since CommandBar is unused, even though it actually is.

When we start using JSX we should set "react/jsx-uses-vars": 0 in eslintrc.js.

I have spoken with a bunch of React devs that would contribute if we used JSX... we should just do it.
FYI a thread has been started on the [group mailing list](https://groups.google.com/forum/#!topic/mozilla.dev.developer-tools/Jswhej8xDuw) about the JSX conversion since it affects the whole DevTools project and not just the debugger for consistency.
Hi @jasonLaster 

I've made those changes. The PR for the refactoring is [here](https://github.com/devtools-html/devtools-core/pull/149). Thank you! :)
I'll pull in the client work soon
Cleaned up flowtypes and did some extra testing. As discussed, may need to open separate issue for showSource inconsistency.
closing in favor of this new approach https://github.com/devtools-html/debugger.html/pull/1895 where we focus on incrementally refactoring a mochitest
Yes! There are two simple unit test failures, but the mochitests run fine with this change
afaics this should be fixed now by https://bugzilla.mozilla.org/show_bug.cgi?id=1265807
Nice find!
Thanks @irfanhudda 
Added copySourceUrl to L10N in all use cases. Tested.

![](http://g.recordit.co/kUM61jGx46.gif)

Moving to https://bugzilla.mozilla.org/show_bug.cgi?id=1335901. This bug can be closed.
Thanks @wldcordeiro!
`conda install python=2.7.9` fixed that error. For a more detailed explanation, please visit https://github.com/conda/conda/issues/1367.
added https://github.com/devtools-html/debugger.html/projects/11#card-1576974 to handle this
Created https://github.com/devtools-html/debugger.html/projects/11#card-1576978 to track this
I think with `animation-timing-function: ease-in` it's easier to see the highlighted line because a big chunk of 4s animation time has a darker effect than the 4s animation with`animation-timing-function: normal`. Let me know which one you like more :)

### 4s Animation (animation-timing-function: ease-in):
![4ox8kgfu1d](https://cloud.githubusercontent.com/assets/4562118/22540973/648db604-e95e-11e6-9ffe-671d6af9e32b.gif)


I do not, I've already deleted my mozilla-central repo. All I had done was investigate different ways to do the lazy loading of sources by hacking around in in the sources backend. Basically you need to move the store for sources and sourcemaps up to the toolbox since all tools need to work with them. You might be able to load all the sources when the toolbox opens, and then fetch/parse sourcemaps on demand. I'd start by moving the sources up to the toolbox and see if it's fast enough to load all of them when the toolbox opens.
lets add proselint

https://github.com/webpack/webpack.js.org/blob/master/.proselintrc

and other things from webpack.js.org
Thanks!
looks promising
https://github.com/github/pages-gem
Hmm I think I was getting bit by this when adding search modifier ui stuff. I'll pull this and test.
Nice! Thanks @jasonLaster 
Smaller test case by using only ImmutableJS

```
var ar = [1,2];
ar[66261280] = 3;
var seq = Immutable.Seq(ar);
seq.forEach(i => {});
```
@bomsy cool. Lets add to this doc over time!
why is the card not linked to this issue? now I can't follow it.
So we create grip (see e.g. https://dxr.mozilla.org/mozilla-central/source/devtools/server/actors/object.js#1224) that will have the following structure:

```
{
  ...
  "preview": {
    "items": {...},
    "kind": "ArrayLike",
    "length": 66261281
  },
  ...
}
```

Which will be feed to the `fromJS` and immutable-js (with help of https://github.com/facebook/immutable-js/blob/master/src/utils/isArrayLike.js) will decide that it is an Array and will use ArraySeq producing the same iloop as shown above.
> why is the card not linked to this issue? now I can't follow it.

I'm not sure I understand.  The card linked above does link to this issue.  When work begins on this we'll reopen this issue or open a new one and link to it from here.  So if you want to follow this issue you will see the progress as it happens here.
Looks like https://devtools-html.github.io/debugger-examples/examples/large-files.html is broken new. Can somebody provide a test case that reproduces the problem with STR?
Should we just do some transform on sparse arrays? `Object.keys(ar).map(k => ar[k])`
> Should we just do some transform on sparse arrays? Object.keys(ar).map(k => ar[k])

It's not really an array. It's just an object with numeric `length` property. The items of array does not matter in this case, it's just ArraySeq running loop for 66261281 undefined's.

P.S. `Immutable.Seq({"kind":"ArrayLike","length":66261281,"items":[]}).toMap();`
The file names [here](https://github.com/devtools-html/debugger.html/blob/master/docs/debugging-the-debugger.md#make-breakpoints-dance-dancers)  are outdated. 
create-store.js has flow implemented. 
utils.js is done
sources-tree.js is done
The hack bellow somewhat fixes the loop problem.

```diff
diff --git a/src/utils/fromJS.js b/src/utils/fromJS.js
index ff61c73..2b2e64e 100644
--- a/src/utils/fromJS.js
+++ b/src/utils/fromJS.js
@@ -41,6 +41,10 @@ function fromJS(value: any) : any {
     return value;
   }
 
+  if (typeof value.length === "number") {
+    value.length = "" + value.length;
+  }
+
   // Otherwise, treat it like an object. We can't reliably detect if
   // it's a plain object because we might be objects from other JS
   // contexts so `Object !== Object`.
```
Thanks @zackn9ne I incorporated your changes in #1913. Thanks for coming tonight!
Still has some `flow` errors.
Closing this as we have the WTR running with a the pretty-print test. I'll open a tracking issue to do some follow up work 
Added `permalink` for `docs` folder [https://irfanhudda.github.io/debugger.html/docs/](https://irfanhudda.github.io/debugger.html/docs/)
I've opened a PR in the **new** RFCs project for JSX https://github.com/devtools-html/rfcs/pull/5
Closing since feature landed behind a pref.
This is fixed I believe.
![screen shot 2017-02-03 at 9 06 02 am](https://cloud.githubusercontent.com/assets/2134/22600658/61ab2e66-e9f0-11e6-9759-08e75fadb5e4.png)

hey @SezginEge how's this going? 
```diff

diff --git a/src/components/SecondaryPanes/Frames.css b/src/components/SecondaryPanes/Frames.css
index 86d29bd..156dfc8 100644
--- a/src/components/SecondaryPanes/Frames.css
+++ b/src/components/SecondaryPanes/Frames.css
@@ -12,11 +12,11 @@
   justify-content: space-between;
 }

-/* Style the focused call frame like so:
+ /*Style the focused call frame like so:*/
 .frames ul li:focus {
-  border: 3px solid red;
+  color: white;
 }
-*/
+

```
closing as this is very vague
@irfanhudda you did an amazing job here!
So, what exactly does this look like scrolled? Do we have the contents of each accordion with a set height and make them scrollable? Or just scroll the pane itself but keeping the commandbar and why paused pieces fixed to the top?

If it is about fixing those two pieces, then the fix is trivial by just applying `position:sticky` here. If we want to individually scroll each accordion's content without causing the headers to get lossed, then I'm going to need to investigate this more to find a decent solution.
I think the command bar isn't remaining fixed like it used to be @Garbee
Discussing this in slack just now it looks like we only need to keep the CommandBar itself stickied and not the `WhyPaused` bit or anything else.
Nice catch!
@princiya is on it
![screenshot_20170203_163631](https://cloud.githubusercontent.com/assets/580982/22612603/f5b7f47a-ea2e-11e6-8a69-cfab72af5a7a.png)

Fixing the coverage button to be vertically aligned with pretty print would also be great here.
@wldcordeiro we can do code coverage when we land the backend and polish
Just for clarification, from the comments above and testing i see 2 scenarios
1. When the source map file is found. How do we redirect the user to it? 
Do we want to have a link to its source map (pretty printed) file ?

2. When we get a 404 on a source map file. we fix with the solution above. correct!
I am working on this issue.
Not able to figure out, where the highlighted css (bottom right) is generated from. Any inputs please?
![css](https://cloud.githubusercontent.com/assets/8022693/22617910/1ce70aee-ead0-11e6-95a4-97740f929f88.png)
@irfanhudda @jasonLaster @clarkbw @wldcordeiro 

@clarkbw I could not work on it yet :/ I will try to send a pr today.
@princiya That CSS is probably generated from [https://github.com/devtools-html/debugger.html/blob/master/src/components/Editor/Tabs.css#L50](https://github.com/devtools-html/debugger.html/blob/master/src/components/Editor/Tabs.css#L50)

Also take a look at [https://devtools-html.github.io/debugger.html/docs/local-development.html#rtl](https://devtools-html.github.io/debugger.html/docs/local-development.html#rtl) to better understand why we have things like `padding-inline-start`, `padding-inline-end`.
This is tracked elsewhere
I'm against because:
* it introduces an extra build step
* It doesn't give a real readability advantage over createFactory() (proof is that a lot of people on the mailing list didn't have a strong preference)
* tool support for JSX isn't great
* requires rewriting a lot of the existing code

If I recall correctly, @jlongster was against as well.

@nt1m could you repost these comments in  https://github.com/devtools-html/rfcs/pull/5 so we can discuss it there
Thanks @SezginEge. This issue might be vague, so feel free to ask questions in channel if you have questions about styling

Lets try and isolate the problem a bit. My guess is that it is likely tests that use a worker like the `sourcemap` test.

Perhaps we should try running the unit tests 100 times and see if we can find any patterns?
I'm going to close this issue for the time being as we're already introducing a lot of change in the Debugger. 

We're developing an RFC process for discussing project level changes. This will be a good candidate at the right time.

I'm also adding this issue as a note in our [tidy up] project board.

[tidy up]: https://github.com/devtools-html/debugger.html/projects/4
The version of `jekyll-relative-links` used by `pages-gem` does not support links with fragments e.g. `[test](somefile.md#fragment)`. This should start working when `pages-gem` updates `jekyll-relative-links` version in its dependencies.

Maybe we close this for now, I think we have the collective opinion of the team here. The debugger can try JSX if it wants and should participate in the rfc discussion. 
Hmm, i did a bit of investigating and I think this might be difficult to do at this time.

Here's some of my thinking:

My goal would be to position the input box of the conditional breakpoint pane on top of the editor so it is always the width of the editor and positioned next to the gutter. basically position it absolute to the editor laterally and next to its line vertically. This is hard to do with CSS...


Here are some screenshots from the inspector

### Current positioning of the input
![Screen Shot 2017-02-04 at 11.44.43 AM.png](https://shipusercontent.com/3a7c7ae050a45ed87d20775fc50964ae/Screen%20Shot%202017-02-04%20at%2011.44.43%20AM.png)

### Current positioning of the line and some styles

![Screen Shot 2017-02-04 at 11.45.09 AM.png](https://shipusercontent.com/848182d91150f29add9e0b1b537de314/Screen%20Shot%202017-02-04%20at%2011.45.09%20AM.png)


Thanks @wldcordeiro for fixing this annoying sucker

![](http://g.recordit.co/QuyDsrGYhz.gif)
closing as it's tracked globally and it's blocked in *flow*
Thanks guys. It sounds like:

a) we'd like maintain native keyboard actions i.e. <escape> moves the focus out of the editor
b) we'd like a better focus state for the editor
c) we *are* deviating from previous behavior where we used to treat escape as a global shortcut to open the console.

I'm going to close this issue because it seems like we're not going to change the behavior. Feel free to follow up though.
I'm closing this and moving it to the [enhancements] board. 
It's also discoverable on the tracking issue. 

[enhancements]: https://github.com/devtools-html/debugger.html/projects/5
I'm moving this to the [enhancements] board. Also added this to #1779. 

I'd like to get to this soon as it's similar to the command bar, but I'm not sure if we have the capacity at the moment.

Also, when we do this we should build the tabs component out of the debugger and pull it in. Or find a good library we can use.

[enhancements]: https://github.com/devtools-html/debugger.html/projects/5
Hmm, I think I switched philosophically from having very detailed dependency instructions to more broad instructions with helpful links.

i.e. 
* instead of saying here's how to install `yarn` we point to the yarn instructions
* instead of saying how to install and use nvm, we say our requirement is `node 7` and we recommend using `nvm` to do it.

We made these changes in the latest getting started iteration
added
This was an awesome discussion about our directon. I'm closing this now and we can open small more focused issues around pause on exceptions and other UI elements.
I'm moving this to [enhancements] with a server label so that we can prioritize this when we plan for Q2.

[enhancements]: https://github.com/devtools-html/debugger.html/projects/5
closing as it's not actionable at the moment. @cy6erGn0m happy to re-open when we get a STRs
this is coming from webpack built code which will be cleaned up when we tree-shake with webpack 2.
The next step is to add this example to our [examples] repo and make sure we can reproduce it.

[examples]: https://devtools-html.github.io/debugger-examples/
@clarkbw I'm happy closing this and re-evaluating holistically when we tackle pausing [breakpoints]

feel free if you want to get the quick win sooner.

[breakpoints]: https://docs.google.com/document/d/19l45AbZUeSj-Jf6pgM5_vyg4ghQLE3sNR2i979BA_X8/edit?usp=drive_web
Hmm I looked into this and found some encouraging results:

#### Situations:
* selecting frames - works
* stepping - doesn't work

#### selecting frames
![](http://g.recordit.co/whuYKpJUI0.gif)

#### stepping
![](http://g.recordit.co/lwU6aBqJyv.gif)


### Chrome stepping

Here's a GIF of chrome's stepping logic. It looks like if you've already expanded that object it will remember it and keep it expanded for you:

![](http://g.recordit.co/Dq4AMqfHrh.gif)

@jasonLaster @helenvholmes For now, I applied changes just for light theme. What do you think? I will apply changes to other themes according to your opinions.
Nah, I looked into this yesterday and I think a more wholistic approach would be better anyway 
i'll close and we can re-open if we get other complaints
Hmm. Maybe add a test for this in actions/test/sources?
Thanks. This is a great fix! 


Woo!
This must be on windows. This is similar to another windows issue about a line through the items. I think we have an issue with the shim that's handling the context menu for windows. 
@arthur801031 this PR is probably good, but the internals of `highlightLine` are confusing and I'd like to get a better understanding of it before we move forward.

Perhaps we can add more integration tests here. 
Hmm, @bomsy i'd like to see if we can avoid adding a new action if we can.

Here's an opinionated refactor where the `newSource` action checks to see if it can load original sources. If not, then it clears it's sources sourceMapURL

https://gist.github.com/jasonLaster/e24b8955d1605304f497520bf5b201ad
Hey @monicau! 

I just realized you might not have gotten the invite to our new [slack] channel! 

[slack]: https://devtools-html-slack.herokuapp.com/
Closing this as new issue created for this fix! 
[#168](https://github.com/devtools-html/devtools-core/issues/168)
Good point! Cool will play with this and see.
@jasonLaster that would work, sorry I was confusing this with the other bug I had opened on when the expression fires it doesn't scroll to the correct position horizontally also.
> Seems reasonable for Firefox to take a similar approach then, and have an actor offer control of an overlay, which inserts itself above / around the content as needed.

This is very similar to what our DevTools Highlighter actors do. 
We could create a PausedDebuggerHighlighter of some sort, that displays the toolbar at the top of the browser window, and a semi-opaque overlay. It would be very easy for the debugger front-end to instantiate it and toggle it when needed. I can help with that if we think this is the right approach.
> I can help with that if we think this is the right approach.

That would be great!
Closing, there is a note in the backlog here: https://github.com/devtools-html/debugger.html/projects/11#card-1467612
I noticed this as well. I'm going to see if I can fix this up @nchevobbe.

To follow expectations for users the right click will close the currently open context menu (and prevent the default to avoid what you see in your gif)
So I like the light theme colors, we just need the `dark` and `firebug` themes.  And then we can move it all over to variables.
> I'm happy to make any updates, let me know your thoughts.

We could use some designer help here.

My first thought is that we want to, holistically, tell a story with our colors; and that's where we probably need a designer.  Also there's a competing interest in keeping colors similar to our competition unless we believe there are significant gains to be made by going rogue. (improvements for color blind people or better contrast would be valid reasons here)  This one might be hard to do.
FYI, I've added remark to the [RFCs](https://github.com/devtools-html/rfcs/) repository here: https://github.com/devtools-html/rfcs/pull/10 and I think its going to work out well.
I think we should get hot-reloading and other config settings into the settings page.
Is that ok?
Hmm, I think we should close this PR and have more of a discussion in the issue then. 

I can draw up some options in sketch and we can discuss the goals.
@bomsy that sounds like a good idea. I'm hesitant to do it by default because it's also could have edge cases.
@bomsy dropping the in progress label because it's gone stale. feel free to pickup again though
Yay! Really glad we added this :)


We chose to use an elipsis, which indicates the value was truncated. We can re-evaluate this later when we look at other dropdowns and search results.
Here's how chrome and firefox handle it:

|chrome|firefox|
|--|--|
| ![](https://cloud.githubusercontent.com/assets/254562/22755253/631b4866-ee10-11e6-9a67-8fb27ca2df07.png) | ![](https://cloud.githubusercontent.com/assets/254562/22755254/631bd830-ee10-11e6-8e26-2a3b1ce9c75f.png) |


Also, we the state that we have in `pauseInfo` is pretty useful for this: `state.pause.frame.scope.bindings.variables`

notice that we have both the `state` and `reason` where appropriate

```json
{
  "rejected": {
    "enumerable": true,
    "configurable": false,
    "value": {
      "frozen": false,
      "ownPropertyLength": 0,
      "preview": {
        "kind": "Object",
        "ownProperties": {},
        "ownPropertiesLength": 0,
        "safeGetterValues": {}
      },
      "actor": "server2.conn2.child1/pausedobj36",
      "promiseState": {
        "state": "rejected",
        "reason": {
          "type": "undefined"
        },
        "creationTimestamp": 1486584316133.3994,
        "timeToSettle": 0.001713000237941742
      },
      "class": "Promise",
      "type": "object",
      "extensible": true,
      "sealed": false
    },
    "writable": true
  },
  "unhandledPromise": {
    "enumerable": true,
    "configurable": false,
    "value": {
      "frozen": false,
      "ownPropertyLength": 0,
      "preview": {
        "kind": "Object",
        "ownProperties": {},
        "ownPropertiesLength": 0,
        "safeGetterValues": {}
      },
      "actor": "server2.conn2.child1/pausedobj37",
      "promiseState": {
        "state": "pending",
        "creationTimestamp": 1486584316133.2642
      },
      "class": "Promise",
      "type": "object",
      "extensible": true,
      "sealed": false
    },
    "writable": true
  }
}
```

```diff
diff --git a/src/components/shared/ObjectInspector.js b/src/components/shared/ObjectInspector.js
index 43c49db..67f1f85 100644
--- a/src/components/shared/ObjectInspector.js
+++ b/src/components/shared/ObjectInspector.js
@@ -127,6 +127,9 @@ const ObjectInspector = React.createClass({
     const { getObjectProperties } = this.props;
     const obj = item.contents;

+    // we'll want to do something special here to also get the state and
+    // reason as children of a promise when we look for other child properties as well
+
     // Nodes can either have children already, or be an object with
     // properties that we need to go and fetch.
     if (nodeHasChildren(item)) {
```
Here are two quick screens that I made for showing the pause line:

I'm personally in favor of light blue although we use blue as it's consistent with chrome and we use blue in other places in a similar fashion. 

### yellow
![screen shot 2017-02-08 at 3 25 38 pm](https://cloud.githubusercontent.com/assets/254562/22755842/e7b419e8-ee12-11e6-8c64-7192de50eff8.png)

### blue
![screen shot 2017-02-08 at 3 24 26 pm](https://cloud.githubusercontent.com/assets/254562/22755843/e7c31fec-ee12-11e6-9822-74c5fa9be16c.png)

Lets not make a decision right away. curious to see what people think
I agree this is distracting.  I never understood what it was for until just now when I read this.  I don't think my selected location is actually that useful assuming you open me to the same file and same location I don't think you need to highlight the exact line.
Hey @SezginEge, @clarkbw. I just took a look and am favoring a more soft touch:

1. re-use the hover color, which has a very similar meaning... focus is on and we can select another frame
2. removing the outline as we don't need it here


here's  a patch so you can see what i mean:

```diff


diff --git a/src/components/SecondaryPanes/Frames.css b/src/components/SecondaryPanes/Frames.css
index 6cf455b..fe8b9b5 100644
--- a/src/components/SecondaryPanes/Frames.css
+++ b/src/components/SecondaryPanes/Frames.css
@@ -48,22 +48,23 @@
 }

 .frames ul li:hover {
-  background-color: rgba(236, 236, 236,0.6);
+  background-color: var(--theme-toolbar-background-alt);
 }

 :root.theme-light .frames ul li:hover .location {
   color: #49444c;
 }

+.frames ul li:focus {
+  background-color: var(--theme-toolbar-background-alt);
+  outline: none;
+}
+
 .frames ul li.selected {
   background-color: var(--theme-selection-background);
   color: white;
 }

-.frames ul li.selected:focus {
-  background-color: #4676b7;
-}
-
 :root.theme-light .frames ul li.selected .location,
 :root.theme-firebug .frames ul li:hover .location,
 :root.theme-firebug .frames ul li.selected .location,
```

Curious what you think. We should of course test on all themes, which is easy now with the settings pane.
I'll take a stab at this :)
I'll try and implement this.
I'll see about this one.
I am agree with you about remove outline. :+1:

Today I am planning to work on changes and send a new demo gif.
Hey @princiya thanks for the patch :+1:  !
So I pulled your patch and give it a shot. Here's the before/after screenshots : 

Before:
![before](https://cloud.githubusercontent.com/assets/578107/22788556/87ac7ff8-eee0-11e6-90d5-982dc7d7a37e.png)

After:
![after](https://cloud.githubusercontent.com/assets/578107/22788557/87b258a6-eee0-11e6-9272-72b89f59e2be.png)

As you can see, we lost the ">>" and the "+" buttons, it may be due to some changes on the sizing of the tab bar. I am gonna review your patch and see what can cause this :)



>  (I am not entirely sure if this whole PR is bringing any value by replacing absolute position with flexbox, let us discuss :))

Just on this point real quick, yes it provides benefit. We get the same layout but don't need to deal with the positioning problems that happen when the editor has low-space and things start stacking. As the buttons are taken into account with the flex container. This was needed to solve another bug I opened up that's laying around somewhere.
@nchevobbe The sreenshots are from Firefox? I have added a to-do (2nd point), and I am trying to find the wrong calculations.
@rrandom works great!

One thing for next time, it's nice to open a feature branch like `toggle-label` so that when i pull it down it can be tracked a little easier. also, it's nice if you want to work on several things :)
@princiya yes, it is from Firefox. I made a small gif so you can see it in action : 
![peek 09-02-2017 16-29](https://cloud.githubusercontent.com/assets/578107/22789970/04f75b32-eee5-11e6-9746-eea91490181b.gif)



Here's a screenshot of the markdown linting!

![markdown-linting](https://cloud.githubusercontent.com/assets/254562/22791751/6b913c1e-eeb8-11e6-9a93-aefaf4b13e49.png)

We can add more rules to `.remarkrc`. My suggestion is using this 
```json
{
  "presets": ["lint-recommended"],
  "plugins": {
    "lint": {
      "list-item-indent": false,
      "no-unused-definitions": false,
      "no-shortcut-reference-link": false,
      "no-shortcut-reference-image": false
    },
    "validate-links": {
      "repository": ""
    }
  }
}
```

Running `yarn run lint-md` after this gives 13 warning.
I love both, but the to me, the yellow is a better signal of "pause"; i.e. a yellow light, caution sign, etc.
@nchevobbe I will reply to all your comments soon :)
@clarkbw @jasonLaster I applied some changes for dark/firebug theme.  

|Light: |Dark:|Firebug|
|--|--|--|
| ![light](https://cloud.githubusercontent.com/assets/6282991/22799889/1c192e14-ef10-11e6-8a50-34abcc143733.gif) | ![dark]( https://cloud.githubusercontent.com/assets/6282991/22799893/217c5746-ef10-11e6-96b1-6d56bda2d677.gif) | ![firebug]( https://cloud.githubusercontent.com/assets/6282991/22799895/25d65f3a-ef10-11e6-9afa-c504ad8ad3b3.gif) |

If it looks good to you, I will create theme variables and use them.


So the fix on the overflow is removing `display: flex; flex: 1;` from `.editor-container`. For some reason the container being flex is screwing with Firefox's layout calculations. Not sure exactly why....
I'll take a stab at "Clearing the query to an empty string causes a search of empty text.".
@SezginEge are you formatting non-selected focused frames?
I'm planning to look into this.
.devtools-tab.highlighted background-color and highlighted-icon (e.g. chrome://devtools/skin/images/tool-debugger-paused.svg) should be changed.
I love existing color. This because yellow is warning color (pause is not warning), blue is similar with selected color, especially in devtools-tab.
I'll take pretty-print.js.
@jasonLaster Ok, next time.
@jasonLaster This can be closed now. Links on [https://devtools-html.github.io/debugger.html/CONTRIBUTING.html#local-development-computer](https://devtools-html.github.io/debugger.html/CONTRIBUTING.html#local-development-computer) page are now working.
@arthur801031 From my investigation this comes from `ObjectInspector` and could be fixed separately by having `text-overflow` set to ellipsis for element names? @jasonLaster feel free to review this change further, I could add some code to just the watch expression UI but think it'd be better addressed elsewhere.
@Garbee @jasonLaster @nchevobbe @wldcordeiro Can somebody please help me understand when the right pane toggle button in the below gif moves downward. Thanks in advance :)

![pane-toggle-error](https://cloud.githubusercontent.com/assets/8022693/22828473/c59f2f14-ef9d-11e6-9f32-db1f37544604.gif)

When the viewport width is equal to or less than 700px wide is when it goes into vertical mode.
Thanks for investigating @arthur801031.

I think it makes sense to close this issue for the time being:

1) I prefer pausing before an uncaught exception as it gives you an opportunity to explore the local scope

2) while we can do more to highlight the exception that will be thrown, I don't think we'd get a lot of value from a more descriptive message and there are a lot of edge cases.

I'm in favor of re-evaluatating pause reasons in a couple months after we've reached parity.
@juliandescottes and I are looking into this:

We're going to try to do two things:
1) not hydrate immutable objects
2) bucket our properties - here's a branch for the [bucketing]( https://github.com/jasonLaster/debugger.html/tree/large)


Thanks @arthur801031 
@tromey you did the console work, do you think you could look at this debugger side of things?
@captainbrosset I filed [bug 1338582](https://bugzilla.mozilla.org/show_bug.cgi?id=1338582) to track the server work required to make this happen.  Do you think you could take that bug on?
I'm able to reproduce this in Nightly.  Now we just need to be able to reproduce it in development mode.
I looked into it a bit today.  I want to do it, but I don't have time to implement it right now.

I think the basic issue is that the debugger server doesn't return async parent frames.  Looking into it a bit deeper, I see that `js/src/vm/Debugger.cpp` makes a frame iterator and uses that to implement `Debugger.getNewestFrame()` and `Debugger.Frame.older`.  However, this code instead has to notice when a frame has an async parent and switch to returning those, like `SavedStacks::insertFrames`.

Another option might be to compute the stack trace in two different ways in the debugger server, one using the Debugger API (as it is now) and the second time using `Component.stack`; then correlating the two.  This could be isolated in the debugger server so that it mostly keeps the same API -- just adding the async reason to some frames.
> I looked into it a bit today. I want to do it, but I don't have time to implement it right now.

Thanks for the investigation!
**STR 1:**
1. Open attached "testcase 1"
2. Open debugger, prettify script containing word "click"
3. Set breaking on "click" event, click on the page
4. Keep clicking "Step in" button until line "console.log(123);" is executed

**AR:**
 When debugger steps into a function, then, if the first token in that function is "function",
 debugger jumps to line 1. That line becomes highlighted with green; caret is displayed in that line

**ER:**
 When debugger steps into a function, some sensible line inside that function should be selected.
 In other words, debugger should select lines in the very same sequence as in STR_2 (see below).


**STR_2:**
1. Open attached "testcase 1"
2. Set breaking on "wheel" event, hover mouse over the page, rotate mouse wheel down once
3. Keep clicking "Step in" button until line "console.log(123);" is executed

AR:  Everything's OK


Here's the testcase 1:

```html
<script src="data:text/javascript,
(function(){
  var A = {};
  window.A = A;
  A.F = function(){
    A.G();
  },
  A.G = function(){
    function _G(){};
    A.H();
  },
  A.H = function(){
    A.I()
  },
  A.I = function(){
    function _I(){};
    A.J();
  };
  A.J = function(){
    function _J(){};
    A.K();
  };
  A.K = function(){
    console.log(123);
  };
  
  addEventListener('click',A.F,false);
})()
//.js"></script>

<!-- a bit confusing -->

<script src="data:text/javascript,
(function () {
%0A  var A = {
%0A  };
%0A  window.A = A;
%0A  A.F = function () {
%0A    A.G();
%0A  },
%0A  A.G = function () {
%0A    function _G() {
%0A    };
%0A    A.H();
%0A  },
%0A  A.H = function () {
%0A    A.I()
%0A  },
%0A  A.I = function () {
%0A    function _I() {
%0A    };
%0A    A.J();
%0A  };
%0A  A.J = function () {
%0A    function _J() {
%0A    };
%0A    A.K();
%0A  };
%0A  A.K = function () {
%0A    console.log(123);
%0A  };
%0A  addEventListener('wheel', A.F, false);
%0A}) () //.js
%0A"></script>
```
I'm closing this and opening a slightly more focused fix for `fromJS`. We'll also update ObjectInspector to better handle large objects/arrays
Thanks for filing the bug. This is actually intended behavior because we will store breakpoints in the original location (a.k.a pretty location).

We can do something nice here and jump you to the original location where we store the breakpoint if it would help.

Thanks for filing @magicp-github 
Thanks @tromey. 
@juliandescottes, @flodolo does this look correct? 
@wldcordeiro ObjectInspector seems like a good idea. Feel free to go ahead and do it!
> I'm able to reproduce this in Nightly. Now we just need to be able to reproduce it in development mode.

Oh, I was actually looking at the wrong bug.  I thought this was #1982 
Thanks @mattzeunert. I pushed some tweaks to your branch.

I think the second part, finding the variables, might be much easier than expected...

For instance, the node's we're finding have a context and associated scope. Scopes have variable [bindings], which could be really useful. In our test case, `square` has a reference `n` with two reference paths. Each path provides a location where it's used.

Our MVP could probably simply return the reference path locations...


[bindings]: https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md#bindings


@mattzeunert I hope you don't mind, but i tacked on the function definition querying so that we can establish some more patterns with the babel-types and traversing.

I also moved the parser to utils so it wouldn't be the *odd* man out.
Thanks @arthur801031. I couldn't find that either. But it did help me find two others :)

- [ ] deleting the query does not clear the last match
- [ ] white space queries breaks the editor

![](http://g.recordit.co/TNaR3tONHH.gif)
Answering my own question. Based on atom's implementation, `<cmd>+g` does not update the query :)

cool
Hi @jasonLaster 

I have a hack that fixes this issue. The editor would break when the query only contains whitespace(s), so I wrote a function to check if the query only contains whitespace(s). If this is true, we do not perform a search; otherwise, a search is performed.

In this example, " DOM" or "DOM ", queries that contain leading whitespace or trailing whitespace and other characters still work.
![3dlxtti1x6](https://cloud.githubusercontent.com/assets/4562118/22850983/3a5d4fa4-f050-11e6-82a0-b5cde995dcb5.gif)


Should the the tab auto switch to the prettied tab `{ } contentSearchUI.js` when add breakpoint on `contentSearchUI.js`?
This bug reproduce in Dev. Edition. It works fine in Nightly.
It is complicated behavior for me. Because in step 5, if click on line 1, new breakpoint will be added in original tab. I think that If it is intended behavior, both of original and prettied tab should not be displayed at the same time.

I tried to compile the effort in the PR as well as the feedback from the review in MC in PR #1996
Let's close this one for now.
From a conversation offline, here's our goal

| states | color |
|---|---|
| `.selected` | doesn't change |
| `:hover` | doesn't change |
| `:focus` | same as hover |
|  `.selected:focus` | slightly darker than `.selected` |

### Current UI

![selected-states](https://cloud.githubusercontent.com/assets/254562/22854179/3d028a40-f036-11e6-9c0b-e1e7c261ad6d.gif)

Thanks for the help @juliandescottes!
Closing this as it works fine locally:

@wldcordeiro, @Garbee do you remember when we fixed this?

![](http://g.recordit.co/0z15SUQtOc.gif)
@arthur801031 i moved the check to `source-search` so that the logic is more centralized.

@wldcordeiro @bomsy what do you think?

Looks Good!
Landing this so that we can iterate on top of it. It looks like there will be several follow up issues from here.
Just landed #1988, which gives a node path, which references a scope. We can use this to get all of the binding variables in the scope and their reference paths:

I'm actually adding a babel path that [demonstrates](https://github.com/babel/babel/pull/5296/files#diff-56f320a6a89e1ca4a32a0cbb2da293a1R79) this behavior.

```js
const referencePaths = node.context.scope.bindings.n.referencePaths;
```

Including Helen's mock which has a label in the input, which could be helpful


![](https://cloud.githubusercontent.com/assets/254562/21696191/e4a17e30-d35a-11e6-8675-4bb7ff191ca7.png)

I like Helen's mock, it makes the function search stuff's design match the search modifiers in the editor searchbar more closely.
@jasonLaster I think it was fixed with the vertical layout work and some follow-up LTR/RTL work.
Yea. I like that the magnifying glass titles the secondary bar. 


Recent changes: 

|Light: |Dark:|Firebug|
|--|--|--|
|![light](https://cloud.githubusercontent.com/assets/6282991/22861656/2f51bbae-f127-11e6-9e68-0bbfa67c57d2.gif)|![dark](https://cloud.githubusercontent.com/assets/6282991/22861654/2f4a17a0-f127-11e6-8efe-4199f42a59fa.gif)|![firebug](https://cloud.githubusercontent.com/assets/6282991/22861655/2f4dbc02-f127-11e6-9908-797ddd8bbf5b.gif)|

I think firebug theme needs UI tweak. I cant any difference between [.frames ul li:nth-of-type(2n) background color](https://github.com/devtools-html/debugger.html/blob/master/src/components/SecondaryPanes/Frames.css#L27) and [hover background color](https://github.com/devtools-html/debugger.html/pull/1934/commits/a7c2b92e8e708ac67e2636eac8e298f98f828fdb#diff-2bc3ff491ddc51329006281d59d7546aR55). What do you think?


Thanks. In that case we should remove the background color for even or odd tires and use a light border to divide the frames
Hmm, actually im not sure. We want to be consistent with the source tree. I can look at this a bit more in a couple hours
Maybe adding a test as well for this case would help in a follow-up PR?
I'll take source-documents.js and source-editor.js.
I'll grab wait-service and history
Hey @jasonLaster ! How's this going? Do you have any suggestion?
I'd like to work on this.
Go for it!
Hmm. Good catch. We do have an on resize check so it should work. I think @princiya is looking at this with her flex changes. It's most likely how we calculate hidden tabs
Could you attach screenshots with an object with string keys and a mixed example?
@jasonLaster Here's an example with both types of keys
![mixed_obj](https://cloud.githubusercontent.com/assets/1755089/22891570/d1c81c66-f235-11e6-874a-caff370a6b2b.png)
 
@jasonLaster Hey ! It's been a while since I looked at the debugger but I get the motivation back to work on it :)
Can I take a look at it this week or is there anyone already working on this issue ?
@ThomasCrevoisier welcome back! It's yours.
@princiya just pushed a rebase and a fix for showing the toggle button in the footer for vertical mode

I found a couple things while testing:

* the right-side toggle button is off in the welcome box (you can't get to the welcome box now until my fix lands lol) so don't worry about that
* in rtl the toggle button is not align-end (not a big deal)
* the plus button seems a little higher up than the `>>` button. like two pixels
* the `>>` is no longer the unicode character. Was there a reason for that? I think Helen intended to use the unicode character.
picking this back up! some nice ideas to try out!
closed as this is a ways off in hindsight
@tromey mind providing an STR and perhaps a screenshot of what it looks like now
I pushed a couple small tweaks to the branch to simplify how we're doing the colors. The tweaks, improve the outline and focus state, which is the smallest possible change that fixes the issue.

The colors you chose for selected state are great and I'd like to revisit them when we look at selected states for the source tree and command bar.

While testing I noticed that we don't select the frame when you press `<enter>` on on the frame which would really help the accessibility of the frames component. I'll add an issue for this soon.
I seem to get this when testing ...
All the source disappears when opened

![search-functions](https://cloud.githubusercontent.com/assets/792924/22908857/a476338e-f248-11e6-9df7-fed650c457ff.gif)

yep - @bomsy that's the wrong key shortcut :) you need to do `<cmd>+shift+o` in the editor
oh! my bad should `<cmd>+o` even work?
@bomsy no problem, cmd+o is a thing in chrome, but not sure if we want it
general note: I think we should change the placeholder text in the search bar based on the type of search we are doing.
Rather than showing `Search Sources...` we could show `Search Sources for Functions...` or something
@jasonLaster @wldcordeiro Thank you for your time and feedback.
Confirming that symlinking it with

```bash
ln -s /Users/sole/Applications/Firefox.app /Applications/Firefox.app
```

allows me to launch Firefox via Launchpad
I wonder what the expected behavior is here. In Atom and Sublime does opening something from the file tree while having enough files open to trigger an overflow menu put them in the overflow or as left/right-most tab?
I did something, I'll share an animated gif later today. But wanted to ask:
Was there a reason not to bring in conditional breakpoints into local state of the Editor component? Or even into the store?
Right now it's imperative, which does feel a bit hacky. Trying to mimic this in a popover resulted also a bit hacky, and I wanted to have state on the editor that contains data related to popover.

I wouldn't really put it in the store, though :)
Tweeted out from the Chrome Twitter account today:  

![c4labclvyaehglm](https://cloud.githubusercontent.com/assets/46655/22942002/4cd1ff72-f2ad-11e6-9908-877b6bcb92b1.png)

I really like yellow.
This is fixed by not hydrating null items in a sparse array. We will also want to add bucketing so that we don't render all of the keys in large objects, but we can handle that in another issue https://github.com/devtools-html/debugger.html/issues/2021
I think the chrome devtools tab behaviour could be pretty good here. They swap out the last tab with the selected tab. Try it for yourself by side docking chrome devtools and squishing the tabs, then choose a hidden tab. 
@clarkbw last tab here being the right most visible tab? Or the current active one?
@jasonLaster is this issue fixed with the new flex header layout?
Yes!
yeah, i'd be happy with either first or last tab. Also, noticing that atom doesn't even bother with the dropdown, which is kind of nice

Hi @jasonLaster  @wldcordeiro 

For "deleting the query does not clear the last match" bug, the Chrome debugger also has this behavior, but it changes the highlight color for the last character/string that was cleared. Maybe we should change the yellow to something else?

![zdmwbp0w6h](https://cloud.githubusercontent.com/assets/4562118/22966296/84bcd0a2-f39c-11e6-93fb-630f7217e5e0.gif)

@jasonLaster I'm not sure if we can hide those data without adding some file processing.
Don't know Jekyll a lot, but could we include other markdown files ? 

We could have something like :
```
README.md
site.md
```

And in `site.md` we would have : 
```
---
title: ...
permalink: ...
---

// Include the content of README.md
```
The reason we have front matter here is to specify the title.

We can remove front matter if move badges below the title.
@jasonLaster I'll open a pull request then.
Retriggered the CI job
I added color to code coverage button which matches pretty print button

| | |
|-|-|
|Light|![footer_light](https://cloud.githubusercontent.com/assets/1755089/22987080/a8f5d19e-f3d3-11e6-928f-f41f1f9bd79d.png)|
|Firebug|![footer_firebug](https://cloud.githubusercontent.com/assets/1755089/22987093/b463ccde-f3d3-11e6-8d09-33c2a2283618.png)|
|Dark|![footer_dark](https://cloud.githubusercontent.com/assets/1755089/22987116/be17f3b8-f3d3-11e6-9390-31be1c442d41.png)|



Taking my shot with this one at #goodnessSquad event
Hi, I"m starting to work on this.
Starting to take a look at this.
<3 #goodnessSquad
I finished refactor `constants.js` and `actions`.

#goodnessSquad
Will start with `reducers` #goodnessSquad
Thanks!

Can you share some screenshots of what it looks like?
Thanks. This issue needs to be filed with the network panel. We only track the debugger in this GitHub repo. 
I'll take the following:
- `SecondaryPanes/Breakpoints.js`
- `SecondaryPanes/ChromeScopes.js`
- `SecondaryPanes/CommandBar.js`
- `SecondaryPanes/EventListeners.js`
- `SecondaryPanes/Expressions.js`
Hi @jasonLaster 

For `Breakpoints.js` to pass flow, we would need to add `source` to type `Location`: https://github.com/devtools-html/devtools-core/pull/193.
Where is the network panel, bugzilla or somewhere else on github?
@zspitzer you can log bugs for the netmonitor on bugzilla : https://bugzilla.mozilla.org/enter_bug.cgi?product=Firefox&component=Developer%20Tools%3A%20Netmonitor
found an existing bug https://bugzilla.mozilla.org/show_bug.cgi?id=1160254
Looks like this issue is fixed.
Thanks @irfanhudda 
Some linting error must have slipped in somewhere.

```
/home/ubuntu/debugger.html/src/utils/redux/middleware/history.js
  12:1  error  Line 12 exceeds the maximum line length of 80  max-len
```
Thanks for the report @joewalker! I'm not sure if this bug is still present or not in the latest code. What version of Firefox are you on? @jasonLaster if I'm not mistaken the splitbox is in devtools-core and m-c so maybe copying this issue to devtools-core if we verify it's still a problem.
I pushed a quick fix for the separate scroll bars

![screen shot 2017-02-16 at 10 55 04 pm](https://cloud.githubusercontent.com/assets/254562/23051958/141f28d6-f49b-11e6-8d71-dcb3ebcce50e.png)

![](http://g.recordit.co/JWhQUEdFmT.gif)
Hey @segevofer!

Couple of thoughts, it would be nice to use the `CloseButton` on the left like `SearchBar`
And we'd like the guillemet to be in the gutter like the way we show breakpoints. 

Do you have time to work on it the next couple days?
@wldcordeiro catching a plane. I'll try and test tomorrow

otherwise @bomsy might be a good person to look
Ok, I've made some progress but I'm not liking the layout so far

<img width="743" alt="screen shot 2017-02-16 at 9 37 41 pm" src="https://cloud.githubusercontent.com/assets/2134/23053717/4719ab72-f490-11e6-9886-6c8baa1a568b.png">

> Ok, I've made some progress but I'm not liking the layout so far

I'll do this in a followup PR
Hi @ThomasCrevoisier  @jasonLaster 

I did some investigation. It seems when the target files in `Sources` are revealed and you switch between tabs and you hit enter, the focus would not be on the search bar.

Here is a GIF that shows the target files are **NOT** revealed in `Sources` and the search behavior is correct:
![normal](https://cloud.githubusercontent.com/assets/4562118/23055564/8052425a-f521-11e6-8b8e-501532a5470f.gif)

Here is a GIF that shows the target files **ARE** revealed in `Sources` and the search behavior is **INCORRECT** due to lost of focus on the search bar when you hit enter:
![error](https://cloud.githubusercontent.com/assets/4562118/23055589/a0c479cc-f521-11e6-9ec1-51889fd244c1.gif)

Here is a GIF that shows the target files **ARE** revealed in `Sources` and the search behavior is **CORRECT** because when I switch between tabs, I click on the search bar to regain focus.
![qxcyyebg6x](https://cloud.githubusercontent.com/assets/4562118/23055620/c6b14e76-f521-11e6-879a-51829b9a2409.gif)


I'm currently running Nightly - 54.0a1 (2017-02-16).
Thanks @joewalker. I see this as well. We'll look into it soon
@janodvarko What's your timeline?
Yeah, a little spacing from the title would be good.  Awesome find!
Thanks! How's this look with RTL?
So the bug is coming from this (potential) explanation: https://github.com/devtools-html/debugger.html/pull/1976/files/368101b4c46ec34a6a2ba129fa7969d6ed65b4be#diff-d9abd0398fe2e0fa5793ba7d100231f5L50
and here: https://github.com/devtools-html/debugger.html/pull/1976/files/368101b4c46ec34a6a2ba129fa7969d6ed65b4be#diff-d9abd0398fe2e0fa5793ba7d100231f5L110

Currently we have,
`.source-tab .close-btn {
  position: absolute;
  top: 3px;
  offset-inline-end: 4px;
  visibility: hidden;
}`

and writing this explicitly as below fixes the issue.
`html[dir="ltr"] .source-tab .close-btn {
  offset-inline-end: 4px;
}`

`html[dir="rtl"] .source-tab .close-btn {
  offset-inline-start: 4px;
}`
After switching to es modules I encountered with:

```
src/reducers/breakpoints.js:54
 54: function update(state = State(), action: Action) {
                     ^^^^^ parameter `state`. Missing annotation
``` 

I'm not familiar with `Flow` and not pretty sure what I need to define, any suggestions?
Hi @sashakru give this a try:

```js

function update(state: BreakpointsState = State(), action: Action) {
  switch (action.type) {
    case "ADD_BREAKPOINT": {
```

And if that doesn't work you can just go ahead with this instead:

```js

function update(state: any = State(), action: Action) {
  switch (action.type) {
    case "ADD_BREAKPOINT": {
```
I'll use this issue to track the various tasks to complete this work:

- [x] Copy source map utils out from `debugger.html` to a new package in `devtools-core` (devtools-html/devtools-core#218)
- [x] Update `debugger.html` to use this new package (#2329)
- [x] Land new source map package in m-c (https://bugzilla.mozilla.org/show_bug.cgi?id=1348112)
- [x] Update `debugger.html` to receive source map service from toolbox in Firefox (#2506)

James had mentioned making things lazy as well to improve pref, but I think we can tackle that separately in follow up work.
Thanks @princiya.

I looked at it for a bit and I think we'll want to touch up the margin/padding for the close button and source tab.

We should also look at the pretty print button:
* it's also position absolute
* we shouldn't reserve the 20px space unless it's a pretty source
* we should vertically align the icon so it lines up w/ the text buttons
I extracted getMatchIndex and added some unit tests. still seeing some issues while i'm testing:

wrapping is weird - basically going from match 2, to 1, to n, n-1 and vice versa.
Here's a list of things left to fix here:

- [ ] make the autocomplete CSS more generic instead of file search specific with function search CSS trying to turn off borders it doesn't want.
- [x] fix the bug where you can arrow into an item that doesn't exist, this seems to be an issue with the `selectedIndex` though I haven't investigated yet
- [ ] somehow handle when the results are larger than the 300px we make available.  Either scroll the results or limit them and require more typing?
You'll notice that I went with the right hand side line numbers in a column on the right hand side but all aligned to the left so the `:` is vertically aligned.  This requires a bit more complex flex layout to achieve but I think its better and I believe we wanted to use it other places.
I'll take the following:
- `SecondaryPanes/Scopes.js`
- `SecondaryPanes/WhyPaused.js`
- `SecondaryPanes/index.js`
- `SourcesTree.js`
- `WelcomeBox.js`
- `shared/Accordion.js`
I have a simple fix locally that I'll share when I have cell service :)
This is awesome work. 

Let's prioritize landing ASAP. I see some integration test failures. There best thing to do is try doing the test steps manually and make sure everything works. We likely broke something stupid like pausing :)
This looks great and the cider is straight forward. 

One thought if you have time is that it would be nice to tweak the selected state. 

I'll test soon, but if you could take some screenshots of function search with the dark theme and source search that would help. With source search we just want to prevent regressions
Googling said error points to our version of `react-hot-loader` being too old.

https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/package.json#L78

I think we need to use the latest 3.0.0 beta to get hot loading working with React 15+

Also since the work would be done in launchpad, reopening issue on devtools-core may be better @irfanhudda 
Opened https://github.com/devtools-html/devtools-core/issues/195
@wldcordeiro Thanks for opening that issue.
I'll try to find some time this week.
Honza
I don't know what depends on recent nodejs version but it is frustrating to depend on something not shipped in current ubuntu release:
```
$ yarn install
yarn install v0.19.1
[1/4] Resolving packages...
[2/4] Fetching packages...
error devtools-launchpad@0.0.45: The engine "node" is incompatible with this module. Expected version ">=6.9.0".
error Found incompatible module
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
```
This page doesn't help. I have nodejs 6.6.0 on Ubuntu 16.04.1.
This is a requirement coming from devtools-launchpad [package.json](https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/package.json#L27) and the [development-server](https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-launchpad/bin/development-server.js#L171) but I'm not sure why.

Can you file an [issue](https://github.com/devtools-html/devtools-core/issues) with the launchpad?  Feels like the versions should at least be in sync and if we don't need anything from 6.9 we could drop that down to 6.6 to simplify things.  

In general staying with the latest node release seems like a good plan.
Opened https://github.com/devtools-html/devtools-core/issues/196
> fix the bug where you can arrow into an item that doesn't exist, this seems to be an issue with the selectedIndex though I haven't investigated yet

I think I just saw this in action and believe it has to do with multiple definitions.  If you have the multiple Backbone models in a file you could have several `initialize` functions.  It seems we aren't showing the different versions but still allow you to arrow through them and navigate to them.
The <kbd>cmd</kbd>+<kbd>P</kbd> search looks fine with these changes in both light and dark themes.

Light     | Dark
--------- | ---------
![screen shot 2017-02-20 at 2 34 57 pm](https://cloud.githubusercontent.com/assets/2134/23144105/3ee99c0e-f77a-11e6-9df6-13bff8f1e1d2.png) | ![screen shot 2017-02-20 at 2 34 36 pm](https://cloud.githubusercontent.com/assets/2134/23144109/44a249ca-f77a-11e6-8edb-6168d59219db.png)


The <kbd>cmd</kbd>+<kbd>shift</kbd>+<kbd>o</kbd> search has some issues with the light and dark theme that I'll look into.

Light     | Dark
--------- | ---------
![screen shot 2017-02-20 at 2 40 02 pm](https://cloud.githubusercontent.com/assets/2134/23144142/7e912016-f77a-11e6-9429-ead7d2f97f72.png) | ![screen shot 2017-02-20 at 2 40 38 pm](https://cloud.githubusercontent.com/assets/2134/23144155/9610708e-f77a-11e6-9778-4bcd3f421c7a.png)


@sashakru do you have time to finish this up?

might be worth seeing what tests fail on `localhost:8000/integration` if it's a question of test failures
lets see if my branch works: https://circleci.com/gh/jasonLaster/debugger.html/2139
@segevofer closing this branch for the time being. Feel free to open it if you have time an opportunity to make the changes. 
@jasonLaster hey,

Will try fix today,
Found that there is some disable integration tests with comment `// timed out`:

```
 // timed out
  xit("sourceMaps", async function() {
    await sourceMaps(ctx);
  });
```


Will ping you tonight about my progress.
Tests on my branch were green. We can always make follow up improvements
Here's a good screenshot of the two problems I see:

1. the close button should have some more padding
2. the pretty print button should be better aligned

![screen shot 2017-02-21 at 11 15 26 am](https://cloud.githubusercontent.com/assets/254562/23173446/2b00f27a-f827-11e6-9551-6d5bae4669f3.png)

@wldcordeiro this is probably similar https://github.com/devtools-html/debugger.html/pull/2043
I hit this issue too. The sample js source text used in test has syntax errors. I'll push my fix for the tests.
Ok, this isn't going to work unless we go for CircleCI 2.0 and I'm not even sure that will fix things.
Thanks @rrandom for starting this off. It's a really hard problem
yep. i remember making this change... I also want to add the try catch because we shouldn't blowup ever
This should be fixed now!
this is a duplicate of #2007
Getting stuck on the docker mochitests.  Might comment that part out for now and pick this up again later.
maybe land this work as `circle-2.yml` and others can pick it up and work on it?
I'll take the following:
- `shared/Autocomplete.js`
- `shared/Close.js`
- `shared/PaneToggle.js`
- `shared/Dropdown.js`
- `shared/ManagedTree.js`
Fixes were just pushed I added some padding to the close button and fixed up the alignment of the pretty print icon.

![screenshot_20170222_034202](https://cloud.githubusercontent.com/assets/580982/23208111/03c76128-f8b1-11e6-98c5-27d697a8ebc7.png)
![screenshot_20170222_034223](https://cloud.githubusercontent.com/assets/580982/23208112/03c854ac-f8b1-11e6-86b5-0b367e9de690.png)

looking into this..
I think this is an issue for devtools-core
https://github.com/devtools-html/devtools-core/issues/201
We can probably close this then, right?
I couldn't get github to linkify this test URL, but here you go: data:text/html;base64,PHNjcmlwdD4KICBmdW5jdGlvbiBmKCkgewogICAgICBsZXQgeCA9IHsiPHJldHVybj4iOiA1fTsKICAgICAgcmV0dXJuIHg7CiAgfQo8L3NjcmlwdD4KPGJvZHkgb25jbGljaz0iZigpIj5DbGljayBtZTwvYm9keT4K

Open this page, then open the debugger.  Set a breakpoint on the return from `f`.  Then click the text.  When the debugger stops at the breakpoint, step over until the function is returning a value.  Expand the "<return>" object.  I get this:

![image](https://cloud.githubusercontent.com/assets/1557670/23221984/bbb6a42e-f8e3-11e6-8dd9-88cc37688edb.png)

There's no visual distinction between the two "<return>"s, but I think there should be.

Fixed now
Here's the html for the record:

```html
<script>
  function f() {
      let x = {"<return>": 5};
      return x;
  }
</script>
<body onclick="f()">Click me</body>
```

I think this is a pretty small edge case, but worth considering
This needs the launchpad bump to look right
sure
The [large file example](https://devtools-html.github.io/debugger-examples/examples/large-files.html) is broken and I can't reproduce this anymore.
> Presumably the math is done based on the browser window left edge rather than the devtools window left edge. 

Indeed :)

https://github.com/devtools-html/devtools-core/blob/master/packages/devtools-modules/client/shared/components/splitter/SplitBox.js#L103-L106

I'm trying to fix this.
The bug referenced has been closed.
ci... lol

looks great
fixed in #1904
Anything I can do to help out here @bomsy?
I'm not able to reproduce this on my windows machine.  I have Firefox 53.0a2 and I'm stepping over and in with the function keys without an issue.

Maybe there's some kind of focus issue here?
Hey yeah ... made the changes @jasonLaster suggested, it broke a couple of tests. Would love to pair with you or @jasonLaster to fix the tests. Finding them a bit tricky.
@clarkbw I am also not able to reproduce with current FDE anymore. So I'm closing, please reopen if this was inappropriate :)
Thanks @soapdog!

This looks really good. The design calls for the guillemet in the gutter, but I don't mind it here either.

![](https://cloud.githubusercontent.com/assets/254562/19328920/170c493a-90a4-11e6-907b-4a393e5ccd36.png)

Up to you on whether you want to take on the challenge of adding an element to the gutter like debugger breakpoints.

Personally, i think this might be a good V1.
I personally like being consistent with other editors
@jasonLaster oops, totally missed the gutter part. Maybe we could merge this one as a V1 and then I take my time trying to add it to the gutter and pushing a new PR later, I am new to react and this might take a while.
I'm going to leave this issue open since we discussed moving the guillemet to the gutter itself. Thanks for the work @soapdog 
@wldcordeiro the toggle button and top left section is kind of weird here.  Could we hide it?
@jasonLaster I wasn't sure whether we wanted to go full height or not since the new tab button toggles the source search. I could adjust that though.
Hmm, good point. use your best judgement
I'll take a stab at this.
Closing this PR due to duplicate PRs.
I will take this.
Thanks @amitzur. I like the cleanup as well. componentDidMount is quite unrulely.

I'll help land this tomorrow
+1 this has been annoying me
I think this was fixed in #1545 but hasn't landed in nightly yet?
This looks good to me!
We currently scroll the list in a [manual] fashion. 

We'd like to use [scrollIntoView], which will make function search and source search a lot more stable.

I think the other issue with function search scrolling is that the result height is more than the allotted space.

#### Getting Started
* enable functionSearch in the launchpad settings
* press cmd+shift+o in the editor when looking at a source

[scrollIntoView]: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView
[manual]: https://github.com/devtools-html/debugger.html/blob/master/src/components/shared/Autocomplete.js#L51-L66
The text is not vertically aligned.

![screen shot 2017-02-23 at 9 01 07 am](https://cloud.githubusercontent.com/assets/2134/23269814/a5ac69c0-f9a6-11e6-9b5a-9f33c892e935.png)

Thanks. thought it might just be a do it all at once thing
I will have a look at this
Found as part of #2107
Hey @jasonLaster , do you have a STR describing how hitting escape would *not* close the search bar ? It seems to work well for me in any case :/
@jcreighton its all yours!
(github doesn't allow us to assign anyone not in the org to an issue, but its labeled `in progress` so it is yours)
@wldcordeiro I'm interested in taking this one on, although I may need a bit of help along the way.
> No longer need any CSS transitions.

Which transition did you remove?
@wldcordeiro Sounds good. I'm happy to help with #2078 too / instead to help this get underway.
I'm seeing this run slowly but its not clear to me yet that the transition is to blame.
yep - you have to click away from the search bar
@clarkbw looks like the `browser_dbg-sources.js` test is failing. try debugging it in `localhost:8000/integration`
@bomsy try doing this:

```diff
diff --git a/src/components/shared/ObjectInspector.js b/src/components/shared/ObjectInspector.js
index e5b49bb..159999e 100644
--- a/src/components/shared/ObjectInspector.js
+++ b/src/components/shared/ObjectInspector.js
@@ -74,14 +74,13 @@ const ObjectInspector = React.createClass({
     return {
       onLabelClick: () => {},
       onDoubleClick: () => {},
-      autoExpandDepth: 1
+      autoExpandDepth: 1,
+      getActors: () => {}
     };
   },

   componentWillMount() {
-    if (this.props.getActors) {
-      this.actors = this.props.getActors();
-    }
+    this.actors = this.props.getActors();
   },

```
gg
This is great if you ever deal with things like [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)s! Awesome @jasonLaster 


![](http://g.recordit.co/PoWVg4Kx30.gif)
I was able to make this by adding this:

```css
.command-bar {
	position: fixed;
	width: 100%;
	background-color: white;
	z-index: 100;
}
.pane.why-paused {
	margin-top: 30px;
}
```

The tricky part are these:
* using `margin-top: 30px` is a little fragile, but no way to solve that without using variables
* you need a high z-index because a lot of the panels are running over the fixed position otherwise.

Might be better to look into an alternate layout approach.
Once #2118 lands we can look into this further.
I've been looking into this, can't seem to replicate.
Actually it looks #2118 fixes this as well.
I'll take the following:
- `shared/ObjectInspector.js`
- `shared/Rep.js`
- `shared/Svg.js`
- `shared/Menu.js`
- `Editor/index.js`
Oh did I not PR this already? ... oops.

Position sticky avoids the top margin since it is inline until scrolling happens. The fix should be this:

```css
.command-bar {
  position: sticky;
  top: 0;
  z-index: 2; /* Not really sure why we'd need a higher z-index value unless something else is raised up. */
 background-color: white;
}
```

At least for [browsers that support sticky](http://caniuse.com/#feat=css-sticky). IE/Edge will just have it not sticking to the top. Which seems like a fine graceful degredation in those engines.
I'll take a stab at this.
@wldcordeiro I'll try to align the "Add Watch Expression" text vertically. 
took another look at this after looking at object-inspector a bit

```diff
diff --git a/src/utils/object-inspector.js b/src/utils/object-inspector.js
index 8fd893c..8decf19 100644
--- a/src/utils/object-inspector.js
+++ b/src/utils/object-inspector.js
@@ -34,6 +34,18 @@ function isDefault(item) {
   return WINDOW_PROPERTIES.includes(item.name);
 }

+function isPromise(item) {
+  return item.value.class == "Promise";
+}
+
+function promiseItems(item) {
+  return [
+    createNode("state", `${item.path}/state`, item.value.promiseState.state),
+    createNode("reason", `${item.path}/reason`, item.value.promiseState.x),
+    createNode("value", `${item.path}/value`, item.value.promiseState.x)
+  ];
+}
+
 function sortProperties(properties) {
   return properties.sort((a, b) => {
     // Sort numbers in ascending order and sort strings lexicographically
@@ -139,6 +151,10 @@ function getChildren({
     return [];
   }

+  if (isPromise(item)) {
+    return promiseItems(item);
+  }
+
   const actor = obj.value.actor;
   ```
   
   I also wrote some tests that we can use. I found writing tests with real data here really helped:
   
   ```diff
   diff --git a/src/utils/tests/object-inspector.js b/src/utils/tests/object-inspector.js
index 500bbd9..9bb5906 100644
--- a/src/utils/tests/object-inspector.js
+++ b/src/utils/tests/object-inspector.js
 describe("object-inspector", () => {
   describe("makeNodesForProperties", () => {
     it("kitchen sink", () => {
@@ -103,4 +105,70 @@ describe("object-inspector", () => {
       ]);
     });
   });
+
+  describe("getChildren", () => {
+    it("rejected promise", () => {
+      const promise = {
+        "enumerable": true,
+        "configurable": false,
+        "value": {
+          "frozen": false,
+          "ownPropertyLength": 0,
+          "preview": {
+            "kind": "Object",
+            "ownProperties": {},
+            "ownPropertiesLength": 0,
+            "safeGetterValues": {}
+          },
+          "actor": "server2.conn2.child1/pausedobj36",
+          "promiseState": {
+            "state": "rejected",
+            "reason": {
+              "type": "undefined"
+            },
+            "creationTimestamp": 1486584316133.3994,
+            "timeToSettle": 0.001713000237941742
+          },
+          "class": "Promise",
+          "type": "object",
+          "extensible": true,
+          "sealed": false
+        },
+        "writable": true
+      }
+
+      const children = getChildren(x, x, promise);
+      expect(children.map(c => c.path)).to.eql([...])
+    })
+
+    it("unhandled promise", () => {
+      const promise = {
+        "enumerable": true,
+        "configurable": false,
+        "value": {
+          "frozen": false,
+          "ownPropertyLength": 0,
+          "preview": {
+            "kind": "Object",
+            "ownProperties": {},
+            "ownPropertiesLength": 0,
+            "safeGetterValues": {}
+          },
+          "actor": "server2.conn2.child1/pausedobj37",
+          "promiseState": {
+            "state": "pending",
+            "creationTimestamp": 1486584316133.2642
+          },
+          "class": "Promise",
+          "type": "object",
+          "extensible": true,
+          "sealed": false
+        },
+        "writable": true
+      }
+
+      const children = getChildren(x, x, promise);
+      expect(children.map(c => c.path)).to.eql([...])
+    })
+  })
```
@Garbee pr it up
#2122 is going to do the lodash throttle investigation
setting this to in progress for @julienw 
both items left are currently in progress
Ok, looking much better now
So the only problem I see is when I make the search input lose its focus by clicking in the editor. If I click on anywhere but the editor, the search bar loses focus, but pressing escape works as expected.
Back to the editor issue. The problem is that we have a `keydown` listener on it 
```js
this.editor.codeMirror.getWrapperElement()
  .addEventListener("keydown", e => onKeyDown(this.editor.codeMirror, e));
```
The `onKeyDown` function comes from `src/utils/editor/index.js`, and looks like : 
```js
function onKeyDown(codeMirror, e) {
[...]
  if (key === "Escape" && target == textArea) {
    e.stopPropagation();
    e.preventDefault();
    codeWrapper.focus();
  } [...]
}
```

The key part here is the `e.stopPropagation();` which prevent the regular handling of the Esc key to be called.
Removing the `stopPropagation` call fixes this issue, but I'm afraid it could have side effects.

This event handler was added in https://github.com/devtools-html/debugger.html/commit/71360324aed48f8978ef00520596b7f40c46fb72 , in order to be able to navigate out of the editor. I think some of the logic from this handler could be moved to `editor/index.js` , where we have a listener for the esc keydown too.


The button was added. There is additional work being done to move the function search UI itself into the search bar now and additional refactoring to simplify our two distinct search types project and document.
Self-assigning so I know to track it for mentoring.
I'll be working on this, I'm doing a lot with search so to summarize the "waves"

1. [x] Add search bottom bar to house search modifiers and function search
2. [x] Move function search into search bar
3. [x] Refactor autocomplete and search bar to reuse components and clean up UI/UX
4. [ ] Move state of editor search including modifiers and function searching into redux.

Incoming once I test it again real fast just to verify it still works with the more recent work that's gone on...
#2128 is up to address this. So sorry I didn't do that last week when I wrote the fix originally... I thought I had.
i'll look at add this..
Investigated a bit and the issue seems linked to the fact that the codemirror instance is being destroyed and recreated when the layout is switched.

When it is recreated in components/Editor::componentDidMount, a code mirror document is created on the fly reusing this.props.sourceText. However this document is not tracked by the source-documents.js "store". So at this point, code mirror points to a document that is not handled by the debugger. It would be better to set a valid  debugger document rather than doing this.

On top of that, when a document is opened in CodeMirror, a property "cm" is created on the document object to indicate that this document is linked to the code mirror instance. When we destroy codemirror, we should at least unlink the current document loaded in code mirror.
hmm, i've been worried about the *many* uses of escape for some time.

Perhaps we have one top level escape handler that can do:

1. refocus on codewrapper
2. close search bars...
@wldcordeiro marking this as yours as it's close to your work. it's mostly just blocked...
This was working with `postcss-bidirection` `2.0.3`.
Moving to devtools-core

If it's a shortcut, it's OK to call the string `.key`, but the localization comment should make it clear it's a shortcut.

If it's an accesskey, it should be called `correspondinglabel.accesskey`

::: devtools/client/locales/en-US/debugger.properties
@@ +19,5 @@
> +copySourceUrl=Copy Source Url
> +
> +# LOCALIZATION NOTE (copySourceUrl.key): Access key to copy the source URL of a file from
> +# the context menu.
> +copySourceUrl.key=X
Could you describe the issue?  I somehow still don't see or understand the issue.
10 days back I had grabbed this issue, but I started working on this just today ;), my bad!!! Just when I was about to create a PR, it said I couldn't merge and the fix was already there :D Anyways, it was the same to same fix :)
No problem, only surprised with the coincidence ;)
likely
Landing in Nightly is happening here: https://bugzilla.mozilla.org/show_bug.cgi?id=1338567
This has been moved, but there's still work to do to make the UI/UX nicer. Starting that now in another PR.
I can't seem to kick the CI right now. 

But in the broader sense this code isn't necessary right now.  We want to get the release out the door and this is only adding risk for very little reward.
I'll pick this back up again in a couple weeks.  Anyone else is free to also grab this after we release.
Hi @roieu. I believe what you're saying is that when the source tree is blurred, it should be clear which source is selected. Is that correct?
I'm closing this now so we can focus on the march 6th release. Lets pick it up afterwards
Thanks @zystvan this looks great
Hmm, that's nice. Our window would look something like this

```
window
  - appStore: Object
  - client: Object
  - [default properties]
  - __proto__: WindowPrototype
```
I'll take this issue. @wldcordeiro 
Exactly!
Here is what we have compared to `Chrome`:

**Our debugger**
<img width="1361" alt="screen shot 2017-02-25 at 11 15 19 am" src="https://cloud.githubusercontent.com/assets/4562118/23327867/2b65b842-fb4f-11e6-969f-425ee4281576.png">

**Chrome**
<img width="1361" alt="screen shot 2017-02-25 at 11 17 04 am" src="https://cloud.githubusercontent.com/assets/4562118/23327870/328d11a6-fb4f-11e6-99fa-01aa04e0e27b.png">

Thanks for the comparison and the great test. 

I think the last example with the rejected promise could have the value undefined. 


Hey @sashakru! I rebased your work so that it is up to date.

When I tried to start the debugger on your branch I found some errors in `reducers/index` it looks like import/export is failing. 

Do you think you can look at this soon?
I think we can try to improve `getchildren` to do this:

https://github.com/jasonLaster/debugger.html/tree/promise2

my branch is close, but getting tripped on some details...
@jasonLaster that is correct.
It also means that when the tree is not in focus it should stop responding to keyboard events.
Then we'll be able to have arrow keys navigation in Call Stack frame, which at the moment, no matter which frame is in focus, the keyboard events are intercepted by the source tree control.
I am playing around with the tree in devtools-core to handle blur events (I am new to this project so my pace is slow)
Thanks @zystvan for the work! Looks great and makes our secondary panes more consistent.
The icons that bother me here are the expand/collapse and plus icons.

The size is maybe not the issue, but they are not aligned with the icons in the sidebar on the right, feels inconsistent. 

I also think we are missing some padding/margin for the expand/collapse icons. They is no breathing space between them and the borders of  the tab panel.
Things left to address:

1. Not doing normal code searching when function search is enabled
2. General clean-up of the code for simplicity/readability
3. Some styling bits for function search results
4?. Possibly axe `Autocomplete` in favor of reusing pattern from `SearchBar` in `SourceSearch`
Hmm, this is cool. One thought is that we can minimize the risk a bit by keeping `Autocomplete` and making a new `Autocomplete2`. That way, we don't risk Cmd+P... but lets see where we're at soon. 

I'll pull it down and play
Hmm, after playing with it seems like this refactor is pretty solid for source and editor search. I see some scrolling issues, but that's not a big deal
This works well enough for the primary use cases that we can merge it and then focus on the function and modifier search.
@arthur801031 taking your name off it because you've got two other issues
Hey @jcreighton when do you think you'll be able to work on it?
Hey @irfanhudda what's your timeline here?
@ThomasCrevoisier i'm taking your name off it because it's been some time. Feel free to reclaim it if you can jump on this soon
We're landing a V1 pretty soon that is limited. Here is a list of things we should do to improve it:

1. show the popup on hover
2. highlight the selected expression/token
3. show the token/expression as a header instead of a top level root
4. have a caret in the top left of the popup
5. support dark theme
6. support more types of expressions
7. support jump to definition

----
#### 2. highlight the selected token

![screen shot 2017-02-26 at 3 31 31 pm](https://cloud.githubusercontent.com/assets/254562/23343392/b95124d6-fc38-11e6-802f-1e9f4fd54975.png)

#### 6. support more types of expressions
  - 6.1 support member expressions like `obj.foo.bar`
  - 6.2 support `this` and maybe other in scope things
  - 6.3 support showing outer scope bindings
  - 6.4 support variables... if they're not in the bindings

#### 7. jump to definition

We only need this for functions. Functions have their defined `location` in the data and we can use the `selectSource` action to do the jump


```json
{
  "enumerable": true,
  "configurable": false,
  "value": {
    "frozen": false,
    "displayName": "app.TodoView<.render",
    "actor": "server2.conn8.child1/pausedobj100",
    "location": {
      "url": "https://devtools-html.github.io/debugger-examples/examples/todomvc/js/views/todo-view.js",
      "line": 39
    },
    "class": "Function",
    "type": "object",
    "extensible": true,
    "sealed": false,
    "parameterNames": []
  },
  "writable": true
}
```

@jasonLaster Worked on it last night, just opened a PR
Thanks @jcreighton!
hmm, i can't reproduce. it was pretty sad when it failed earlier.

This is probably stale as @wldcordeiro did some work on the result list recently
@jasonLaster Yes of course. I'm stuck and don't really know what causes the bug...
@ThomasCrevoisier  pinged you on slack. happy to unstick you
Closing as dupe for #2163 
closing this in favor of a more modern tracking issue
now fixed
closing and we can open new focused issues later
oops sorry, i missed this
> The icons that bother me here are the expand/collapse and plus icons.

This is a hard problem. @princiya and @Garbee worked on vertically aligning the text and buttons. i suppose we can line up command bar buttons too.

> I also think we are missing some padding/margin for the expand/collapse icons. They is no breathing space between them and the borders of the tab panel.

agreed
Seems like it persists its last state. There seems to be three states that it cycles around the following classes:

* `pause-exceptions enabled`
* `pause-exceptions uncaught enabled`
* `pause-exceptions all enabled`

I tried it with all of them and it seems to just persist the values above. Shouldn't it be the case?

sorry, that wasn't clear. This is an issue that only happens when the debugger is in the firefox panel.

I'm working on a fix now, but forgot to mark it in-progress
np, yours has better screenshots :)
I believe this is due to a larger issue, which is that we don't persist breakpoints across debugging sessions.

I'll look into doing this in a separate issue and we can see if it fixes it.
I'll take a look at it. :)
perfect!
@wldcordeiro thanks for finding this!
Since we ended up closing the PR associated with this being expected I'm closing the issue. We can revisit if it's still a problem.
LGTM!
@jasonLaster I see the close button in your screenshot but I'm not seeing those. The close buttons are hidden due to `visibility: hidden;`. Was that on purpose?
Yep. Only visible on hover :)
I'm not seeing it at all -- even on hover:
![close_buttons](https://cloud.githubusercontent.com/assets/5232812/23347143/061d1092-fc6e-11e6-8398-2e860e0e027e.gif)
@jasonLaster Argh, figured it out. I had to install packages. The CSS wasn't being compiled correctly otherwise. Thanks for being so responsive!
@jasonLaster I can file a PR for this by today.

@rrandom Do you mind if I take this?
It seems that I can't reproduce it since I pulled `master`
Am I right what we should hover on component and press Enter to select?
@irfanhudda Ok, take it 
sorry @rrandom. I got confused :)
@lasfin i think so, the idea is that we should handle the `<enter>` keypress and select the frame. the code snippet above is a good description.
closing as it looks fixed on master.

@arthur801031 mind trying to reproduce it?
@jasonLaster  Never mind :) 
@rrandom Thanks.
I'm having a look at this ;-)
We actually don't want it to. We want it to set the input value. Try it in atom or sublime :)
I had started on this as well yesterday but @aklt showed better form by actually commenting here! I'll share what I have to possibly accelerate things a bit. I took things a bit further and altered the UX such that:

* Using the 'x' saves and closes the panel
* Pressing "Escape" closes without saving
* Pressing "Enter" always saves. If there is no content, it converts to a "regular" breakpoint

Open for discussion, of course.

https://github.com/ryanjduffy/debugger.html/tree/feature/1945

![](https://cloud.githubusercontent.com/assets/788456/23366753/82979638-fccd-11e6-991d-fa0d612f1014.gif)
Here's a diff to show where to start on adding the guillemet to the marker

```diff
diff --git a/src/components/Editor/Breakpoint.js b/src/components/Editor/Breakpoint.js
index aea776b..e3f2654 100644
--- a/src/components/Editor/Breakpoint.js
+++ b/src/components/Editor/Breakpoint.js
@@ -31,11 +31,13 @@ const Breakpoint = React.createClass({
     const bp = this.props.breakpoint;
     const line = bp.location.line - 1;

+    // => this is where the marker goes. we could do the same thing with the guillemet
     this.props.editor.setGutterMarker(
       line,
       "breakpoints",
       makeMarker(bp.disabled)
     );
+
     this.props.editor.addLineClass(line, "line", "new-breakpoint");
     if (bp.condition) {
       this.props.editor.addLineClass(line, "line", "has-condition");
```
@jcreighton I remove the `:root` from the selectors as they're unnecessary and i'm updating the docs to reflect that
> using the 'x' saves and closes the panel

i would guess that `x`  would cancel and close the panel. i suppose we might need a save button to reinforce that too. not sure
@jasonLaster Tooltip should explain the behaviour here. I'm fine with `x` being save and close or cancel and close.
Ah, seems you beat me to it.  I'll take a look at your commits.
@ryanjduffy Thanks for this PR.
I'll have a go at this one
I looked at this a bit today.  Changing the pause reducer and WhyPaused helps; but the Scope pane still flashes, so more work would be required there.

The bigger point here is that this change should depend on the resumption reason: maybe it's ok to keep the panes as-is for a step in/out/over, but a plain resume should probably collapse everything.

Flashing changes in the scope pane (say, when a variable's value changes) should probably be done in a separate bug.
this looks right @lasfin! I'll test soon
This issue is not complete, I hope to finish it in 2 days
Works great! Thanks so much

![](http://g.recordit.co/bHzcV35q6P.gif)
Huh, thanks for the report. But this is the debugger project, I believe you would want to report on [bugzilla](https://bugzilla.mozilla.org/). 
Sorry for the confusion, will refile in the right place. Do we have a spot on the mozilla wiki where we point out where to file which bug where?
Closing, filed bug against Firefox: Developer Tools: Netmonitor as https://bugzilla.mozilla.org/show_bug.cgi?id=1343122
@jasonLaster 

I couldn't reproduce it. It's fixed :)
@jasonLaster seemed to address this so I'm closing for now. If we find that there's still slowness we can reopen or whatever.
@jasonLaster @wldcordeiro If the selection is empty, should we keep the actual value in the search bar ? The actual behavior is that the search bar is empty after pressing Cmd+F again.
We'd also want to put padding on the left and right sides imo to make the beginning of the result line up with `S` in search for and the end of the number line up with the whole word button.
i'll poke at this

looks good. I'll test in a bit
can't reproduce, so closing for the time being
I can take this tomorrow if you'd like
closing this as it was fixed in a different PR. I'll land some of these test fixes later
Working on the debugger and sensor web is fast enough after some speed ups that i think we can close this and open a new issue with a better STR

https://devtools-html.github.io/debugger-examples/
The "dropdown-button" icon also looks a bit too small and not aligned with the others.

<img width="248" alt="image" src="https://cloud.githubusercontent.com/assets/1141550/23451154/09a40e08-fe5f-11e6-9218-dac2df426e27.png">

Agreed. I also think the collapse buttons could have a little bit more breathing room from the border. 
Hmm how are there now sources at all? Like shouldn't we have at minimum the index file? Even if it has no scripts in it. I swear that's the behavior Chrome and the old debugger have. 
Actually --theme-toolbar-background-alt is present in devtools-core version of variables.css, but missing in mozilla-central.
I agree it's weird, I didn't look into more details. The test url is https://devtools-html.github.io/debugger-examples/
So it looks like a regression. 

I don't have the issue when using the current Nightly, but I do when trying out the new bundle currently attached to https://bugzilla.mozilla.org/show_bug.cgi?id=1338567

I also have the issue when testing the project from Github. So probably introduced in the last month or so.
Agreed. 

One style point, it would be nice to update the other "Not Paused" styles to be the softer color like this one

<img src='https://shipusercontent.com/ad3e602e1159583523e63e40ce5bce71/Screen%20Shot%202017-03-01%20at%205.23.32%20AM.png' title='Screen Shot 2017-03-01 at 5.23.32 AM.png' width=1040>


Lets replace this `--theme-faded-tab-color` variable with something available. and sync `--theme-toolbar-background-alt` when we do the next bundle
I'm still having this with today's Nightly:
![hanging](https://cloud.githubusercontent.com/assets/3307404/23456281/19deeed2-fe73-11e6-8f86-f4af4a105938.png)
TBH, I think this is more of a CodeMirror bug than something that is actionable for Debugger.html.

Anyway, I'll email a locally saved file to @jasonLaster 

@jnachtigall sorry, unfortunately nightly isn't up to date yet. 
waiting on this merge: https://bugzilla.mozilla.org/show_bug.cgi?id=1338567

I investigated a bit more and this is actually a very weird bug.

> I don't have the issue when using the current Nightly, but I do when trying out the new bundle currently attached to https://bugzilla.mozilla.org/show_bug.cgi?id=1338567

But it's not a regression of the new bundle, the difference comes from the addons I have installed in Nightly.

![debugger_react_devtools_bug](https://cloud.githubusercontent.com/assets/1141550/23459223/b1c70ab6-fe7f-11e6-8a95-40d3f87efd77.gif)

It looks like having installed the "React devtools" addon on the debuggee allows the debugger to see the index of the page!?
@jasonLaster Yeah, I know, but I am pretty confident that the "Unresponsive script" will be also present in the current debugger version.  Anyway, I've sent you a mail. As said I think it's more likely a CodeMirror issue, but maybe Debugger could catch this more gracefully...

I agree this should not be blocker and is hard to take action upon (except maybe a report to CodeMirror)

BTW, even when https://bugzilla.mozilla.org/show_bug.cgi?id=1338567 is merged, then Nightly will have - talking of now - the version as of 10th Feb and again already 3 weeks out of sync :-/ 

I think @jasonLaster landed this in his recent PR.
@jasonLaster I made the fix ! I push it right away :)
I'll take a look at this.
Looks great, one small thing now that it's in the panel. Can we soften the color of the guillemet, perhaps `var(--theme-comment-alt)`
I;ll have a go at this in a few hours
Here's a patch to get started
```patch
--- a/src/components/Editor/SearchBar.js
+++ b/src/components/Editor/SearchBar.js
@@ -422,7 +422,7 @@ const SearchBar = React.createClass({
       toggleModifier } = this.props;
     const { functionSearchEnabled } = this.state;
 
-    function searchModBtn(modVal, className, svgName) {
+    function searchModBtn(modVal, className, svgName, tooltip) {
       const defaultMods = { caseSensitive, wholeWord, regexMatch };
       return dom.button({
         className: classnames(className, {
@@ -430,18 +430,19 @@ const SearchBar = React.createClass({
           disabled: functionSearchEnabled
         }),
         onClick: () => !functionSearchEnabled ?
-        toggleModifier(Object.assign(defaultMods, modVal)) : null
+        toggleModifier(Object.assign(defaultMods, modVal)) : null,
+        title: tooltip
       }, Svg(svgName));
     }
 
     return dom.div(
       { className: "search-modifiers" },
       searchModBtn({
-        regexMatch: !regexMatch }, "regex-match-btn", "regex-match"),
+        regexMatch: !regexMatch }, "regex-match-btn", "regex-match", L10N.getStr("???")),
       searchModBtn({
-        caseSensitive: !caseSensitive }, "case-sensitive-btn", "case-match"),
+        caseSensitive: !caseSensitive }, "case-sensitive-btn", "case-match", L10N.getStr("???")),
       searchModBtn({
-        wholeWord: !wholeWord }, "whole-word-btn", "whole-word-match")
+        wholeWord: !wholeWord }, "whole-word-btn", "whole-word-match", L10N.getStr("???"))
     );
   },

```

If you are new [L10N](https://github.com/devtools-html/debugger.html/blob/master/docs/local-development.md#l10n)
One further problem here is that for a Proxy it's impossible to tell that the properties are synthesized, because they are synthesized on the server and there's no indication of this.  I'll file a bug about this in bugzilla.
I spoke too soon, maybe we can check object.class==="Proxy".
I tested with an outoftree m-c clone because that was my issue. I'd appreciate if the reviewer could test an in-tree clone (I mean, the way recommended in the docs).
Here are some improvements to add additional falsey values and clean up the tests/code accordingly.

You can try running these tests at `localhost:8000/mocha`

![screen shot 2017-03-01 at 1 02 06 pm](https://cloud.githubusercontent.com/assets/254562/23473773/665b1e50-fe7f-11e6-96a2-2aae69107a32.png)

In addition to Proxy and <return> there are also some synthetic properties in Promise.
I haven't completely finished testing yet.
^ nope this version was as of tuesday
I'd like to see if we can keep the simple data structure for now, which off the top of my head probably means keeping this edge case. Perhaps we can improve it slightly by renaming the key "<bucket53>"... this would reduce the likeliness significantly. but in a world of sha1 collisions, who knows...
I found this by inspection, not with real code.  So keeping the "bucket" name is probably fine, as names go.  The problem is that any choice of name will result in some object being uninspectable, because this code is conflating host and target properties.

yeah - i feel like we're writing embedded CSS all over again :P 

`my-really-long-prefix-selector`
The fix was merged in m-c
@sashakru i'm closing this for now. Feel free to open it up again when it's ready. Also i suggest smaller PRs :)
I think we can land a cleaner solution here by addressing this issue https://github.com/devtools-html/debugger.html/issues/2228
We got the whole list so I'm closing this. If we have reason to reopen we will. 
@aklt I've opened #2252 when this lands you should be able to clean up this PR to not worry about selections.
Now I think it's ready to be reviewed.

I updated both the trigger for the vertical layout (to 800px instead of 700).
I also changed the initial size for the source panel as I thought 300px was too big in the horizontal layout, and 150px too small in vertical layout. Also it seemed really weird to have different defaults. So I used 250px for both instead.

I think a better behavior would be:
* when moving from vertical to horizontal and vice versa, keep the same size for the source panel, so that it doesn't "jump".
* also remember the sizes between reopens.

But this will be good enough for now.
I also don't really like how we use "vert". This defines how the _split bar_ is, and not how the _split box_ is. Yet we define a SplitBox here... so when vert is true, the split box is actually horizontal. This is really confusing.

Another confusing thing is that "vert" is true by default... I think we should revert the meaning of this attribute, or maybe if you're concerned about backward compatibility use a new property "direction" that would have 2 possible values "horizontal" and "vertical". Explicit is better than implicit :)
here's a [branch](https://github.com/devtools-html/debugger.html/compare/master...jasonLaster:vars-in-scope?expand=1) I started to help get started. 

There's an interesting question where we call `variablesInScope`, perhaps it's a selector in the pause reducer...
I think the solution should be to update the path to be `<bucket-##>` which is pretty unique
closing this for now as it's a low priority. We can always re-open it if it is an issue later.

It's in the enhancements board so we can track it too
hmm, this must be a server bug then if the debugger is not getting the newSource events.
@wldcordeiro Great, thanks.  I have some work, but hopefully I can have a lool later this evening.
I want to take a look onto this one. Question: do we want just to delay the opening and closing or we actually want to fade the popup in and out after a while?
We fixed the initial concern about search slowing down viewing a source, but we should fix the secondary concern of search being slow in general. This effects opening and closing the search bar as well as updating searches.
> fade the popup in and out after a while

i don't think so.
i believe we fixed this with @princiya's work. 
I'm starting to work on it.
So, IMO there is no point to changing the name.  The current name is unusual enough.  If you do change it, though, we'll just need a new bug for the new name, because the underlying problem will remain.
The issues in the list were done. Closing.
Going to work on this
Going to work on this
mind if I take this one?
go for it

I've been testing to see if <kbd>ctrl</kbd>/<kbd>cmd</kbd>+<kbd>F</kbd> without a selection would refocus the search bar and I'm seeing the behavior work as expected so we may not need this PR. 
I'm already working to fix it.
Can you describe what you mean by not updating in the result list? 
This isn't fixed yet. It works with window resize event, not CSS div resize. From the gif, it's a CSS div resize happening there. I was looking at this last week, but couldn't finish it up ;) Let me know the priority for this and I will get back to this soon :)
@AlanCezarAraujo I see what you mean now.

Here's a patch that should do what we expect but I hadn't tested it thoroughly.

```patch
diff --git a/src/components/Editor/SearchBar.js b/src/components/Editor/SearchBar.js
index d1a5add..c85f379 100644
--- a/src/components/Editor/SearchBar.js
+++ b/src/components/Editor/SearchBar.js
@@ -322,11 +322,14 @@ const SearchBar = React.createClass({
   },
 
   // Handlers
-  selectResultItem(item: SymbolDeclaration) {
+  selectResultItem(e: SyntheticEvent, item: SymbolDeclaration, index: number) {
     const { selectSource, selectedSource } = this.props;
     if (selectedSource) {
+      this.setState({ selectedResultIndex: index });
       selectSource(
         selectedSource.get("id"), { line: item.location.start.line });
+      this.closeSearch(e);
     }
   },
 
diff --git a/src/components/shared/ResultList.js b/src/components/shared/ResultList.js
index e4a25c7..bd61838 100644
--- a/src/components/shared/ResultList.js
+++ b/src/components/shared/ResultList.js
@@ -24,7 +24,7 @@ const ResultList = React.createClass({
   renderListItem(item: ResultListItem, index: number) {
     return dom.li(
       {
-        onClick: () => this.props.selectItem(item),
+        onClick: e => this.props.selectItem(e, item, index),
         key: `${item.id}${item.value}${index}`,
         ref: index,
         title: item.value,
```
Hi, @jasonLaster , I found that set `"viewportMargin": Infinity`  when create the editor instance will fix this.  But it's not recommend by Codemirror https://codemirror.net/doc/manual.html#option_viewportMargin
Ahh. Thanks for clarifying. 

No pressure. 
I'm not completely satisfied by this:

* I can't get the value from global variables
* variables shadowed: I'd like that when hovering the shadowed variable, I get the value of that variable instead of the value of the variable from the inner scope -- note that the old debugger has the same issue here.
* I feel like we should reuse utils/object-inspector somehow.
But maybe this is good enough for now :)
Do you have an idea of how to test this automatically ?

here is the example page I use to test it:
```html
<!doctype html>
<html>
  <head>
    <meta charset='utf-8'>
    <meta name='viewport' content='initial-scale=1'>
  </head>
  <body>
    <button type='button'>Click me!</button>
    <script type="text/javascript" charset="utf-8">
      var a = 'a';
      var b = 'b';

(function() {
  const c = 'cc';
  let a = 'aa';

  function func(c, d) {
    var e = 'eee';
    {
      const f = 'fff';
      debugger;
    }
  }

  document.querySelector('button').onclick = () => func('ccc', 'ddd');
})();
    </script>
  </body>
</html>
```
@wldcordeiro thanks for your help!  
I went on a different approach but you gave me a more elegant solution.  
I'll open a PR as soon as I fix some Flow issues.
Clearing because I'll be in PTO. Feel free to merge or reuse my patch :)
mind sharing some screenshots from the other browser, chrome or firefox
Is this different from #1989?

Probably not.
@jasonLaster Oh yeah we do memoize! https://github.com/devtools-html/debugger.html/commit/890830521db64b7457afbe9ea8528525f1049563#diff-f948fa142a38b4398066c52da39206deR44
This looks good at first glance. I'll review it more closely on monday.

Also, it'd be nice to get @clarkbw's thoughts on class search as well. This wasn't part of the initial specification. Now that I think about it, I'm a bit concerned that we could be using valuable horizontal real-estate that we might want in the future. I suppose one option would be to include classes in the variable search, which is similar. 

Also, it would be nice to explore the variable search UI a bit more as we might not want to include local variables... but just properties of the module scope and maybe... one layer below that like object properties. Worth thinking about and i could be persuaded in any direction. Also, not blocking.
Awesome! I'd love to hear feedback from more people. An idea I had is making the button a dropdown/context menu to save on horizontal space. 
Some screenshot in chrome and firefox

| | Screenshot|
|---|---|
|Chrome before|![old](https://cloud.githubusercontent.com/assets/1755089/23558800/e901fd74-005a-11e7-8434-b70115600e69.png)|
|Chrome after|![new](https://cloud.githubusercontent.com/assets/1755089/23558807/ed26ce02-005a-11e7-8870-c60f375ab41e.png)|
|Firefox before|![firefox-before](https://cloud.githubusercontent.com/assets/1755089/23578058/e3fb4be8-00f3-11e7-8ce6-972267f5d6e5.png)|
|Firefox after|![firefox-after](https://cloud.githubusercontent.com/assets/1755089/23578059/e7fb1ec6-00f3-11e7-8e6f-c1d1e3f5d403.png)|


Could you post a screenshot?
duplicate of #2144
Thanks for filing the issue so we can track this. 

At the moment, I believe this is a low priority because "default" is a UI detail that does not impact the user significantly. Also, I am not sure of a situation where the panel would have a window property that content does not have or vice versa.
@aklt curious to see what you think when you have a chance. It'd be neat if this *just* works now
The easiest way to test this is to debug a big file and turn on the profiling tools and then hit `<cmd>+f`


```diff
diff --git a/src/utils/editor/source-search.js b/src/utils/editor/source-search.js
index a40f31a..f8b0bae 100644
--- a/src/utils/editor/source-search.js
+++ b/src/utils/editor/source-search.js
@@ -35,6 +35,9 @@ function getSearchState(cm: any, query, modifiers) {

   state.results = [];
   while (cursor.findNext()) {
+    // this is the place i think we're slow...
+    // i bet we can do this in batch or a regex...
+    // also we can lean on CM and do a PR up stream
     state.results.push(cursor.pos);
   }
```
@roieu any updates?
@jasonLaster I thought that while loop looked like it could be problematic. Must be a way to reduce the overhead.
![ddd](https://cloud.githubusercontent.com/assets/9152330/23584876/bcea403c-0183-11e7-918c-33744b5e9f29.png)

I'm not quite sure I see the problem here. I would expect those two be two *separate* directories.
@wldcordeiro as we have just 1 folder here, `DesktopModules`, I believe 2 entries for 1 folder is not correct. imagine following paths in some `web page`:

- `DesktopModules/file1.js`
- `Desktopmodules/file2.js`
- `desktopmodules/file3.js`
- `desktopModules/file4.js`
- `DESKTOPModules/file5.js`
- ...

Is that correct to having N entries in `Sources` panel for same folder?

I think I understand what the issue is though, for files/folders hosted on the server the directories are case-insensitive like URL paths. However when we bring in sourcemapped files/folders we would want case-sensitivity like in an OS.

@jasonLaster thoughts here?

@jasonLaster Haven't got a chance to dive deep into it last week.
Hope to share something later this week.
@wldcordeiro Hmm, I do not see the behaviour I was expecting.  If I open the debugger in
a file, press CTRL-f, search for something and then press ESC, I was expecting to see the term I searched for still highlighted in the search bar.

On my machine if I press CTRL-f with text selected it is copied into the search bar as expected, but as above it is gone if the bar is closed and CTRL-f is pressed again. 
Hi Jason, I was expecting the previous search text to reappear in the search bar if I reopen it after having closed it previously as I think we talked about on slack.  That does not happen, but the search bar is refocused :)
Note that the reinsertion of a previous search term was something @jasonLaster and I talked about on slack.

BTW, how do you make those neat looking keyboard buttons? :-)
Should I make an issue on it?
@nchevobbe pointed out that the search options bar is not visually differentiated from the search result items.
Not specific to function search, but I think we could polish this up a bit by aligning the buttons

![screenshot at mars 06 18-54-31](https://cloud.githubusercontent.com/assets/578107/23622336/8241efae-029e-11e7-89e8-f5d5a14bd6c4.png)


sounds good.

By the way, just noticed that the result list ui doesn't do much with blur events either...
Good find @nchevobbe. Damn, i hate that i'm off by a bit on the close button after just tweaking it :)



Just styled the source result list UI in the inspector. Thoughts?

I think I prefer the second one, but probably because of the symmetry..

#### Previous Input small UI tweaks

![screen shot 2017-03-06 at 12 59 37 pm](https://cloud.githubusercontent.com/assets/254562/23622492/f1c6d3f8-026c-11e7-9f47-104d409ba76e.png)

#### Input is 2ems == two sidebar headers and a result list item

![screen shot 2017-03-06 at 1 05 06 pm](https://cloud.githubusercontent.com/assets/254562/23622701/ac5e31ca-026d-11e7-9443-d2da8ce327f5.png)


erf, I think the first one would make more sense, because a lot of people use the debugger docked to the bottom, and vertical space is then limited.
That's the reason I'm not too much into the "card" look for the result.
Is there a rationale displaying the results for file search differently than for function search ?
@nchevobbe that's a good point. I think helen was using editor project level search as an inspiration. I agree that it's not as space efficient. 

I'd like to find a happy medium where it's not to dense when we have space, but also more space efficient when we're space challenged. 

Perhaps I just need to see what it would look like
the manifest works. and it is amazing. The 70K debugger.js diff we had would have been 5K had it used the manifest. that's a big savings

yeah, true. we could always push to it before it lands
> I'd like to find a happy medium where it's not to dense when we have space, but also more space efficient when we're space challenged.

Mhh, so we could either use media-queries, or see how we could work with viewport based units (`vh`in this case ? )
Yeah - i think media queries like vertical layout would be slick. 

* project search will come along soon. That's a Q2 goal. 
* jumping between file/project search is important. (unsolved problem)
* variable search is PRd now (close)
* modifiers are not used for function search as we're using fuzzy aldrin which is way better 

perhaps we punt on unifying the result list UIs now. But make an issue for doing that later. It would be nice if we used the condensed view for project search when we're tight on space.
I tried to find a solution for this while working on #1945, but understood from @ryanjduffy that he did not run into this working on the same fix.  I am curious what the correct fix is for this.
So, the problem as i understand it is that the CB panel is the width of the line and we want it to be the width of the editor wrapper... I'm open to creative solutions :P
