This should be GET_ENCOUNTER_ROLES

Good catch! Fixed at https://github.com/wluyima/openmrs-core/commit/fd3c52287ac4bfc9b098c4c2b3486070eca1449f

This needs a javadoc sentence.

Also needs an "@since 1.10, 1.9.2" annotation on it.

probably should have renamed the variable to "idOrUuid" to make the code more readable

lowercase the "o" in or

Needs an @ since 1.9.2, 1.10.0 

Scratch that, this doesn't need backported. only put 1.10.0. order.orderer is still a User in 1.9

yea, so how do we deal with this difference in the OrderForm JSP?? in trunk its still searching for User in the JSP. Should that be changed to Provider in trunk?
May be a new ticket??

Yes, the jsp needs to use the provider search widget instead. It shoudl be done in the same ticket here.

You aren't removing the UTF-8 BOM here, are you?

Looked like some +\u00ef\u00bb\u00bf was added by mistake in the previous commit

Shouldn't this be changed to a String?

That was intentional. Please revert.
Original committ: https://github.com/openmrs/openmrs-core/commit/6d482f2613b8e969fbd600ca541e40055cd25d8f and ticket: https://tickets.openmrs.org/browse/TRUNK-3706

http://en.wikipedia.org/wiki/Byte_order_mark

yes, sorry for missing that. Added a new commit to the pull request

ok, its back in
but that is not correct... sorry!!

Why is this visible?  See the original commit, where it is not visible: https://github.com/openmrs/openmrs-core/commit/6d482f2613b8e969fbd600ca541e40055cd25d8f

Shoulnd't you be getting a compile error here?  You renamed the Constant to REQUIRE instead of USER.

You aren't using this fancy expression anywhere...

Can you make it ConceptDAOTest? There's nothing Hibernate specific about this test. Put @should on a method in the ConceptDAO interface.

Make it ConceptDAO.

What does does it do searching on name here if you have already restricted to a certain patient id?  Shouldn't the string instead be used to limit by Location name or provider name?

Use the EmailValidator class from apache commons instead.

Can you add a unit test here to make sure this doesn't sneak back in somehow?  It basically would just confirm that the void reason doesn't ahve anything else on it.  See https://wiki.openmrs.org/display/docs/Unit+Testing+With+at-should+Annotation for how we do the annotations, method names, etc for unit tests.

Unnecessary change. you can revert this file

We should not put Transactional at the class level, just at the method level so that we can have non transactional service methods.

Is it really readOnly?

To truly test the behavior you need to annotate the test with @NonTransactional so that the test does not start a transaction, but the mergePatients method does. This way you will be able to see if the transaction was actually rolled back. If savePatient throws a runtime exception, changes persisted by saveEncounter or savePatientProgram must be rolled back.

This must have been rolled back! We don't want ANY changes to be persisted if one of the methods inside a transaction fails.

Same as above...

It's not correct. If any of the inner methods fails, all changes must be rolled back.

Because CohortService shouldn't be writing anything to the DB, why would it?

Hmm...., probably that might explain why it is not failing because it should be failing

I agree! But the aim of this test is to check that it wasn't rolled back, so technically this test should be failing and to be able to make it pass we would have to be explicit about the propagation behavior of our transactional methods.

I believe this is something we need to have on the design call to decide on what behavior we want for  transactional methods calling other transactional methods, i know Darius is inclined towards not rolling back the outer one when the inner one is rolled back.
See Step1 by Darius in the description for https://tickets.openmrs.org/browse/TRUNK-208

Cool, just checking.

My mistake. I thought we already had commons-validator :(  I need to check with Joaquin if he wants it to be back ported to 1.9.2. In that case we can't add a new dependency... On the other hand if we are going to add a dependency I'd prefer hibernate-validator instead.

Anyway I'll handle it from here. Thanks Citigo!

Looks like this translates to "Cannot be empty or null".  I suppose that is good enough.

body{font-size:10pt;font-family:arial,sans-serif;background-color:#ffffff;color:black;}p{margin:0px;}That was the suggested change for this ticket on the wiki. Will change it if you like. -----Original Message-----
From: Ben Wolfe Sent: Sep 26, 2012 8:40 AM
To: openmrs/openmrs-core Cc: andreapat Subject: Re: [openmrs-core] ValidateUtil validate method: added null check  (#36)

In api/src/main/java/org/openmrs/validator/ValidateUtil.java:

> @@ -82,6 +82,10 @@ public void setValidators(List<Validator> newValidators) {
> - @should throw APIException if errors occur during validation
>   */
>   public static void validate(Object obj) throws APIException {
>   -     if (obj == null) 
>   -         throw new APIException(Context.getMessageSourceService().
>   -             getMessage("error.null"));

Looks like this translates to "Cannot be empty or null".  I suppose that is good enough.

```
          —
          Reply to this email directly or view it on GitHub.
```

Where did this import come from?  If any StringUtils is used, use the spring or apache commons ones

This toString needs to mimic what you just did in PersonName.toString().  This should be a machine readable string that is helpful in debugging, not somethign the end user sees.  This method should return toStrings from person name 

Hi Ben,
The StringUtils u mentioned was just an unused import which probably
creeped in while I was playing around with the code, apologies!
I'm fixing the Provider.toString() now.
Thanks for the review.

On Wed, Sep 26, 2012 at 8:42 PM, Ben Wolfe notifications@github.com wrote:

> In api/src/main/java/org/openmrs/Provider.java:
> 
> > @@ -106,7 +106,7 @@ public String getIdentifier() {
> >     @Override
> >     public String toString() {
> 
> This toString needs to mimic what you just did in PersonName.toString().
> This should be a machine readable string that is helpful in debugging, not
> somethign the end user sees. This method should return toStrings from
> person name
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/37/files#r1696440.

## 

Regards,
Isha Tripathi
Application Developer
[image: Home] http://www.thoughtworks.com/

Sorry. This is a mistake i made. And simple we can remove this since no assert is done for this.

Since I added a new test user into data set we need to increment this by one.

ditto

This is done intentionally. It looks nice when we have one import. (I am not sure this with openmrs coding standards)

Hi Eshan,

We don't allow wildcard imports, per OpenMRS standards.

Explicitly listing them lets IDEs do better refactoring, code analysis, etc.

-Darius (by phone)
On Oct 3, 2012 2:49 AM, "Eshan Sudharaka" notifications@github.com wrote:

> In api/src/main/java/org/openmrs/api/impl/UserServiceImpl.java:
> 
> > @@ -13,13 +13,7 @@
> >   */
> >  package org.openmrs.api.impl;
> > 
> > -import java.util.ArrayList;
> > -import java.util.Collection;
> > -import java.util.Date;
> > -import java.util.HashSet;
> > -import java.util.List;
> > -import java.util.Set;
> > -import java.util.Vector;
> > +import java.util.*;
> 
> This is done intentionally. It looks nice when we have one import. (I am
> not sure this with openmrs coding standards)
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/41/files#r1746860.

@djazayeri 
Removed  wildcard imports as you suggested.

Needs an @since

1.9.2, right?  And also put 1.10.0 ?

Why the strange name here?   Was this originally written by Daniel in the branch but never in master?  If it is in master somewhere, where is that deleted code?

It was originally written by Daniel, but (1) with laterality as an integer, and (2) with a specimen_source integer.
I squashed in the changeset that makes laterality a varchar (in master this is a second changeset).
I removed the specimen_source column (I still need to drop this in master, till it gets implemented correctly as a fk to concept.)

Correct. I actually copied this from master, so I need to fix it there too.

sample misspelled

Isn't this the default?  Is this needed?

Openmrs convention says to expand this import

No changes in this file, can you exclude it?

Insert openmrs license

Add javadoc comment like the good one on HttpUrl.  (also add openmrs license on file)

I had created this file earlier to test url.open connection to use the file:/// protocol instead of the http:// protocol so that I could mock the url openconnection call. This is not needed anymore will take this off in my next commit

You mean if the rule is needed or not? or the ExpectedException.none() is required? A rule is something that wraps around the execution of the test and for it to work you need to delcare a publicly accessible field. This is not the annotation based check that is usually put in the expected attribute. A rule is being used here so that I can assert in the messages returned by the exception too.

I am not sure why the newlines are coming. I remeber not doing a format.
But if you look at the method postUrl i have added a deprecated annotation.

is this replacing another method?  or duplicating one? 

Change this to no return object.  (void)

No reason to return null. make this a void 

Make this return void

Use Assert.assertNull(item)

Same as above

You only need one of these tests

This method name must match your @should annotation.  "@should delete item from database".  So either make the annotation "@should purge ActiveListItem" and the method.

See the eclipse plugin to have eclipse generate your method stub for you from the @should anntoation:
https://wiki.openmrs.org/display/docs/Unit+Testing+With+at-should+Annotation

Formatting is funky here. 

Add an @since 1.10 here and on the setStrike method

You might be able to just put an @AutoWired annotation here and it will get the right dao object

It should be while not if. See http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait()

Must be in the while loop. See above.

You don't have to mimick the square braces. Those were only there before because we were doing a toString on a list object.

This list will potentially be large.  But even with a normal hierarchy of 5-10, this will make the results look terrible.  How about putting the "hit" first, then the first 2-3 with a ... and a mouseover of the entire list?

You know that this is true at this point.

You know this is true at this point

Took me like 30s to get what you are implying, so you mean i should just call:

<pre><code>referenceMap.put("isInstallationStarted", true);</code></pre>

Just as a side note: this can be a simpler 1L if you are creating the file for the first time with the uid.  

miscopypaste, not the PatientService

same

Its a shame we don't just have a Program(String name) constructor!

Was this file actually changed, or is a line ending oddity?

OpenMRS convention is to never do wildcard imports.

I did modify only line 49: changed <code>prog.setName("MDR program")</code> into <code>prog.setName("MDR-TB PROGRAM")</code>.
This was in order to match the program name in the fixture XML file.
I had to change the fixture to make sure program and concept names where matching.

But yes, the rest is line ending oddity, maybe because I use IDEA, not sure.

ok, will fix

ok, will shorten

ok, will change

Instead of specifying < openmrs:globalPropery > I would rather to be able to say caseConversion="global" so that I don't have to remember the gp name. Make the applyConversion method to read the property if "global".

Do you mean letting the tag get the property in this particular case? So, the possible values for the parameter will be:
- global (let the tag find the property if any)
- lowercase
- uppercase
- capitalize

Correct.

You probably want to use the 'ext:modifyColumn' tag

In the LiquiBase web says modifyColumn is deprecated, and better use modifyDataType. http://www.liquibase.org/manual/modify_column

Furthermore previous changeset (20121007-test_order_laterality) uses modifyDataType so I assumed that's the way to go, I tested with mySQL and it worked fine. 

**ext:**modifyColumn and not modifyColumn, the changeset with id '20121007-test_order_laterality' was written before we started using ext:modifyColumn. modifyDataType might be fine but am not sure if it addresses the issues with modifyColumn as a replacement

iirc, Saptarshi wrote the ext:modifyColumn extension because the normal one wasn't working for all databases.  We should use that everywhere until liquibase fixes theirs.  Can you open a ticket to fix the other changeset?

This assert should be removed. This line should never be reached since validate is supposed to throw APIException

It should say @Test(expected=APIException.class)

It doesn't look like it should go after < /select>?

 Please don't use scriptlets i.e. < % rather jstl < c:set var="groupOpen" value="false" />

If you set these to null, does the ConceptSaveHandler insert the right values for you?

@dkayiwa I just checked my code, strangely it appears fine in my IDE, but not in a text editor:

![screen shot 2016-12-05 at 12 23 00 pm](https://cloud.githubusercontent.com/assets/193819/20901064/aa32add8-bae5-11e6-9ecf-ade3537c2ee6.png)

Has this happened to you?
I believe @wluyima mentioned somewhere in the comments that it was planned not to deprecate the methods as of now. So I am not sure how relevant is the TODO right now. 
I believe I changed this after a review. But I can add the delegation if this is necessary.
Ha. I don't think so. Alright, I suppose I'll retain the method signature and delegate to the new one. Hope that helps.
startDate has not-null constraint. The changeset has the insert to ensure existing records have the startDate.
CohortMembeship can't be created without a patient. There won't be a chance that a patient is null?
I didn't check ObjectUtils.compare. I followed the documentation for comparing a Collection when I encountered an error that it couldn't compare objects.
I'm sorry. I didn't edit that javadoc to reflect the method signature.
I didn't consider that case. I suppose I will add a check for null instance, as well as for the other comments.
I followed the Oracle java documentation to work around the error, but yes similar content to what's given in that page.
Plus, Wyclif also suggested to implement Comparable<>. If I recall correctly, the errors stems from the use of the contains method.
I only followed the [design notes](https://notes.openmrs.org/2016-10-12-Design-Forum). In the event of the patient getting voided or unvoided, it voids or unvoids the corresponding Cohort memberships.
I changed it as per Wyclif's recommendation from one code review.
I think the former. Only because the purpose of these methods are for the event when a patient is voided or unvoided. If there is a better name, I am open to suggestions. Then again, I merely followed the [design forum notes](https://notes.openmrs.org/2016-10-12-Design-Forum).
I suppose assertTrue() makes more sense :)
Agree, shouldPass is clearer.
Thanks. Bad copy paste work!
Agree. assertTrue makes more sense.
I suppose no. How do I treat the false condition?
I suppose there is an element of randomness in choosing the patient. How do you propose I do this test?
I tested this multiple times, it does create a new column with the new values starting from 1. I do add the constraint below to add this as a primary key.
Um, I didn't understand your question then :)
It does not. I added a not-null constraint below. 
I'm updating the date_created column of cohort_member with the value from the cohort table.
I didn't follow. By randomness, I thought you were meaning what id to choose. I just went by a case of adding a membership to the cohort. 
I don't remember :). I think the IDE added it automatically. I will remove it.
I didn't consider any other cases. I suppose I can remove the if clause. Because I know the dataset doesn't have patient id 4 in the Cohort. Is that what you want?
Actually, some of the existing tests above do have that javadoc. Do I remove it now or leave it as it is?
Alright. Btw, does your github comments order get messed up for you? I reply right below your comment, yet the order gets jumbled.
Ah I see, I wasn't aware that other Databases were under consideration. So I didn't think of anything else. So should I continue to utilize this class or will the sql tag suffice?
Thanks, that makes sense. It did come across my mind as well.
Yes, it works.
Could you check again? I made a small change a while ago, that I reverted. Sorry!
I refactored to add a not-null constraint in the changeset below.
In my tests, adding a column with nullable="false" adds an empty string to existing rows.
I really don't know :) Shouldn't it not have NULL values because nullable="false"? I'm not sure how to address this.
Should I just remove the where clause?
It will fail obviously, does appending an "OR uuid is null" work in this case?
I wanted to clear a doubt with @wluyima. Basically to address [this comment](https://github.com/openmrs/openmrs-core/commit/0b662c88e8352da41bb3ac6525557b4801bf3e48#commitcomment-21178110) that I added in the earlier commit. I will remove it.
Since these test `CohortMembership.java`, should I move them to their own test class `CohortMembershipTest.java`?
For the condition to be in patientUnvoided(), shouldn't the patient be "unvoided" at the time? With the fields, dateVoided, voidedBy == null? This falls back to my earlier question about the unvoiding logic: [here](https://github.com/openmrs/openmrs-core/commit/0b662c88e8352da41bb3ac6525557b4801bf3e48#commitcomment-21178110). I will probably test again and get back to this comment.
Calling `Context.getPatientService().unvoidPatient(patient);`
gives error: `org.openmrs.api.ValidationException: 'Cohort id=2 name=Example Cohort size=2' failed to validate with reason: memberships: Cohort.patientAndMemberShouldBeVoided`
because of this in CohortValidator.java:
```
					if ((p.getVoided() && !member.getVoided())
							|| (member.getStartDate() == null || dateCompare == 1)) {
```

At this point, the patient is voided and the membership isn't. So my question, at what point the patient should be unvoided? Because at these stages: PatientDataUnvoidHandler.handle(), CohortServiceImpl.patientUnvoided(), the patient's voided fields are still set. Hence the validation fails in CohortValidator. I hope you get my question.
What would that condition be? Do you mean instead of -1 or an additional condition?
> And always push stopped memberships to the end of the collections with the one with the latest start date coming dead last.

Do you want this in the compareTo() method? I was trying to find a way to do this: One method is to execute [Collections.rotate(List, -1) ](https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#rotate(java.util.List,%20int)). Is there any other method?
Removing line 175 I get the validation exception: ```org.openmrs.api.ValidationException: 'Cohort id=2 name=Example Cohort size=2' failed to validate with reason: memberships: Cohort.patientAndMemberShouldBeVoided```. That is my exact concern.
saveCohort() is called in CohortServiceImpl.patientUnvoided(). That's where the validation exception occurs. Removing the saveCohort() line actually fixes the test. Does patientUnvoided() need a saveCohort()?

Also, I added order of various magnitudes (10, 50, 100), the exception still happens:
```
@Handler(supports = {Patient.class}, order = 100)
public class PatientDataUnvoidHandler implements UnvoidHandler<Patient> {
```
Adding order to both PatientDataUnvoidHandler and BaseUnvoidHandler works, but now there is an issue where the patient is already unvoided and I have these conditions in the CohortServiceImpl.patientUnvoided:

```
			List<CohortMembership> membersToUnvoid = cohort.getMemberships().stream()
					.filter(m -> m.getVoided() &&
							m.getPatient().getPatientId().equals(patient.getPatientId()) &&
							m.getVoidedBy().equals(voidedBy) &&
							DateUtils.isSameDay(m.getDateVoided(), dateVoided) &&
							m.getVoidReason().equals(voidReason))
```

And voidReason was already nulled before PatientDataUnvoidHandler was called. Should I remove this argument?

```
	void patientUnvoided(Patient patient, User voidedBy, Date dateVoided, String voidReason);
```
When the patient is unvoided, the patient argument that goes into PatientDataUnvoidHandler.handle method has the voidReason value nulled. I can only make use of the patientId, originalVoidingUser and origParentVoidDate values.
```
	@Override
	public void handle(Patient patient, User originalVoidingUser, Date origParentVoidedDate, String unused) {
```

The method signature for patientUnvoided has the nulled voidReason argument that I cannot use for comparison. Removing this argument fixes the entire unvoiding workflow.
I'll probably commit the changes to get a better understanding.
Is this the method where I should move the voided memberships to the end of the collection? I don't have access to the collection here.
Understood. Since I am already comparing startDates in the first if condition, won't it be taken care of already. What will be the if condition to return 1? I didn't understand from your last comment. This is what I've got:

```
		if (Objects.equals(this.getPatient().getPatientId(), o.getPatient().getPatientId())
				&& Objects.equals(this.getCohort().getCohortId(), o.getCohort().getCohortId())
				&& this.getStartDate().equals(o.getStartDate())
				&& ((this.getEndDate() != null && o.getEndDate() != null
				&& this.getEndDate().equals(o.getEndDate()))
				|| (this.getEndDate() == null && o.getEndDate() == null))) {
			return 0;
		} else if ((this.isMembershipActive() && !o.isMembershipActive())
			|| (!this.isMembershipActive() && o.isMembershipActive())) {
			return -1;
		} else if () {
			return 1;
		}
```
Will the hibernate change as well?
```
		<many-to-one name="patient" column="patient_id" class="Patient" not-null="true"/>
```
`return OpenmrsUtil.compare(Date, Date)` seems to be breaking some tests in CohortTest. 

<img width="572" alt="screen shot 2017-04-14 at 6 05 29 pm" src="https://cloud.githubusercontent.com/assets/193819/25059567/abf17190-213d-11e7-89e3-df328112dd4e.png">

Assert of `cohort.contains(id)` fails. It can no longer match patient ids. Maybe because the ids are different and the start dates match?
I changed Patient patient to Integer patientId. However lot of tests are failing right now.

```
ERROR - BasicPropertyAccessor$BasicSetter.set(121) |2017-04-14 19:41:50,315| HHH000123: IllegalArgumentException in class: org.openmrs.CohortMembership, setter method of property: patientId
ERROR - BasicPropertyAccessor$BasicSetter.set(122) |2017-04-14 19:41:50,316| HHH000091: Expected type: java.lang.Integer, actual value: org.openmrs.Patient_$$_jvst4ea_28

IllegalArgumentException occurred while calling setter for property [org.openmrs.CohortMembership.patientId (expected type = java.lang.Integer)]; target = [CohortMembership[hashCode=c700c9ba,uuid=2bc2a1bf-bc54-410d-8721-7fb16375be91]], property value = [Patient#2] setter of org.openmrs.CohortMembership.patientId
IllegalArgumentException occurred while calling setter for property [org.openmrs.CohortMembership.patientId (expected type = java.lang.Integer)]; target = [CohortMembership[hashCode=c700c9ba,uuid=2bc2a1bf-bc54-410d-8721-7fb16375be91]], property value = [Patient#2]
```

It looks like something's a miss. Is it because of the <many-to-one> property in the hbm?
I'm confused, shouldn't it be equal or after the start date to be active?
_Copying my comment from an older commit:_

`return OpenmrsUtil.compare(Date, Date)` seems to be breaking some tests in CohortTest. 

<img width="572" alt="screen shot 2017-04-14 at 6 05 29 pm" src="https://cloud.githubusercontent.com/assets/193819/25059567/abf17190-213d-11e7-89e3-df328112dd4e.png">

Assert of `cohort.contains(id)` fails sometimes. It can no longer match patient ids. 
```
		Arrays.stream(ids).forEach(id -> assertTrue(cohort.contains(new Patient(id))));
```
Is there a simpler implementation that could be done? Like how Darius suggested?
Database.getConceptIdForUnits throws error instead of null.

Hi,

I thought of using batch update but then I would have to handle batch size
( not sure what batch size to use ). Also this being a one time migration,
I thought it would not be a significant improvement.

Thanks,

On Sat, Dec 21, 2013 at 12:30 AM, wluyima notifications@github.com wrote:

> In
> api/src/main/java/org/openmrs/util/databasechange/MigrateDrugOrderUnitsToCodedDoseUnitsChangeset.java:
> 
> > -            throw new CustomChangeException(e);
> > -        }
> > -    }
> >   +
> > -    private void migrateUnitsToCodedValue(JdbcConnection connection, List<String> uniqueUnits) throws CustomChangeException, SQLException, DatabaseException {
> > -        PreparedStatement updateDrugOrderStatement = null;
> > -        Boolean autoCommit = null;
> > -        try {
> > -            autoCommit = connection.getAutoCommit();
> > -            connection.setAutoCommit(false);
> > -            updateDrugOrderStatement = connection.prepareStatement("update drug_order set dose_units = ? where units = ?");
> > -            for (String unit : uniqueUnits) {
> > -                Integer conceptIdForUnit = DatabaseUtil.getConceptIdForUnits(connection.getUnderlyingConnection(), unit);
> > -                updateDrugOrderStatement.setInt(1, conceptIdForUnit);
> > -                updateDrugOrderStatement.setString(2, unit);
> > -                updateDrugOrderStatement.executeUpdate();
> 
> I would just use batch update here instead by just calling
> updateDrugOrderStatement.addBatch() and then before line 49 below i call
> updateDrugOrderStatement.executeBatch()
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/488/files#r8507484
> .

Thanks Wyclif, I will remember this for future stories :)

On Sat, Dec 21, 2013 at 12:52 AM, wluyima notifications@github.com wrote:

> In
> api/src/main/java/org/openmrs/util/databasechange/MigrateDrugOrderUnitsToCodedDoseUnitsChangeset.java:
> 
> > -            throw new CustomChangeException(e);
> > -        }
> > -    }
> >   +
> > -    private void migrateUnitsToCodedValue(JdbcConnection connection, List<String> uniqueUnits) throws CustomChangeException, SQLException, DatabaseException {
> > -        PreparedStatement updateDrugOrderStatement = null;
> > -        Boolean autoCommit = null;
> > -        try {
> > -            autoCommit = connection.getAutoCommit();
> > -            connection.setAutoCommit(false);
> > -            updateDrugOrderStatement = connection.prepareStatement("update drug_order set dose_units = ? where units = ?");
> > -            for (String unit : uniqueUnits) {
> > -                Integer conceptIdForUnit = DatabaseUtil.getConceptIdForUnits(connection.getUnderlyingConnection(), unit);
> > -                updateDrugOrderStatement.setInt(1, conceptIdForUnit);
> > -                updateDrugOrderStatement.setString(2, unit);
> > -                updateDrugOrderStatement.executeUpdate();
> 
> Anyways it was just a suggestion, you can leave it the way it is as long
> as it was working
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/488/files#r8508060
> .

I thought "discontinuedBy" becomes "creator" in the Discontinue Order (DC). Thats what I have done in this pull request. 

Yes.

@djazayeri , @wluyima : If encounter is required on all orders in data model, then should I just copy encounter_id (already in the pull request) to new DC order?

It was fixed at line 196 in pull request -
-    Assert.assertTrue(orders.get(2).getOrderId() == 444);

On Sat, Dec 28, 2013 at 1:53 AM, wluyima notifications@github.com wrote:

> In api/src/test/java/org/openmrs/api/OrderServiceTest.java:
> 
> > ```
> >     for (Order order : orders)
> > ```
> > -           Assert.assertTrue(order.getOrderId() == 4 || order.getOrderId() == 5);
> > -           Assert.assertTrue(order.getOrderId() == 4 || order.getOrderId() == 5 || order.getOrderId() == 444);
> 
> I don't seem to see where you updated these tests in OrderServiceTest to
> check ordering
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/495/files#r8572230
> .

Just being explicit in the test, instead of assuming implicitly it being null.

Just being explicit in the test, instead of assuming implicitly it being null.

Just being explicit in the test, instead of assuming implicitly it being null.

Just being explicit in the test, instead of assuming implicitly it being null.

Returning from here was breaking too many test cases.  So left it as it was.

I think those changes were required when I added new data in standard test
data setup xml file. Now that I removed those new data in the setup, these
are not required.

On Wed, Mar 26, 2014 at 9:00 AM, wluyima notifications@github.com wrote:

> In
> api/src/test/java/org/openmrs/api/handler/ExistingVisitAssignmentHandlerTest.java:
> 
> > @@ -86,13 +87,15 @@ public void beforeCreateEncounter_shouldNotAssignVisitIfNoMatchFound() throws Ex
> >     @Verifies(value = "should not assign visit which stopped before encounter date", method = "beforeCreateEncounter(Encounter)")
> >     public void beforeCreateEncounter_shouldNotAssignVisitWhichStoppedBeforeEncounterDate() throws Exception {
> >         Encounter encounter = Context.getEncounterService().getEncounter(1);
> > -       encounter.setEncounterDatetime(new Date());
> > -       Context.getEncounterService().saveEncounter(encounter);
> 
> What does this have to do with orders?
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/774/files#r10963320
> .

This plugin does not work on IntelliJ community edition 13. So had to uninstall it. Should "@should" statement match both "@verifies value" and test method name?

@rkorytkowski : Thanks for the pointer. I did not knew search index is updated after every transaction. Closing this pull request as not required.

Yeah, I didn't want to be too disruptive but the latest version of jetty worked for me to. I agree with @djazayeri another issue would be the best place to do this.

done

Created a separate branch and a separate pull request for this.

https://github.com/openmrs/openmrs-core/pull/638

done

Sorry. This is a mistake i made. And simple we can remove this since no assert is done for this.

Since I added a new test user into data set we need to increment this by one.

ditto

This is done intentionally. It looks nice when we have one import. (I am not sure this with openmrs coding standards)

@djazayeri 
Removed  wildcard imports as you suggested.

Sorry didn't know that. 

@wluyima,  just want to clarify, are you working on merging this to master?

I was merging this code to master on my local there were a couple of test failures. We need to change `quantity_units="51"` in `OrderServiceTest-drugOrdersWitSameConceptAndDifferentFormAndStrength.xml` to fix these tests.

Since we are going to use a known uuid for referring to this concept source, the chances of some one else already creating this source would be zero. Precondition would be unnecessary here.

Also in the wiki they talk about preconditions while add/drop of tables, columns, constraints.  There is no mention of the data. In fact most of the <insert> change sets in same file do not have pre condition.

Same as comment above for other change set - Most of the other change sets in same file do not have pre condition as chances of these rows existing is close to zero.

There is a difference in behaviour. When you leave out the column, it tries to set hl7_code as empty string and fails on unique hl7_code constraint (as emr api also adds a source with blank hl7_code).

Where as if you use `<column name="hl7_code"/>`, it inserts NULL value for hl7_code and does not violate the constraint.

I'll make that change. 

Earlier it used to work without this condition since addToDate was returning null for unknown codes or null code.

ok I'll add it.

I'll change it to use uuid of concept source. 

Would you want preconditions for these as well? If needed, I guess it should look based on `where code = 'S' and concept_source_id = (SELECT concept_source_id FROM concept_reference_source WHERE uuid = 'cb523690-9012-4e72-b8bf-4253e1b1a687')` here, not based on uuid of these reference terms right? 

Thanks. I didn't know that. I'll move it to liquibase-update-to-latest.xml.

There were other tests for revised orders which were failing because they were expecting other validation errors

Since we moved the active order validation after other validations, this test was failing for different validation (mentioned below)

`
Order type class class org.openmrs.TestOrder does not match the order class org.openmrs.Order
`

I will add another test and update the PR.

I didn't see that method. Thanks for finding it. I'll make that change and update the PR.

The dao is required to fix a failing test (see changed in EncounterServiceTest)

Done. 

Done

Done

Done

Done

Added comment

I think the default is false, so you can get rid of the attribute

We have to test if we don't need a precondition here i.e. it must not fail if you first drop not null constraint and then run this changeset.

I initially thought so too but I tested that it still runs fine if the constraint doesn't exisit

You need to put all the logic in these if clauses inside one if clause since you are checking for the same thing in all the if clause

Is this necessary? Why not let hibernate do this for you so that you don't have to generate all this hql

Would be nice to check that you are getting back the expected results

One cannot be sure of the results returned from this method due to the way the datasets are managed in this test class.  I need to know how to clear **just** the concept dictionary so that I can add a dataset to be used just with testing this method.

You can't put the logic inside one if clause without duplicating the string concatenation (which is worse than duplicating the if statements) - the if conditions are interspersed.

2 things here: 

Firstly I considered using Criteria builder but then realised this is something only available from an entity manager - which we aren't using.  If there is a session factory equivalent then it might be worth looking at.

Secondly deviating too far away from the original code adds risk of regression due to the fact that there are no tests for this method.

I mean conceptService.getAllConcepts returns a list, atleast you need to test that you are getting back the correct count by looking at the standardTestDataset.xml file

I meant everything inside an if(isNameField) should inside one if clause

And I mean the list size cannot be guaranteed ;)  Run the test and check the size - it isn't the number of rows in standardTestDataset - that's because other tests add to the list.

Tests shouldn't depend on setup from earlier tests.

My previous comment still stands

That isn't a problem, the changes never get committed to the in memory DB, whatever is added during one test isn't visible to other tests

Do you mean each JUnit class or each individual test method?

I consider each method annotated with @Test to be a test case contained within a fixture (class).  The data seems to be persisting in between each method/test which is bad practice as the tests become order dependent and cannot be tested an an individual basis.

I'd like to recreate the concept dictionary just for my test so that I can have confidence in the code that I've written.

You don't have to do that. the BaseContextSensitiveTest that this class extends is annotated as @Transactional, so it is rolled back at the end of the @Test-annotated method.
At the start of each @Test-annotated method you should have an in-memory database that is the combination of what's in standardTestDataset.xml and anything created in any @Before-annotated method.

Ah ok I see how it works now - I was wondering where the extra data came from.  My bad :D

Now that I know that the dataset is consistent I'll add the extra test cases for the use case that this change affects as well as the regular use cases if you like.

I don't see how it is used... I only see it being set in StartModuleExcecutionListener.

Are you referring to useSystemClassLoader that is being used in ServiceContext.setModuleService?

The 5 if clauses above should have one outer if(isNameFieldClause) and then have multiple nested if (!includeRetired) clauses
and the all the code for all the  will end up in the outer if clause

Am I blind or it's not included in this pull request? ;-)

Hahahahaha, you cannot be blind. :)
It was part of the existing code which i did not modify. That is why it is not in the pull request.

Really, new method was part of existing code? Or am I too tired and get it wrong?

Ahhh! The field is old! Need a break ;-)

why do you need this and? the nest string you concatenate on line 351 below is a concept field so why not pull this out of the if clause?

We now have additional memory parameters here. Please put "-Duser.language=en -Duser.region=US -Xmx512m -XX:MaxPermSize=512m" in commonArgLineForTesting and use it here and in the default profile. Merge & close when done.

This is not necessary.

This is not correct. startDate and endDate may not be in a format that parse expects. I'd validate it on the server side.

The point here is that if the locale was en_GB or en_US, we check if we have a preferred or fully specified name in en since this is what concept.get name does too.

sortBy allows only one column ? If multiple columns are passed it sorts by conceptId. 

Not sure what is the practice here... Are we allowed to add new methods to this interface or should I create a new interface?

I know that we've asked people to use BaseModuleActivator instead of ModuleActivator directly, but since I'm particularly pushing to backport this to 1.9.2, I want to be extra careful not to break modules (since no significant testing happens between 1.9.1 and 1.9.2).

I propose that we add a new interface DaemonTokenAwareModuleActivator extends ModuleActivator, with this one method.

Then we have BaseModuleActivator actually implement DaemonTokenAwareModuleActivator, providing a setter but no getter for that property.

Ok

I think we should have each DaemonToken point to the module it is for. We won't use this yet, since all modules get full privileges, but it ensures that we architect this so that someday we can have different privilege levels for different modules.

I suspect this means the map of DaemonTokens should be in ModuleFactory (or wherever we keep the Maps of modules).

I think we also need to do this upon contextRefreshed(), because it seems likely that a module will end up storing this token on some class that is reloaded when the application context is refreshed.

Moved to requestDaemonToken which is called by refreshApplicationContext. It guarantees that the token will be passed before ModuleActivator.contextRefreshed and ModuleActivator.started.

This and all others should just say @since 1.9.2 (since nothing in the 1.10 line is actually released)

This method can't be public static...it defeats the whole point! :-)

I think we have to generate these tokens in ModuleFactory, and Daemon needs to do something like ModuleFactory,isValidToken(DaemonToken).

Offhand I don't see why you're using a WeakHashMap here. Also, per a comment further down, I think this map needs to move to ModuleFactory.

Hmm it doesn't return a token, it just passes it to the requested module activator, but ok I'll hide it in the ModuleFactory.

I use WeakHashMap not to worry about unused tokens or uninstalled modules so that they can be GCed.

@djazayeri is package visibility good enough? I must call it from ModuleUtil.

I think we should eventually refactor ModuleFactory and ModuleUtil so that they're just a single class, and we don't have to worry about things like this.

For now, though, I don't see a problem with this being package-private, since this doesn't allow you to steal a token.

I would add a quick comment here to say why you're clearing out all the tasks

It's more efficient with LinkedList where you can call addFirst.

I'd just use the same linked list as above.

The validator has also isUserNameAsEmailValid so we can't just call isUserNameValid. We want to call validate on the actual user object, thus the code from processFormSubmission needs to be moved (or removed if already there) to onSubmit. 

Per the ticket description you should be testing that a username with 2 chars only is valid and with one char is invalid.

Was removing these lines enough to fix it?

Yes because the id is supposed to be database generated. So when we supplied one, the data access layer did a hibernate merge which resulted into trouble.

Cool FBI work!

Does this mean we don't get notified by email in case the build and tests pass but still do in case of failures?

I stopped using this, so it can be removed.

I stopped using this, it can be removed.

Forgot to deprecate this. I'll also update the entire concept index here.

Isn't UN_TOKENIZED the default?

Aren't the annotations inherited? i'm just being curious!

Just deprecate it instead of deleting

Same here, just deprecate it instead of deleting

Same for these, just deprecate it instead of deleting

I think the method name should be isDuplicateConceptName

i think apply is a little strange as a  method name if actually it just returns the concept for the name, how about getConcept

No, the default is to use StandardAnalyzer with a tokenizer.

I think they're not, but I can check again.

It was faster to just delete it and see compilation errors which needed fixes. From the dev list thread it is ok to delete.

You mean isDuplicateConceptName is better English? :)

It's Guava. It can't be changed ;)

I think so

Ah! ok

Would this work if the locales list is empty?

How are you setting the preference for picking names e.g if i have two concept name hits for 2 different concepts, how do they get ranked concepts result list?

Shouldn't the operator be  &&  instead of ||, you want to ignore this if a name is neither locale preferred nor fully specified

Is this a general purpose method to check for duplicate names, if yes, then it should always be case insensitive

Is this a general purpose method to check for duplicate names, if yes, then it should only check for duplicates in the passed in locale and not the broader one

Does this mean if there are more than 1000 rows in the database, then the rest won't get indexed?

Ignore this comment, since it is a scrollable result they will get fetched finally

Have you set any configuration so that updating the index can also automatically upon insert, update and delete?

I think we need to rethink the structure of ConceptSearchResult, when i initially added it about 2 years ago, it made sense to include the word that matched the query and we actually ended up never using it, i think this might be the best time to deprecate of it, same thing for the transientWeight.

FYI this phrase isn't what you want to pass to the constructor, it should be the actual full word/token that matched the phrase, but as i said above, we probably want to deprecate the word property

You would rather not catch the exception

Why not get the specific property  rather than looping through all

Is setting projection to null necessary? i would assume it is already null

Is this FieldBridge necessary? If you are just calling toString(), i thought this is what lucene does by default

Probably get rid of this local variable and just call: return getConcept(......);

why is this commented out?

I think concept name search should always be case insensitive otherwise this will case a mess if an implementation sets it to false

Add some javadocs and @Since

Add some javadocs and @Since

after -> before

Why is the count changing from 2 to 3? Added another concept with a matching name?

From the logic i saw above, i would assume that passing in a single Locale.US locale should automatically include the Locale.ENGLISH names

Can try searching on "SALBU INH" and see if this test passes

Why are you removing the concept name

Why are you removing these exclusions? i think this was done because they were getting duplicated since spring i think shipped with them.
But if all the tests still pass, you can ignore my comment

Why keep this jsp around? Looks like you only deleted its contents

No, it would fail. Do you think it should search in all locales if none given?

It's Lucene's job, which can be tweaked however you like starting from query parameters to modifying the scoring algorithm used while indexing. http://lucene.apache.org/core/3_6_0/scoring.html#Introduction gives some basics.

Currently we rely on defaults. However, in addition to a simple keyword search I use boosting for names matching the whole phrase as given.

Yes, I know it's not exactly what we want, but it's the smallest change needed to make it work. I think we should be simply returning concepts here.

Actually it should be if ( ! (name.isFullySpecifiedName() || name.isLocalePreferred() ) { in order to match what was in the validator.

Ok, will change.

Actually this bit is a performance optimization when using mysql which does a case insensitive match by default. ilike is very slow so when using mysql you set a gp to do eq. See https://tickets.openmrs.org/browse/TRUNK-2767

It's done by Hibernate by default.

I can't do anything with this exception so I just make it propagate as a runtime exception. I think it's cleaner this way than declaring throws.

It's more configurable this way. You may want to declare different locations for different indexes and use this variable in any of them e.g.
hibernate.search.default.indexBase=%APPLICATION_DATA_DIRECTORY%/lucene/default
hibernate.search.Concept.indexBase=%APPLICATION_DATA_DIRECTORY%/lucene/concept_search

I make it so that you can call resultSize() first (sets projection to count rows) and then list() using the same object. Actually this class has nothing to do with Lucene. I've been just playing around :)

Lucene provides a few FieldBridges for basic types like Integer, Long, Boolean, etc, but not for Locale.

Lucene does not call toString() on any object by default, which makes sense as toString() is mostly for debug and rarely contains something you'd like to index ;)

Locale variables are nicer to debug :)

This needs to be removed/replaced with an actual call to updateConceptIndexes() as per my comment one line above.

See a comment above or https://tickets.openmrs.org/browse/TRUNK-2767

ok

Locale.US == new Locale("en", "US")

Probably by mistake.

I verified this exclusions were superfluous. 

I think I've deleted this file.

Don't remember what's going on here right now, will verify.

I think the current behavior in all our DAO is to skip a restriction if a parameter null. As for collections with criteria API you can probably pass in an empty collection only if that is what the caller passed in which i think in this case will find all names with a blank locale, but am not sure if you can do the same with lucene queries

We need the concept and concept name, off the top of my head, this is useful for the reasons below:
1- When filling forms or on some pages devs want to set the name that matched the search so that it is what gets displayed when the concept is displayed later.
2- In form entry, users like to set the concept name that matched the query to be set as obs.valueCodeName, thhough me and jeremy have been advocating for adding a concept name search widget to stop users from doing this.
3-In the UI for the search widgets we like to display the matched name

Correct!

So you expect the admin to set this depending on the DB they are using bearing in mind performance issues, ok! then that makes sense

ok

Hmm, i think if you already have a unit test for the code, most likely the assertion in it will act as your 'debugging break point' in that case

I think you still need to have the dictionary locked since from the docs they recommend putting the application in maintenance mode, which locking the dictionary serves in this case

I can't think of a reason why to use reflection here. Let's change it to normal getter calls.

Same here. No need for reflection...

I think you miss if (containsName) break; here.

if (containsAddress) break; ?

Could you please add tests for mergePatients showing your changes fix issues from TRUNK-3351?

Yeah, I was just doing it the way that was already there - I'll change it

I believe this value is used further down. I haven't changed behaviour from the way it previously was anyway - will look to make sure this value is being used but I'm pretty sure it is further down

same deal as above

sure, I'll try and do that today

Ahh you're right that it was like this before, but it seems to be a bug. My point is that if currentName equals newName then this will be set to true, but with the next iteration it may be set back to false, because we didn't stop the iteration. It will result in creating a new name even though the name is there. Try adding one more person name:

< person_name person_name_id="3" preferred="false" person_id="10000" prefix="President" given_name="John" middle_name="Fitzgerald" family_name="Kennedy" creator="1" date_created="2005-01-01 00:00:00.0" voided="false" uuid="d531d4a2d-a97e-4673-80f8-ac8dd5ced083" />

You will have 3 names instead of 2 when running  "patientService.mergePatients(10000, 10001)". Please add such a test.

This line is not necessary.

Not necessary.

Please add the license header.

Please add the license.

Is it being used? If not please remove.

Noted! Removed the test.

Actually i think that this should be changed as 'should not fail validation if drug is null and drugorder concept is set' as expected by the ticket. Therefore i added the new test to meet that.

Do we only have one `Validator` bean in our config, or is this picked up magically by its `programValidator` name?

We only have one in _core_ but there could be more in modules. So in a test, I think this is fine.

It's picked up magically (the attribute name is the key to the spring context file). 

This comment is no longer correct...

I do not approve this  change... this could have all sorts of effects on other code, if saving a patient clears the session.

We need to find some other way of addressing this problem.

Would evicting just the person from the session work?

I have tested that evicting just person works, try this:
sessionFactory.getCurrentSession().evict(Context.getPersonService().getPerson(patient.getPatientId()));

Did you see my comments? What would be the behaviour when updating the patient because this will happen on every update of the patient

I have just seen them now after making this commit. :)
I put this eviction in the if statement where a person record exists in the database but no patient.
So in other wards, for existing patients, this section of code will never execute.

Yes it worked for me too. :)

Let me add a unit test for this.

would be nice to add a sanity check that there is no patient with a matching person id.

Also ensure that if you add or edit anything that is defined on person e.g edit or add a name, it gets saved to the db along with the patient, this will ensure that the eviction of the person object in the dao didn't result in lose of changes in properties inherited from person

I prefer using a class for striking or indicating "retired" versus the now-deprecated `<strike>` element.

Thanks for doing this, getting rid of a call to deprecated code

use RelationshipType.class.isAssignableTo(c)

Add some javadocs here and @since annotation saying version 1.10

Add the following annotation:

<code>@Handler(supports = { RelationshipType.class }, order = 50)</code>

This will enable looking up of this validator by core to be able to invoke it whenever a relation type is getting saved

Just throw an IllegalArgumentException here saying that null values are not allowed and then remove the else clause

Add @should annotations and use the behavior test generator plugin,  see https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin

You need to press ctrl+alt+f and ctrl+alt+o to organise imports to get rid of full name for classes

I think it's wrong doing this because the session can get flushed and this gets persisted to the DB

On the other hand, i think it's fine since relationshipType.name isn't a persistent property

why don't you just reject the entire relationship type instead of a property because it's not always aIsToB that is a duplicate

Looks likes you're not resetting the other relationship types in the for each loop

Use mocks instead of extending BaseContextSentiveTest

You need to add the @Component so that this can be looked up by spring

I think combinations should be unique even amongst retired ones

Use getRelationshipTypeByName(), this takes in a combination of aIsToB and bIsToA just like you are doing here

Can you add a unit test or 2 for this method?

Do you  need this line? I thought current datetime is the default

probably add an @since

You probaby want to register this from OpenmrsBindingInitializer like we do for the others

I don't know if this is null-safe ... or do we care about triggering a NullPointerException if the encounter does not have a patient assigned?

Saved encounters will always point to a patient, so based on this method's name, it should never be throwing an NPE.

Thanks @djazayeri , that solves our worries. @wluyima , it seems that this ticket can be closed now ? 

Your change overwrote this whole file (probably by changing the line endings). When you redo the pull request, can you try to fix that?

Sure, im very sorry about that i didn't notice it till the commit is done. Will make sure to handle in in future commits.

It should return boolean and not Boolean. If deathdateEsitmate == null return false.

What is @Attribute for?

Why this comment?

It should return the deathdateEstimated value instead of calling isDeathdateEstimated().

I don't follow. What did you want to say here?

remove dbms="mysql"

Remove //NEW

What's <!-- HERE --> :) ? Remove if not needed.

Why <!-- NEW --> ? Remove if not needed.

Are you sure about this Rafal? shouldn't we leave it null when unset, e.g. in the case where the patient is alive? And thus this method should be getDeathdateEstimated, not isDeathdateEstimated

It's a convention that isSomething should be returning boolean and getSomething should be returning Boolean. I know it's wrong in other places in this class, but let's do it right for new code.

I'm saying that the property is correctly a Boolean, because it should be nullable, and therefore we should have a getDeathdateEstimated method that returns Boolean (and not isDeathdateEstimated method).

I'm fine with removing isDeathdateEstimated. We have the correct getDeathEstimated a few lines below.

person.getDeathdateEstimated()

change to Boolean

Boolean getPrior...

Was handling deathdateEstimated just like birthdateEstimated as instructed. But I agree it is not needed. Removed it.

I did not comment. This Java class is full of commented out code.

Removed.

Removed.

Will remove.

Changed. I removed isDeathdateEstimated() method also.

Changed to Boolean.

Changed. I removed isPriorDateOfDeathEstimated() method also.

Try with:
{code}
mergedData.setPriorDateOfDeathEstimated(preferred.getDeathdateEstimated());
if (preferred.getDeathdateEstimated() == null)
       preferred.setDeathdateEstimated(notPreferred.getDeathdateEstimated());

mergedData.setPriorDateOfDeath(preferred.getDeathDate());
if (preferred.getDeathDate() == null)
       preferred.setDeathDate(notPreferred.getDeathDate());
{code}

After doing some testing, i realized this is not the problem, it is because the user is uploading a text file yet the handler is for images. See the comment i left on the ticket, we just need to display to the user an informative error message that they can only upload images in case of an ImageHandler

Did you intend to call setDeathdateEstimated

How about 'Deathdate Estimated' for clarity purposes?

body{font-size:10pt;font-family:arial,sans-serif;background-color:#ffffff;color:black;}p{margin:0px;}Hi Wyclif,Made both changes.Thanks,Andrea-----Original Message-----
From: wluyima Sent: Jan 7, 2013 1:27 PM
To: openmrs/openmrs-core Cc: andreapat Subject: Re: [openmrs-core] Trunk 2768 (#150)

In webapp/src/main/webapp/WEB-INF/messages.properties:

> @@ -1562,6 +1563,7 @@ Person.dead=Deceased
>  Person.dead.checkboxInstructions=Check if this person is deceased
>  Person.dead.causeOfDeathNull=Cause of Death is required for people marked as deceased.
>  Person.deathDate=Death Date
> +Person.deathdateEstimated=Estimated

How about 'Deathdate Estimated' for clarity purposes?

```
          —
          Reply to this email directly or view it on GitHub.
```

Looks seems like something went wrong because i can't seem to understand this

remove the alert

use RelationshipType.class.isAssignableFrom(c) so that subclasses get validated too

Just say "Validates a {@link RelationshipType} object."

Typically, in this case its best to throw an IllegalArgumentException saying obj can't be null

Is description required really?

Is description required really?

no need for this, it is already null

same here, no need for this

If you reference the ticket, rather use a complete url to the ticket

You don't need the argument since the basePackage is already a member of this class, just reference the variable directly in the method

You need to narrow down to classes containing Service something like "*_/_Service.class"

You probably want to make a list of class names rather objects, so that you don't have to load the classes

You will avoid loading the classes here if it a list of class names

I don't think this will find methods in superclasses but we can ignore this for now since i can't think of a DWRService that extends another which isn't also a DWRService class

I didn't update this part of the code, and have left it as-is. Hopefully, that is what you meant. 

Done. Removed this check, and instead added it to class search pattern itself. 

Good catch!! Thanks!! 

I have modified code to pass class names, instead of classes. 

Done. Modified for using class names. 

Done. Seems to work fine. Tested it. Thanks!

I agree. Done. 

Added full URL in class comment. 

Add @since 1.10 annotation

i thought overwrite and update here mean the same thing, meaning you don't need the second @should

i think this @should means the same thing as the overwrite one.

Looks like you have some @shoulds here that have no matching test methods

Same here, looks like you have some @shoulds here that have no matching test methods

The correct way to write this test is to set the expected attribute of the Test annotation to IllegalStateException.class instead of handling things inside the test manually

She said:

> Hi Wyclif, Made both changes. Thanks, Andrea

I'd never seem EqualsBuilder before, it's pretty cool. Is there a reason it isn't available in commons.lang, instead of commons.lang3?

I think it is actually available in v2. I actually didn't see this lang3 import sneaking in (just blindly accepted the auto-import).

Want me to use commons.lang in preference?

Yes please.

On Tue, Jan 8, 2013 at 3:24 PM, Tom Ryan notifications@github.com wrote:

> In api/src/main/java/org/openmrs/PersonAddress.java:
> 
> > @@ -19,6 +19,7 @@
> >  import java.util.Date;
> > 
> >  import org.apache.commons.lang.StringUtils;
> > +import org.apache.commons.lang3.builder.EqualsBuilder;
> 
> I think it is actually available in v2. I actually didn't see this lang3
> import sneaking in (just blindly accepted the auto-import).
> 
> Want me to use commons.lang in preference?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/6/files#r2584332.

This will be unnecessary if you add 'Service' to the resource packageSearchPath.

I also don't think test classes get matched given the path you are using

The important thing for unit tests for tickets is that the test should fail before your fix and pass after.  I think this test will pass without your fix, right?  Is the problem that people were submitting only 2 digit years?  Your change should support that now, so your test should be about 2 digit years

Shouldn't this check that the person count has been incremented by one
Also it would be nice to check that the created person's age is correct

i though you were checking that the year is a 2 digit one

Use is Alert.class.isAssignableFrom(c) here just in case we have subclasses

You are not required to add this since it is just a test class

I guess it is already null, if you just want to ensure it is, replace this line with Assert.assertNull(alert.getText())

This looks like a repetition, the validator would have already handled this since you called it above

i added that just to make the error message for the Recipients validation user friendly, 
thanks a lot for your comments

Why are you making changes in this file?

Are these changes necessary?

We are trying to move a way from calling this and use @autowire annotation since these are spring beans, you can set it on the field declaration above

I think you still need this assertion

You can use the @Before annotation rather than calling this for every test method

remove this so that it remains silent since you already have an assertion, you can probably ignore this comment

The changes support helper methods in org.openmrs.scheduler.web.controller.SchedulerFormControllerTest, in particular  waitUntilTaskIsExecuting() and waitUntilTaskHasStopped(). Before the change, the HelloWorldTask did not update the state of the task so that assertions on its isExecuting() method were not possible. 

The ticket is not resolved yet and the changes will be undone before the last commit.

I know but the setup in these methods is not required for all tests in the class but only for some.

Do you really need to wait for the task to stop for this test to pass? If you commented out the line, would the test fail?

This is guaranteed by getScheduledTaskDefinition(), the assertion has been moved to shouldGetScheduledTaskDefinition(). I have refactored common setup into helper methods and provided unit tests for the helper methods.

Good point, the original tests contained assertions that tasks were stopped. I do not know about the concurrency model used for tasks to decide whether this can be safely ignored without affecting other tests.

Small request, can you make this date format a constant in the since it it used in all these tests

You need to use the openmrs behavior test plugin to generate test methods, did you install it? see also https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin

Ok, makes sense

Ok, probably when you are committing you can exclude these files, git lets you do that

I saw that later, but that is because you have tests for utility methods in the same test class which i think isn't good really, you can factor them out to another class probably. How about you use assertions instead of those tests such that your actual tests fail incase those utility methods don't do their thing, you can see similar setups in other test classes in core

ok

I think they will still pass, because what you are testing is whether a new or old task instance has been started or not regardless of whether it has completed or not nor if there are multiple instances still running from previous executions

Ok, I have extracted the helper and tests for the helper into separate classes. I still prefer assertions on the helpers over (redundant) assertions at places where the helpers are used.

Done.

Done.

Ok, I have removed all code that shuts down tasks and waits for them to stop.

Done.

The service bean is commented out in applicationContext-service.xml, not sure about the wider context of this. In the next version I am using @Autowired for the controller only.

Yeah, as long as the validator binds the message to the correct field, it will show up in the UI for the user without repeating it here

Don't you need to add getLocationId() and setLocationId(Integer locationId)?

Probably you need a null check here?

thanks for the comments wycif, did you mean this in your first comment,  this.locationId = null;? but for the second comment i have added the getter and setter, waiting for reply, on the first comment

Check if location != null

I think you should be calling scheduleTask and not rescheduleTask

I think it would be better to check if the encounterProviders's list is null or empty or just get rid of this if clause, because it is possible to be editing an existing encounter with no provider, this can typically occur for implementations that upgraded from older versions

This is not right place to do this, you need to make this change in addressLayout.jsp. Note that every token not just country and stateProvince can define a default value to it

Can you pull fetching the gp out of the if clauses so that you don't duplicate this logic 3 times

Ignore my comment above probably

you can get rid of the 'at once' because 'data and time' already says it all

Since dates are displayed in multiple places, it would be good to cache these GPs, make this class implement GlobalPropertyListener to be able to update the cache when the GPs are edited/deleted/created and then register it in the applicationContext-service.xml , see the bean with id openmrsEventListeners

Please add @since 1.9.3 (we will backport it)

Just call applicationContext.getBean instead...

Say just < T >. Extends Object doesn't add anything. Put beanName first and type second (same as in ApplicationContext.getBean).

I don't understand this comment. I don't see any use of mocks.

We actually want this bean in applicationContext-service.xml (not just for tests).

You can use the Test Case Generator plugin to generate these tests. You can get the plugin pointing eclipse to this update site: http://resources.openmrs.org/eclipse/update/ . See also https://wiki.openmrs.org/display/docs/Step+by+Step+Installation+for+Developers

https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin

I think it should be assertTrue and not assertNotNull.

Shorten the method name: @should return bean of the correct type

Shorten to @should fail for bean with the given type but different name

Also you don't need an assert from 193 because instanceof does return false if null

You should rather say "Retrieves a bean that match the given type (including subclasses) and name."

@since 1.9.3

We don't put empty lines after {

Please i kindly request for further light on what you are pointing out, here and on the comment at this ticket's link, thanks a lot plaese

This was the problem yet it is not necessary since it is already done via AOP on the invocation of saveConcept. It was causing premature hibernate auto flushes as the validator tries to fetch concepts by name to check for name duplication

These were duplicated because the validator was getting called twice which calls conceptService.getConceptByName each time to get duplicates, so removing the second invocation of it reduced it to 1 and changing the collectiion type from list to set

This is not correct, it should be false, actually it looks fine to me the way it was before

minor formatting change -- just remove space between ) and ; for last three methods.

missing getById.

Pull up getByUuid, getById, delete, saveOrUpdate to a new OpenmrsObjectDAO interface. Make OpenmrsDataDAO and OpenmrsMetadataDAO extend it.

I think it should be OpenmrsDataDAO< T extends OpenmrsData >.

I don't think we should allow for this. It's very rare that you should be getting all data, possibly thousands or milions of rows ;-) IMO we should have something like List< T > getAll(boolean includeVoided, Long firstResult, Long maxResults) and also Long getAllCount(boolean includeVoided).

You can put getById, getByUuid, delete, saveOrUpdate in a common HibernateOpenmrsObjectDAO class and make HibernateOpenmrsDataDAO and HibernateOpenmrsMetadataDAO extend it.

This should not be abstract. I may want to instantiate it directly if I don't want to add any methods.

Spring won't be able to instantiate it if you don't have a non-arg constructor. I'd try with @Autowired public HibernateOpenmrsMetadataDAO(SessionFactory sessionFactory). You should be able to use TypeToken to determine mapped class.

BaseOpenmrsData has no id attribute and subclasses all have different names (activeListItemId, encounterId ...).  

It makes sense for small entities though. We also can return a ScrollableResults instead of a List (kind of a ResultSet). 

Except for getById, yes.

Hibernate supports a special "id" parameter which just means the PK. Perhaps we should call the method getByPrimaryKey(Object pk), and verify that this works with both integer PKs (most things) and String PKs (privilege, role).

That's a good point, though I think most of our services _do_ already have a getAll method, if just for unit test purposes, so we may want to preserve this method for that reason. (I definitely agree about adding the paging version.)

I'd change the param to be "newOrPersisted"

I originally said "+1 to both comments", but thinking about it more, I think we should leave it as <T extends BaseOpenmrsData>. Because, imagine there's some implementation of an OpenmrsData that does _not_ extend BaseOpenmrsData. Would we really expect our base implementation of the DAO to work on it? It won't necessarily have correctly-named properties...

and also add the getAll(boolean, Integer, Integer) and getAllCount(boolean) per Rafal's comment on OpenmrsDataDAO.

see my prior comment on the special "id" property.

@rkorytkowski , didn't we say that this leads to slow startup, and we need to get rid of @Autowired and use a plain old setter?

Well the OpenmrsData interface defines setters and getters for uuids. It's your responsibility to map them in a hbm or with an annotation. BaseOpenmrsData is not different here, unless we start to do it properly and annotate BaseOpenmrsData with @MappedSuperclass to enforce the uuid property.

getByPrimaryKey is too long ;) getById or getByPK

heh right we can't currently use @Autowired in OpenmrsServices, but I still prefer injecting with a constructor from a setter.

Hmmm actually we're not in a service ;-) I'd test how @Autowired performs here.

If I pull up all these methods, it will remain just getAll in the subinterfaces (but even this has the same signature). I hope there will be specific methods in the future :-)

getById(Object id) it is. 

For entities will potentially big volumes (encounters, visits...) we can just throw an UnsupportedException in the specific DAO. 

Agree, will do it.

How about adding "throws UnsupportedOperationException" to the method signature (even though it's not a checked exception) to make that more clear (like java collections do)

I don't know how TypeToken works, give me a hint please.

This should be 1.10

Rename this to ConceptFieldGenDatatypeHandler

Do we want to use conceptId or uuid? Let's get some info from Daniel

Shouldn't this be name and description or just name and definitely this isn't the full representation

I think this should be the name

May be you can set label for the field here as a configuration property since this can differ depending on the form where the widget is being used Or even to specify if the field is required or not

What happens here if you pass in null, instead of the empty collections, i think it should be able to work

shouldLimitByResultsBy -> shouldLimitResultsBy

Since you are passing in null for the isPreferred argument, i think the test name should mention this, i.e the test name should be something like:
getPatientIdentifiers_shouldReturnAllMatchingNonVoidedPatientIdentifiersIfIsPreferredIsSetToNull()
And preferrably use the behavior test plugin https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin to generate these tests

I'm not sure if am looking at the correct test data, but they seem to be 6 unvoided patient identifiers

same here, the method name should be something like getPatientIdentifiers_shouldReturnAllMatchingNonVoidedPatientIdentifiersIfIsPreferredIsSetToTrue()

I think these are supposed to be 3

same here: name should be like  getPatientIdentifiers_shouldReturnAllMatchingNonVoidedPatientIdentifiersIfIsPreferredIsSetToFalse()

5 is correct. I had a problem with this also. One of patient identifiers is connected with voided patient ( patient_id=999).

Third patient identifier with preffered=1 is connected with voided patient. ( @see HibernatePatientDAO.jaca line  252)

Ok, a request please: Can you please update the javadocs on the equivalent method on PatientService to say that patient identifiers for voided patients are excluded so that this is clear to API consumers

Ignore this comment, i get it now since the patient is voided

I saw implementation of HibernatePatienDAO::getPatientIdentifiers. And there is assumption that parameter with type collection is not null ( directly invoke size() method on collection).

That is right, and it is because in PatientServiceImpl they are set to empty lists if they are null, so you don't have to do it too when calling the method.

Jer, do you mean clearing the valueDrug text field here?

I changed it to always clear the drug fields on selection of a question

I probably take back my comment since the ticket says when adding a new encounter.
So the code is fine

rename this to showSearchButton

Can you use a message code for the value attribute so that the text is localized?
To do this you need to add a JS variable in the file openmrsmessages.js.withjstl an use it here, you will see examples in that file

I think you have extra brackets you don't need here, should be:
if ($j.trim(input.val()) != '' || self.options.doSearchWhenEmpty)

Can you add this option in the widget docs at the top

So if u press enter while the search input is blank, does this mean no results are displayed, i thought it should trigger a search if options.doSearchWhenEmpty is true

Isn't this going to break the selection of a highlighted row by pressing enter? I think the check should be as below and should come after the selectedRowIndex has been assigned on the lines below

if (hasSearchButton && selectedRowIndex == null) {
.....
}

Why are you having this call twice? I.e. here and line 210 above

This is bit ambiguouse. doSearchWhenEmpty is used to handle the display attribute of the div (Line 290 if block). So indirectly trigger via doSearchWhenEmpty. But not sure why checking display status here. Any way need to add  "&& ($j.trim(input.val()) == '')" for correctness of this.

I think before you trigger this search, you need to ensure you've killed off the propagation of the keypad event that triggers the auto search otherwise there will be 2 searches. one triggered when the user clicks the button and the second which is the default behavior on key up

I still don't think you you need this  '&& ($j.trim(input.val()) == '')', if that div is hidden whenever the search input is blank, so no need to check it

Wyclif,
This needs because of following scenarios,
1. Just load the page and enter any letter(s) and press ENTER. It's not searching for the Enter key but the default search. Reason is when page loads there are no results and the results table is hidden. So that condition becomes true.
2. Load the page and search some results. After load results, clear the text and again enter any letter(s) and press ENTER to search again. Same thing as previouse will happen.

Those are the reasons for this additional condition. Sorry if I'm misunderstand any point you are trying to showing me. Please put me in to right track if I'm going wrong.

Ok, got you, thanks!

The javadoc here needs to describe how this method is different from the purgeOrder(Order) method, what the boolean cascade property is used for, and should have @should annotations the describe the expected behavior when the cascade property is both true and false

I'm not thrilled about all of this logic happening in order to provide trace output.  I worry this can cause unexpected behavior depending on  whether code is run in trace mode or not, and it is not adding any real value.

Can we get rid of these log.debug statements?

Do not comment out this line above.  Just remove it.

Test below looks good.  We should also test that passing "false" _doesn't_ delete the associated Obs

+100 for getting rid of this. Not good to do another db query just for trace purposes

@akolodziejski, is this actually necessary? I see that ExistingOrNewVisitAssignmentHandler extends ExistingOrNewVisitAssignmentHandler which is annotated with @Handler. I feel that @Handler is inherited, thus existingOrNewVisitAssignmentHandler bean is created. Can you please verify that tests still pass if you remove this line?

@rkorytkowski, you have right. This line is not necessary.

This should be the only line in this method, within the not-null check.  I don't understand what you are doing with the orderId or the criteria - are they needed or used at all?  Also, I would have thought that the query should be "delete Obs where order = :order"), and then :order is associated with the Order object, and let hibernate do it's thing.  

@nutsiepully what is this line for?

@djazayeri - on adding the validation-api, hibernate-core attempts to use reflection and start using validation automatically. If fails since no validation implementation is present. This is to disable that from happening.

change shouldLimitResultsBy, try using the test generator plugin

same here

Can you actually compare with patient.getActiveIdentifiers().size() instead hard coding 2 here

@akolodziejski please use hamcrest matchers. They are much nicer. You would write something like assertThat(patientIdentifiers, containsInAnyOrder(hasIdentifier("101"), hasIdentifier("101-6"))); where hasIdentifier returns your own matcher. Let me know if you have any questions.

I tried to do but i have warning "Type safety: A generic array of Matcher<? super PatientIdentifier> is created for varargs parameter". 

Is it Ok to use @SuppressWarning("unchecked") or should I find another way ?

This warning is fine. A newer version of hamcrest has nicer contains(allOf(... with optional parameters but it won't be available until TRUNK-3944 is resolved...

You should have used a class from org.hamcrest

FeatureMatcher is much nicer to use.

I think it is wrong to set the default  message here if none is set below in the jsp because in case the code is not translated in a certain locale, the action param will be blank while msa.getMessage("Concept.save", "Save Concept") will return  the default value hence this if clause failing.

You missed to add the cancel button to take the user back to the concept search page when pressed, see the ticket description

No need to comment import. Please remove it.

I don't think you have the right code template, and this line was reformatted to be too short. Make sure you have the code formatter and template defined at https://wiki.openmrs.org/display/docs/Coding+Conventions 

same comment here about your line length being too short

Can you wrap these in <p> tags so they don't get smushed together like this?

I think this is the wrong behavior. This should display as 123456789.012345.

what exactly do you mean? 

I made the formater go up to 6 decimals now, and changed the test case

If you look at the diff you'll notice that javadoc that used to be separated by two newlines is now smushed together.

Autoformatting will do this if the javadoc doesn't have HTML tags to give some structure. So, add < p > tags around the paragraphs for this reason. (I see that in my prior comment it interpreted the p tag literally...)

Whoever is reviewing the code, if you are wondering what's going on here, the problem was line 1135 above in red, it was adding the returned hits to the cache of hits for an a given ajax call instead of waiting to do it when pulling the results from the 'buffer' where they are temporarily stored as we wait for earlier ajax calls to return if the ajax requests are being sent out in parallel, it is this way so that they are added to the datatable in the order the ajax calls were  sent out to maintain the order in which they were pulled from the DB

Am not really getting rid of the validation, in the comment above i mentioned that there changes in core that were made where validators are invoked before saving an object, so it is already done at this point

check spelling here

check spelling

no openmrs:message for this one?

consider using a style rather than `<b/>` ... but this is not a required change, since it was already there.

you can use `<openmrs:contextPath/>` instead of `<%request.getContextPath()%>` here.

format this chunk of text ... tabs / spaces are not looking right in the diff and it is hard to read the flow.

it might be easier to just build a list of `module.getModuleId() + ' v' + module.getVersion();` and use `moduleList.join(", ");` ...

... although, that's a javascript function.  You could use `String.format("%s v%s", module.getModuleId(), module.getVersion());` (Java) and `org.apache.commons.lang.StringUtils.join(moduleList, ", ");`.

update after changing spelling in messages file

update after changing spelling in messages file

I didn't test this and it is broken because it evaluates as a string so the url is <%request.getContextPath()%>/help.htm or <openmrs:contextPath />/help.htm

So I am going to break this line up unless you know of a better way.

Can't this Context.getAuthenticatedUser be null? You might want to make the check here too

just: user.getUsername()

just: user.getSystemId()

Sorry for inadvertence. Will fix.

I think it is kind of strange to ask the calling code to pass in a module loaded class as a param, since this is typically going to be called from module code you might as well ask for the moduleId as the param instead afterall the caller will be inside module code so they must know their moduleId by the time they call this.

So to answer your question, you can avoid requiring the caller from passing in the ServlertContext by trying this below to get it:
((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest().getServletContext()

Why not throw an exception instead of failing silently? I wouldn't expect code to call this if the dispatcher servlet is null

If someone is not in a web environment, i even doubt if the WebModuleUtil will be on the classpath to compile the code, probably throw an exception in getModuleWebFolder as i suggested earlier

We recommend using the https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin to generate test methods, dont wory about for this ticket, i will update the code before i commit it

Doesn't the returned path have a trailing slash already?

It was present when I run as `mvn jetty:run`. It was not present when I deploy openmrs.war to the tomcat server.
https://www.dropbox.com/s/xheyot1rq6et63b/trailing-slash-example.png

Looks like it depends on the web server's implementation. So it is safer to have a slash before WEB-INF. And it is consistent with the rest of the WebModuleUtil.

@dkayiwa , what is your suggestion as far as @wluyima 's question is concerned?

can you please @wluyima explain what you actually meant here, i have looked at the other datatypes that mimic the same ideal method and i so no point of distinction to help me understand your comment, 

i have the same query for this as in the above comment of mine, do you actually mean the value reference? kindly please @wluyima  break alittle further what you intend to mean in these two comments so that i may grasp and clear up this issue, thanks

Did you @wluyima intend to mean as in the same method in BooleanFieldGenDatatypeHandler forexample?

I don't really like this in the generic widget, we need to do it in another way e.g use a widget property, what are you trying to solve?

Yes i fully agree that widget property is better!!!

If this is what the others are doing, then that is fine

If this is what the others are doing, then that is fine

Something similar

Wyclif,
I agree that hard coding this inside widget is not realy good. But do we really need  a property to do this ? Because we already parse the id from the caller like new OpenmrsSearch("findPatients", ....etc. So, as I think we need a constant for string "findPatients" and we use it both at the caller and the widget.

First all, why are you doing this? Do you mean the back button wouldn't work on the findPatients page, if yes then there is another problem because it means the same thing can show up on another search page and who knows you will end up many ifs to check for the id for other searches

This comment is not correct, i am able to select a patient from the search results on the patient search page, the widget is generic and doesn't know of any specific search and i want us to keep it that way, if key up doesn't work on patient search page, then there is another issue that needs to be fixed instead of 'hacking' :) the widget to force a keyup.

Previouse fix for the concept should supposed to be work for this as well. This is what you mean right. But the problem is there are some differents in the behaviour of those searches. findConcepts gives immediate results when click enter. But finPatient doesn't and also it breaks default search when click enter. If these two searches (and others as well) can support for result shoe when click enter, hopefully no modifications needs to openmrsSearch.js

Agreed. What I wanted to point is when click enter the search results will not show.

This is a security hole.  The daemon should _not_ simply run a runnable that is passed to it; rather, it should invoke a specific, hardcoded method.  For example, remove the parameter in this method and call an initializationCompletion() method within the InitializationFilter.

As it stands, anyone can create a runnable by creating an instance of InitializationCompletion & overriding run, send it to this method, and run there unauthorized as super user (daemon).

Daemon should never take a runnable as a parameter and simply run whatever it is passed on a daemon thread.  This creates an effective runAsSuperUser(Runnable) method that bypasses any kind of security.

ignore my comment

Do other datatype handlers use UUIDs rather than internal primary keys?

I think you should get the actual concept value, and display its name here.

This definitely needs to return the concept's preferred name in the current locale. (Not just the uuid, like you're returning now.)

This method look right -- are these really the settings that you need to pass to the concept fieldgen?

 They actually do not use UUIDs, at this point!!!

Hi @djazayeri , thanks a lot for reviewing this
On this comment, i am planning to get the actual concept value using;
        Concept c = new Concept();
    c.getName();
but am not sure exactly which way do you intend to have me display it? 

I intend to do this by adding these two code lines at to cater for  this comment;
                Concept c = new Concept();
        return c.getPreferredName(new Locale(valueReference)).toString();

I have modified that whole method to some thing like;
    @Override
    public Map<String, Object> getWidgetConfiguration() {
        ConceptService cs = Context.getConceptService();
        Map<String, Object> ret = new HashMap<String, Object>();
        ret.put("isNullable", "false");
        ret.put("trueLabel", cs.getConcept(""));
        ret.put("falseLabel", cs.getConcept(getWidgetName()));
        return ret;
    }

You need a test for this class. See org.openmrs.customdatatype.datatype.DateDatatypeTest for an example.

This method, toHtmlSummary, is supposed to return a value to be displayed to the user when the system has to render this datatype in a summary view. So, the value you return is going to be displayed to the user.
You should not be returning the uuid, but rather the name of the concept itself.
You'd get the concept by doing: Context.getConceptService().getConceptByUuid(valueReference)

Same as for the above comment: you need to get the concept from the database based on the datatype's value (which is a concept uuid).
The locale should be Context.getLocale().

This is not correct. This widget configuration consists of the parameters that will be passed to the "concept.jsp" fieldgen widget. You have just copied the values for the "boolean" fieldgen widget, and they aren't correct here.

I dont think  it is required for the user to provide the email address

Ignore my comment, it should be required if they selected a notification type that uses email

These javadocs don't seem to be very clear, the javadocs at the class level should be defining exactly what a Problem Object in Openmrs represents and not describing its class structure, if you need to add javadocs for the properties from the superclass, you just add @see ActiveListItem.

To get a clear description, you can post a question on the ticket for someone to provide one

Am a little confused by this @should, i thought the aim of the ticket is to make sure it handles SNAPSHOT versions

How about if it is a blank string or whitespace character

Does this method check for alpha version only as the methods says or actually it does it handles BETA and RCs too?

what is the use of brackets here?

You can replace lines 93-95 with just this:
return minor == other.minor;

The value of the @Verifies seems vague to me, how about? should throw ModuleException for an invalid version

shouldn't valueConfigXml be 1.9.2-alpha? i.e you compare 1.9.2-SNAPSHOT and 1.9.2-alpha

Should the A-Z be [a-zA-Z]+ to ensure that things work for x.x.x-alpha and not just x.x.x-ALPHA?

I think Daniel is correct, i think having !location.equals(new Location()) here is pointless, is it meant to check that location.name is not empty?

Same here. use StringUtils.isBlank for secret question

Use StringUtils.isBlank so that you catch whitespaces

you can just replace these 2 lines with: 

return questions.get(randIndex);

The javadoc says it should go before ContextLoaderListener, which is org.openmrs.web.Listener in OpenMRS. Please move it up.

Darius, is correct, replace trueLabel and falseLabel with just one property named label, and this will be the label to display  alongside the input element in the ui.

This needs to be a message code that is translated

You don't need to do this because, below is a snippet of how to make the webapp in openmrs display an error message in a standard way, you will need to add the HttpServletRequest object parameter to the method signature of the controller: and specify your error message code that has been translated in the message.properties file

request.setAttribute(WebConstants.OPENMRS_MSG_ATTR, "my.errorMessageCode", WebRequest.SCOPE_SESSION);

You can then get rid of these changes because the error message will automatically get displayed on any page in openmrs that that the use if redirected to as long as it includes the header.jsp page which findPatient.jsp does.

This javadoc is not that good, i will ask Burke or Darius to comment on the ticket with the desired javadocs

Just say 'Default Constructor' or leave it out, i actually leaving out the javadocs for this argumentless constructor

you dont need to include the 'one argument constructor ' because it is already implied by the constructor's signature

same here

It is pointless to add the second assertion, it can never fail if the first passed because c and cn are already different objects, makes sense?

same here, no need for the second assertion

same here, no need for the second assertion

same here, no need for the second assertion

same here, no need for the second assertion

You have an extra double quote at the end of this line

does this expose Context to being insecurely impacted by modules directly, or is that not a big deal (or even a feature)?

I don't think it's a big deal since the field has only package visibility. Actually, ServiceContext is a Spring bean and can be easily accessed even without this change.

UserContext would be the one to worry about security on.  Although as Rafal said, spring lets you get around almost anything.

shouldn't this be:

else if (mostSpecificSupportsInSecondHandler.isAssignableFrom(mostSpecificSupportsInFirstHandler))

Because the supported classes won't always be sub and super class to each other, here you are assuming it is e.g Patient and Person but it could be Patient and Encounter, i think you should still throw the exception as before if none of the classes is a subclass of the other when the order is the same

Would be nice to have another assertion ensuring that it also still works for Person.class

you can rename this method to getSupportedClasses and you can make it private since i believe it is only used in this class

And also would be nice to have a test that if the types and not compatible it fails as before e.g Patient and Encounter

There is a little mistake here, shouldn't one of these be class1, this is where you want to always have a unit test, can you please add a unit test to ensure that if you had a list of supported classes and more than one match the passed in type, the most specific is what gets picked always even when it is the last in the list.

You need a precondition to check that no column exists with this name just in case it is rerrun

Please create a constant OpenmrsConstants.GP_MAIL_SMTP_STARTTLS for "mail.smtp.starttls.enable".

Please get rid of customProperties and h2Properties class variables. The properties should be read each time they are requested and not cached.

Rename to getInstallationProperties

Don't mention h2. It can be used for any database.

Don't use the cached customProperties, but read the path from System.getProperty("installation.properties", null); If the property is not specified return null.

You are missing:
} finally {
  IOUtils.closeQuitely(propertyStream)
}

Don't ever do that. Use proper logging if you want to log an exception: log.error("Failed to load installation properties: " + propertiesPath, ex);

In addition we also want to check the classpath. So first check if a file exists in the filesystem (use the File class) and if not check on the classpath with getClass().getClassLoader().getResourceAsStream()

It's not correct. It leaves the sql nulled and results with an exception later on when calling executeStatement. You must prevent executing the sql as well.

Don't mention h2. It's for any database.

As mentioned above we don't want to cache these properties in a class variable, but read it each time.

Don't mention h2.

Replace it regardless if installation properties are provided or not.

Call log.info to confirm that the installation.properties file was used.

This comment is not necessary.

This comment is not necessary.

This comment is not necessary.

Don't specify the version. It comes from the main pom.xml. The comment is not necessary.

You missed to notice that it's already specified above (line 630) Please remove this.

Set createDatabaseUsername and createDatabasePasword similarily for consistency (even though they are not used).

Not necessary comment :)

Not necessary comment :)

Not necessary comment :) Chris, you comment too much :) It clutters code that is pretty clear. You should only put comments in places that really need explanation.

Good catch! I sometimes think BaseOpenmrsObject should be doing this.

Add @since 1.10 here

Which visit? I would assume if the encounter belonged to a visit, you remove it from that visit because the visit belongs to the original patient, would be nice to include a test that ensures that this happens

I think all this could have been just one test, i.e have an encounter that belongs to a visit where it is the only one and test all three cases in one test method

Sorry, my mistake. I didn't actualize comment after parameters change. We need to void visit only if given encounter is the only one encounter in the visit.

This is kind of strange, how would you determine which existing visit to add to the encounter?

You can remove this

I think you need to void the old ones from which you made copies

same here

Same here

I think you will need to assign the new copies new uuids

you need to set new uuids for the target

when I void Encounter then all related data are also voided ( @see EncounterService.voidEncounter)

when I void Encounter then all related data are also voided ( @see EncounterService.voidEncount

Would be nice to add assertions for the other void related fields i.e. dateVoided, voidedBy

when I void Encounter then all related data are also voided ( @see EncounterService.voidEncount

Add assertions to ensure that the encounter providers, obs and orders were transferred

Add an assertion that this encounter always has atleast one unvoided obs and order for testing purposes

Ah! i see

This need to be discussed. My idea is that: after transfer to another patient, page with this just created ecnounter(transferred) is open, then user is able to set visit. Another idea is to add combobox to select visit. Which solution would you prefer ?

encounter.visit is a nullable field, an encounter is not supposed to belong to a visit, you rather leave it 'visitless', it will be up to the user to add it to a visit if they wish to

Change "don't" to "does not"

I think that ID and UUID shouldn't be copied over in all these copy methods and it must be stated in a javadoc.

I have just noticed that you set IDs to null in a different place. Fair enough. No need to change it here.

Be consistent and copy over UUID as well.

It'll be more clear if you call it resetIdsAndUuidsBeforeSavingCopiedEncounter.

Rename to changePatientReference

I would assume that if you make a deep copy with CopytUtil.copy then the newly created encounter is consistent and obs, orders, providers already reference the newly created encounter. So fix CopyUtil.copy to do what you do here and remove refreshEncounterReference.

encounterProdiverCopy.encounter must reference target here

orderCopy.encounter must reference target

Needs to be localized.

obsCopy.encounter must reference target

I think that in the first pass we should not be adding an encounter to any visit and rely on saveEncounter to assign the transferred encounter to a visit.

We should say in a javadoc that the copied encounter will not have a visit copied.

it's the same as setEncounterProviderId

copyBaseOpenmrsData sets ID already so it's not needed here. Make copyBaseOpenmrsData set UUID as well.

It's set already by copyBaseOpenmrsData

i didn't add this because during save action target is set to saved encounter.
Should add it anyway?

Should I translate this sentence to all available languages on my own or ask somebody?

It's enough to put it in messages.properties (just in English) unless you know other languages ;)

You mean in refreshEncounterReference? You can get rid of that method after you do this.

We don't use .\* imports. Please revert.

Have you run "mvn clean install" to fix formatting?

I think that may have been IDEA lol

use startsWith instead

use substring(11, ...)

i changed this to use pre generated uuid at https://github.com/openmrs/openmrs-core/commit/050a6e781c6bc4947efb36a9131f6dcee76c58a5

You might want to check if it is not blank, you can use apache commons' StringUtils.isNotBlank(shortedtNameVar)

This should be getDependencies, validate is kind of misguiding given what the method does

You don't need to specify required=true because by default the request params are required when using @RequestParam

This should be named getDependencies

You are getting back a json array which gets displayed as ["module A", "module B"], would be better to display it without the quotes

I will fix this and commit the code

Add @since 1.10, added to 1.9.4 and 1.8.5

You need to do the check too in retirePatientIdentifierType and unretirePatientIdentifierType

Can you add unit tests for the methods where you are adding the checks

You need to register this global property, see OpenmrsConstants.CORE_GLOBAL_PROPERTIES()

You need to add @should annotations to the service method and use the test generator plugin at https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin, if you are using intellij, let me know and i will send you the plugin' jar, if you find it tricky to use, let me know so that i can do it for you before i push the code

I see you actually included the tests, do you mind adding the @should annotation and use the test generator plugin if you can figure out how to use it

I see as if you are duplicating this line, on line 136 why not just **return showForm(request, response, errors);** and remove these  other ones

You could have had one try catch here where you catch the expected exceptions instead of the duplicate times in each method  you are calling below for the individual actions.

Looks like you are also duplicate this line, these method should probably return void and then on line 136 above call:
return new ModelAndView(new RedirectView(getSuccessView()));  

This is not exactly correct,  you need to hide/disable all edit, save, retire, unretire, purge/delete buttons on the form

i wonder why this is happening, did you format his file or make alot of changes?

I will rename this as i commit to something like getNameInLocaleIfAny

Next time you need to use the openmrs test generator at https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin, i will make the change

This is causing a bug, a user can nolonger remove a module, you need to use the isUnloadFlag flag here and chose if to remove Vs stop the module as before

Add @since 1.10 added to 1.8.5 and 1.9.4

you can remove this @see

replace 'a concept' with ' an encounter type'

In the DAO we don't throw APIExceptions and its subclasses in general, so you can remove this

i would prefer to have this explicitly saying checkIfEncounterTypesAreLocked()

This should EncounterService#checkIf...

actually you just need to replace it with EncounterService#check....

Since users see the descriptions, using EncounterTypeLockedException is kind too much developer jargon for them, you can rephrase just to say that the actions are not permitted when true

You might want to check if this is not a new encounter type otherwise the id will be null

Why not do one try..catch for all these and handle it once for all actions instead of individually, if you need to log a different error message for each, you can store it in a variable you declare before the try..catch and use it in when the error is caught

Since we are moving toward mocks, it would be good to use mocks instead of extending BaseWebContextSensitiveTest

Note that with mocks the test might change somehow, e.g you might just get the returned value of the controller and test against it

it would also be good to have a similar test that passes if the GP is set to false otherwise the test could be failing because of another exception

ok, thanks please 
 @wluyima  for revealing to me this, i just forgot to change that since i had at first added checkIfLocked() in PersonService, am going to fix this :)

how do i check whether an encounter type is new @wluyima ?  

sofar all i have done at this pointer is put a test if(encounterType.getEncounterTypeId() != null) arround view

actually this i think is going to be my first time to use mocks instead of extending like BaseWebContextSensitiveTest, but i like the matter of fact that i will have to quickly address this, and so any help would be highly appreciated @wluyima 

thanks a lot for reviewing this issue

That's correct

Mocks can be tricky in the beginning, but if you feel like it will take you long you don't have to

You need to hide/disable all edit, save, retire, unretire, purge/delete buttons on the form

This test method seems not quite right, it says should not save encounter type of locked but you are doing the opposite, your test should using @Test(expected) to check that the exception was thrown and not use the if clause

This is wrong, index.htm is the success view defined above, so they should be the same, i prefer you use assertEquals instead of assertSame because same checks object equality rather than using the equals method

Also add an assertion that the form view is the correct value returned by mav.getViewName()

its true, that; index.htm is the success view defined above, but still; mav.getViewName() returns the form view defined above and not the success view, that is forexample; System.out.printnln(mav.getViewName()); results into "EncounterType.form" which is not equal to "index.htm", am making a commit now for your review again @wluyima 

I think it would nice to  implement getTextSummary to return the provider's name, actually am starting to think we can do things more generically and reduce the amount of code to write for this ticket and related ones, i will add a comment to the root ticket to explain my view

i think this should be the fully qualified classname
@djazayeri what do you think?

you need to null check here for provider

Shouldn't this be delegating to the datatype? E.g datatype.deserialize(valueReference)

Shouldn't this be delegating to the datatype's getTextSummary method for consistence? since here they are doing the same thing i.e returning just name

i think it should be nullable by default and by the way you need to fetch the value from the configuration string, the idea is that you want the developer to define whether the value is required vs optional in their form via the configuration string, so you only set the default if no value has been defined

Same thing here, this is incorrect, the default should the message code for the text 'Provider' but you first check if there is any defined in the configuration string, @djazayeri can you chime in on this

retirePatientIdentifierType and unretirePatientIdentifierType both call savePatientIdentifierType which has the check. 

ok

Thanks Wyclif. If you don't mind adding it, that would be great. I've just started a new project at work and haven't had any time since I originally made the pull request to look this stuff over. I unfortunately don't think I will have much time in the near future to work on OpenMRS stuff as well. So if there are any other changes you would like to make, please feel free to. I'm really sorry and appreciate you looking this all over. Good luck. Also, if you would like to unassign the ticket in the mean time I would not be offended. Thanks

The try also has a return which is different and I couldn't figure out a way to reduce the duplication at the time. It looks like if you returned in the try and then after all the catches it would work. Good thinking!

Yes, that would be better.

That's fine, thanks for the work and good luck with your new project

Right! in the try clause you should return and not assign the view to go to and then just call **return showForm(request, response, errors)** here

After getting the request param the rest of the code should delegate to datatype.deserialize

I don't see where you are using this,  it seems to be creating a dataset file with empty concept related tables, can you please add some useful class javadocs describing the purpose of the class 

I think we try not to require description for most metadata

this looks like an invalid message code

You need to check that tag is not the tag you are currently validating otherwise this might fail for every existing tag, you can reproduce this by trying to editing an existing tag, you will notice that it will never pass

This is wrong, you are comparing strings with == instead of .equals(), also you need to to do a null check on the other ConceptNameTag otherwise you will get a NPE if tag is null when calling trim()

This test technically would fail, it is only passing because you are using checking for equality wrongly with '=='

why is this saying 'should save' yet it seems like you are actually just calling the validator, i though you are testing that when you save the concept name tag, it passes.

currentTag can't be null, you can use OpenmrsUtil.nullSafeEqualsIgnoreCase otherwise it will fail if the cases are different

The right thing to do is to call ConceptService.getConceptNameTagByName and then check that it is not the same tag as that you are validating

that second argument isn't actually the error message, it is just an arbitrary name just like an alias in sql or hibernate queries

This is not the proper way to set up this test, one better way is to check that a tag exists with a given name and that if you try to create another, with the same name, it fails, FYI there is a ConceptService.getConceptNameTagByName method you can use for this tes to check that the tag already exists 

You might need to add a test to ensure that you can edit an existing tag and not change its name, this is likely to fail by looking at the code you have below in the validate method

I think if an attribute is voided, then you shouldn't match against it, in OpenMRS voided is the same as deleted from the user's stand point, we just don't want to purge it from the DB for audit/history reasons

aren't some of these tests already there?

I think dead people should be returned

Wouldn't be good to keep the match mode the same just like for the names?

This is correct, though the @should had suggested something else

Better to assert equals to a certain size than > 2

To make the test more concrete and future proof, can you add an assertion that no attribute exists by this name

Would be nice to have assertions that an attribute with this name exists and and is not searchable and with these tests you need to write them in a way where they fail before the Restriction that fixes them is added

Need an assertion to ensure that the matching attribute is voided, would this test fail if i removed the Restriction on voided property?

sorry! I' am a little confused by what this is testing, need an assertion that the attribute is voided

Can you add a test that ensures you don't get back duplicate patients if a user's name and attribute values both match on the search string

assert that the attribute is none existent

I think we dont need to commit this, should be something you set while working on the tests

Did you run other tests to ensure they are not broken after this change, you could have added these to the file above

The naming of the test description is wrong. The actual test asserts that a person can be found by using a non-voided _and_ a voided attribute as search criteria. There are other tests which assert that searching for voided attributes only do not return the respective person.

I rephrase the @should to express the intention of the test in a better way. 

Possibly indirectly at a higher level. A quick search for references of PersonDAO.getPeople or HibernatePersonDAO.getPeople does not reveal any test classes at that level. I prefer unit testing close to the implementation.

This tests asserts that "dead=false" does not return a dead person. There are further tests asserting that dead people are returned, such as "@should get single dead person" and "@should get multiple dead people".

All three @shoulds need to be looked at to understand the behaviour of the implementation. 

This should be covered by "@should get one person by name and attribute". Please have a look at the test.

That depends on how many strings an attribute can contain. Names are already separated into four parts (given, middle, family and family 2) so searching from the start for each part ensures a good hit rate when searching for a random part of the name.

For multi-string attributes this is different as there is only a single field in the database. MatchMode.ANYWHERE allows for more flexibility on the actual usage of custom attributes.

Agreed.

Actually I had started adding people to the standardTestDataset file. I then went for a separate file for two reasons:
(1) I found the standardTestDataset got difficult to read.
(2) Some scenarios I constructed interfered with other tests. 

I have run the other tests in the context of a full build.

Agreed, I change the test.

Nice one, I will add that aspect.

Agreed, will do.

Yep, will cover that aspect.

Will do so.

The naming of the test description is wrong. The actual test asserts that a person can be found by using a non-voided and a voided attribute as search criteria. There are other tests which assert that searching for voided attributes only do not return the respective person.

I rephrase the @should to express the intention of the test in a better way.

I add the assertion on both attributes, the non-voided one and the voided one.

I guess they are in PersonServiceTest or PatientServiceTest, then that is fine

Fair point

I meant these two patient rows you added to standardTestDataset.xml, you could have added them to your new dataset file instead of here but if all other tests still run fine, i guess that it is ok to leave them here

Cool

In OpenMRS we don't use wildcard imports. Can you switch this back to what it was before?

No wildcard imports.

Please make sure that any commits to openmrs-core are using the OpenMRS formatter and code templates (these are for eclipse, but they're applied when you do a maven build), so we don't get spurious whitespace changes.

fix this please

please revert any unnecessary whitespace changes to comments...

should say custom datatypes for metadata

should say custom datatypes for metadata

this should return the name property since this is metadata, if it is blank, then it should call toString()

don't use valueReference because it will be a uuid because it is not what you want the user to see, instead this should use the name property since this is metadata, if it is blank, then it should call toString() 

did you see the comment i added to the ticket on 2013-09-04 12:35:26 EDT, i described what these methods should do

From my comment on the ticket on 2013-09-04 12:35:26 EDT, this method is not included, this logic should be in the individual sublclasses becuase they will no what configuration properties they support

am not sure how i can to use the name property but am going to make a commit of what i think of this comment and again hear from you 
@wluyima, thanks

i have committed again to confirm as commented above at, https://github.com/k-joseph/openmrs-core/commit/TRUNK-3499 

@djazayeri  would you consider this to be the complete HTML summary? Or complete will include the description?

The javadoc on toHtmlSummary is:
- Renders an HTML-formatted summary view of the custom value, that does
  not take a lot of space. (This is
- subjective, but generally means < 100 characters in length, or an image
  of < 200 pixels in each dimension.)
- This method should return quickly, e.g. in case we're rendering
  thousands of custom values in a table.

So basically, yes, it is appropriate for this to be the name (with no
description).

On Fri, Oct 25, 2013 at 11:21 AM, wluyima notifications@github.com wrote:

> In
> web/src/main/java/org/openmrs/web/attribute/handler/BaseMetadataFieldGenDatatypeHandler.java:
> 
> > +
> > +/**
> > - \* This is a superclass for custom datatypes for metadata
> > - *
> > - \* @since 1.10
> > - */
> >   +public abstract class BaseMetadataFieldGenDatatypeHandler<T extends OpenmrsMetadata> implements FieldGenDatatypeHandler<SerializingCustomDatatype<T>, T> {
> > -   
> > -   /**
> > -    \* @see org.openmrs.web.attribute.handler.HtmlDisplayableDatatypeHandler#toHtmlSummary(org.openmrs.customdatatype.CustomDatatype,
> > -    \*      java.lang.String)
> > -    */
> > -   @Override
> > -   public CustomDatatype.Summary toHtmlSummary(CustomDatatype<T> datatype, String valueReference) {
> > -       SerializingCustomDatatype<T> dt = (SerializingCustomDatatype<T>) datatype;
> > -       return new CustomDatatype.Summary(dt.deserialize(valueReference).getName(), true);
> 
> @djazayeri https://github.com/djazayeri would you consider this to be
> the complete HTML summary? Or complete will include the description?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/399/files#r7223969
> .

i think you should just return the result without doing this

To avoid duplicating code, you should call to to Html() below to fetch the name

This should extend BaseOpenmrsFieldGenDatatypeHandler

The only thing you needed to change in the if clause is the equals check to use uuids and not id because newly created items have no id before they are saved but do have a uuid .
You will still need the  conceptToValidate.getConceptId() != null because the reason it is there is to ensure that when you are saving an existing item, the code doesn't end up thinking it is a duplicate because getConceptMapTypeName will always return it if you pass in an existing item's name

In theory the code is checking that if it we found a duplicate, make sure it is not the item itself we are validating that was found and this only arises for existing items that are getting edited

thanks please @wluyima  for your review and response, however i think i need to hear farther from you to respond to these two comments, i think it is better either on the IRC or here; by making further clear what you are meaning in your wonderful explanation above,
thanks

i mean you still need the if(conceptToValidate.getId() != null) and not if (conceptToValidate.getUuid() != null)

ok, i think i better understand you now after the above comment, how can i  implement comparison on uuids instead of ids. in this case besides what i had originally proposed as my ticket interpretation.

Your commit is fine except undoing the change NOT to replace conceptToValidate.getConceptId() != null with conceptToValidate.getUuid() != null on line 180 above in red but the equals should still use getUuid()

You can leave out these TODOs.
Normally it is nice to return a useful message like "Finished updating Encounter Roles" since liquibase does something similar for every changeset

You nee to have all the code in an enclosing try..catch..finally clause so that you close the stmt and rs objects in the finally clause.
And since you doing some updates, you need to set turn off autocommit for the connection object before the the try clause and then reset it in the finally clause, have a look at AddConceptMapTypesChangeset for an example

I would assume this is a redundant check, because in your sql query you only selected encounter roles that are duplicates that means every name entry in the map definitely has a hashset of size 2+

When you turn off autocommit as i suggested, then you would rather have this as a prepared statement instead.
That way when the changeset fails, the entire 'transaction' is rolled back and not have it partially done.

thought you already have the name as the map entry key

The comments i added to the other changeset i believe do apply to this one too

This is a redundant else if, it should just be else because it can never be null since it just failed the if is null check on line 43 above

Can you please translate this by using a message code

Do you need this? You are extending RequireNameValidator, the very first line in this else clause when the role is not null is to call the validate method from its immediate superclass

Or you can just return once the check for null or blank name fails

And at this point, you should first check if there are validation errors found before checking for duplicates, otherwise it would be a redundant call/check if the name is already found to be null or blank

Would be nice to trim the name before looking it up duplicates from the database

Would be nice to trim the name before looking it up duplicates from the database

At this point encounter type can't be, so this is a redundant check

same here, can't check for duplicates if the null or blank check already failed

And translate this

Oops! you are adding this as a default message, then ignore comment above

same here, ignore my comment above

Split these changesets into 2, so that if one fails, the other doesn't fail along because of the other

Add a precondition to check that the name column exists

Looks like you missed adding these tests

I guess what i meant was have one huge try catch finally clause for the execute method and declare all the resources  that need to be closed outside it and close them once in one finally clause.

This code needs to be in the same try above, you need a big enclosing try catch finally clause, so that you only have one catch clause for DatabaseException and SQLException, do you notice that you are duplicating them.

Basically move all this code into the try clause above and get rid of this second one

it is ok to move this right at the top  of the try catch  even before the select statements

why do you need to do this, i thought the map entry's key is the role name so you don't need to fetch again from the result set

I already mentioned that this probably needs to be cleaned up, this class extends RequiredNameValidator for a reason and that is to delegate to it, first by calling super.validate as the very first line in this validate method and then your logic can follow and it means you wouldn't need this check since it is done by the superclass, your logic should only check for duplicates if there are no errors found yet at this point

Over sight on my side, ignore my comment about the NPE check

This is not a meaningful precondition, possibly it should a check that the table is not empty since it wouldn't make sense to run the changeset if there is nothing to validate

same for this precondition, just add a check that the count of types is > 0, below is how you do it
&lt;not&gt;
  &lt;sqlCheck expectedResult="0"&gt;
   SELECT count(*) FROM encounter_type
 &lt;/sqlCheck&gt;
&lt;/not&gt;

I recall mentioning that you want to do one batch update, so here you need to be calling pStsmt.addBatch() and then call pStmt.executeBatch() once after the loop

i though you already did this on line 123 above, won't this happen twice and end up skipping some numbers?

i recall saying you can get rid of this for and not log these

same here, you need to check if there are no errors yet before checking for duplicates

and compare uuids here

you need to instead check if there are no  errors yet instead of  checking if name is not null

compare by uuids

same here dont use the else then else clause because it won't work for all supported DBs, just check that the count is not 0

same here

You need to add a precondition that the constraints don't exist and you need to split these changesets into 2, one for each table so that if it fails for one, the other doesn't get rerun for both always regardless of whether it already passed for the one table

You need to remove these System.out.printlns

where did this come from?

it is better to get the uuid of the expected role and compare uuid here instead for the second assertion

Did you include a test that shows that editing an existing one works?

Same here, did you include a test that shows that editing an existing one works?

Apparently, previously it was ok to have multiple encounter roles or types with the same name, as long as only one of them were active/unretired at a time. This was an old unit test based on this principle, and I deleted it since it had become unnecessary.

I've also edited some test data which is based on this principle, and therefore made use of multiple encounter roles/types with the same name.

The validate_shouldFailIfEncounterTypeNameIsDuplicate test uses the same scenario, hence I didn't want to write a duplicate unit test just for this.

The validate_shouldFailIfEncounterRoleNameIsDuplicate test uses the same scenario, hence I didn't want to write a duplicate unit test just for this.

Hi,

If a duplicate is detected within the do while loop, an increment is made, and the new name is saved. The duplicateName variable controls only the id assigned to duplicate names. Hence, the 3rd duplicate name in the list may have duplicate name count of 4, based on whether other related names already exist.

Fixed to check if encounter role name is not null empty or whitespace.

cool

No, what am asking for is:

EncounterType et = Context.getEncounterService().getEncounterType("Scheduled");
Assert.assertNotNull(et);
Errors errors = new BindException(et, "encounterType");
new EncounterTypeValidator().validate(et, errors);
Assert.assertTrue(errors.hasErrors());

This test is different from the one below in that it is checking that i can validate an existing encounter type with a unique name and it passes

wouldn't the @see be enough for this? :)

Can we have some class level description for what this class is to be used for?

Hi @dkayiwa , i'm not very sure what you mean by this comment. Do you mean that i should remove the text "Get encounter role by name" ?

That is exactly what i mean. Doesn't the @see take care of it? :)

Is this required for these tickets?

You need to add @since 1.10 to the new getters/setters

Can include a precondition that checks that column doesn't exist?

Would have been simple to use the update tag and let liquibase generate for you the sql

Can include a precondition that checks that column doesn't exist?

same here, you need a precondition

I would rather not set the default value, it might seem fine in the Java code but not in the DB

The column name should be order_action

In the DB the length is 50 and i think it should be consistent here with that

i think proxy is the default value for all single-valued associations so you can remove it

@djazayeri what do you think?

I agree with you Wyclif. We do not want a default value for this at the DB level. I think we need to break this into 3 changes:
1. add the column
2. update orders set action = 'NEW' where action is null
3. add not-null constraint

we shouldn't have a deprecated field for this. The getter/setter methods should be deprecated, but this field should be removed and replaced.

For some reason this changeset fails for me when i get to these updates

Still fails for me, i dropped the DB and tried a fresh install and still fails, will ask someone to try it on their machine

Can you split this into 2 separate changesets

I think this should be 1024

I think you don't need to specify the length for int columns since hibernate already knows the maximum length for an integer value unless you want it to be less

baseTableName is drug_order

This should be a many- to-one association mapping to Concept

You don't have to do this, the changeset below in liquibase-update-to-latest.xml is all you need.

set the length attribute to 65535

You need to override to string as below:
public String toString(){
    (getConcept() == null) ? null : getConcept().getName();
}

Should implement Serializable and declare a serialVersionUID as we do for othrs

Include some javadocs, like:
@djazayeri , @bmamlin can any of you help us phrase the javadocs for this class

Should be OrderFrequency and not DrugFrequency

@djazayeri and @bmamlin do we really expect someone to specify 2.5 times a day? Implying that take the daily dose twice and the third time for the day take half of the daily dose

I don't think you need to specify the dbms attribute here

You forgot to add the fk constraints to reference tables like concept and user(creator, retired_by)

This should be named OrderFrequency.hbm.xml

You need to add this mapping file to hibernate.cfg.xml file otherwise the hibernate won't know about it

This needs to be a utility function somewhere else outside the concept class, how about you move it to OrderUtil? I think it needs to be static and should return a conceptId and not a concept really

This global property is not required, there is a single global property that needs to be parsed based on the form structure i include on the ticket, if you need more explanation, please find me on irc so we can talk about it

Don't set the value, i have committed the global property name for all unit concept mappings

You should not be editing this file, please remove these

the baseColumnName is supposed to be quantity_units

Sorry for this but i noticed that duration and durationUnits are both new so there should be no existing values that need to be converted.

This method won't be needed

No need to specify a default value of null, i fixed it as i merged the code

You need to split up this and add each changeset individually, also you need to include a precondition for each to check that the foreign key doesn't exist

Even better you can move them to the changeset that creates the tables, this is okay if you in include the in the same changeset that creates the table

I don' think you need separate GP for this, there will be a single GP that is comma separated for all mappings, it will contain something like <b>drug_order_quantity_units:5032</b> the represents the mapping to the concept with id 5032 as the quantity units for all existing drug_order.quantity values

Isn't it supposed to be concept_id?

Don't bother updating things in the web layer, if you come across any, just delete it, reason is because there will be a new UI for orders in the reference application

@vinayvenu  am not sure what you might be doing wrong to have duplicate commits for instance this pull is a duplicate of this commit https://github.com/openmrs/openmrs-core/commit/2bc1af0d88299b9403fecd145d32128d6653524c
Try to follow the openmrs conventions at https://wiki.openmrs.org/display/docs/Using+Git

baseTableName should be drug_order

I don't think this is quite right, i would rather leave careSetting property null

Add @since 1.10

Can you implement equals() and hashcode() methods?

Don't set it automatically

Move this changeset to liquibase-update-to-latest.xml file

You are the author and not sunbiz

Why are you adding this foreign key constraint?

Shouldn't this be an Enum rather than a regular class?

-Darius (by phone)
On Dec 19, 2013 3:34 PM, "wluyima" notifications@github.com wrote:

> In api/src/main/java/org/openmrs/CareSetting.java:
> 
> > - \* Copyright (C) OpenMRS, LLC.  All Rights Reserved.
> > - */
> >   +package org.openmrs;
> >   +
> >   +public class CareSetting implements java.io.Serializable {
> >   +
> > -   private static final String OUT_PATIENT = "OUTPATIENT";
> > -   private static final String IN_PATIENT = "INPATIENT";
> >   +
> > -   public static CareSetting OUTPATIENT = new CareSetting(OUT_PATIENT);
> > -   public static CareSetting INPATIENT = new CareSetting(IN_PATIENT);
> >   +
> > -   private String careSetting;
> >   +
> > -   public CareSetting() {
> > -       this.careSetting = OUT_PATIENT;
> 
> I don't think this is quite right, i would rather leave careSetting
> property null
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/480/files#r8488765
> .

Move this to liquibase-update-to-latest.xml file

You actually don't need this changeset

Don't specify a default value

You won't need this

Nope, Burke suggested that we should still let an implementation to be able to define its own kind of care setting and this is the only way to do it without introducing a new table

Component should be able to work here but i have a feeling not quite right, how will you avoid this?
order.setCareSetting(new CareSetting(""));//or a white space character

How about a custom UserType? @djazayeri  what do you think?

Add @since 1.10

Add @since 1.10

I think this should be a set, @djazayeri isn't the convention supposed to be a set

we normally use 1L

You need a precondition that checks that the table doesn't exist

type should be datetime

Can you please use a more meaningful name like order_frequency_drug_fk and so the same for the one below

You can exclude the deferred and initiallyDeferred attributes

You can exclude the deferred and initiallyDeferred attributes

I don't think you need this modifySql tag

For cascade, we set it to <b>all,delete-orphan,evict</b> for collections like this
You don't need to add lazy=true because it is the default value

You also don't need order-by if the value is the primary key column because by default they are returned in that order

Can you also include addDrugReferenceMap(DrugReferenceMap) method to Drug.java as a convenience method, see Concept.addConceptMapping(ConceptMap) or an example

I have added that. But I am curious why a lot of other createTable change sets have been created without it. Could you please explain? I can only see it on the provider and encounter_role tables.

Fixed.

Fixed.

Fixed.

Fixed.

Fixed. But I am seeing this pattern in a couple of places and I thought it is intended to tweak the SQL for MSSQL server installations. No?

Fixed.

Fixed.

Fixed.

Added method.

Fixed.

Fixed.

Fixed.

You can get a NullPointerException here, you can use this instead:

getDrugReferenceMaps().add(drugReferenceMap);

Because getDrugReferenceMaps() always checks if null and instantiates the collection

missed the @since 1.10

Fixed.

Fixed.

Good question because it has made me realized a mistake here, move this changeset from this file to liquibase-update-to-latest.xml, otherwise liquibase-schema-only.xml is only run for a new installations and not upgrades. Liquibase schema only technically should never be edited and i see that someone edited it and that was a mistake like this that went unnoticed to add the changeset for adding provider table which should actually be in liquibase-update-to-latest.xml, as for encounter_role, i see that daniel added that precondition which was a mistake, We generated liquibase schema only using a liquibase tool that dumps an entire database into a liquibase change log file and that tool never adds preconditions. And then we make other updates through the update to latest file, makes sense?

Yeah. That makes sense. I will move over the drug_reference_map table changeset to the appropriate file. Thanks.

Fixed.

You also need to check that the column doesn't exist in the precondition

Since you are using a PreparedStatement below, it would make sense to move this loop to migrateUnitsToCodedValue() method so that you prepare and close the PreparedStatement object once, it also means you can do the update once by turning off auto commit and commit/rollback everything in one go.

Looks like DatabaseUtil.getConceptIdForUnits can return null,  would makes sense to check for null here and throw an exception

Database.getConceptIdForUnits throws error instead of null.

Look at it closely again, it can actually return null for one scenario

I would just use batch update here instead by just calling updateDrugOrderStatement.addBatch() and then before line 49 below i call updateDrugOrderStatement.executeBatch()

Hi,

I thought of using batch update but then I would have to handle batch size
( not sure what batch size to use ). Also this being a one time migration,
I thought it would not be a significant improvement.

Thanks,

On Sat, Dec 21, 2013 at 12:30 AM, wluyima notifications@github.com wrote:

> In
> api/src/main/java/org/openmrs/util/databasechange/MigrateDrugOrderUnitsToCodedDoseUnitsChangeset.java:
> 
> > -            throw new CustomChangeException(e);
> > -        }
> > -    }
> >   +
> > -    private void migrateUnitsToCodedValue(JdbcConnection connection, List<String> uniqueUnits) throws CustomChangeException, SQLException, DatabaseException {
> > -        PreparedStatement updateDrugOrderStatement = null;
> > -        Boolean autoCommit = null;
> > -        try {
> > -            autoCommit = connection.getAutoCommit();
> > -            connection.setAutoCommit(false);
> > -            updateDrugOrderStatement = connection.prepareStatement("update drug_order set dose_units = ? where units = ?");
> > -            for (String unit : uniqueUnits) {
> > -                Integer conceptIdForUnit = DatabaseUtil.getConceptIdForUnits(connection.getUnderlyingConnection(), unit);
> > -                updateDrugOrderStatement.setInt(1, conceptIdForUnit);
> > -                updateDrugOrderStatement.setString(2, unit);
> > -                updateDrugOrderStatement.executeUpdate();
> 
> I would just use batch update here instead by just calling
> updateDrugOrderStatement.addBatch() and then before line 49 below i call
> updateDrugOrderStatement.executeBatch()
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/488/files#r8507484
> .

Hmm... i really never had to worry about batch size, i even don't think you can do anything about it, in any case the if you had to the size would be the size of the list of units to convert

Anyways it was just a suggestion, you can leave it the way it is as long as it was working

Thanks Wyclif, I will remember this for future stories :)

On Sat, Dec 21, 2013 at 12:52 AM, wluyima notifications@github.com wrote:

> In
> api/src/main/java/org/openmrs/util/databasechange/MigrateDrugOrderUnitsToCodedDoseUnitsChangeset.java:
> 
> > -            throw new CustomChangeException(e);
> > -        }
> > -    }
> >   +
> > -    private void migrateUnitsToCodedValue(JdbcConnection connection, List<String> uniqueUnits) throws CustomChangeException, SQLException, DatabaseException {
> > -        PreparedStatement updateDrugOrderStatement = null;
> > -        Boolean autoCommit = null;
> > -        try {
> > -            autoCommit = connection.getAutoCommit();
> > -            connection.setAutoCommit(false);
> > -            updateDrugOrderStatement = connection.prepareStatement("update drug_order set dose_units = ? where units = ?");
> > -            for (String unit : uniqueUnits) {
> > -                Integer conceptIdForUnit = DatabaseUtil.getConceptIdForUnits(connection.getUnderlyingConnection(), unit);
> > -                updateDrugOrderStatement.setInt(1, conceptIdForUnit);
> > -                updateDrugOrderStatement.setString(2, unit);
> > -                updateDrugOrderStatement.executeUpdate();
> 
> Anyways it was just a suggestion, you can leave it the way it is as long
> as it was working
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/488/files#r8508060
> .

You need to set the value for existing orders explicitly probably to INPATIENT.
@djazayeri, @bmamlin what should be the value for existing orders?

I don't know what a component is in Hibernate, I'll have to look that up in the docs

Per today's design call it should:
- default to outpatient
- on the "upgrading to 1.10" wiki page we should tell people how they would do something different (i.e. create the column before the upgrade, and do something like "update orders set care_setting = 'INPATIENT' where encounter_id in (select encounter_id from encounter where encounter_type in (x, y, z))"

discontinuedBy is still needed

Add @since 1.10

Add @since 1.10

I thought that discontinuedBy was going away because that detail was going
to live in the order that stops an order.

-Darius (by phone)
On Dec 24, 2013 8:22 PM, "wluyima" notifications@github.com wrote:

> In api/src/main/java/org/openmrs/Order.java:
> 
> > @@ -69,11 +69,7 @@
> > 
> > ```
> > private User orderer;
> > ```
> > 
> > ## \-   private Boolean discontinued = false;
> > -   private User discontinuedBy;
> 
> discontinuedBy is still needed
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/495/files#r8547572
> .

I thought "discontinuedBy" becomes "creator" in the Discontinue Order (DC). Thats what I have done in this pull request. 

Ok, then i think i need to edit the description

@djazayeri , @bmamlin do we need to set encounter_id for DC orders?

This changeset should come first, which means you will need to edit the custom changeset to use the new column name

The precondition also needs to check that the column doesn't exist

I think that when upgrading it is okay to leave the encounter of the DC
orders we create during data migration blank. I'm afraid that encounter is
required on all orders in the data model though.

-Darius (by phone)
On Dec 25, 2013 3:10 PM, "wluyima" notifications@github.com wrote:

> In
> api/src/main/java/org/openmrs/util/databasechange/CreateDiscontinueOrders.java:
> 
> > -        } catch (SQLException e) {
> > -            throw new CustomChangeException(e);
> > -        } catch (DatabaseException e) {
> > -            throw new CustomChangeException(e);
> > -        }
> > -    }
> >   +
> > -    private void createDiscontinueOrders(JdbcConnection connection, List<DiscontinuedOrder> discontinuedOrders) throws CustomChangeException, SQLException, DatabaseException {
> > -        final int batchSize = 1000;
> > -        int index = 0;
> > -        PreparedStatement insertStatement = null;
> > -        Boolean autoCommit = null;
> > -        try {
> > -            autoCommit = connection.getAutoCommit();
> > -            connection.setAutoCommit(false);
> > -            insertStatement = connection.prepareStatement("Insert into orders(previous_order_id, concept_id, patient_id, encounter_id, " +
> 
> @djazayeri https://github.com/djazayeri , @bmamlinhttps://github.com/bmamlindo we need to set encounter_id for DC orders?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/495/files#r8551832
> .

I actually think you should move this precondition to the changeset above and here you just add the one that checks the column doesn't exist

This is changing from 2 to 3 because of the new discontinue orders, right?

You need to pull the latest changes from openmrs/1.10.x, @dkayiwa changed this in a later commit to check the actual ordering

same here, you need to check actual ordering

Yes.

@djazayeri , @wluyima : If encounter is required on all orders in data model, then should I just copy encounter_id (already in the pull request) to new DC order?

I don't seem to see where you updated these tests in OrderServiceTest to check ordering

It was fixed at line 196 in pull request -
-    Assert.assertTrue(orders.get(2).getOrderId() == 444);

On Sat, Dec 28, 2013 at 1:53 AM, wluyima notifications@github.com wrote:

> In api/src/test/java/org/openmrs/api/OrderServiceTest.java:
> 
> > ```
> >     for (Order order : orders)
> > ```
> > -           Assert.assertTrue(order.getOrderId() == 4 || order.getOrderId() == 5);
> > -           Assert.assertTrue(order.getOrderId() == 4 || order.getOrderId() == 5 || order.getOrderId() == 444);
> 
> I don't seem to see where you updated these tests in OrderServiceTest to
> check ordering
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/495/files#r8572230
> .

@vinkesh that is correct! but the column will get dropped

I see below that you are already setting the encounter

I don't think you should be setting a default value here, just leave it null

I don't think you need this, where are you using this? In any case this will certainly be returning multiple matches.

Do you really need this?

This should probably say: <b>Adding care_setting table</b>

i think should be named care_setting_type

I would use lowercase for name

We try not to minimise the amount of metadata that comes with core, i would say just one care setting you are adding for upgrade purpose is enough

column name is care_setting

You left out the comment

You need a precondition that checks if there are any orders with null care setting types, the reason is there are more experienced admins that will create and pre-populate the table, add the new column and set their own care setting values, you don't want to override their data

i would say pick the first OUTPATIENT care setting, otherwise this can return multiple if the installation had its own pre populated table with multiple OUTPATIENT care settings

Actually it should be "Outpatient" (i.e. Title Case)

This should be in a separate changeset incase this changeset is skipped because of the precondition not passing

At this point this should be nullable otherwise this will fail since there is no default value to assign for existing rows

don't set the cascade attribute, hibernate takes care of this pretty well by default for many to one associations

Ignore my comment above, looks like others agree with you to have Inpatient added too

name should Inpatient

You can replace it with the one that fetches it by id for now

The dao is required to fix a failing test (see changed in EncounterServiceTest)

Done. 

Done

Done

Done

Done

Added comment

Sorry, didnt understand. The update script updates only rows on order that do not have a null value. 

Done

Done

Aren't we just creating the table now? So there will not be any rows. If it exists, this doesn't run. 

Done

Done. 

Ah! you are right, don't know why i was thinking it was adding the column

You don't need to be dropping this column with liquibase here since it doean't exist in a release openmrs version, just drop it with sql from your local mysql instance. I will fix this as i merge the code

Still no precondition, i will add it as i merge the code

I wouldn't call it alpha, rather a qualifier after maven version conventions. Please change all places that use alpha to qualifier.

simplify the whole method by returning matcher.matches();

rename to isVersionWithQualifier

Is this used anywhere?

Why the above tests are added here? They seem unrelated...

Changes in 3 tests above don't seem relevant either.

Unrelevant?

Unrelevant?

It should go away with Version if Version is not used...

forgot to change the column name in the precondition, will fix it as i merge the code

Can you add some unit tests for this method? See similar tests for ConceptReferenceTerm.addConceptReferenceTermMap(...)

Mappings to reference terms are not data/metadata, so they are not Retireable, we just delete them once they are no longer in use. So you should not implement Retireable

Since this is named conceptMapType in DrugReferenceMap.java, i suggest name the column concept_name_type here, remember to update the foreign key constraints below to match the new column name

We need to keep formatUser, you should have just added formatProvider

I told also be good to check that the table is not empty so that the changeset never gets run just in case

generated provider accounts for retired users need also be retired, see changeset with id <b>20110825-1000-creating-providers-for-persons-from-encounter</b> and copy those queries

orders.orderer is a user id and is not the person id

Why can't you generate and set a valid uuid here? @rkorytkowski or @djazayeri you might know the answer to this

this can't be patient_id

I think a unit test for this migration is required, i will have to merge the code Rafal wrote for database upgrade testing

This doesn't look correct to me, did you test it?

There was really no need to edit test data or the use is user_id 1 and the provider would also be 1?

why is this removed?

why is this removed?

And why is this also removed?

Why should the uuid be a subscript?

Sorry! i have just seen the ticket that says so

it is best to use location.locationId instead of manually calling the getter here

you just need to do: patientIdentifierType.id instead of calling the getter

the challenge about that is that, there is a type mis match that is created since the setter for orderer is a Provider whereas in the order.hbm.xml file it is User, which i think is fixed by this

What i mean is that in test data, orders.orderer column has user ids as values, don't those need to be changed to provider ids? But if the orderer was already 1, chances are you didn't have to make any changes since most likely the only provider in test data has id 1, makes sense?

I assume we should do whatever was done when creating providers in the upgrade to 1.9. (I would have assumed we _could_ use UUID. I haven't thought of any reason not to.)

Probably I should store and get it from discontinueOrder object, right?

These are fields that have FKs and must be set to null or valid IDs. The default value is 0, which is not a valid FK and inserts fail.

It's not nullable so it must have a default value

I think we want to autoIncrement order frequencies.

Data type must be modified separately.

Formatting must have changed somehow. I'll fix this.

It's not nullable so must have a default value.

What do you mean?

I don't think this is right, there should never be a default value and this is how we have been adding similar columns

good catch!

Did you update copyHelper()?

@djazayeri i think have heard you say before that orders.encounter is required but it seems it is not the case prior to 1.10.?

good catch!

Is this meant to catch situations where a single concept is mapped to more than one text?

Really? didn't know that, it was able to work for me when i ran the changeset locally

Same here, i don't think we want to set this

comment?

I did think that was true. Looking at a database I have here now, it appears that it was _not_ required in 1.9. (I'm quite surprised.)

Those should wrapper types and not primitives

orderType and orderer are required, so why would they be 0 or null for existing data?

This has no assertions?

So are you going to add these?

Doesn't it take so long to run these tests since you have to load up the database for each test?

Why not true to checking the changelog table?

I thought the frequency column remains but i see you removed it here

same here

Isn't there some way you can avoid duplicating this code in both of these changesets, make it a utility method or factor it out into a superclass for them

Same here for this, avoid duplicating it

I mean this is a required field that cannot be null. I assumed it is always DISCONTINUE here, but I may as well copy the value from the existing discontinuedOrder.

My point was that you cannot do an insert without order_type_id and orderer so we must copy it here from existing data.

Orderer is not required and ordertype is.

No, it's quite fast since I use a copy of the h2 database, which just needs to be started.

I copied this from our installation wizard. I didn't look into why is that. I'll check.

Right, it remains... I removed it temporarily for tests to pass and then forgot to change that to concept.

It has a nullable=false so when we add a column to an existing table that has some entries already we need to put some default value in there.

This changeset is creating DC orders meaning the action is DISCONTINUE as you are doing

They are both required

That was a mistake and i have corrected it, on adding the column in this changeset, it should be nullable so that we don't have to define a default value, after setting care_setting values for existing data in a later changeset,  the constraint is added in changeset with id <b>201312271828-TRUNK-4156</b>

https://github.com/openmrs/openmrs-core/blob/1.9.x/api/src/main/resources/org/openmrs/api/db/hibernate/Order.hbm.xml#L57 

https://github.com/openmrs/openmrs-core/blob/1.9.x/api/src/main/resources/org/openmrs/api/db/hibernate/Order.hbm.xml#L77

Only order_type_id has not-null=true

Did you have any values in drug_order?

What's to update there if only return type changes?

Yeah, will do.

Okay, I need to merge your fix.

Yes and also I didn't know if we intend to deliver some order frequencies by default.

I believe that was a mistake, @djazayeri, @bmamlin how comes orderer was nullable in the old design? And it is really nullable?

yes i did

If it already exists then that is fine, i just thought one of these subclasses didnt have a copyHelper method and we had to keep updating it

I committed another utility method at https://github.com/openmrs/openmrs-core/commit/19591f91d7384c5c8c799e65199e00d90e913340
except that it returns a set and no null values

@wluyima you said to remove defaultValue and that you fixed the problem by adding not nullable constraint in some later changeset, but I see that you haven't removed nullable="false" here...

nullable false needs to be removed here same as for care_setting

http://www.liquibase.org/documentation/changes/rename_column.html doesn't say that it changes the datatype and it doesn't work for me in the h2 db without modifyDataType

I needed to fix this changeset as well.

I see that we're missing a changeset that adds nullable=false constraint after populating order numbers...

It doesn't assign order_number, which also seems like a bug...

This call is actually not necessary.

See the changeset with id 201312271826-TRUNK-4156 that adds orders.care_setting?

See changeset with id 201312271828-TRUNK-4156 which adds the not null constraint. I think you are missing some updates

Pull the latest changes, that was fixed in github this morning

Good catch! I wonder why it doesn't fail

Oops!, you are correct, i was looking at the one that adds order number

It doesn't fail, because order_number is nullable right now... We're missing a changeset, which makes it not nullable.

see 201311041514-TRUNK-4122

The super class BaseOpenmrsObject already does this

Same for this, BaseOpenmrsObject already does this

@wluyima, does this mean I should set UUIDs in the DrugTest.java class so that something like:

Assert.assertEquals(true, drug1.equals(drug1.getDrugReferenceMaps().iterator().next()));

makes sense?

ConceptReferenceTermTest for example seems to be using the INT IDs and seeing as equals() is implemented for UUID I don't see how that would work.

You can just do assertEquals(drug1, drug1.getDrugReferenceMaps().iterator().next().getDrug())

Actually this kind of constructor is not helpful, i know we have such constructors in core but i want us to move away from it, @djazayeri what do you think? Can you add one that takes in a ConceptReferenceTerm and a ConceptMapType.

By the way are comparing drugs or drug reference maps?

How about return a string concatenation of the term name and the map type name

I see that you added tests but i don't see the @should annotations you added to Drug.addDrugReferenceMap, see https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin

This is incorrect, shouldn't you be comparing drugs?

The only reason this is passing is because the drug and reference map's ids are both = 1

+1
We should stop adding Constructor(Integer), and start having constructors that take the interesting/required fields.

This will duplicate the order number of the original discontinued order since it is also getting set to the it's order_id, we talked about this on the call this morning and we agreed on appending "-DC" in addition to the order id for the discontinue orders to distinguish them.

My recollection is that order.encounter was supposed to be required, but I suppose I could be wrong about this. (Maybe I'm thinking of the fact that order is for a _patient_, not a person like obs.)

The idea of using Entry is that in the line below instead of map.get(roleName) you will call entry.getValue() so that no additional map search is needed. Please do the same in other places.

Correct me but am a little confused, why should this be true? I though this should be excluded

If a file path doesn't match any file in omod then condition doesn't matter. Files that aren't conditional resources are included by default. We skip non existing conditional resources silently. 

ok

If include == true, you might as well just return in that case to skip this further logic and only proceed if false

Isn't the tag name supposed to be conditionalResource<b>s</b>?

Shouldn't there be a single conditionalResources tag in the config.xml with multiple nested resource tags? 

Does this mean  1.10  > 1.10.0-SNAPSHOT?

Yes, I envisioned a single conditionalResources tag and nested conditionalResource tags. This code works if you put it that way in config.xml, but it will also work if you just put conditionalResource tags without the conditionalResources tag. I think I'll fix this to work only with one conditionalResources tag to eliminate any possible problems.

You are right. I simply decided to make the last condition win. I can change it so that the first one wins.

No, I should have used 1.9.8-SNAPSHOT in this line...

This logging statement and the one below will likely add significant overhead if info level logging is enabled.  I'd probably make this debug-level, with a log.isDebugEnabled() check around it.

I agree about doing DEBUG-level logging for these. In regular system operation an admin doesn't care about this.

I find the phrasing of all these @should lines to be very confusing.

I would name this "shouldResourceBeIncluded". Why is it static? If this (and the other now-static methods in this class) are really utility methods, we should move them to a utility class.

Comment here, and a couple lines down about how files not mentioned in conditionalResources are included, whereas if they are mentioned they need to match.

I'd think that if there are multiple conditions they must _all_ match. I.e. I might have a library that is only loaded if it's OpenMRS 1.10+ AND the webservices.rest module is loaded. I.e. you should be doing "include &="

I suggest calling this "ModuleAndVersion" so there's no confusion with the existing Module class. Or alternately call it "RequiredModule".
(Actually, can we recycle whatever class is used to represent required modules at the top level in config.xml?)

Usually we use the "lang" version not the "lang3" version

I agree that you should switch it that way.

Reading this snippet makes me sad. I wish we had used XStream or something to do this from the beginning.

Can't tell what you changed here.

I would prefer to go with the lang3 because it is the newer one and i guess better

We can create a separate ticket to fix that for the entire module config file outside of this order entry rework  

I only added the split and the for loop here.

The methods need to be static because they are called form a constructor.

We could add here modules as well.

Seems like we should support the same constraints here as we do in the
conditional resource inclusion in config.xml.

On Thu, Jan 16, 2014 at 6:33 AM, Rafal Korytkowski <notifications@github.com

> wrote:
> 
> In api/src/main/java/org/openmrs/annotation/OpenmrsProfile.java:
> 
> > +import java.lang.annotation.ElementType;
> > +import java.lang.annotation.Inherited;
> > +import java.lang.annotation.Retention;
> > +import java.lang.annotation.RetentionPolicy;
> > +import java.lang.annotation.Target;
> > +
> > +/**
> > - \* Placed on beans which should be loaded conditionally based on OpenMRS version or started modules.
> > - */
> >   +@Target( { ElementType.TYPE })
> >   +@Retention(RetentionPolicy.RUNTIME)
> >   +@Inherited
> >   +@Documented
> >   +public @interface OpenmrsProfile {
> > -   
> > -   public String openmrsVersion() default "";
> 
> We could add here modules as well.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/499/files#r8932745
> .

I think this should be:
<b>Creates a discontinuation order for this order, sets the previousOrder and action fields, note that the discontinuation order needs to be saved for the discontinuation to take effect</b>

Add a unit test to guarantee this behavior

I don't think we want to do this, does this ticket say we do this?

We need unit tests for this

We also need unit tests for this

Oh, sorry i see that some one added this to the ticket as a desired behavior

Shouldn't this return the saved order?

Add some javadocs saying what this method does

Present in OrderTest. 

Following tests present in OrderServiceTest for this method. 
discontinueOrderWithNonCodedReason_shouldPopulateCorrectAttributesOnBothOrders()
discontinueOrderWithConcept_shouldPopulateCorrectAttributesOnBothOrders()
discontinueOrderWithNonCodedReason_shouldFailWhenItIsADiscontinueOrder()
discontinueOrderWithConcept_shouldFailWhenItIsADiscontinueOrder()

Following tests present in OrderServiceTest for this method. 
discontinueOrderWithNonCodedReason_shouldPopulateCorrectAttributesOnBothOrders()
discontinueOrderWithConcept_shouldPopulateCorrectAttributesOnBothOrders()
discontinueOrderWithNonCodedReason_shouldFailWhenItIsADiscontinueOrder()
discontinueOrderWithConcept_shouldFailWhenItIsADiscontinueOrder()

And you will need unit tests for all the logic in that method

I dont think the care setting and order class matter, so i would not filter on them

This is not exactly correct, i see that here you are just overwriting the same previous order field as you go through loop meaning, the last one will win as the previous order. What you need to do is to actually discontinue each of these orders first meaning each will have its own discontinuation order. It also implies that if you have multiple matches, you will need to use getOrderHistoryByConcept so that the most recent active one is what actually becomes the previousOrder for this discontinuation order

The order class is mandatory for HibernateOrderDAO.getActiveOrders(...) since we create the criteria out of it. 
Looking at the comments on the ticket, and based on design discussions that I was part of, I was assuming there should be only one active order per orderable (which I assumed to be specific per care setting, since we should not discontinue an order that has been ordered as part of a different care setting). Is this not the case? 

The assumption is that there will always be just one active order per orderable. Therefore, for a given order, care setting and concept that is being discontinued, we cannot have more than one active order. The moment I get a matching active order, the loop breaks. 
Now, if there are multiple active orders for a given concept and care setting, that is an error condition. I am not catching this condition here. Should we do that and throw an exception for this scenario? 

can you just leave it as <b>Could not find....</b>

See https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin for how to write unit tests in openmrs.
What IDE do you use? If intelliJ let me know so that i can email you the plugin's jar file.

I think these two could have been tested in a single test method, just add the assertion for action to the test above

Oh i see you added the tests, can you please add the @should annotations and generate the test methods with the https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin

Ok, I guess if you find multiple, you can throw an exception

ok

Looks like you are returning the discontinuation order, i think you should still return the discontinued order, not so @djazayeri ?

Aren't you supposed to test if the previousOrder field has been set

How different is this test from the one above?

Oh, i think i have seen the difference, here you are calling another method that takes in a concept as reason

Add some 'control' assertions here that check that actually order with id 111 is active before you save the DC order

I think we should return the newly-created discontinuation order, because:
1. the actual order being placed by this method is the DC order, so we should return it
2. otherwise the caller has no easy way to get the DC order (since it is created as a side-effect)

Our XyzService.saveXyz methods all return the same thing you pass in (after saving it) but this isn't a saveXyz.

I don't like giving this method the same overloaded name "discontinueOrder" as the public one that calls it.

I think this should only happen for existing orders

meaning you should also have an assertion that checks that it it not yet discontinued here

you also need to check that it is an existing order, because this wont apply to a new order

class_id is 0? 

why does this have to be a numeric concept,  thought you are just using it as a discontinue reason concept

Why do you have to include this test data for reason concept? Is it required for this test?

Ok, i think this is ok @vinayvenu 

Shouldn't this code be inside setCreatorAndDateCreatedIfNull? Then it is from inside there that you check if it is a person object

Shouldn't this be if instance of Person? by the way we prefer to use class.isAssignableFrom instead of instanceof

you also need to check that it is not expired

You didn't address this comment

Never mind

you need to ensure that the date is not null

You didn't need to add this as a separate test method, you could have added the assertion just to the test above

same here, this should have been in one test and just ensure that the care setting is set

You need a check here that this order is active

Would be nice to add an assertion here to ensure that this is an already discontinued order

same for this

Add an assertion here that this order is not yet discontinued

You need to only import the class you need

should be 1.10

Improve these javadocs, start with uppercase letter, something like this:
Fetches all drugs with reference mappings to the specified concept source that match the specified code and concept map types

should be 1.10

I think you should typically have one DAO method that returns multiple and then let the code in the ConceptServiceImpl filter out and return a single drug

Having a single DAO method will avoid code duplication in both methods

What is this for?

Ah! i get it, ignore the comment above

You need to check that source is not null

If not in the ServiceIMpl reject null code or source, we need to require the code and conceptSource

This duplicates the code in the method above and that is why i was suggesting to have one DAO method

Remember what the javadocs and ticket said? Find the best match on the first concept map type in the list that has a match.

This should call getDrugsByMapping and inspect the results to find one best match if multiple are found for the first map type

I assume you borrowed this from the code for fetching concepts by mapping and i think we can differ from it here by making Drug the root entity here for more clarity and just join to the DrugReferenceMap

I don't think this is correct, can you please add unit tests to show that this code is correct? I.e. you can find a drug given a code, source and map types

if drug is the root entity, then you don't need this line

should't this be drugReferenceMaps? i.e the property name

The withAnyOfTheseTypesOrOrderOfPreference parameter is never used in this method, probably you should remove it

This comment is no longer necessary here since you moved the restriction to the utility method

Actually after looking at this, before you return null, you need to first execute the same logic as lines 2062-2076

You need to check if withAnyOfTheseTypesOrOrderOfPreference is not null otherwise you will get a NullPointerException on this line

you need to check that code is not null

same here, null is not accepted, you need o check if source is not null, otherwise the generated query will be: 
...... AND conceptSource IS NULL:
which is not what we want

You need to check if withAnyOfTheseTypes is not null

should be:
return empty list if no matches are found

i think this should be:
 should return a drug that matches the best map type

It is because you already have a test that checks the restriction on concept source

This is not a good test, add some test data where you get back some matches

same here

same here

Looks like you didn't use the plugin to generate these test methods

same here

same here

same here

Please remove this extra blank lines

This test is wrong, check that the expected exception gets thrown using the expected attribute of the @Test annotation

Load the concept source by calling ConceptService.getConceptSource(2) instead of new ConceptSource

You don't need to load a concept reference term for this test, just pass in the code directly as text

Can you add a unit test to Database1_9To1_10UpgradeTest to ensure that this works as expected

shouldn't this be a select distinct?

Use CURRENT_TIMESTAMP instead of now()

Why do you have select(select(..))? Shouldn't it be select(...)

identifier should be CONCAT('prov', SUBSTRING(person.uuid, 5))

@wluyima : i have checked whether i could see any documentation inform of parhaps wiki pages about; "unit testing for our changesets" and i didn't get one, it looks to me like this is still under development as can be seen @{https://tickets.openmrs.org/browse/TRUNK-4052}, in case am not right in this manner, then i request to be directed to that way in which i can have my changeset tested according to openmrs standards

See Database1_9To1_10UpgradeTest.java and add your tests to it

here am using an INSERT INTO SELECT statement, and that is its syntax, but i welcome any better needed adjustments

am challenged to write a changeset that; shouldMigrateDataInOrdererColumnToBeProviderIdsInsteadOfUserIds, since am not sure of which way to use in order to run my changeset inside the testcase to update the datasets available within openmrs now that this is under development

Look at the tests in that class, yours will be very similar

This columnExists is not necessary

This where clause is incorrect, it should be on orderer.person_id because remember orders is a user_id and not person_id since you are doing a select person_id from provider, makes sense?

am not sure if i got you very well, however allow me to post the sql query here so that we can go over it again;

INSERT INTO provider(person_id, identifier, creator, date_created, retired, uuid)
    SELECT u.person_id, CONCAT('prov', SUBSTRING(p.uuid, 5)) , 1, CURRENT_TIMESTAMP , false, UUID()
FROM person as p
INNER JOIN orders AS o ON o.orderer = p.person_id
JOIN users u ON o.orderer = u.user_id
WHERE u.person_id NOT IN (SELECT DISTINCT person_id FROM provider)

In this new query the WHERE clause is correct but the JOIN is still incorrect, orders.orderer is a fk to users.user_id and not a person_id so that JOIN is wrong.
My suggestion is your SELECT after INSERT INTO should select from users table since the users table holds the person_id so you can get it from there which would make the JOIN be on orders.orderer and users.user_id @djazayeri i would prefer to use users.username or users.system_id as the newly created provider's unqiue identifier, what do you think?

And one more thing, provider.retired should be set to the value of users.retired so that in case the user that created an order had an account that was retired even their created provider account should be retired, @djazayeri i recall we did the same for encounter provider in 1.9, right?

i have modified the above query again according to wyclif's comments, and it looks like;

INSERT INTO provider(person_id, identifier, creator, date_created, retired, uuid)
SELECT u.person_id, u.system_id , 1, CURRENT_TIMESTAMP , u.retired, UUID()
FROM users AS u
JOIN orders AS o ON o.orderer = u.user_id
WHERE u.person_id NOT IN (SELECT DISTINCT person_id FROM provider)

Does this achieve what we expect @wluyima  and @djazayeri ?

Much better! Please do make sure the unit test i added is passing.
I think the creator column should be the user_id of daemon user.
@djazayeri can you vote on if provider.identifier should be set to user.username or user.system_id instead of using a substring of the person record's uuid

Why did you remove this test, i will add it back

You forgot to fix this, i will fix it

Why comment out this?

why comment out?

why comment out?

This is a duplicate drug_reference_map, it duplicates the first one, will remove it

You don't need this test since the one above already tests that you get back non retired ones, probably should have had one that checks that you get back retired ones if set to true

I see why you are commenting out this, it is because your query is not exactly correct, it is returning duplicate drugs because of two reasons i.e. one being you have a duplicate mapping and secondly you are not telling hibernate in the criteria to return unique matches in case of duplicates

Therefore your assertion on line 2549 should check that the size is 1 because it is matching only drug with id 2 but it is appearing twice in the results

After thinking about this well, this loop will lead to an undesirable behavior where hibernate will generate several AND clauses for each map type in the loop which will mean if you have no match on the first map type, then you will never get any matches at all on subsequent map types in the list since the generated query will just have an extra and clause added to it, makes sense? The logic needs to rebuild/reset the criteria object to get rid of the previous restrictions added for the map type we just looped past. 

Am confused as to why this code is here, this pull request contains code for core and rest module, can you please separate them and use a different branch for each ticket especially if the tickets belong to different projects

This will need an includeRetired argument

This should be the new REVISE order not the order you are revising

should not allow revising a DC order (one where action=DISCONTINUE)

would be nice to add a test to ensure this

You need to be testing saveRevisedOrder

The API already assigns a uuid to an OpenmrsObject on construction

What is this method used for, why don't you just pass in a new Order object

Don't set id, i thought the DB does that

Wouldn't be better to put this just before the call to saveRevisedOrde rmethod since it is what you expect to throw it

This GP was moved to standardTestDataset.xml file so you no longer need to do this

same here, you don't need this GP

Why do you need to include this? Can't you revise any of the active orders that come with the core test dataset?

This should say the revised order

Add a test to ensure that the order we are revising and the previous are not DC orders

These javadocs seem incorrect, by the way i think you can call markAsDiscontinued instead of adding this method

Remove this and call markAsDiscontinued, i think i will rename it to markAsStopped to be clearer

You need to make sure the revisedOrder has the correct action of REVISE

After looking at this logic, am starting to think we don't need this method, we can just use saveOrder so that it does the correct thing when the action == REVISE

Why don't you just compare the date objects directly?

Change of mind, I think it is okay to copy the startDate from this order because from the user's perspective it should seem like the original order that started on the same date with only the changes fields in the UI, not so @djazayeri?

This needs to come just before you call save

Add an assertion here to ensure that this order is inactive

Move this to just before you call save

You need to remove this GP

Same for this, remove the GP

Ignore this comment, startDate for the new revised order should be different

Perhaps it's appropriate to just use placeOrder here. I.e. you can do placeOrder for a New, Revise, or DC order.

After the discussion with had about getting rid of saveOrder, i had decided not to add placeOrder since it would require other changes to be made related to AOP

Okay, let's discuss what the API looks like somewhere other than in github
comments. :-)

On Wed, Feb 12, 2014 at 1:12 PM, wluyima notifications@github.com wrote:

> In api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java:
> 
> > @@ -80,6 +80,36 @@ public Order saveOrder(Order order) throws APIException {
> >         return saveOrderInternal(order);
> >     }
> > -   /**
> > -    \* @see org.openmrs.api.OrderService#saveRevisedOrder(org.openmrs.Order)
> > -    */
> > -   public Order saveRevisedOrder(Order revisedOrder) throws APIException {
> 
> After the discussion with had about getting rid of saveOrder, i had
> decided not to add placeOrder since it would require other changes to be
> made related to AOP
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/630/files#r9686139
> .

done

Created a separate branch and a separate pull request for this.

https://github.com/openmrs/openmrs-core/pull/638

done

Why is this in this pull request, this ticket says revise order, fetching order frequencies is a separate task if its own that belongs to another ticket that  revising an order doesn't depend on

And you will need to add a test that ensures the boolean property works as expected depending on the passed in value

Cool, the new pull request is very clean

Next time use the behavior openmrs test generator plugin for your IDE to generate these tests see https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin

I will fix this 

You could have added these directly to standardTestDataset.xml file

There is already a changeset to handle this see https://tickets.openmrs.org/browse/TRUNK-4283
Don't include dbms

Did you update the javadocs to include the new @param for the new argument?

Same here, did you update the javadocs to include the new @param?

i added this changeset as a response to your comment on the ticket @wluyima that says; you need to add a changeset that should check that no order has a null encounter.
were you meaning this or something else, and if it was this then do i again need to address the changeset since it is requiring the same thing as does https://tickets.openmrs.org/browse/TRUNK-4283 ? 
for the case of dbms, i realised some tests were failing on upgrade and yet would pass when i included it, that's why i added it there, in case there's need for this changeset again then i can try removing it again and run mvn clean install and if passes, well and good, i remove it,

i have included it and will be in my next commit

Leave out the dbms.
I probably made the comment before TRUNK-4283, so you can remove it.

Missing @since 1.10

remove this wrong @since

remove this wrong @since

I would name this getClassObject or getJavaClassObject

Use OpenmrsClassLoader to load classes otherwise module classes won't be picked

i.e use Context.loadClass

I don't think we need this

You are still missing conceptClasses property

Can you split up these changesets into 2? One drops the foreign key constraint and the other drops the column, the reason for this is that in case teh key is dropped but dropping the column fails then the changeset can never be rerun after fixing the cause of the failure since the precondition would fail on subsequent reruns.

This is in a wrong file, should be in liquibase-update-to-latest.xml

How about? The start_date, encounter and orderer columns are required, please fix them for rows where they are null

Well, the file you have pointed out. I never changed it as I remember?? has
it been automatically changed?? when I do according to the way you have
asked me. would that work??

On Thu, Mar 6, 2014 at 7:25 AM, wluyima notifications@github.com wrote:

> In api/src/main/resources/liquibase-schema-only.xml:
> 
> > @@ -1837,6 +1837,14 @@
> >              <replace replace="CHAR(38)" with="UNIQUEIDENTIFIER NOT NULL DEFAULT NEWSEQUENTIALID()" />
> >          </modifySql>
> >      </changeSet>
> > +
> > -    <changeSet id="201401101644" author="Akshika">
> > -        <preConditions onFail="HALT" onFailMessage="You can not make StartDate,orderer or encounter NULL. please fill it">
> 
> How about? The start_date, encounter and orderer columns are required,
> please fix them for rows where they are null
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/705/files#r10328888
> .

## 

Akshika Wijesundara
Department of Computer Science & Engineering
University of Moratuwa
Sri Lanka,

I don't know why it is appearing in liquibsae-schema-only.xml

 <changeSet id="201401101644" author="Akshika">
     <preConditions onFail="HALT" onFailMessage="You can not make StartDate,orderer or encoI shoud move this to liquibase-update-to-lates.xml .right?

Previously hard-coded message removed

This is not right because the provider who prescribed the order is not always going to be the same person to discontinue it, so don't copy this field

same here, don't copy orderer

same here, don't copy orderer

same here, don't copy orderer

This is incorrect, you don't have to add this to the if clause

Fix those tests by making them behave as expected. :)
The formatting here is still incorrect. You need to run mvn clean install before committing as advised at https://wiki.openmrs.org/display/docs/Pull+Request+Tips
Why do you catch this null pointer exception? Which value is null to result into this?
You will also need to run mvn clean install before committing such that it auto formats the source.
@piyush9620 are you still working on this?
Does the exception message reflect the new business logic?
Something like voidOrdersForType or anything else along those lines would make this method more meaningful.
Did you get a chance to look at the actual text that this code represents in the messages.properties file? :)
I would be in favour of a new message code that is descriptive enough to reflect the message. For message properties files, if you do not know the equivalent text in other languages, then you do not need to touch their message properties files.
Why not just use this? new APIException(String messageKey, Object[] parameters) 
I would expect the error message to also reflect the second condition under which you are throwing the exception. The same applies to the message key.
Let me ask it this way, would the merge fail if two patients simply have active orders?
Does the messages.properties changes reflect that? :) 
I think i now see same type reflected in the third parameter. :)
How about? Patient.merge.sameTypeActiveOrders
Yes that makes perfect sense! I have just noticed that the third parameter takes care of the order type. :)
How about cannotHaveSameTypeActiveOrders? :)
Error while trying to read file or while trying to probe content type?
What does the above sentence mean?
Did you intentionally duplicate these lines?
The test for identifier type restrictions means test if given identifier types return the expected results. You can look at the restriction here: https://github.com/hilz041/openmrs-core/blob/8ff4b3763ac8c98913e3d16c3b2b60a3e1549ebd/api/src/main/java/org/openmrs/api/db/hibernate/PatientSearchCriteria.java#L318
Are you sure we cannot have patients who are less than one year? :)
Is this change also about mime type? Or is it dealing with something else?
The one above and below my comment.
@tmarzeion am a bit confused by this change because it seems to do more than i would expect. For instance, can you throw some more light as to why you removed the while loop?
Why all these many lines?
Are you sure getConcept was replaced with getName and getDescription?
Am asking in reference to your deprecated comment.
Why don't you declare and assign these two before the above if check? That way you can reuse them even in the if check.
The above code will be clearer if you use Date.before() or Date.after()
Can you put a comment here explaining what you are trying to do in the next two lines below?
Or simply wrap it in a self descriptive method name?
What happens if the names contain more than one space?
Isn't obs.getObsId() already tested on the previous line?
We discourage wild card imports as per https://wiki.openmrs.org/display/docs/Coding+Conventions
What does check_patient() mean?
What is this space used for?
Like which other one?
yup
Am please very sorry to make you go back and forth regarding this. But am just careful not to accidentally break existing code. I would prefer the refactoring to be a separate pull request from this whose purpose is to add mime type. My thinking is that the code would not have to change this much for just the mime type addition. I would expect the mime type generated and then this line modified to include it: https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/obs/handler/AbstractHandler.java#L96
I also noticed that Files.probeContentType(file.toPath()) always returns null for the mime type.
Did you notice it too?
Since you already have the patient variable, do you think you need to again call visit.getPatient()?
Did you see Darius's comment about using OpenmrsUtil to compare these dates?
What is the above line trying to accomplish? Can you put a comment or wrap it in a self descriptive method name?
What happens for years with 366 days?
How about a unit test? :)
Do you mind explaining a bit why this changed necessitated a switch from 1 to 2 for provider id?
I though the ticket changes would not require modifications in this test. Not so?
Can you also share some light on why the above assertion was removed?
The above formatting (TAB) does not look correct. Could you also explain why you changed from 3 to 7?
patient or patients?
patientIdentifierTypes and patient? or just patientIdentifierTypes?
We have not been doing so. :)
unretire or unvoid?
Did you just accidentally remove the above assertion?
This is problematic because you are changing the expected behaviour. The assertion ensured that the retire reason should of an expected text, which is different from ensuring that it is null.
Can you do like for the original code which had space between the if statement and (?
Edit this and squash. Did you get a chance to look at https://wiki.openmrs.org/display/docs/Pull+Request+Tips
What is this method doing?
And why does it return an obs?
Did you intentionally remove these methods?
Did you intentionally remove these methods?
Can't you make the change to ensure that the existing test passes as it was?
A public service layer method mentioning dao does not sound very nice. 😊 
How about just changing purgeComplexData() to return true if the complex obs is just not found. But always return false if something else went wrong (Failure to actually delete an existing complex obs, e.g due to permissions, etc)
Will windows clients have forward or backward slash?
How do you compare this method with OpenmrsUtil.getFileMimeType(file)?
Could you remind me about the use of the slashes at the end?
Same with the slashes here.
Do you mean a way to remove the slashes at the end?
Did you try out the eclipse formatter on this page? https://wiki.openmrs.org/display/docs/Coding+Conventions
I use Eclipse!
Did you intentionally make this test different from the one for master?
Can you explain what exactly is being accomplished by this last else if? 😊 
Did you get a chance to investigate?
Can we add a since annotation to the above?
Since this is changing the signature of a public method, shouldn't we follow the guidelines at? https://wiki.openmrs.org/display/docs/Java+Conventions#JavaConventions-Deprecation
Since it was not used, i do not think any module is using it for any meaningful work. And even if any module used it, it would just remove its usage without any effects, in terms of backwards compatibility.
So no need for deprecation. 😊 
Same response as above.
What does seenIt mean?
Can we add some javadoc descriptions to these new methods?
Could we assign the new array list to a local variable with a name documenting what it is?
Did you remember to add this annotation?
If the validation exception is not thrown, will these assertions ever get executed?
If the validation exception is not thrown, will these assertions ever get executed?
If you are not sure whether it will happen or not, then for now, you can start simple by assuming it will not happen. 😊 
@teleivo the codacy question over to you. ☺️ 
The method name seems to suggest removing obs that have (with) group members.
Wouldn't removeObsAndGroupMembers be less confusing?
Same as above regarding the method name.
Shouldn't we have "that" between "obs" and "need"?
Shouldn't we have "that" between "obs" and "need"?
2.2
Could you remind me as to why we instantiate a new collection on the line above?
Could you remind me as to why we instantiate a new collection on the line above?
Will the assertions below ever get executed if the validation exception is not thrown?
Will the assertions below ever get executed if the validation exception is not thrown?
Can't you just change the method signature from List to Collection?
I would like to comment after @lluismf has done so. 😊 
Did you intentionally replace "Some Retire Reason" with null?
Could you explain why order frequency id 3 required replacing with 103?
Did you forget to fix the tabbing?
So what made it pass (not fail) before your changes?
I prefer we stay with this rather undeprecating createUser, by convention we replaced createXXX methods with saveXXX so this is going backwards, i believe we just need to well document both saveUser method about what they do.

Add @since 1.10 or @since 1.10 and added to 1.9.4 if we are to back port it to 1.9.x line

same here, add @since 1.10

You don't need this in the DAO, dao should remain with a single saveuser(User, String) and act according to if password is null or not, so remove createUser and saveUser(User)

As mentioned above, retain only saveUser(User, String) and appropriate logic depending on if password is null or not

You will to add some unit tests if they are none for these methods to test the new behavior

won't this bomb if the logged in user is not a super user? You might some unit tests if none exist

I guess not, looks like the javadoc on UserService.changePassword is deceptive that it is Restricted to Super User access

I think you might need to logout this user and relogin admin otherwise the next series of tests will be run as this new authenticated user, did you try running the entire openmrs test suite after these changes to ensure nothing is broken?

Why would the old password be null in the first place, this seems like an invented scenario

I think the code throwing this exception should throw a more specific exception like APIAuthenticationException

May be am getting this wrong, do you mean the parameter value for oldPassword passed in to the method being null? If yes, then it is fine

i think there is a more WeakPasswordException that is thrown

' void changePassword(User, String oldPassword, String newPassword); // oldPassword is allowed to be null if you have a change-other-password privilege, otherwise is required'
This is in the first comment added by Darius
https://tickets.openmrs.org/browse/TRUNK-3871

Yes, I did.

So method should be invoked by Super User access??
Then @Authorized( { PrivilegeConstants.EDIT_USER_PASSWORDS }) is not sufficent ?

Did you really need to add this? you can create a new instance of the order and use that in the test

i think you are missing an @should here for the second test, and typically these should be atleast 3 tests, one for true, another for false and another where it is a sub type

You won't need this change if you don't insert new orders in the test dataset

same here

and here

and here

missing at @since

do we really want to make this public?

I have made it private again. Will commit soon

@wluyima 
I'm not sure how to approach this. The mergeColumns (http://www.liquibase.org/documentation/changes/merge_columns.html) also drops the old ones

Use the modifySql tag to have varying sql for supported DBs i.e. mysql, oracle, postgresql, sqlserver, db2, if the unit test fail, you might want to include one for h2 to make it pass

One of the preconditions for the changeset that sets the values should check that they have rows with a doseStrength value but no units

Would be nice to ensure we have rows where both strength and units were null before upgrade

You need to check for the other 2 also

I think try using mergeColumns and see how that works

And it fine to drop the columns, i have updated the ticket description that the old columns need to be dropped, so if mergeColumns does that, then it is absolutely fine

@wluyima 
After dropping the columns drug list throws an exception (Unknown column 'this_.dose_strength' in 'field list') and removing them from hibernate causes multiple tests to fail

Did you update Order.hbm file and when do you get <b>Unknown column 'this_.dose_strength' in 'field list'</b>? Is it when running a query, if yes, it is because you have not yet update the hbm file

This might be a good place to promote a convention of naming a branch based on the work being done – e.g.,

```
git checkout -b TRUNK-4567
```

> Follow the Coding Conventions described at: [https://wiki.openmrs.org/x/MxEz](https://wiki.openmrs.org/x/MxEz).

could be simplified to:

> Follow our [Coding Conventions](https://wiki.openmrs.org/x/MxEz).

Actually, I think best practice, as described on our [Using Git](https://wiki.openmrs.org/x/KQQdAg) page, is to first fork the OpenMRS repo on GitHub (to your own account) and then clone your own repo, so "origin" refers to your own fork of the repo.

Forking should be the first step (prior to cloning), making this step unnecessary.

I thought the common practice was to refer to your fork as "origin" and the original repo as "upstream".  According to [instructions on our wiki](https://wiki.openmrs.org/x/KQQdAg#highlighter_517810), references to "origin" would be used instead of "mine" and references to the original repo (e.g., to pull down new changes) would be "upstream", set up with this line:

```
git remote add upstream https://github.com/openmrs/openmrs-core.git
```

A brief "Getting Started" section that points people to our [getting started wiki page](https://wiki.openmrs.org/x/MQAJ) would be nice here.

Would be best to have this as null?

We expect that units must be specified where doseStrength is provided, so it would be nice to have a changeset that halts the upgrade is there any rows with doseStrength but no units

If doseStrength and units are both null, then the strength column should also be null

The reason we make it possible to inject more data in a test method is to avoid adding more to the standard dataset which results in editing several existing tests like in this case, personally i  only add extra data to standard test data if i know there is about 1-5 affected existing tests methods or if it's a new column or table. 

You won't need this once you reject null startDate above

I think if a field has a value and has an associated units columns, then we need to require the units e.g whenever quantity is set, quantity units gets required

Are you using https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin
I see that this annotation has no matching test method and there are test methods with no matching @shoulds here 

Did you address the comment above?

You could use one of the existing care settings in the test dataset

This is the default and is set automatically by the constructor

shouldn't this be doseUnits? :)

This seems redundant, I would assume this is already null since it has no default value

This seems redundant, I would assume this is already null since it has no default value

this is not necessary, since it has no default value

This is already null by default

Actually the concept with id 88 in the test dataset is a drug and not a test, so this should be Drug Order type

Please move this concept to another file, i think OrderEntryIntegrationTest-other.xml is a good fit and load the file either in the @Before method of the test classes where you need to use it, this way you won't to have several other broken tests because of this new concept

- An encounter for patient with id 2 was already added via org/openmrs/api/include/OrderServiceTest-otherEncounters.xml, you need to update your local repo. If you need more encounters, add them to that file instead of here
- These are encounter are missing the patient_id column value
- I would add the new encounters to OrderEntryIntegrationTest-other.xml to avoid touching existing unit tests

Just being explicit in the test, instead of assuming implicitly it being null.

Just being explicit in the test, instead of assuming implicitly it being null.

Just being explicit in the test, instead of assuming implicitly it being null.

Just being explicit in the test, instead of assuming implicitly it being null.

What is the use of adding this? You can add it from the module's test data

This is the dataset which is used by module's tests. I thought that it's better approach than adding additional file with just a single data entity. Moreover, it can come in handy with other 1.10.x tests using this dataset. 
Actually, every order_type and concept_class should be linked like that according to the latest changes

That's not correct, not every order type has to be linked and we intentionally left order_type 1 unlinked

Looks like you missed durationUnits when duration is done

I would have returned here if errors is not empty  so that i don't have to make null checks for these fields later

Returning from here was breaking too many test cases.  So left it as it was.

Why do visits have to do with this?

What does this have to do with orders?

I think those changes were required when I added new data in standard test
data setup xml file. Now that I removed those new data in the setup, these
are not required.

On Wed, Mar 26, 2014 at 9:00 AM, wluyima notifications@github.com wrote:

> In
> api/src/test/java/org/openmrs/api/handler/ExistingVisitAssignmentHandlerTest.java:
> 
> > @@ -86,13 +87,15 @@ public void beforeCreateEncounter_shouldNotAssignVisitIfNoMatchFound() throws Ex
> >     @Verifies(value = "should not assign visit which stopped before encounter date", method = "beforeCreateEncounter(Encounter)")
> >     public void beforeCreateEncounter_shouldNotAssignVisitWhichStoppedBeforeEncounterDate() throws Exception {
> >         Encounter encounter = Context.getEncounterService().getEncounter(1);
> > -       encounter.setEncounterDatetime(new Date());
> > -       Context.getEncounterService().saveEncounter(encounter);
> 
> What does this have to do with orders?
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/openmrs/openmrs-core/pull/774/files#r10963320
> .

I already fixed this

This needs to be the other way round, the type of the order should match or be a subclass of orderType.getJavaClass()

Please next time try to use https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin, i will fix it

This test is incorrect, the way it is written it should fail because the order type says Drug Order but the instance is of type Order, this relates to the comment where you have to switch things when comparing the types

@djazayeri , @bmamlin i was suggesting that the order below should be rejected:

Order order = new Order();
//where orderType.javaClassName is DrugOrder.class.name
order.setOrderType(OrderService.getOrderTypeByName("Drug order"));

This plugin does not work on IntelliJ community edition 13. So had to uninstall it. Should "@should" statement match both "@verifies value" and test method name?

Ok, i will continue using my 12.x.x version

**It's a bug.** You loose what you put in the cache after each loop.

Why don't you just call runtimeProperties.putAll(cache)?

Not needed. Use runtimeProperties.putAll(cache) instead.

@rkorytkowski , @dkayiwa ,This is a mistake :) . Creating the new cache should come before the for loop begins. I have copy and pasted it to the wrong place. 

@rkorytkowski , yes i can use that. I added that in the new pull req. I was not familiar with this method earlier. 

This is an actual test. We tell Hibernate to do the validation while building session factory.

I intend to split this into multiple changesets once I'm done with fixing all errors.

Are these columns missing or your correcting names and datatypes

I would say anything that doesn't related to orders should not be go into 1.10 only, we will need a ticket to fix these in master and just back port them to 1.9 and 1.10

Do things fail if you don't make this change?

In theory, anything that is not related to orders like this should have been fixed in master and just back ported to 1.10, if this doesn't break things i would even say don't back port it to 1.9 and 1.10

This was named just wrongly in the changeset that adds the care_setting table, it is named retired_reason in the liquibase file and retire_reason in the hbm file, we need to fix the liquibase file

Same here, just update the hbm file to name it concept_map_type instead, the column exists as concept_map_type in the liquibase file

You might need to fix the existing constraint instead of adding a new one here

Be very careful when using this column tag, there attributes on the property tag that hibernate ends up ignoring, e.g if you add the column tab, the not-null value gets ignored and we lose DB indepencen with sql-type attribute, i found this https://jira.sakaiproject.org/browse/SAK-4557, it is worth reading what others say, we might introduce some bugs

Yes, it doesn't pass Hibernate validation, because java.lang.String is mapped to varchar in Hibernate whereas we use char for uuids.

Hmmm I'll have a look and see if we can go around this issue in a different way.

@wluyima @djazayeri Do we still need these mappings if we don't create corresponding tables in core?

I'm pretty sure these classes have been deprecated for a long time. We should remove them, and also the mappings.

I think these other changes need to be in a pull request merging into master and we just back port them to 1.9 and 1.10. In theory lets make this validation as a fix in master

This is not necessary since this changeset is yet in production

I think this field exists as answer_id, you just need to update the hbm file to have it as answer_id instead of concept_id

I could remove that but we will have to fix devtest01, devtest02 DBs, which is a pain...

That is easy for me, i can take care of it

This change is unnecessary, datatype is required, i would rather leave it the way it was before so that atleast a NullPointerException is thrown

This won't pass, the logic in OrderServiceImpl.saveOrder will reject an order where the patient field has been changed, did you update your local repo and run all unit tests to ensure that everything still passes?

Good catch!

I've just updated my repo and all the tests are passing

Actually this is fine, i have just noticed this is a new order getting saved

Isn't "What city were you born in?" correct English?

@rkorytkowski Yes. I will make the necessary changes and update this pr. Thanks.

You must not use any local variables in a controller due to concurrency issues.

If I understand this right it won't work. Remember that a controller may be accessed by multiple users at a time.

@rkorytkowski Thanks for pointing this out. I didn't consider this use case. I will do it by the way that you have suggested.

@rkorytkowski okay got it. Thanks.

Test commented after taking permission from @dkayiwa in this comment - https://github.com/openmrs/openmrs-core/pull/800#issuecomment-38204958

Test commented after taking permission from @dkayiwa in this comment - #800 (comment)

Would be nice to check that the previous value is not the same otherwise it could be already this same value

Just change it in the original changseset that inserts the INPATIENT care_setting, don't add a new one?

Just update the changeset that inserts the care_setting table to add the constraint on the uuid column

Sure wyclif, I'll do that. I was not done it there previous because I was doubt that there can be a checksum error. Since this is seperate from core liquibase I assume that there won't be any problem then. 

To avoid the checksum error for an existing installation, in your DB first drop the care_setting table and the delete entries in the liquibasechangelog table where the id column values match the ones for the changesets you have edited, this is absolutely fine in development since we have not yet released 1.10, however you should never do it for a changeset that is in a released openmrs version since that would be already run in production

Thank you for further clarification wyclif. Now it's more clear for me. :). 

For dates i think we might want to first convert them to UTC before comparing then to take care of time zones

what does 'zz' stand for? :)

I would create it once instead of in each call. HashSet.contains feels faster from an array for 5 elements.

I don't feel it's an issue. previousState is created on the same server as currentState so time zones should be the same. Anyway it's worth writing a test if you can think of a use case when it may fail.

There is something strange about the ChainingInterceptor in core that knows about other interceptors and invokes them in alphabetical order of their bean id, so i want to want this to be the last just in the rare event where other interceptors are making changes but this is unlikely

Alternatively we could tweak chaining interceptor to always call this as the last

That's correct

That is correct but for an installation that has a hosted server instance, in the event of switching to a host in another timezone which is very likely here in the US where the timezone can change in just minutes if travelling, this would arise, i will try to see if i can write a unit test for this to reproduce it, but i normally realize this whenever i go outside the US or go to the US west coast, auditlog module tends to show that dates have changed because the time zone field has changed

Please make sure that we consider Sync in these scenarios, so that sync will capture all appropriate changes, and also will not record sync records if this interceptor throws an Exception.

This interceptor edits nothing, therefore no change should by pass sync and event module.
Sync saves records and Event module fires events from the afterTransactionCompletion() method which is of course called way after onFlushDirty() from where this interceptor throws the exception, so it will never be possible to have afterTransactionCompletion called for sync and event modules interceptors if an exception gets thrown here.

Maybe I'm not understanding it correctly, but I thought it's enough to have one filter called e.g. termFilter which takes 2 params term and value. Why do you need to declare all 6 filters if they use the same implementation?

The filter would get overridden with each method call

Do you mean the cache won't work? I'm reading the docs at http://docs.jboss.org/hibernate/search/3.2/reference/en/html/search-query.html#query-filter and it says: "Note the method annotated @Key returning a FilterKey object. The returned object has a special contract: the key object must implement equals() / hashCode() so that 2 keys are equal if and only if the given Filter types are the same and the set of parameters are the same. In other words, 2 filter keys are equal if and only if the filters from which the keys are generated can be interchanged. The key object is used as a key in the cache mechanism." so new filters are created only if parameters included in the key differ. Did you experience different behavior?

I'd rather we make it cleaner... let's have filter(String term, Object value) and filter(String term, Object[] values) so  that the if statement below is not needed.

Can't you simply make it setValues(Object[] values)? My point is to avoid instanceof List.

Looking at this I feel we should have 2 filters. One for inclusion and the other for exclusion. In other words instead of LuceneQuery.filter let's have LuceneQuery.include and LuceneQuery.exclude

The caching would still work, but each call to the fullTextQuery.enableFullTextFilter(filterName) with the same argument replaces the filter with given name, so if you called .filter("filterName", classesToInclude).filter("filterName", classesToExclude) only the second statement would take effect

I understand, thanks. Could we add a comment explaining that in code?

Actually, thinking longer we can call enableFullTextFilter just once and call setParameter("map", map) where map = new LinkedHashMap<String, Object[]>() is a map of fields and values. It has the additional advantage that  the final results will be cached instead of results for each filter alone.

Do you think it would work?

 .filter("concept.retired", false) needs to be added only if (!includeRetired). See above. You should not add filter("concept.retired", true) otherwise as it will return only retired concepts.

I take back having 2 separate filters. Do what's needed to have include and exclude on LuceneQuery. It'll be either one filter which takes a map of terms and values or multiple filters if that approach doesn't work.

It works

After splitting this method, the first definition is still used for lists. Shall i cast them to arrays in HibernateConceptDao.getConcepts()?

Sure, call toArray() on collections when needed. Actually does it make sense to pass here anything different than String or String[]? I feel like we can change Object to String.

Do not copy&paste the query from dao.getConcepts... Extract the query creation to a new method and use it in getConcepts and getCountOfConcepts

What is the plan for duration units? Are they among dispensing units?

Good question, i think they are still units of measure but we need to have a separate global property for them too, i believe the same same applies for quantityUnits

I think you are missing an @should here for returning the expected list if the GP is set

I would preferably name this method in a similar way for consistency, the others is of the form like the one for dosing units

Forgot to remove the changeset that adds Units Of Measurement concept class

Don't you need to add these GP to the props like on we are doing for GP_DRUG_ROUTE_CONCEPT_UUID below?

Have you seen below? https://github.com/openmrs/openmrs-core/pull/902/files#diff-7efe1c74929005aa8904f543f149c282L7273

So what should be the name? :) getDrugDispensingUnits?

Probably you can remove this message code from the message file

Oh, i have seen where you changed it

Sorry! seen the change

getDispensingUnits

This should happen after the if clause on line 113 below otherwise it will override the mapped order type if specified

Can you add an assertion here that ensures this concept is actually not mapped, you will use orderService.getOrderTypeByConcept and check that it is null

same here, add an assertion that ensures that this concept is not mapped to any order type

I don't understand. How is it going to override when the code does not assign an order type unless it is null?

I will add that.

This test ensures that while editing an existing provider an error is not displayed, because in this case both Provider Name and Person can be supplied

The earlier implementation asserted that no errors existed, but the Provider was setup such that both person and provider name were set. So I changed it to look for existence of errors which is the expected behavior. Maybe I can change the method name to shouldFailIfBothPersonAndNameSet() but it does the same thing.

I think you are missing some spacing in the error message, but don't worry i will fix it when merging the code.

It's good to include the link to the 1.10 upgrade documentation page in the on fail message, no worries though, i will fix it as i merge the code

This comment is not well phrased, how about?

Checking that all discontinued orders have the discontinued_date column set

Same here:
Checking that all discontinued orders have the discontinued_by column set 

Isn't this supposed to be VARCHAR?

Changed.

Why are you adding concepts to excluded fields? I believe because some test in DrugOrderTest is failing, right? If yes i believe the correct fix is to change the code in DrugOrder.copyHelper() to call setters instead of just assigning field values directly, otherwise the concept is not getting set since it is not calling setDrug().

Same thing here, concepts should not be among excludes fields technically

It's assertThatAllFieldsAreCopied that's broken. It doesn't create DrugOrder properly. It tries to do so using reflection, but it leaves Drug.concept as null. I'll remove that piece of code and create DrugOrder manually.

Why is access to drug changing to field too?

I would just return here an empty list if mappedClasses is null or empty

Have you used the https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin? You need to use @should annotations and use it to generate the test methods otherwise i think something might fail in OpenmrsTestsTest
If you can't set it up, i will fix the tests as i merge the code

Since calling method return a empty list if there is no match conceptClasses, it will automatically handled :). 

query -> queries

delegate -> delegates to

query -> get

the phrase that concept name match -> the phrase to match on

list of locales to search in concepts -> the list of locales to match on

This method name i think would be better as getOrderableConcepts

This test should be in ConceptServiceTest, i will move it

What i meant is if mappedClasses is empty or null it doesn't make sense to execute the next lines of code just return to avoid going to the DB un necessary because there will no results either way

I will fix it

You can just pass in null for start and length to start from 0 and fetch all, i will fix it

Should be class level as query parser uses class level analyzer...

word.trim();

Only phrase search should use eascapedPhrase

No need to use StringBuilder here anymore.

We should skip whitespaces.

Change to use LuceneQuery.exclude

Change to use newNamesQuery

Not used yet. It can be removed.

Needs to call Context.updateSearchIndexForObject

Needs javadoc.

Needs javadoc

Move to Before method

How are we dealing with this via Lucene? Do we delete concept from index?

The creation, update and deletion of a concept in the index is handled by Hibernate.

oh i see!

On Wed, Jul 16, 2014 at 1:07 PM, Rafal Korytkowski <notifications@github.com

> wrote:
> 
> In api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java:
> 
> > @@ -275,11 +284,6 @@ else if (concept instanceof ConceptComplex) {
> >      \* @see org.openmrs.api.db.ConceptDAO#purgeConcept(org.openmrs.Concept)
> >      */
> >     public void purgeConcept(Concept concept) throws DAOException {
> > -       // must delete all the stored concept words first
> > -       sessionFactory.getCurrentSession().createQuery("delete ConceptWord where concept = :c").setInteger("c",
> 
> The creation, update and deletion of a concept in the index is handled by
> Hibernate.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/958/files#r14988999.

## 

If we keep uppermost in our minds the unkind and unjust acts of others, we
shall find it impossible to love them as Christ has loved us; but if our
thoughts dwell upon the wondrous love and pity of Christ for us, the same
spirit will flow out to others.

Do we still need concept_stop_word?

Do we still need the ConceptStopWord?

Should we also drop the concept_stop_word table?

Did you intend to use "gets" instead of "sets"?

Yes, it's used to exclude stop words from a query.

Apparently the call to getApplicationDataDirectory() initializes OpenmrsConstants.APPLICATION_DATA_DIRECTORY...

Did you intend to make the value in OpenmrsConstants.APPLICATION_DATA_DIRECTORY override that of the system property?

Is this like a time stamp for when the index was last built? Or version of the search index API?

I'll refactor that to make it clear....

Good catch! Needs to be fixed.

Good check for concept != null
But that keeps me wondering about how we update concept index. Did we assume that concept ids are incremented by 1 from some value to a maximum? :)

Did you intend to call setDateChanged twice?

It's a version of the search index. If you change how the index is built e.g. add a new field to the index you must change the version so that the index is completely rebuilt.

Oh i see!

On Thu, Jul 17, 2014 at 3:28 PM, Rafal Korytkowski <notifications@github.com

> wrote:
> 
> In api/src/main/java/org/openmrs/util/OpenmrsConstants.java:
> 
> > @@ -1529,6 +1540,9 @@ public static String getOpenmrsProperty(String property) {
> >         props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_REQUIRE_EMAIL_AS_USERNAME, "false",
> >                 "Indicates whether a username must be a valid e-mail or not.", BooleanDatatype.class, null));
> > -       props.add(new GlobalProperty(GP_SEARCH_INDEX_VERSION, "",
> 
> It's a version of the search index. If you change how the index is built
> e.g. add a new field to the index you must change the version so that the
> index is completely rebuilt.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/958/files#r15053670.

## 

If we keep uppermost in our minds the unkind and unjust acts of others, we
shall find it impossible to love them as Christ has loved us; but if our
thoughts dwell upon the wondrous love and pity of Christ for us, the same
spirit will flow out to others.

This method should be deprecated... It's not needed anymore. It was used by the update concept words task, which is removed now. Hibernate handles keeping the lucene index in sync with the database and we only need to update the index explicitly if we do any changes to how entities are indexed or modify database directly without calling Hibernate.

Oh cool!

On Thu, Jul 17, 2014 at 3:38 PM, Rafal Korytkowski <notifications@github.com

> wrote:
> 
> In api/src/main/java/org/openmrs/api/impl/ConceptServiceImpl.java:
> 
> > ```
> >     Integer i = conceptIdStart;
> >     ConceptService cs = Context.getConceptService();
> >     while (i++ <= conceptIdEnd) {
> > ```
> > -           updateConceptWord(cs.getConcept(i));
> > -           Concept concept = cs.getConcept(i);
> 
> This method should be deprecated... It's not needed anymore. It was used
> by the update concept words task, which is removed now. Hibernate handles
> keeping the lucene index in sync with the database and we only need to
> update the index explicitly if we do any changes to how entities are
> indexed or modify database directly without calling Hibernate.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/958/files#r15054076.

## 

If we keep uppermost in our minds the unkind and unjust acts of others, we
shall find it impossible to love them as Christ has loved us; but if our
thoughts dwell upon the wondrous love and pity of Christ for us, the same
spirit will flow out to others.

No, I'll remove that.

Any reason for casting this to Number?

rowCount() returns at least Number, it can be Long or Integer... so we can't cast to Long if it's Integer and vice versa. Number.longValue is the safe option.

oh i see! :)

On Thu, Jul 17, 2014 at 4:07 PM, Rafal Korytkowski <notifications@github.com

> wrote:
> 
> In api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java:
> 
> > -       if (Context.getConceptService().isConceptNameSearchCaseSensitive()) {
> > -           criteria.add(Restrictions.ilike("name", name.getName()));
> > -       } else {
> > -           criteria.add(Restrictions.eq("name", name.getName()));
> > -       }
> > -   
> > -       criteria.add(Restrictions.or(Restrictions.eq("conceptNameType", ConceptNameType.FULLY_SPECIFIED), Restrictions.eq(
> > -           "localePreferred", true)));
> > -   
> > -       criteria.createAlias("concept", "concept");
> > -       criteria.add(Restrictions.eq("concept.retired", false));
> > -       if (name.getConcept() != null && name.getConcept().getConceptId() != null) {
> > -           criteria.add(Restrictions.ne("concept.conceptId", name.getConcept().getConceptId()));
> > -       }
> > -   
> > -       criteria.setProjection(Projections.rowCount());
> 
> rowCount() returns at least Number, it can be Long or Integer... so we
> can't cast to Long if it's Integer and vice versa. Number.longValue is the
> safe option.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/958/files#r15055499.

## 

If we keep uppermost in our minds the unkind and unjust acts of others, we
shall find it impossible to love them as Christ has loved us; but if our
thoughts dwell upon the wondrous love and pity of Christ for us, the same
spirit will flow out to others.

So this wasn't used anywhere in our code base?

I would leave this the way it is labelled in the UI i.e. 'Implementation Id'

Aren't you supposed to put this inside a c:if tag that checks that status.errorMessage != ''?

Would be nice to load the retired term here by its name and add an assertion that it is actually retired 

If you add @shoulds to a method, then try not to write these test methods manually, you need to use the test generator plugin at https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin otherwise OpenmrsTestsTest.shouldStartWithShould will fail like it is doing right now, i will clean it up

Sorry didn't know that. 

@wluyima,  just want to clarify, are you working on merging this to master?

I was merging this code to master on my local there were a couple of test failures. We need to change `quantity_units="51"` in `OrderServiceTest-drugOrdersWitSameConceptAndDifferentFormAndStrength.xml` to fix these tests.

These @should don't match the unit tests and logic in this method, i will clean it up as i merge the code

Am merging the code and making some changes to the unit tests, so don't worry about it

Don't use the javadoc format for simple comments... it should start with /*

And one-line comments should start with //

Honestly I don't know what ^ is supposed to mean. Please use the equivalent operator in the Java style.

The last two lines of this comment are inconsistent. autoExpireDate and dateStopped should both be "in the same direction" from asOfDate in these tests. Is this just a comment problem, or in the underlying code too?

Sure will correct. 

Sorry that's my bad it supposed to be "&&". Will correct. 

This is a comment issue. Will correct this.

Sure will correct. 

Probably the only change to this criteria object was to add a restriction that dateActivated is <= asOfDate, i will clean it up

I guess we no longer need this type field because we can use the java type, right @djazayeri and @bmamlin ?

You will need to compare class objects i.s order.getDosingTypeAsClass().equals(SimpleDosingInstructions.class)

same here

length should be 255

Why do we have a deprecated method here? Isn't everything about order entry backwards-incompatible between 1.9 and 1.10? Shouldn't we just remove this?

This method doesn't make sense anymore, since we have multiple possible dosing types, not just two.

Is there some reason that we don't have dosingType as a Class<? extends DosingInstructions> or something like that?

Agree, since we no longer need an enum or unique string token, because the fully-qualified classname is now that.

We left the domain objects backwards compatible but i do agree with you that it is pointless to do so when everything else isn't it.

I would assume it returns true for SimpleDosingInstructions and false for all the others

It should be simpler than OrderType.

Basically, _before_ we used to have the idea of DosingType that was an enum, and DosingInstructions that was a class which was 1:1 with the enum.

_Now_ we want to simplify, to only have the idea of the DosingInstructions interface, and not have any separate enum or static constant string names. A DrugOrder should have a "dosingType" property whose value in the database is the fully qualified java classname of the DosingInstructions subclass that should be used to interpret that DrugOrder. I think it's an implementation detail whether the DrugOrder.dosingType field has type String or Class<? extends DosingInstructions> (I lean towards Class)

This is a setter, which can no longer work right since its input is a boolean, but now there are multiple possible dosing types. I strongly suggest we remove this method (and the getter) so that anyone whose code is trying to use these fails early and loud, rather than having errors sneak through.

default should not have changed (so this should go back to simple)

I would probably call this getDosingInstructionsInstance(), and I don't think it should throw any checked exceptions. I.e. catch these and throw an IllegalStateException wrapping them.

I haven't looked at messages.properties, but this seems like an odd message code. (Other?)

We don't do wildcard imports in OpenMRS. Please change your IntelliJ settings for this, and re-do the imports.

Per my earlier comment, I don't think these exceptions should be checked here, but rather order.getDosingInstructionsObject() should catch them.

Again, no wildcard imports

I saw this in earlier comments too: why have we changed this to DOSING_TYPE_SIMPLE? Wouldn't it read more clearly as "...is null for SimpleDosingInstructions"?

The point of the @Verifies is that it refers to a corresponding @should in the class being tested. I don't see the corresponding @should for this. But let's rephrase this case to say "should apply validation for a custom dosing type" (i.e. requiring brandName is purely a test example, it's not something we want to be documenting)

These changes don't look right, since there is no constant anywhere called DOSING_TYPE_SIMPLE

Will change it back to Simple. But on of the previous pull requests Wycliff asked for it to be changed to FreeText that is why did it :) 
@wluyima 

Hmm.. i think i put the comment on the wrong line but the default is supposed to SimpleDosingInstructions

Done :+1: 

Made the changes and updated the pull request.

Do we want to make this assumption that all subclasses will have a no argument constructor?

Did you see the comment above about no argument constructors?

Yes. I cannot think of an alternative.

How about if we add to the DosingInstructions javadocs that a no argument constructor is required, or we add an initialize() method than can be overridden?

Added java-doc to the Dosing Instructions.

I think you need to get rid of the braces because i doubt if the test generator will like it, did it generate the test methods?

Shouldn't these really be separate tests? i.e one where date is before and the other when it is the same

rephrase this to: should return true if this order ends while the other order is active

Shouldn't what you are referring to as existing order be other order? I think call it other order in the @should docs

Same for new order, shouldn't you refer to it as this order?

In think you are missing 1 or 2 tests here which should go in the opposite direction i.e the orders need to switch sides in the tests in theory you should the following @shoulds:

1- return true if this order starts when the other order is active
2- return true if this order stops after the other order has already been activated
3- return true if the other order starts when this order is active
4- return true if the other order stops when this order has already been activated
5- return true if this order starts and stops while the other order is active
6- return true if the other order starts and stops while this order is active

Did you intentionally ignore the fact the one of the orders could be voided, a DC order, of a different orderable or care setting or patient.  I think it should return false if any differs. Or we assume the caller of this method had already ensured those other fields differ.

This would be the same as:
6- return true if the other order starts and stops while this order is active

How about care setting, action of DISCONTINUE and patient or if voided?

Why did you choose to add this concept to this file? This file is set up specifically for a certain test and assumes all drugs and drug_order are of the same concept but the data you are adding contradictory to it. You can either add another file or use an existing row in the test data set and tweak the dates within the same test method.

Could not run test generator for IntelliJ 13. It has an exception that says:
:57:43 PM PluginException: com/intellij/generatetestcases/ui/codeinsight/GenerateTestCasesConfigurable : Unsupported major.minor version 51.0 [Plugin: GenerateTestCases]: com/intellij/generatetestcases/ui/codeinsight/GenerateTestCasesConfigurable : Unsupported major.minor version 51.0 [Plugin: GenerateTestCases]

I have checked the cases and should statements manually.
Also made the same date tests separate.

Renamed the tests. 
Also, each test checks vice versa overlap. i.e. order1.hasOverlappingScheduleWith(order2) has the same result as order2.hasOverlappingScheduleWith(order1). These opposite assertions are made in all tests. Let me know if still something is amiss.

Done.

I have removed this method. 
- Only "hasOverlappingScheduleWith" remains that has the responsibility of just checking overlapping schedule on the basis of date.
- I should make changes to check if otherOrder is null and return false in that case.
- It doesn't care about caresetting as I am assuming it would be called to check overlap after fetching orders belonging to certain care setting (in conjunction with getActiveOrders that takes care of caresetting).
  About different order actions
- Should we take care of Discontinued and Revised orders separately? They set the stoppedDate (after discontinuing/revision) of the order which is the date logic compares against.

ok

I think it should be fine if one order ends on the date another starts, i don't think that would be an overlap since you could take the last pill of the old medication in the morning and start the new one in the evening of the same day. Not so @djazayeri ?

Does this test that both orders start and end on the same date?

I really wanted this method not to be on Order.java and instead just make a utility method in OrderServiceImpl so that you can ignore things like whether it is voided, same care setting etc. because it is going to be used in OrderServiceImpl and the code that calls it already has ensured these fields ate checked since it calls getActiveOrders(...)
Otherwise if it on Order then it has to check that all these conditions are met

I guess it is fine to leave method here to keep it testable, but i would make the javadocs clear that it compare dates only if you want to ignore things like voided, care setting, action etc.

3rd test does it- "@should return true if this order and other order have same dates". Same order is preserved in test file.
I have refactored statements of test cases a bit. Let me know if you find any problem in understanding scenarios.

i would name this isTaskAssociatedToModule(...)

I think the better option would be to check if the class was loaded from the module's class loader as below:

Context.loadClass(task.getTaskClass()).getClass().getClassLoader().equals(ModuleFactory.getClassLoader(module))

Otherwise, this can fail for modules where one module's id is a substring of another e.g org.openmrs.webservices and org.openmrs.webservices.rest19ext

Did you try using the @should with https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin to generate the tests?

Where is this used?

This allows many web applications to be run on the same instance of tomcat.

Looking at spring documentation at [Log4jWebConfigurer](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/Log4jWebConfigurer.html), the default behavior is to expose it, therefore it is useless to add this line unless you wanted to set its value to false.  Exposing it means that log4j can write to log files relative to the web app root. 

But there is a warning on that page that says:
Some containers (like Tomcat) do not keep system properties separate per web app. You have to use unique "webAppRootKey" context-params per web app then, to avoid clashes.

To me, this implies you also need to set the context-param **webAppRootKey** so that it differs for each webapp for this to work in tomcat, did you test out things well to ensure that logs are written to separate files for each web app?

The next line [39] set _log4jExposeWebAppRoot_ to false. That warning is what prevents deploying more that one web app in the same instance of tomcat. The workaround is to set _log4jExposeWebAppRoot_ to _false_ or provide each web app with a unique _webAppRootKey_. The only shortcoming of the first approach is that it eliminates the use of log file locations relative to the web application's root directory.

Sorry I hadn't seen the line below that sets it to false

I was looking at this and realized something strange, how can order1 have startDate after that of order2 but before the stop date of order 2 still? It would mean order2 must be having awkward dates where the stop date comes before its start date which wouldn't make sense.

I am quoting an example of the statement you have put. Let me know if unclear still.
                            Start Date            StopDate
Order1:               8/Aug/2014            11/Aug/2014
Order2:               5/Aug/2014              15/Aug/2014

But which part/comment you picked from the code is still unclear.

I later noticed it was fine after commenting, on line 86 i think i was reading it as order2 stop date, i guess it is fine 

If you use administrationService.getGlobalPropertyValue(String propertyName, T defaultValue), it would simplify the if clause on line 124 below

I don't think this test is concrete, can you add an assertion that the global property value is null or a blank string? It is only working just because you defined the default value as false in OpenmrsConstants.java

I guess this is fine but you can use:
Boolean requireDrug =  administrationService.getGlobalPropertyValue(String propertyName, Boolean.class)

So that you don't have to parse the  value manually on line 124 below

require -> required

Since you are calling ValidationUtils.rejectIfEmpty(..), you don't need the surrounding if clause

The order argument isn't used anywhere inside this method

I thought duration can be anything and not only days but i see here that it assumes it is in days

@djazayeri is time(s) always expressed as times in a day? i thought it could be times a month, weeks etc

If I prescribe something with a duration of "N times" that means you need to calculate the duration as something like N \* 1/frequency. I haven't looked closely at this line of code, but it's quite possibly doing the right thing.

E.g. if the frequency = twice per day, and duration = 5 times, then the auto expire will be:

```
start + 5 * (1 / (2/day))
start + 2.5 days
```

Since our frequency units define their coded frequency in terms of days, then it makes sense to me that the code is written in terms of days.

Verify the tests and trust their output. :-)

If you are not specifying a value, just leave out the column

Add a precondition to check that the concept source doesn't exist yet, there is conventions at https://wiki.openmrs.org/display/docs/Conventions, look under 'Datatypes and use of Liquibase'

Add each of these in a seperate changeset with a precondition that ensures it doesn't yet exist

You need a null check here and just return null immediately, you should not be calling addToDate with a null value

Since we are going to use a known uuid for referring to this concept source, the chances of some one else already creating this source would be zero. Precondition would be unnecessary here.

Also in the wiki they talk about preconditions while add/drop of tables, columns, constraints.  There is no mention of the data. In fact most of the <insert> change sets in same file do not have pre condition.

Same as comment above for other change set - Most of the other change sets in same file do not have pre condition as chances of these rows existing is close to zero.

There is a difference in behaviour. When you leave out the column, it tries to set hl7_code as empty string and fails on unique hl7_code constraint (as emr api also adds a source with blank hl7_code).

Where as if you use `<column name="hl7_code"/>`, it inserts NULL value for hl7_code and does not violate the constraint.

I'll make that change. 

Earlier it used to work without this condition since addToDate was returning null for unknown codes or null code.

You need to have a precondition that checks that no row with the uuid exists, the use case for this is because an implementation can insert these data before upgrade for their own reasons OR the other scenario is since these are likely to be added to CIEL they might already have them therefore we don't want the changesets to fail with a unique key constraint violation on the uuid.

Changesets that have no preconditions are a mistake and we don't want to let the same to happen going forward.

The where clause in the query should use the pre generated uuid and not name of the concept source

Ok

Yes it did make sense to not check for null or empty string or white space when addToDate was returning null but now you need not to

ok I'll add it.

I'll change it to use uuid of concept source. 

Would you want preconditions for these as well? If needed, I guess it should look based on `where code = 'S' and concept_source_id = (SELECT concept_source_id FROM concept_reference_source WHERE uuid = 'cb523690-9012-4e72-b8bf-4253e1b1a687')` here, not based on uuid of these reference terms right? 

I would check for the existence of the concept reference term by UUID only

Let me take back my comment, since in the code we are coding against only the code and source then i guess your preconditions are fine the way they are

These changesets need to go into the liquibase-update-to-latest.xml file, yes it is core data but only the update file gets executed on upgrade otherwise these won't get run for existing implementations trying to upgrade.

Thanks. I didn't know that. I'll move it to liquibase-update-to-latest.xml.

I just noticed that all these changesets have no comments

I slightly changed the implementation which I believe results in a more robust search. SearchOnPhrase set to true returned items matching phrase anywhere whereas set to false returned only items that started with the phrase. I changed it now to behave exactly like getConcepts, which matches on words in any order if searchKeywords is set to true or just the phrase when set to false.

What is the rollback for?

This is exactly correct because you will end up overwriting other values that differ from the default

let me just remove it since i have not set anything for it

Is this releated?

The idea behind this ticket is to change storeProperties implementation to simply call properties.store(outputstream, null) instead of our custom buggy implementation.

I thought you had already added this method when you worked on concept search

Ah! I see now that you actually just moved it from here, ignore my previous comment

Isn't this supposed to be the other way round?

There actually a method like getGlobalProperty("name", T type), that returns a value of the type T passed in 

Would be nice to check the count too

Here too, check the count

What is the purpose of these changes?

Good to know. I didn't notice that method before.

I thought it was causing some problem, but it was something else so I could revert it to 0.

In the meantime this is the code for Number of times

Should explicitly say this is SNOMED_CT_CONCEPT_SOURCE_HL7_CODE

I think the capitalization should be DrugOrder.error.durationUnitsNotMappedToSnomedCtDurationCode

These should specifically say SNOMED_CT_SECONDS_CODE

You need a precondition to check if the global property actually exists, it is good practice to always include a precondition to every changeset.

Removed the dbms attribute, the assumption is that all scripts should run on all supported DBs in openmrs

You need to register this global property see CORE_GLOBAL_PROPERTIES() in this class, then you won't need the liquibase changeset

I would name these something generic and more intuitive, you never know we might want to apply them to other searches. Actually, they are not global properties themselves, how about SEARCH_MATCH_MODE_START and SEARCH_MATCH_MODE_EXACT? 

You don't need this changeset

I agree but I decided to use these distinguishing names because there are match mode constants associated with patient search and their names reflects the fact that they are related to patient searching. Do you think we should get rid of these and maintain the general naming scheme?

Patient? Or you meant to say provider, we need to drop 'GLOBAL_PROPERTY' because they are not global properties and we need to include something that suggests that they are MATCH_MODES, so PROVIDER_SEARCH_MATCH_MODE_START and PROVIDER_SEARCH_MATCH_MODE_EXACT should be fine

Wait, why are we defining string constants that duplicate the enum values at https://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/criterion/MatchMode.html ?

Your code should just be doing try { MatchMode.valueOf(gpValue) } catch ...

I just commented this on the other PR, but now that I'm looking at this, I want to propose an alternative.

Just do try { MatchMode.valueOf(matchMode) } catch ...

And get rid of the constant(s) that exactly duplicate values of the MatchMode enum.

As long as we are explicitly defaulting to EXACT, I don' think we need to explicitly disallow ANYWHERE if someone were to configure things that way.

MatchMode is an abstract class and not an enum, but i agree that we don't need these constants actually

Match mode is not an enum, it is an abstract class

Well I think I will delete the unnecessary constants and allow users to set whatever match mode they like.

No, if the db is set to be case sensitive then we need to ignore case in a query.

contains checks the count

Actually according to @dkayiwa this will overwrite the user's previous default values! Can we do it at that expense? And if not  @wluyima! What do you suggest is the better approach to achieve this @dkayiwa? 

@kjoseph you could use a liquibase custom precondition which would load the
value from the database and check for these fields. We have already have
examples of custom preconditions in the core code base.

On Mon, Oct 6, 2014 at 2:59 PM, k-joseph notifications@github.com wrote:

> In api/src/main/resources/liquibase-update-to-latest.xml:
> 
> > @@ -8439,5 +8439,60 @@
> >          <modifyDataType tableName="drug_order" columnName="dosing_type" newDataType="varchar(255)" />
> >      </changeSet>
> > -   <changeSet id="20140822-TRUNK-4111" author="k-joseph">
> > -       <preConditions onFail="MARK_RAN">
> > -           <columnExists columnName="property_value" tableName="global_property" />
> > -       </preConditions>
> > -       <comment>Updating Address Template to remove longitude, latitude fields completely</comment>
> > -        <update tableName="global_property">
> 
> Actually according to @dkayiwa https://github.com/dkayiwa this will
> overwrite the user's previous default values! Can we do it at that expense?
> And if not @wluyima https://github.com/wluyima! What do you suggest is
> the better approach to achieve this @dkayiwa https://github.com/dkayiwa?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/1023/files#r18452576.

## 

If we keep uppermost in our minds the unkind and unjust acts of others, we
shall find it impossible to love them as Christ has loved us; but if our
thoughts dwell upon the wondrous love and pity of Christ for us, the same
spirit will flow out to others.

Or you could try something like sqlCheck for a precondition like: select
length(property_value) from global_property where property =
'layout.address.format'
and property_value like '%longitude%'

The length would be equal to that of the default template and the like
could possibly include the fields we want to eliminate.

On Mon, Oct 6, 2014 at 3:15 PM, Daniel Kayiwa kayiwadaniel@gmail.com
wrote:

> @kjoseph you could use a liquibase custom precondition which would load
> the value from the database and check for these fields. We have already
> have examples of custom preconditions in the core code base.
> 
> On Mon, Oct 6, 2014 at 2:59 PM, k-joseph notifications@github.com wrote:
> 
> > In api/src/main/resources/liquibase-update-to-latest.xml:
> > 
> > > @@ -8439,5 +8439,60 @@
> > >          <modifyDataType tableName="drug_order" columnName="dosing_type" newDataType="varchar(255)" />
> > >      </changeSet>
> > > -  <changeSet id="20140822-TRUNK-4111" author="k-joseph">
> > > -      <preConditions onFail="MARK_RAN">
> > > -          <columnExists columnName="property_value" tableName="global_property" />
> > > -      </preConditions>
> > > -      <comment>Updating Address Template to remove longitude, latitude fields completely</comment>
> > > -        <update tableName="global_property">
> > 
> > Actually according to @dkayiwa https://github.com/dkayiwa this will
> > overwrite the user's previous default values! Can we do it at that expense?
> > And if not @wluyima https://github.com/wluyima! What do you suggest is
> > the better approach to achieve this @dkayiwa https://github.com/dkayiwa?
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/openmrs/openmrs-core/pull/1023/files#r18452576.
> 
> ## 
> 
> If we keep uppermost in our minds the unkind and unjust acts of others, we
> shall find it impossible to love them as Christ has loved us; but if our
> thoughts dwell upon the wondrous love and pity of Christ for us, the same
> spirit will flow out to others.

## 

If we keep uppermost in our minds the unkind and unjust acts of others, we
shall find it impossible to love them as Christ has loved us; but if our
thoughts dwell upon the wondrous love and pity of Christ for us, the same
spirit will flow out to others.

@dkayiwa made change as agreed.

Probably keep the same as line 180 above that was removed, i.e to use the class of the previous order and not the new one just in case we ever allow to discontinue an order with a plain order

There is already logic that calculates and set the auto expire date but it skipped past DC and REVISE orders, so my assumption was that you were going to change the if clause to only exclude DC orders

Around line 107 in OrderServiceImpl, there is an if clause that has !isDiscontinueOrReviseOrder(order), i think that is what needs to be tweaked to allow REVISED orders.

Right. Since that code only depends on order and order related fields, I refactored and moved it into the DrugOrder class itself. Line 107 has been changed to delegate functionality to DrugOrder. 

Ok, can you add an integration test too that ensures that the date is set for a revised order too in OrderServiceImpl.
Alternatively you can edit an existing test about revising an order in OrderServiceTest and add an assertion that the date is getting set.

Sure, will do. 

Needs to say @since 1.11

It repeats above, doesn't it? Eliminate duplication please.

Repeats above. Eliminate duplication.

Avoid Vector. You could return Collections.emptyList() below.

Convention is to use : as the separator between hour:minute:second. :-)

Done.

The name should indicate what we store there precisely, e.g. userSearchLocales.

I would like us to get rid off the custom key generator, which is awkward. We should simply create List<Locale> getSearchLocales(Locale currentLocale, User user) and annotate it with @Cacheable instead. The cache should use method parameters as the key. Then we can call it from getSearchLocales(): getSearchLocales(Context.getLocale(), Context.getAuthenticatedUser());

Let's use @CacheEvict(value="userSearchLocales") public User saveUser(User user, String password) instead. We will get rid of CacheManager in Context as well. It would be better to evict just for the specified user, but our key consists of user and currentLocale. SaveUser is not called that often so invalidating all entries is no issue anyway.

This needs to go. See above.

We don't need this. See below.

We also need to evict the entire cache when calling adminService.saveGlobalProperty (it may change getAllowedLocales()).

This should be "El nombre o ..."

This will overwrite an implementation address template if they have already configured it to something custom

If the attributes types are null for both, i would compare other fields of the attribute then

@wluyima I tested this again and it seems to work as intended - see where condition below

Could you please comment why you sort class loaders? You could say: "We need to put class loaders for modules with longer package name first to make sure that if a module contains '.' in a name it is considered first for the startsWith comparison, e.g. reporting.ui module will be considered before reporting" Do we have proper tests to prove it behaves as expected?

Why you changed it from startsWith to equals? I'm worried it'll break things.

This will be fun to test. Please extract lines 128 - 175 to Class<?> loadModuleClass(String name, Collection<ModuleClassLoader> moduleClassLoaders), and then test it passing a list of ModuleClassLoaders mocks. Use moduleClassLoader = Mockito.mock(ModuleClassLoader.class) to create mocks. when(moduleClassLoader.getModule()).then(...), when(moduleClassLoader.loadClass(name)).then(...), when(moduleClassLoader.getAdditionalPackages()).then(...). Test at least the reporting and reporting.ui case.

All the lines above could have been replace by:

int revValue = OpenmrsUtil.compareWithNullAsLatest(getAttributeType(), other.getAttributeType());

I will fix it as i merge the code

Imagine i already have my address template set to say a blank value, this changeset will change it to this new value and we don't want that to happen. You need to make sure the changeset is not already run otherwise it could be that liquibase is skipping it because it sees is as already ran

You need @Override, so PersonAttributeType needs to implement Comparable, i will add it.

All these line can be replaced with:

return OpenmrsUtil.compareWithNullAsLowest(getPersonAttributeTypeId(), other.getPersonAttributeTypeId());

Why did you change this?

The ticket description says that probably this should say: **The implementation name is mandatory**

Why did you change  this?

Person is not required on this form if you specify a name

Same here, name is not required if one selects an existing person

Now is someone send blank Locale he will see error message, before it was saved successfully message.

Errors are already displayed in the form, there is no need to display them again.

Not all errors get displayed in the form because some are not specific to fields, i think you can omit the field errors but you still need to display the global errors here

Locale is optional, you should be able to save things with a blank locale since there is a default set by the API

This doesn't work, can't call a function, as i merge the code i will change it to checking the value of errors.globalErrorCount instead

Locale is not required

Location is required depending on the location behavior

I guess this is okay

This is also not following the ticket suggestion, is should be the message code for something like: **Encounter Date is required** i will fix it

I think this is fine

No needs to have a new line here.
@dkayiwa confirm if I'm wrong

I think it's good to keep annotation and method name together and have the comment above the annotation.
This also applicable for rest of comments too.
@dkayiwa confirm if it Ok to leave this at it is. 

No need of new line here

@wluyima Isn't this "where property_value=..." condition enough?

I guess it should be, i will test it

I don't think this is the best way to approach this, i would say call the validator the appropriate way that passes in the errors object instead of the call on line 118 above so that field error binding happens which means the error message will come from the validator and you won't have to construct them yourself

When i tested this it didn't work for my installation, i had the template exactly the same as that in the prior version i.e as the value of this where clause and it didn't work, i believe it must be because of line endings, carriage returns etc, i think we can ignore this and assume that this should only work for those installing and not those upgrading 

So we can remove this changeset

This is in the API, it is not good to use html. I would rather move this code to the controller and not throw the exception

This form doesn't seem to work for me, location always has the asterix except for when i select no identifier type, it should only be displayed if location behavior for the identifier type is not specified or is set to required

You can just call jquer'ys .show() or hide() functions instead of directly manipulating the attribute value

call jquery's show() function instead, it is neater

I don't think this is correct and actually didn't work for me when i tested this, only show the asterix if hideLocation == false

```
/**
    * Runs before all tests. Run this before each unit test in this class
    *
    *@throws Exception
    *@see {@link ActiveService}
    */
    @Before public void runBeforeAllTests() throws Exception {
        if (patientService == null) {
            patientService = Context.getPatientService();
            activeListService = Context.getActiveListService();
        }
        executeDataSet(ACTIVE_LIST_INITIAL_XML);
    }
```

@harsha89 is this the way you want me to make the changes ? :) 

@Before 
public void runBeforeAllTests() throws Exception {

Annotation and the method needs to be in seperate lines as above. 

Also the javadoc comment is not formatted as with above snippet

Why did you change this?

It would be nice to split this into 2 separate tests i.e one where it passes if the dates don't overlap and the other where it fails due to overlapping dates

Why did you move this code from its original location in the method? Unless something was failing i would say don't move it just to be safe

There were other tests for revised orders which were failing because they were expecting other validation errors

Since we moved the active order validation after other validations, this test was failing for different validation (mentioned below)

`
Order type class class org.openmrs.TestOrder does not match the order class org.openmrs.Order
`

I will add another test and update the PR.

If you've changed the behavior of getDrugs(...) you also need to change the behavior of the matching getCountOfDrugs(...) method (which has the same args, minus the startIndex and size Integers.

I didn't see that method. Thanks for finding it. I'll make that change and update the PR.

Also note that there are some other getDrugs methods that _do_ behave
similarly to what you're trying to achieve. (Basically, it's a mess.) I
think it's fine to just fix this one method, since it's _all_ going to
change in 1.11.

On Tue, Nov 11, 2014 at 9:19 AM, Deepak N notifications@github.com wrote:

> In api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java:
> 
> > @@ -1536,6 +1537,8 @@ public Long getCountOfDrugs(String drugName, Concept concept, boolean searchOnPh
> >     public List<Drug> getDrugs(String drugName, Concept concept, boolean searchOnPhrase, boolean searchDrugConceptNames,
> 
> I didn't see that method. Thanks for finding it. I'll make that change and
> update the PR.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/1133/files#r20164538.

Thanks for doing this, i was about to mention that the getCountOfDrugs and getDrugs need to use the same code to construct the criteria object

Do we need a new library just to detect the media type in one place? We only want to add a new library if it really adds  significant value and will be used in various places in order to keep the download size of the artifacts as small as possible, are you sure you can't detect the media types in some other way? What is the size of this library?

The other option, as i suggested on the ticket is to write 2 separate handlers, one for audio and the other for video, that way you would not need to detect the types of the files.

This is not true, i guess you just copied it from the other handler

So if i'm a user and i have a media file of a type and extension that are not include here, if i add other entries in the other locations specified in the javadocs of MimetypesFileTypeMap, would it work?

Sure, it would be possible, but these are all the formats supported by major browsers

This results in something like **myAudi.mp3 | myAudio.mp3**, the first segment should be the human readable title, how about making it the filename minus the extension?

Ok

Looks like m4a is not supported

I don't think it is necessary to transfer things from one session object to another, why not just invalidate the olde one and stop there

Mhh, previously, I have done exact same thing, but it lead to always redirect to login page everytime with valid credentials. I did some search on it. At a successful login at attempt, the attributes needs to copy from the old session to preserve session flow. Otherwise it always ask to login again. THere are many places it specified that like http://www.koelnerwasser.de/?p=11.

I would be nice to fail here with an informative message in case the answer is not among the allowed ones

@wluyima you mean that if there is no valid answer, then fail with a message? 

In UI, we are suggesting available answers where user will select the one of the answer. 

If the set valueCoded is not set, the observation validator will reject this with the message mentioned in the attached screenshot to the ticket. :).

May be I didn't got your point. 

The same should happen for boolean concepts since they are stored as coded in the API

It would be nice also to check if valueText is not null and catch the exception if not parseable with an appropriate error message otherwise the error message in the UI is not useful

If ObsValidator catches it, it is fine

I don't like this. I'll comment why on the ticket.

If we're going to have this method, it should throw an exception if size > 1, rather than just returning one arbitrary result.

Our code convention is that these should be on different lines, applying the formatter should typically fix it.

I don't seem to understand the purpose of this if statement, why do you need to compare them to zero initialized variables? Just check that the locale is not null or blank(StringUtils.isNotBlank), conceptId is not nullable in the DB therefore can't be null.

Where did you assign the value of hasFullySpecified? Because you initialize it to true but never assign it before this line

Same here localePreferred hasn't yet been assigned another value before this line after the initialization

These assignments should be happening at the start of the while loop, and this is why i guess i added the comments above

I actually don't think it is worth the effort to do this

This code needs to be in ConceptValidator

For testing purposes, can you also add 2 conceptSets both with null weights, one should have a retired concept

All the code in this if clause can be replaced with  just:
OpenmrsUtil.compareWithNullAsLowest(concept.getSortedWeight(), cs.getSortedWeight())

Double alreay implements compareTo, so you don't need to manually do it here, OpenmrsUtil should work

I think it is irrelevant to set retireReason and retireBy

Compare concepts and not conceptIds

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

Can you include a meaningful log.error message also after you catch the exception?

I have looked at the class and it uses HttpClient. Is the repo comipled successfully? Did you excecute mvn clean install? 

@wluyima great wil do that :)

Since the list contains 1 item, why not just get the first item instead of looping over the collection to check concept ids

I would just compare concepts and not Ids

i wouldn't use concept ids and datetime to find this obs , if the list already had some obs by the same concept and you want to get the newly created obs, a cleaner way is to find the newly included obs in the list, the commons-lang library CollectionUtils.subtract(coll1, coll2) method that which when given two collections it gives you the items in one collection that are not in the other which in this case is 1 and that should be the newly created obs, don't you think it is neater?

Mhh I will correct this. Since equals does the similar thing :)

Since I used same person, there will be more than one observation. Also some other persons also contains observations. So I iterate through it to make sure :). 

I didn't aware of a such a method. Looks it more neater. Will use it :). 

Reason for make the interface as final class?

Reason for make the interface as final class?

Reason for make the interface as final class?

Reason for make the interface as final class?

Reason for make the interface as final class?

![sonar_finalclass](https://cloud.githubusercontent.com/assets/10042258/5326272/60479444-7d35-11e4-8b21-ccda069932e0.JPG)

I have done it according to this rule mentioned in sonar. Is it correct ?

It's Ok to leave it as a interface :)

Oops! It was under "Minor" issues. So, I have to find another one ?

Better hit one of major crtical issue. :)

Thanks ! I have got one to work on.

But then how do I remove these commits ?

Also, is there a way to squash commits from browser, using the GUI ?

Have a look at http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html. YOu will need commandline client to do it :).

Thank you ! Looks good. Hopefully I will be able to do this.

I have not cloned this to my computer. So, I am not sure how will it work now.

May be first clone this repository to my computer and then compare with the origin before applying squash ?

Definitely, you will need to checkout the code and work :). 

Hi !

I have tried cloning the repository to use it locally and apply squash to merge these commits into one. But it has been failing consistently.
Can I just use github via browser for editing files and pushing them ?

I squashed them but it still shows 16 commits.

YOu have to push it to the your github repo. Then it will update the commit count :)

Than that's fine, not to change the sort order if that is what it was initially.

Did you see this comment? Can you please compare the concepts and not their ids because OpenmrsObject comparison is already implemented in the API and is not based on ids

This test is supposed to be in ConceptSetTest because it testing code in ConceptSet an not Concept class, you can use https://wiki.openmrs.org/x/FhIz to easily achieve such conventions

Sorry! you were right the test belongs to ConceptTest since you are testing Concept.getSetMembers, i thought you were testing  ConceptSet.compareTo

But next time remember to add the @should annotation to the test method as described at https://wiki.openmrs.org/x/FhIz

Well it seems like as per the discussion on the ticket, we will need this changeset

You forgot to change these, you need to compare concepts and not their ids, if i have 2 concepts technically they are only equal if they have the same uuid and not id, i guess i will fix them as i merge the code

Oopz I missed this :(. If this needs to be corrected. Let me know :). 

I thought I did, anyway I'll keep that in mind. Thanks.

This line and one below it should be a single line, no reason to initialize an variable to null and then assign it a value on the next line, i will fix it as i merge the code

I have fixed it

Great thanks @wluyima 

use this keywork for this as follow this.orderNumberGenerator

For long if statements, it's Ok to break them for smaller one. Which will be more readable

For long if statements, it's Ok to break them for smaller one. Which will be more readable

You don't need these methods, use existing methods like ProviderService.getProviderByPerson() and UserService.getUserByPerson()

@pwmvx1289 Can you add error message as follow
example debug message : https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/api/impl/AdministrationServiceImpl.java#L861

For ex:
log.error("Descriptive error message",  e);

Because we have to log something to indicate exception to the person who finding the issues

same comment as above

same comment as above

same comment as above

same comment as above

same comment as above

same comment as above

same comment as above

same comment as above

same comment as above

same comment as above

same comment as above

Make this as a log.error statement. 

Make this as a log.error statement. And needs to have space after the ","

Make this as a log.error statement. And needs to have space after the ","

Make this as a log.error statement. And needs to have space after the ","

Make this as a log.error statement. And needs to have space after the ","

Make this as a log.error statement. And needs to have space after the ","

Please add else statement as follow. No need to have it in a new line
} else {
}

I think you missed the } else { here. Make sure that won't happen next time :)

You need to mark this method as deprecated and add a new one

Aren't you supposed to be using the argument instead of hard coding the id here? Otherwise i don't see where you are using description_maxlength_error

Same here

I actually  don't think the value should be trimmed here, i would rather let the user trim it themselves by removing what they wish. As a user, i would hate to spend time to type a long text only to see it getting trimmed to some shorter value and i have to retype the pieces i need back yet i could have just pulled out the irrelevant text that i wish to make it shorter.

can you rename description_maxlength_error to something more intuitive like errorFieldId

@dkayiwa used this approach so I could be able to check the error message

I am fixing a bug, not changing what is passed. It has a bug where it is looking at the wrong id.

But this change will break existing calls to this method in external code 

The existing calls are already broken. The method is passing the wrong ids into the database query. It should be passing person_ids but is passing user_ids instead. It is actually a pretty nasty bug that makes the method completely wrong.

I get that, then in the DAO you would need to add some logic that gets the associated person's person id given a user account and then use that in the query. Infact 1.7.x line is no longer supported, see my comment on the ticket

@wluyima after 1024 characters the user cannot type further which will help him understand that he has to manually reduce the content as the limit is reached.
Please suggest if you think I made a mistake :)

Looks like rowData.get(3) can also be null by the way

I think this has changed the logic somehow, if the drug field was null before we need to ensure that is is still null but looks like with this change it isn't the case

Shouldn't this be cloneForDiscontinuing since the order is named orderToDiscontinue?

Good point, addressed in a later commit.

@wluyima Please refer to the pull request here: https://github.com/openmrs/openmrs-core/pull/1226 :)

@wluyima Please refer to the pull request here: https://github.com/openmrs/openmrs-core/pull/1226 :)

@wluyima I have made the change as suggested. Please refer to the pull request here: https://github.com/openmrs/openmrs-core/pull/1226 :)

I think this should be  > and not >=, if i specify 1024 as the maximum, the general behavior is that 1024 is allowed

Actually this seems like it will substring it to 1024 characters which is fine but inconsistent with line 631

this should be <=

Our code convention is that the '{' is on the same line as the if clause

Why do you have to repeat the substring here, it was already done on line 633 above

All you need is 
if( object.value.length > maxLength){
.....disable save button
.....show error message
} else if(save is disabled or error message is visible){
..... hide error message
..... enable save button
}

You don't need to trim the value.

@wluyima Thank you :)
Please refer to my new pull request here,
https://github.com/openmrs/openmrs-core/pull/1231 :)

@wluyima Please refer to my new pull request here : https://github.com/openmrs/openmrs-core/pull/1231 :)

@wluyima Thank you for correcting me :)
Please refer to my new pull request here: https://github.com/openmrs/openmrs-core/pull/1231 :)

@wluyima Changed accordingly, I request you to refer to my new pull request here:
https://github.com/openmrs/openmrs-core/pull/1231 :)

@wluyima I changed the line 631 and removed line no. 633 as suggested
Please refer to the pull request which has the changes required: https://github.com/openmrs/openmrs-core/pull/1231 :)

Just curious, why if  status.errorMesssage tested twice? The inner test seems a bit extraneous. 

You don't have t create a new pull request for the same ticket

Good catch! it should be once

should be else

Since this is a general purpose function, it is not quite right to assume there is always a save button with this same id. I think you need return a boolean value from this function so that for each form from where you call this you can do some clean up based on the returned value which in this case is to enable or disable the save Button.

Agreed that the save button from elsewhere will not have the same id, but I assumed it to be right this way because forceMaxLength function is called only from the above changed files.. 
However, if I am wrong in my assumptions. Can you please give me a little detailed idea of how to capture the boolean value and disable the button without the ID? :)

From the ticket summary, is it mentioned that this should be a general purpose function that will be called from anywhere, that is why you can't leave code like that behind

I think this should be only one validCheckSum, why are you having 2?

Good catch!

There must be another StringUtils class i guess from spring, i would rather use that because it has an equivalent method instead of using a name like this here, i think it is named isEmpty() or isBlank()

Do you really need this? Once you remove it on line 575 below, that should be all

It is isBlank()

Shouldn't you be removing descInLocale instead? Instead of fetching it from the map again

Is this call necessary?

Same here, you don't need this call

I can't find isBlank() in org.springframework.util.StringUtils. Did you mean isEmpty()? 

Right. Will remove it. 

Sorry, it is hasText()

Am not understanding this @should, why allow a null oldPassword value?

I would not log both paswwords

It's because if you have admin privileges you can change another user's password without knowing their old password. Whereas any user can change their own password, as long as they know the current one.

You need to ignore logging of both passwords, i see that you are only ignoring logging of the old password

Would be nice to add an assertion that the user actually doesn't have the privilege

We prefer to use Junit's ExpectedException approach since it also lets you check the actual error message because the exception could be from somewhere else especially for APIException which is throw from very many places. Can you do the same for the other tests where you expect and an APIException

I would suggest `answer.toLowerCase()` to make secret answer validation case insensitive.

I would suggest `answer.toLowerCase()` to make secret answer validation case insensitive.

@harsha89, this looks better if it is to be: !("".equals(error.toString())), same reason you have just given me, to avoid null exception

Yeap that's better :) 

same thing here, 

here as well

Better to changed it otherway 

- Just compare the locale objects
- The check if propertyValue is not null is sufficient, so you don't have to check if its is not empty

here too, just compare the locale objects

I think this should be comparing locales and not languages because the use cases of this will still fail

Same here, it should the locales you compare and not languages

What is the use of this?

Why are you removing this? Does the test fail if you don't?

Yes, test fail if I don't remove this.

If I don't change property value, new value is saved to the database 

If you have to remove it then seems like there is something else wrong that needs to get fixed, could be the test data that is invalid because you should never have to do this.

I guess because hibernate will still flush it right? I would assume we either add the default locale automatically or just fail with an exception that way hibernate flushes nothing

I throws APIException and changes are still saved to the database.

Then you need to fetch the previous value from the DB and set that it back instead of this logic or throw a DAO exception and tell spring to rollback the transaction for the DAOExcepton via the @Transactional

Just to check, are we sure that this will work if it is _not_ a Hibernate-managed class?

we should move this to finally block

same here we should move this to finally block

same here we should move this to finally block

same here we should move this to finally block

same here we should move this to finally block

I would use 'this' here instead of the class object, this is a spring bean so it is a singleton

It seems fine and should work :) however i am not not sure :) Please Correct if i am wrong

@SandeepRaparthi1 can you create a unit test to confirm it works?

Seems this is not used by the introduce changes!

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Do we need this equals. Seems default equals does the same thing.

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Default equlas does the same right?

Same here!

Same here for equlas

same here for equals

Same for equals

Same

Same here on equals

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Code make complex by aggregating this conditions. Should we have this or not?

Do we need really need these sysnchornized blocks?

Do we need this equals?

Code make complex by aggregating this conditions. Should we have this or not?

better do it in a finally block

Need to close streams in a finally blocks

Need to close streams in a finally blocks

Equals needed?

Need to close conncetion in finaly block

close connections in a finally block

Stmt should close in finally blocls

same as above

same as abve

same as abve

Actually shows up when i use the Ctrl + Shift + O option for resolving import issues

This is not gci, it is in https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/Concept.java#L978 and am ok with it

This looks to be just the same thing and my above response is ok, remembering that i created this Pull Request after checking out a new branch from master. Then pulled from upstream/gci-2014 and resolved conflicts which was the best way to confirm that every thing is updated and eliminate more conflicts

Actually the modification just shows a space which is well and introduced by the openmrs formatter

See  my above responses :+1: 

See  my above responses :+1: 

See  my above responses :+1: 

See  my above responses :+1: 

See  my above responses :+1: 

See  my above responses :+1: 

See  my above responses :+1: 

@dkayiwa here the line added to ensure that there is no null pointer exception :) 

Do
concept.setDescription(null);
Then pass it through the validator and tell me what happens.

On Thu, Feb 26, 2015 at 8:12 PM, Sandeep Raparthi notifications@github.com
wrote:

> In api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java
> https://github.com/openmrs/openmrs-core/pull/1354#discussion_r25444672:
> 
> > -       }
> > -       Errors errors = new BindException(concept, "concept");
> > -       new ConceptValidator().validate(concept, errors);
> > -       Assert.assertTrue(errors.hasErrors());
> > -   }
> > -   
> > -   /**
> > -    \* @see ConceptValidator#validate(Object,Errors)
> > -    **/
> > -   @Test
> > -   @Verifies(value = "should Not return a Null Pointer Exception", method = "validate(Object,Errors)")
> > -   public void validate_shouldNotReturnaNullPointerException() throws Exception {
> > -       Concept concept = new Concept();
> > -       Collection<ConceptDescription> descriptions = concept.getDescriptions();
> > -       Assert.assertTrue(descriptions.isEmpty());
> > -       Assert.assertNotNull(descriptions.size());
> 
> @dkayiwa https://github.com/dkayiwa here the line added to ensure that
> there is no null pointer exception :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/1354/files#r25444672.

## 

If we keep uppermost in our minds the unkind and unjust acts of others, we
shall find it impossible to love them as Christ has loved us; but if our
thoughts dwell upon the wondrous love and pity of Christ for us, the same
spirit will flow out to others.

@dkayiwa I have added that line and checked  Test case passes :) 

@dkayiwa shall i make that change and update the PR ? :) 

Yes i want to see that test as part of your pull request.

On Thu, Feb 26, 2015 at 8:34 PM, Sandeep Raparthi notifications@github.com
wrote:

> In api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java
> https://github.com/openmrs/openmrs-core/pull/1354#discussion_r25446489:
> 
> > -       }
> > -       Errors errors = new BindException(concept, "concept");
> > -       new ConceptValidator().validate(concept, errors);
> > -       Assert.assertTrue(errors.hasErrors());
> > -   }
> > -   
> > -   /**
> > -    \* @see ConceptValidator#validate(Object,Errors)
> > -    **/
> > -   @Test
> > -   @Verifies(value = "should Not return a Null Pointer Exception", method = "validate(Object,Errors)")
> > -   public void validate_shouldNotReturnaNullPointerException() throws Exception {
> > -       Concept concept = new Concept();
> > -       Collection<ConceptDescription> descriptions = concept.getDescriptions();
> > -       Assert.assertTrue(descriptions.isEmpty());
> > -       Assert.assertNotNull(descriptions.size());
> 
> @dkayiwa https://github.com/dkayiwa shall i make that change and update
> the PR ? :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/1354/files#r25446489.

## 

If we keep uppermost in our minds the unkind and unjust acts of others, we
shall find it impossible to love them as Christ has loved us; but if our
thoughts dwell upon the wondrous love and pity of Christ for us, the same
spirit will flow out to others.

@dkayiwa Yup Sure 5 minutes :)

@djazayeri as adviced by kayiwa on which non-hibernate managed class you want me to test this on ? :)  

@SandeepRaparthi1 create an inner class in your unit test.

I don't think you need this change, the version should stay as 1.12.0-SNAPHOT

It's needed for testing of the spring-4 branch. It will be back 1.12.0-SNAPSHOT once we merge with master.

Might I suggest, just for consideration, that some change be made in the
Spring 4 version # even if it is to 1.12.1-SNAPSHOT. The reason is, after
the Spring 4 merge, what if someone wants to build an older Spring 3
version of 1.12.0-SNAPSHOT, perhaps to compare the behavior between the
two. If you're doing a full maven reactor build each time then everything
is fine. But say your .m2 has a Spring 4 version of 1.12.0-SNAPSHOT
core-api installed locally from a prior build, and then you switch to
Spring 3 and run a test in Spring 3 core-web. It will attempt to run
against the Spring 4 core-api jar.

It may sound unlikely, but this isn't just theoretical - I actually ran
into this issue. That is why I decided to re-version in the first place.
Then all of the jars that are built link together nicely and it's possible
to have both Spring 3 and Spring 4 versions of the app locally with no
conflicts.

On Mon, Mar 2, 2015 at 10:41 AM, Rafal Korytkowski <notifications@github.com

> wrote:
> 
> In api/pom.xml
> https://github.com/openmrs/openmrs-core/pull/1383#discussion_r25607364:
> 
> > @@ -2,7 +2,7 @@
> >     <parent>
> >        <groupId>org.openmrs</groupId>
> >        <artifactId>openmrs</artifactId>
> > -      <version>1.12.0.SPRING-SNAPSHOT</version>
> > -      <version>1.12.0-SPRING4-SNAPSHOT</version>
> 
> It's needed for testing of the spring-4 branch. It will be back
> 1.12.0-SNAPSHOT once we merge with master.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/1383/files#r25607364.

Here "newLocationId" cannot be null or length equals to 0. If it so this expression doesn't execute because of the prior "if" clause.

@kristopherschmidt, I don't envision a need to test 1.12.0-SNAPSHOT with spring 3 anymore. If needed one can do that with extra care by checking out a commit before spring 4 and doing mvn clean install on the full project (not only the web) so that the core-api jar will be on spring 3 as well. You can also change version to 1.12.0-SPRING3-SNAPSHOT locally to be 100% sure. Also we will continue to have the 1.11.x branch which will remain spring 3.

@sashrika by the way, do you remember how you got this? http://pastebin.com/0VaXVUDw

@dkayiwa , I was building the Performance and Utilization Module. But i don't know a reason why i am getting this. Do you have any idea :)

@sashrika i was able to reproduce and eventually fixed it. Just change it to reference openmrs 1.11.1-snapshot instead of 1.11.0-snapshot.

@dkayiwa thanks. I tried with the above change. Still build fails. But now the exceptions are different. Earlier they were about FileNotFoundException. But now they are about mostly 
"Module unit test classes should extend BaseModuleContextSensitiveTest, not just BaseContextSensitiveTest"

full log : http://pastebin.com/pFAxdYWc
Do you have any ideas about them :) ?

Is there a reason to go to another 6.\* version of Jetty, is it possible to go to a recent stable version of Jetty 8? One reason I ask is that core is now building against Servlet 3.0 and there have been discussions about utilizing that functionality, so an upgrade of Jetty to 8 would be ideal if it works out.

You should remove webapp/ from all the above 3 exclude as well

I agree... with the change in master to servlet 3, we might as well go to jetty 8. But may be we need a separate ticket? I made the below change to the webapp/pom.xml and everything seems to work with master as expected. Not sure if it solves Ryan's classloader problem, which this ticket is about.

```
<groupId>org.mortbay.jetty</groupId>
<artifactId>jetty-maven-plugin</artifactId>
<version>8.1.16.v20140903</version>
```

Why is this line removed?

those are build stylistical changes

I vote for merging this with a 6.x version of Jetty. I presume Ryan will want to backport this to a released maintenance line.

Then in another ticket (that won't be backported) we can go to Jetty 8.x.

Yeah, I didn't want to be too disruptive but the latest version of jetty worked for me to. I agree with @djazayeri another issue would be the best place to do this.

Is Arrays.toString accepting nulls? arr may be null and we do not want to see NullPointerException so please check that.

The same as above.

Arrays.ToString() does handle null as shown below:

public static String toString(Object[] a) {
        if (a == null)
            return "null";

```
    int iMax = a.length - 1;
    if (iMax == -1)
        return "[]";

    StringBuilder b = new StringBuilder();
    b.append('[');
    for (int i = 0; ; i++) {
        b.append(String.valueOf(a[i]));
        if (i == iMax)
            return b.append(']').toString();
        b.append(", ");
    }
}
```

@tomaszmueller OpenMRS as per my Knowledge would not prefer wildcard Imports :) 

Perfect! Thanks!

I opened TRUNK-4638 for upgrading to Jetty 8. (I'm not claiming the ticket
though, so anybody that wants to take this feel free)

On Wed, Mar 11, 2015 at 5:22 AM, Ryan Crichton notifications@github.com
wrote:

> In webapp/pom.xml
> https://github.com/openmrs/openmrs-core/pull/1393#discussion_r26197683:
> 
> > @@ -94,7 +94,7 @@
> >           <plugin>
> >              <groupId>org.mortbay.jetty</groupId>
> >              <artifactId>maven-jetty-plugin</artifactId>
> > -            <version>6.1.10</version>
> > -            <version>6.1.26</version>
> 
> Yeah, I didn't want to be too disruptive but the latest version of jetty
> worked for me to. I agree with @djazayeri https://github.com/djazayeri
> another issue would be the best place to do this.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/1393/files#r26197683.

In master branch this fix already exist.

Call results.close() before statement.close();

else {
results.close();
statement.close();
}

Call results.close(); statement.close(); before returning.

else {
results.close(); statement.close(); }

You must add those extra close methods so that we can report error if close fails and not only warning from the finally block.

It should be private.

It should be private.

It should be private.

Please use hl7InError.setErrorDetails(ExceptionUtils.getStackTrace(case)); instead and get rid of StringWriter entirely. It's fine to keep log.error(cause).

This should not call log.error(t). It should return ExceptionUtil.getStrackTrace(t);

This should not call log.error(t);. It should return t + "\n" + ExceptionUtil.getStackTrace(t);

This should not call log.error(t). It should set stacktrace = ExceptionUtil.getStackTrace(t);.

This is actually intended as you can see the start method is called below in line 189: thread.start() so please revert it. We need to annotate the run method (line 177) with: 

@SuppressWarnings("squid:3AS1217") //We intentionally do not start a new thread yet, rather wrap the run call in a session.

This is actually intended as you can see the start method is called below. Please revert it. We need to annotate the run method (line 270) with:

@SuppressWarnings("squid:3AS1217") //We intentionally do not start a new thread yet, rather wrap the run call in a session.

This is wrong. Please see other OpenMRS code to see the standard way we log, by convention (e.g. it uses log4j, not jfree.util).

Is there a way that we can give a more specific error message? (E.g. in the specific case reported in this ticket, someone tried to upload a binary file when only text is accepted. Is there any way we can tell that's the error and report it?)

@harsha89  @djazayeri  isn't this the custom id generator that will no longer be needed since we are using the standard hibernate jar file, i see it is being used in the mapping files for concepts and active list items

Do you have to implement this? 

Do you have to implement this too? 

Did you test that this is no longer necessary? If yes, then we can get rid of the code instead of commenting it out

Correct, we should email the dev list and start publicizing that we'll likely remove this functionality in OpenMRS 1.12.

@djazayeri should we only allow text/plain files or files like text/html as well?

Please close connection. results and statements in a finally block. If one of close operation cause error it will stop closing other statements. 

try {
} catch() {
} finally {
//close statements going here
}

If you close them in fianlly block this shouldn't be needed anymore

Please close statements in finally blocks not inside catcch exception

Please close statements in finally blocks not inside catcch exception

But they won't reach the finally block because of the return statement

Please close statements connections in finally blocks

Please close statements in finally blocks not inside catcch exception

Please close statements in finally blocks not inside catcch exception

Reason for removing this log?

you can return it after finally statement. :)

It's replaced with the if statement above, I think it was there to check on the
connection that actually threw the exception.

I was just fixing the exceptions thing mentioned in the ticket, that return statement is already there, Actually going deep into this, this whole thing
needs to be refactored :)

which if statement catch this case? 

Great :+1: 

if (connection != null), it means that it was successfully created

I still don't understand why these changes are necessary. We expect the value from the DB to match the correct class name, if not then we need to fix the upgrade scripts to do so

To explain at a high level, there is not really a 'correct' class name for AddressTemplate as you are assuming. There is the 'api' package AddressSupport/Template code and the 'web' package AddressSupport/Template code. When old modules are running, both sets of code need to run. Both AddressSupport classes need to instantiate AddressTemplates in the matching package. That can't be done if there is a single class defined in the db.

At a detailed level, just look at line 147 of 'web' AddressSupport. Of course it cannot cast an 'API' AddressTemplate in the db to a 'web' AddressTemplate. Even if you were to try to fix 'web' AddressSupport' to compile against 'API' AddressTemplate, module code would bomb that expects a 'web' AddressSupport to provide a 'web' AddressTemplate. 

My junit test demonstrates the failure before the fix, and passes after the fix (yes I am a classically-trained TDD developer :-)

The NameSupport problem is a little different in detail but similar in concept. 2 sets of code need to run from 2 packages.

> On Mar 26, 2015, at 12:38 PM, Wyclif Luyima notifications@github.com wrote:
> 
> In web/src/main/java/org/openmrs/layout/web/address/AddressSupport.java:
> 
> > @@ -29,6 +29,8 @@
> >  @Deprecated
> >  public class AddressSupport extends LayoutSupport<AddressTemplate> implements GlobalPropertyListener {
> > 
> > I still don't understand why these changes are necessary. We expect the value from the DB to match the correct class name, if not then we need to fix the upgrade scripts to do so
> 
> —
> Reply to this email directly or view it on GitHub.

http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin says the latest version is 9.2.10.v20150310 (note the groupId has changed as well) Could you please try it instead?

misspelled DefaultComparator :)

Whenever you implement equals you must implement hashCode. Also read JavaDoc for compareTo. If equals returns true then compareTo must return 0. If equals returns false then compareTo must return != 0. You need to correct equals to behave accordingly. In other words it's enough to implement equals as return compareTo(other) == 0.

Could we please add in addition to @Deprecated the following:
Note: this comparator imposes orderings that are inconsistent with equals.

Please do the same for all other compareTo methods.

The rule is that hashCodes must be the same if equals returns true. It's not the case here if pageNumber is equal and some other field is different. The easiest fix here is to include just the first field that is checked in compareTo i.e. pageNumber. Please use HashCodeBuilder to generate the value.

Please remove this dependency.

This should call .append(formField.getPageNumber()).build(); 

Why did you remove this?

@rkorytkowski Didn't you asked to remove this dependency in one of your comments on outdated diff 8 days ago? Or did I mistunderstood which dependency should I remove?

It was some other dependency that you included by mistake.

@rkorytkowski added the dependency again

@harsha89, please see my comment at https://issues.openmrs.org/browse/TRUNK-4615?focusedCommentId=217328&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-217328

You can read more about that for example here: http://stackoverflow.com/questions/14436453/is-it-safe-to-use-apache-commons-io-ioutils-closequietly

It is actually very correct to call close() in the try block and also in the finally block just in case.

The finally block is ALWAYS executed! Even if you have a return statement in the try clause, the code in the finally block will be run before returning.

We don't usually _redirect_ on a failed post, do we? Normally I think we'd redisplay the form. (Won't this lose the context of the page the user was on?) Also, this is not going to show any specific error message to the end user.

Is this better than just replacing the static dateFormat, timeFormat, and datetimeFormat fields with calls to: new SimpleDateFormat(...)? E.g. is introducing more performant than just instantiating these as-needed? (e.g. OpenmrsUtil.getDateFormat methods instantiate new ones...)

writer? Is this used?

Incorrect class here

Is this used?

Any methods that override should be annotated with @Override. Otherwise I can't quickly say if it is correct or not.

No

Is it overriden? If yes, then why it's not implemented?

To remove?

To remove?

Please do annotate any methods that  override with @Override.

It should read from zipInput.

To remove?

Why do you store it here?

Why do you store it here?

Why is it overriden? What sets this.closed to true?

reading from zipInput throws IOException in bufReader.readLine() in ZipFilterTest

Where is the buffering implemented?

It will be actually nicer to use ArgumentCaptor instead of ArgumentMatcher. See http://www.planetgeek.ch/2011/11/25/mockito-argumentmatcher-vs-argumentcaptor/

This test should be renamed to something more meaningful. Also methods in Java start with lowercase.

Wrong link.

what is the exact stacktrace of the exception? Pastebin please.

java.io.EOFException: Unexpected end of ZLIB input stream
    at java.util.zip.InflaterInputStream.fill(InflaterInputStream.java:240)
    at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:158)
    at java.util.zip.GZIPInputStream.read(GZIPInputStream.java:117)
    at org.openmrs.web.filter.GZIPRequestStream.read(GZIPRequestStream.java:77)
    at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
    at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
    at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
    at java.io.InputStreamReader.read(InputStreamReader.java:184)
    at java.io.BufferedReader.fill(BufferedReader.java:161)
    at java.io.BufferedReader.readLine(BufferedReader.java:324)
    at java.io.BufferedReader.readLine(BufferedReader.java:389)
    at org.openmrs.web.filter.update.GZIPFilterTest$1.matches(GZIPFilterTest.java:78)
    at org.mockito.internal.matchers.LocalizedMatcher.matches(LocalizedMatcher.java:30)
    at org.mockito.internal.invocation.ArgumentsComparator.argumentsMatch(ArgumentsComparator.java:26)
    at org.mockito.internal.invocation.ArgumentsComparator.argumentsMatch(ArgumentsComparator.java:18)
    at org.mockito.internal.invocation.InvocationMatcher.matches(InvocationMatcher.java:58)
    at org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching.isOut(InvocationsFinder.java:145)
    at org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching.isOut(InvocationsFinder.java:137)
    at org.mockito.internal.util.collections.ListUtil.filter(ListUtil.java:16)
    at org.mockito.internal.invocation.InvocationsFinder.findInvocations(InvocationsFinder.java:20)
    at org.mockito.internal.verification.checkers.MissingInvocationChecker.check(MissingInvocationChecker.java:32)
    at org.mockito.internal.verification.Times.verify(Times.java:36)
    at org.mockito.internal.verification.MockAwareVerificationMode.verify(MockAwareVerificationMode.java:21)
    at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:72)
    at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
    at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
    at org.mockito.internal.creation.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:51)
    at $javax.servlet.FilterChain$$EnhancerByMockitoWithCGLIB$$5de2954d.doFilter(<generated>)
    at org.openmrs.web.filter.update.GZIPFilterTest.zipRequestTest(GZIPFilterTest.java:69)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
    at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
    at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)
    at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)

The problem solves when you add gzOutput.finish() in ZipFilterTest;

Good.

What is this dependency for?

You should break the loop with the first match.

It's not needed to store input, isn't it?

It's not needed to store request, isn't it?

It's not needed, is it?

Why don't you simply create the stream in constructor and get rid of this method?

A few blank lines in this test would make the test more readable :) e.g. after lines 53, 57, 64, 68.

Please remove @author and @version. It's against OpenMRS conventions.

Please remove @author.

It is needed to throw UnsupportedMediaException

I see another issue here. You can't cache the result, because it will be different for each path. You should cache the global_property value instead.

Again, why do you include this? What's it for?

Remove if not needed.

@rkorytkowski It is needed to throw UnsupportedMediaException(com.sun.xml.ws.server.UnsupportedMediaException)

@tomaszmueller i do not think we should include an entire jar and possibly its dependencies, simply for the sake of getting an exception class. How about throwing an APIException?

Agree! You must catch it in doFilterInternal anyway and do  response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);

You must catch the exception catch(APIException e) { response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE); return; }

should say decompressing :)

I think calling deleteAllData() should be enough without the super since it is not overidden in this class

@wluyima sure it is. Should I rewtite without super?

My understanding is that this will result in us having both entityManagerFactory and hibernateSessionFactory, thus using up extra resources and adding complexity. Please see http://stackoverflow.com/a/21673855 for the alternative (note we may need to wait for upgrading Hibernate to version 4 in https://issues.openmrs.org/browse/TRUNK-4364.

See also http://docs.spring.io/spring-data/jpa/docs/1.8.0.RELEASE/reference/html/#_infrastructure

Another thing to consider is that we use custom https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/api/db/hibernate/HibernateSessionFactoryBean.java, the functionality of which must be preserved.

This should be removed.

removed

Shouldn't this be longer than 255?

255 is the most common length value for description property in hibernate mapping files for classes derived from BaseOpenmrsMetadata. In some of them however, larger values are used, like: 500, 1024, 65535 or 2147483847. Should it be changed for one of these values?

Then i guess we can leave it as 255 here and override it in the concrete classes

@wluyima I did the mapping in concrete classes in extra commit
@rkorytkowski  I'll squash the commits after I get the confirmation that it's OK.

This is wrong. You should not have overridden any existing classes. In fact annotations are ignored for entities mapped in xml. Reading Hibernate docs: "To ease the migration process from hbm files to annotations, the configuration mechanism detects the mapping duplication between annotations and hbm files. HBM files are then prioritized over annotated metadata on a class to class basis. You can change the priority using hibernate.mapping.precedence property. The default is hbm, class, changing it to class, hbm will prioritize the annotated classes over hbm files when a conflict occurs." https://docs.jboss.org/hibernate/stable/annotations/reference/en/html/ch01.html
So please revert changes that you made after Wyclif's comment.

The correct way to override any field is by using @AttributeOverwrite, but you must not use it for this issue. The issue is only about introducing annotations to Base.. classes. http://stackoverflow.com/questions/5257921/hibernate-how-override-an-attribute-from-mapped-super-class

@rkorytkowski reverted

@rkorytkowski
@wluyima
I created an issue for overriding the description value in concrete classes
https://issues.openmrs.org/browse/TRUNK-4674

By the way, this should be "if (!exact)" -- it's bad style test == true or == false this way

please fix capitalization of the message, e.g. D and E should be lowercase.

@djazayeri Sorry for that Style of coding.However the change you advised is already updated in master https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/Concept.java#L714  

Many google results e.g. http://stackoverflow.com/a/6840897 say ThreadLocal is the fastest option, but I haven't seen exact numbers quoted.

Found tests at http://www.javacodegeeks.com/2010/07/java-best-practices-dateformat-in.html

This method should be testing serialization, so you should check that the serialized value is equal to what you expect

Add @since 1.12

Add @since 1.2

Shouldn't this be fetching it from the LocationService?

You should not be using xstream, you need to return the locationId? @djazayeri  am starting to think that this should return the uuid

You also need to implemenet doGetTextSummary() and return the location name.
I would actually have an abstract class for all metadata that does this out of the box

i would just return the value returned by datatype.getTextSummary()

You should just delegate to the datatype.deserialize()

Correct, this should return the UUID. See my email to the dev list an hour ago.

Removing this may actually influence some modules. @djazayeri, @wluyima, @dkayiwa, do you know any modules that rely on this behavior i.e. prepending moduleId to messages in modules if not present and/or using keys outside of module namespace?

We definitely rely on defining keys outside the module namespace for i18n in Mirebalais (and it's generally the approach for the reference application). E.g. for this: https://github.com/PIH/openmrs-module-mirebalais/blob/master/api/src/main/resources/messages.properties#L184

I don't personally think that the behavior of prepending moduleId to messages that don't start with it is a good idea.

Great, @tomaszmueller, please be sure to test the reference application with your changes. The easiest way to do it is to apply your fix to the 1.11.x branch and run it with the set of 2.x modules which you can get from our CI, e.g. https://ci.openmrs.org/browse/REFAPP-OMODDISTRO-3320/artifact/shared/openmrs-2.x-modules-zip/referenceapplication-package-2.0.3320-distro.zip

Hint: use git cherry-pick to apply your commit to the 1.11.x branch.

@rkorytkowski On 2.x modules properties are not being shown correctly

@rkorytkowski Actually modules properties messages are not being shown correctly when module_messages*.properties files are not present in /api/target/classes.
What is more, on the 1.11.x branch they are being deleted from that folder when placed there before build which doesn't happen in the current branch.

The ticket description was edited, can you please extend BaseMetadataDatatype?

You won't need to override this

You can merge these 2 lines into one with something like:

return Context.getProviderServiece.getProviderByUuid(serializedValue)

You can get rid of this

And this

This should extend BaseMetadataFieldGenDatatypeHandler and get rid of the methods here that are already implemented in the base class

Can you please use spring's MockHttpServletRequest, you won't need this class

I would recommend renaming it back to executeSQL.

Instead of duplicating code you should call "executeSQL(connection, sql, selectOnly)". Use session.doReturningWork to free yourself from using the final result object.

I would recommend naming it executeSQL (as it was before). No need to introduce backwards incompatibility here.

The javadoc should state that "It is preferred to use session.createSQLQuery with correct synchronization (sqlQuery.addSynchronizedEntityClass) to invalidate session cache if necessary."

I've just noticed that doReturningWork is not available in the old version of Hibernate, which this branch is still using. For now I do approve of using doWork and copying results from executeSQL(connection, sql, selectOnly) to the final result object.

Why format these file?

Why are you adding these locales here? And why are they hard coded?

Why are you commenting out this?

And this?

Is copying of the files unnecessary?

@wluyima I'm not sure what do you mean?
Tests work only when you retrieve value from .properties files using Context.getMessageSourceService().getMessage(
or put it directy instead of key 

They are hard coded because I can see no easy way to retrieve all the locales needed.

I posted another comment saying that you ignore that comment but i don't know what happened to it, ignore it

Why not just load all files matching *messages*.properties?

There's no easy way to load all files matching messages*.properties from classpath. He would have to use some classpath scanning utility which is slow. I think that hard coding this list is fine. 

Is this only for tests? Or production too?

(edited, sorry it's late and I don't think clear)

It's for production. The list contains all locales for messages which are at https://github.com/tomaszmueller/openmrs-core/tree/TRUNK-4386_fix/api/src/main/resources 

The issue here is that copying is needed for MutableResourceBundleMessageSource.findPropertiesFiles to be able to discover all localized messages (resource.listFiles doesn't work for classpath resources). Also edits are only supported for messages in WEB-INF, but not on classpath.

Possibly, we could use here the allowed.locale.list GP.

At a very quick glance, this doesn't include the ht or rw locales, both of which are important to PIH.

Personally I don't think that being able to edit message bundles on the fly without restarting the application is important, but apparently others have thought that, because we've spent work on it.

Using the allowed locales makes sense.

Much better!

Do you think ServletContextResourcePatternResolver would have reduced the lines of code here?

missing @since

You might as well get rid of these since they are blank

To avoid an exception with no helpful error message, i would get rid of this default constructor

as per the ticket description i would expect the opposite of this

So you probably don't need this @should

And this should go away i.e the if clause

I don't think you need this test data, you should just place an order for with a concept or drug that matches that of an existing one

The same applies for drug orders, if someone calls discontinue a given drug and there is multiple orders with a matching drug and lets say different strengths, then the call is ambiguous too

Can you also add a test for drug orders too?

Can you please add the @should to the method in OrderService?

You don't need the else clause, it is redundant, just return null

This logic is actually not exactly worng because checkDrugOrdersForDiscontinuing could return null, the else clause on line 338 above assumes checkDrugOrdersForDiscontinuing won't return null, i will fix it

Note that other datatypes are annotated with @Component so that they can be autowired by DatatypeService. Please put @Component here and say in javadoc @since 1.12

Please add @since 1.12

Have you read toHtmlSummary javadoc before implementing it? The summary should be shorter than 100 characters... It could be Program.name for example.

The ticket description was updated, please extend BaseMetadatatype

Extend BaseMetadataFieldGenDatatypeHandler

Thanks man! I will take care of that. BTW, do you know which part of the Program data shall I serialize as xml?

You don't need to "serialize" exactly. Just write out Program.uuid (and
read it back).

On Fri, Apr 24, 2015 at 11:45 AM, haolanchen notifications@github.com
wrote:

> In
> web/src/main/java/org/openmrs/web/attribute/handler/ProgramFieldGenDatatypeHandler.java
> https://github.com/openmrs/openmrs-core/pull/1432#discussion_r29074754:
> 
> > +import javax.servlet.http.HttpServletRequest;
> > +
> > +import org.apache.commons.lang.StringUtils;
> > +import org.openmrs.Program;
> > +import org.openmrs.customdatatype.CustomDatatype;
> > +import org.openmrs.customdatatype.CustomDatatype.Summary;
> > +import org.openmrs.customdatatype.InvalidCustomValueException;
> > +import org.openmrs.customdatatype.datatype.ProgramDatatype;
> > +import org.openmrs.serialization.SerializationException;
> > +import org.openmrs.serialization.SimpleXStreamSerializer;
> > +import org.springframework.stereotype.Component;
> > +
> > +/**
> > - \* Handler for the Program custom datatype
> > - */
> >   +@Component
> 
> Thanks man! I will take care of that. BTW, do you know which part of the
> Program data shall I serialize as xml?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/openmrs/openmrs-core/pull/1432/files#r29074754.

I see, thank you

You won't need this actually once you extend BaseOpenmrsDatatype

You shouldn't override this method, the base class if doing the correct thing

The type parameter value should be **Program**, therefore your declaration should be as below:
**public class ProgramDatatype extends BaseMetadataDatatype&lt;Program&gt;**

The first type parameter value should be **ProgramDatatype** and not **DT extends BaseMetadataDatatype<T>**, so the class declaration should be:
**public class ProgramFieldGenDatatypeHandler extends BaseMetadataFieldGenDatatypeHandler&lt;ProgramDatatype, Program&gt;**

@wluyima Hey, thanks! But deserialize must be overrided or I have to declare ProgramDatatype as an abstract class.

Sorry, yes you need to implement deserialize, and the typical implementation is to fetch the object by uuid from the appropriate service since serialize from BaseOpenmrsDatatype does return the uuid.

Thanks！ What would you suggest as an appropriate service? Since I really know little abt this part actually. Just in case you know that, or I can try to figure it out myself.

ProgramWorkflowService

You also need a test to ensure that it passes for overlapping orders in case the parallel orders are specified

I think you should use the orderContext for now instead and not overload this method

I think the parallel orders should be uuids instead of order objects

I see a couple of these 'Q's after the opening angel brackets, can you please remove them?

It is pointless to pass in a null value here when there is a constructor that takes no argument, i will remove it

This won't work, you need to use Context.getProgramWorkflowService() and not new ProgramWorkflowServiceImpl() 

I already committed the fix and closed the ticket, thanks though!

@dkayiwa no matter what value i pass to the request and the form resource, can't get it to throw the expected exceptions in test. What am saying is, on the page where the form resource is been saved, if you submit no or invalid file, you get an error immediately due to the exceptions thrown. But when writing the unit tests, no matter what file i pass to the multipart request, no exception is thrown.  Also in the FormServiceImpl.saveFormResource() method, no matter what values i contstruct the resource with, it always seem to complete successfully. I don't know why.

All tests work but for this last one that throws API exception when changePassword, calls Context.getAuthenticatedUser(), with the following stack trace
<b>java.lang.Exception: Unexpected exception, expected<org.openmrs.api.PasswordException> but was<org.openmrs.api.APIException>
    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: org.openmrs.api.APIException: A user context must first be passed to setUserContext()...use Context.openSession() (and closeSession() to prevent memory leaks!) before using the API
    at org.openmrs.api.context.Context.getUserContext(Context.java:245)
    at org.openmrs.api.context.Context.getAuthenticatedUser(Context.java:644)
    at org.openmrs.api.impl.UserServiceImpl.changePassword(UserServiceImpl.java:357)
    at org.openmrs.api.impl.UserServiceImplTest.changePassord_shouldThrowPasswordExceptionWithAlldigitPassword(UserServiceImplTest.java:54)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)
    ... 15 more

</b>

Does this really work? That validate method i think expects non hashed passwords, probably you shouldn't validate this, the ticket says changePassword methods. I also think these should delegate to the changePassword method that validates the password to centralize the code

Use junit's @ExpectedException instead of this because it allows to check the actual error message since there is several sub classes of this with different error messages

As i mentioned earlier, these should delegate to the changePassword method that validates the password since it does some useful checks that these need too.

Is this stray? Or do you actually set it to test?

i did but it was temporally. I was intending to ask you if it was possible to get a user's password given that i already have a User object. I used test because in my Unit test, i used the default autenticated user who's password is test but i new this would not be okay because if in future this password changes, my unit test will break. Also if that changePassword method is called with a user who's password is not test will cause the code to fail. So my question now is, given that i have a user object, how can i retrieve his password as a string. Thanks

This method was a mistake in the first place, i guess you have to validate the new password manually and keep the old code for now, it is going to be removed soon since it is deprecated. Sorry about that!

It is good to have preconditions, but we try to avoid editing changesets, especially one like this where we don't expect one to have the table since it is new, have you tried to investigate why it already exists because that's what you might want to fix instead of this.

Aren't you just supposed to remove the deprecated annotation and not change the method code? Because it was already delegating to the the DefaultComparator anyways, i think this deprecation was invalid

Same here, you don't have to change the code, just remove the deprecate annotation

And get rid of this

Why are you renaming this to saveUser? Shouldn't you just be removing it?

Since i had to have saveUser that takes a user object, it is just the same. :)

I thought we already have saveUser() with 2 arguments

We agreed to have saveUser(User) taking only one argument. Then createUser(User, password) takes two.

I thought createUser was deprecated and removed, saveUser should take an optional password so that we don't need a new saveUser, did i miss the design call where this was decided?

Here is the ticket: https://issues.openmrs.org/browse/TRUNK-3871

I see! But i would imagine that the change should be effective in the commit for that ticket and not this PR 

I noticed that we closed the ticket before all that was needed.

Does this mean, this was a bug? Why did you have to change it?

No it was not. If you look at the DAO, these methods were deprecated in favor of PatientDAO#getPatients(String, Integer, Integer) where the first parameter string can either be a name or identifier.

I guess if it was working, then you might as well just leave it the way it was to avoid any issues coming up

It actually failed after the deprecated methods removal. So this change was the fix.

This test does not prove that updating the index automatically does not work, because the update only takes place when a transaction is committed, which never happens here (the transaction is rolled back by the end of the test). The test would have to be @NotTransactional to prove a bug. Can you try annotating the test with @NotTransactional and running it without your fix in line 301 in saveConcept?

@rkorytkowski : Thanks for the pointer. I did not knew search index is updated after every transaction. Closing this pull request as not required.

According to the ticket description, I thought the GP name is supposed to be drugOrder.drugOther

This doesn't seem correct, you need to fetch all the active drug order and of the patient, loop through them to find all drug other orders and compare their none coded value to this drug's none coded value

I believe this test already exist since this is what the old code was checking

It is good to add such test data to new test data file instead of the existing that you avoid touching these existing tests

I think these tests are unnecessary because you already tested the same code in the tests for isSameOrderable

If you added this concept and the GO to OrderServiceTest-nonCodedDrugs.xml above instead of here, then you wouldn't need to touch existing tests in ConceptServiceTest and AdministrationServiceTest

Delegate to isNonCodedDrug() when making the check. 

This should be checking if both orders have a none coded drug

I think this should check that also the non coded value is not blank, we normally user StringUtils.isNotBlank

You should actually replace all this logic, lines 187 to 195 should be replaced to use hasSameOrderable() since it pretty much duplicating the code in that method, and exception message should say "The orderable of the previous order and the new one order don't match"

Get rid of this method instead and where it is being used change the code to call hasSameOrderableAs()

You need to check that conceptUuid is not null and blank

uuid of concept -> uuid of the concept

Same here should be 'the concept'

Get rid of drug1 since it never gets used anywhere

If both drugNonCoded fields are null, then hasSameOrderableAs should return true if the concepts match

Did you see this comment?

Did you see this comment?

The test method says should fail if drug none coded is not set but the error message says "DrugOrder.error.cannotSetBothDrugAndNonCodedDrug", they seem contradictory

Should not be null

Is this required really?

This tests duplicates the one before it, i think you only need one of them 

I think you are missing some tests, see the acceptance criteria for the ticket and make sure all those scenario have been or already exist

If concept is drugOther, String drugNonCoded is compulsory.. this test is for that validation

what should not be null ?

Is it okay to executeDataSet in DrugOrderValidatorTest ?

This condition works fine for both non coded drugs as well.. could you please with an example scenario you are referring to

We are first checking if drug is required.. 
Based on concept DRUG OTHER and drug further validations will be done..

Agreed.. Made corresponding changes

As per acceptance criteria in OrderService.. Added tests  for following scenarios.
1) Adding new non coded drug - pass condition
2) Revising existing non coded drug - pass condition
3) discontinuing existing non coded drug - pass condition
4) Adding same non coded drug as existing - fail condition
5) Revising non existing non coded drug - fail condition
6) discontinuing non existing non coded drug - fail condition

Let us know if we miss out any acceptance criteria.

For example, DrugOrderA is nonCoded but with a blank nonCodedValue, DrugOrderB is a regular drug order meaning it has a blank nonCodedValue too, it means we will get into this if clause and the comparison will return true when actually these are not the same based on our acceptance criteria on the ticket but if you use AND instead of OR then the if clause would fail and the logic stays correct, makes sense?

In theory, they should both be nonCoded drug orders

isEmpty returns false for white space characters

You forgot to set concept on this first order

I thought drug should be null for a nonCoded order, but i see you are setting it here

Same here, I thought drug should be null for a nonCoded order, but i see you are setting it here

Forgot to set set concept on this order

It is better to call getNonCodedConcept instead of getConcept

I think this should say should fail, since this is a duplicate

Unless you meant to say different care setting

I think the reason this test passes could be because the new order is in a different care setting, the best way to write these tests is to copy most of the field values from the existing to ensure they are always the same

You should be copying care setting and other fields values from the existing to guarantee they are always the same

Copy this value from the previous and ensure the previous' value isn't null

Would be nice to have an asssertion that this isn't equal to the previous' non coded value

what should be copied?

Did you see this comment?

Did you see this comment?

This test is still incorrect, the test method says if the concept match but you are not setting the concept on the first drug order

Agreed to your point. But it will be caught in validator.
Lets say, we changed to use AND instead of OR. Now below scenario would fail..

Drug Orders with drugs null and one drug non coded value is null.. 
Since the if condition fails, it executes the drug check where it returns true and in reality they both are different orders.

But other code will fail before the validator is called.
If both drug orders have null drug and null non coded values, i think it is fair to think they are the same and it is okay for the condition to return true. Are you saying it returns true?

Anyways, it everything is passing we can leave it this way hoping the validator to catch it 

Don't change this method because they should also be able to change their password by providing the old password

This should call the DAO directly as it did in 1.11

You need to add a separate new method for this and keep the old one that takes the old and new password

@wluyima I just changed the variable name because it accepts either old password or answer to secret question, `secret` sounded like a better name than `oldPassword`.

What about the business rule in `changePassword(User, String, String)` that checks if user has required privilege, see [here](https://github.com/geoff-wasilwa/openmrs-core/blob/TRUNK-3871/api/src/main/java/org/openmrs/api/impl/UserServiceImpl.java#L623) 

No, that is supposed to be oldPassword, you need to add a new method that takes secret question and newPassword only

Because you changed it, that other method should only accept old and newPassword and not secret question

The new method will have the same signature as `public void changePassword(String pw, String pw2)` so I just thought and have that method take either `secret answer` or `old password` and work either way.

Then its signature will be confusing (parameters with mutable semantics is not a good idea in general).

I think this should be "Change user password given the answer to the secret question"

The code here should pretty much be the same, only different should be that this checks that the secret answer is correct. You could factor the other code in the other changePassword method into a utility method that they both call after checking that the old or secret password is correct

I actually can't see these unit tests

I thought you were going to update the other changePassword method too to delegate to this new utility method

There is also another changePassword method that takes the old and new password

The changePassword method that takes old and new password delegates to `changePassword(String user, String oldPassword, String newPassword)` and this already uses the utility method.

Ok, thanks

This comment does not make sense to me.

could you provide a link to something that documents/describes why we are doing this?

Could you please fix the javadoc? It is not intended for tests rather for use by modules to update the index in background after any database changes done omitting OpenMRS API and Hibernate.

"Administering Modules" is the wrong link here. We should create a _new_ wiki page called something like "User Interface Modules" which should describe that the OpenMRS Platform does not have a UI starting from version 2.0, and that they can install either (a) Legacy UI module, (b) Reference Application, (c) something else...

@djazayeri I am aware that "Administering Modules" is the wrong link. I googled for any openmrs wiki that was already built for that and the closest i could find was "Administering Modules". How ever i posted a comment on jira, saying that "Administering Module" link needs to be changed or the wiki modified. @djazayeri i would like to you give me all the information that you think should be on the wiki and also instructions on how to create the wiki. :-)

Are you sure about this line? Seems like it would change the behavior - `tmpExtensions` would always end up as a new Vector. 

With the old code, it's only initialized to a new Vector if `getExtensions()` fails.

Oh, I just realized that. The method never returns null though, it does the null checking itself.

typo here. Please fix

Fix formatting. Run formatter phase in maven. fileList==null doesnt do anything here since folder.isDirectory is checked above and listFiles returns null only if the File is not a directory. It will return empty if the directory doesn't contain any files

this method name is not good enough

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

use `CollectionUtils.isNotEmpty()`

It is wrong. You cannot remove elements from a collection that you iterate through using .remove as it will result in a concurrent modification exception. It must be done using the iterator. Please fix..

The 'for' should be simply replaced with allMessages.addAll(localizedMap.values()); 

You have just changed the whole buisness logic. We must only iterate over names in the specific locale. Please revert.

This logic seems a bit overly complex to me... 

LGTM

Why did you delete this? 

@dkayiwa you got an opinion? 

@robbyoconnor  I followed the definition for the Comparable class definition for this method.

@robbyoconnor Please Sir, what does LTGM mean?

@robbyoconnor  Sir, I guessed given the update I made to the compareTo() method following the comparable class definition for compare(). This was no longer necessary?

Looks fine nevermind. 

LGTM = Looks Good To Me 

I'm not sure... 

Nice ^_^

I think you need to ignore everything regardless of the extension except for the images in this folder in core

Typo, optnmrs -> openmrs
You also forgot to add openmrs-favicon.ico

I think you should ignore everything except for the files in this folder, because modules can have other file types like htm and html files that get copied here

Ignore this comment

@dkayiwa  is this what you asked me to do? i removed count(*) != 0 statement. :) 

Will do

I wasn't ignoring .ico files before so it wasn't necessary, but now we're ignoring \* so will add

@dkayiwa suppose View Visit does not exist in privilege table(this implies that View Visits does not exists in role_privilege table) and "View Encounters" Exist in role_privilege i.e. some role has "View Encounters" privilege then this code first adds "View Visits" in privilege tables if it already does not exist and then it add "View Visits" privilege to the role which has 'View Encounter " privilege if this role does not have "View Visits" already! 

@puevigreven after having looked at PrivilegeConstants, "View" needs to be changed to "Get".

@dkayiwa i added the limit by which only one record will be inserted. 
i am sorry for the mistake. :) 
i'll be more careful next time. 

Our convention is to wrap if clauses in curly braces

I think i would disagree with doing this, discontinuing existing  orders if any only makes sense when doing real time order entry

@wluyima If a user wants to record the fact that a discontinue order was issued on a certain day, how would he/she do it? 

Correct me if am wrong, shouldn't you instead be testing that the originalOrder.dateStopped is equal to discontinuationOrderDate.getDateActivated() but less by a moment?

I see no difference between this test and the one above except the test method name

On the design call, we agreed to what you're saying so you can ignore my comment, there is more details on the ticket, see Darius' last comment or the updated ticket description under dev notes

First one has a previous order. The second doesn't, so it tries to stop an active order by looking up the active orders present at that time.

Ok, thanks!

Did you see this comment?

Did you really add these @should with matching tests? Or you just copied them from saveOrder? I would assume @See saveOrder should be enough

?! Why can't re rely on autoboxing here? 

Actually this prevents NPE when unboxing (Boolean to boolean). A null cannot be converted to a primitive boolean. 

lame...just be like every other language and treat `null` as `false`...

yes see would be enough, but I did add a few more and changed a few according to the context of retrospective entry. Should I still do these changes?

@dkayiwa I am using it in the ConceptFormValidator.java file in legacyui

@dkayiwa Modified the test case,so that it is valid even if the ConceptDescription is set in any one of the locales.

@dkayiwa Modified the formatting :)

@dkayiwa Modified the testcase.

Alternatively, i think it should be okay for one to pass in a null locale and then in ConceptSaveHandler you set it to what is returned to Context.getLocale(), we could also add a constructor that only takes a actual description and the locale would still get set by the save handler

Why are you changing this? If the object is null, then of course there would be no fields to validate so i would expect no filed errors

I think this needs to be rephrased, it isn't quite clear to me what you are testing

Can you add a check that whatever you're going to test was okay before any changes?

This seems like a duplicate test of the one on line 485

It is not clear what you are testing here and the phrasing isn't clear too

I wouldn't complain about an empty description, the concept save handler should just remove such descriptions, i updated the ticket description to say this

@wluyima Changed the locale to null and Updated ConceptSaveHandler,so that it sets a locale if any null locale is found

@wluyima Updated the description

@wluyima Removed the message(Concept.Description.Existing.Required=Existing Description can't be Empty)
as I am not complaining when a user tries to save a concept with empty description,but only checking if there is atleast one description in any locale.
Updated the ConceptSaveHandler to remove any empty descriptions.

@wluyima 
Removed this test case as I am not generating any errors if a user tries to save concept with empty description.
I am checking for atleast one description in any locale and removing the empty descriptions in ConceptSaveHandler.

You no longer need to set this locale here since the save handler does this for you

Our convention is to include curly braces around if clauses

Save handlers are called after validators, therefore you also need to update Concept.addDescription to not add blank descriptions so that in case no none empty description was added, it gets caught by the validator

This is still confusing, the validate method you are testing doesn't return anything, what is the aim of this test?

Why do you need to insert this test data?

@wluyima Added braces around if clauses

@wluyima Updated addDescription so that it does not allow blank descriptions

@wluyima Updated addDescription

@wluyima Replaced Context.getLocale() with null

@wluyima My bad,it is not supposed to be here.I have added a test case to ConceptTest.java

@wluyima Audit info is set even if an item is added to concept,so I'm comparing Date objects just to make sure that audit info is set when an item is removed.

I also expected to see a test that shows that validation fails when the only description added is an empty string

@wluyima Added the test case.

Each @should is added because you're adding a unit test which you're not doing particularly, so these @should are actually redundant, you can keep the javadocs though that says 'Retrospective entry of orders can affect downstream systems that acts on orders created. Orders cannot be stopped if they are already stopped in retrospective entry.' since it's specific to this method

missing newline

My preference would be to inline the definition of locales, as just `Arrays.asList(new Locale(...), ...)`

From here onwards there is way too much unnecessary logic for the test. Just do something like:

```
List<Locale> presentationLocales = new ArrayList<Locale>(Context.getAdministrationService().getPresentationLocales());
assertThat(presentationLocales.get(0), is(...));
assertThat(presentationLocales.get(1), is(...));
// etc
```

Yeah I thought I would make it generalized (sort of). I'll just manually assert the hard-coded data then as you said.

Ok but the above template is followed in all the other test methods in the current file. Wouldn't you prefer I keep it that way? I tried to emulate the pattern of the other tests as much as I could since I figured they would be they way someone wanted to for a reason. Should I let it be then?

That's fine. Personally I tend to start writing with better more modern style.

I've merged this already, so no need to change it here. But going forwards I'd go with a style like this in tests like this:

```
List<String> expected = Arrays.asList(
    "one",
    "two",
    "three");
```

Isn't the drop statement for a temporary table different? Or the regular drop works for temp tables too

I thought you are comparing strings, right? So i would expect use of equals

This should be MessageSourceServiceTest

This is wrong.
1. The point of this ticket is to test the standard Spring Validator.validate(Object, Errors) method, and you have changed this to instead test the validatePersonName method.
2. You are testing two different things in the same test.

Basically you should have two tests:
1. "validate should report errors on correct field names" => calls validate(Object, Errors)
2. "validatePersonName should report errors with nonstandard prefix when called in historic way" => calls validatePersonName(PersonName, Errors, true, false)

This is unnecessary. The next line asserts what this value _should_ be. You don't need to also assert what it should _not_ be.

(In fact, if this test were ever to fail, it would be confusing to whoever looks at it because they'd be seeing the failure on this line, i.e. should _not_ be xyz, instead of the next line saying what the value _should_ be.)

I'm quite surprised that this is the correct fix. (I would expect that activeMessageSource.getMessageSource(MessageSourceResolvable, Locale) would be part of a Spring class that should already be behaving correctly to Spring's specifications....

Apparently it is, I've always guessed that this is a spring bug because we never do anything with resolving the code in our message source implementation, you can clearly see [here](http://grepcode.com/file/repository.springsource.com/org.springframework/org.springframework.context/3.0.3/org/springframework/context/support/AbstractMessageSource.java#155) that spring is returning the first message code which is contrary to what they preach in their javadocs

I would imagine that removeAddress and the call to PersonAddress.setPerson are technically mutually exclusive, so this should probably be an if-else clause or you should call continue after removing it. I know the ConceptSaveHandler code for descriptions has this same issue, i will fix it

@wluyima Thanks for pointing it out,I have added a continue statement.

@wluyima regular drop worked for me when i wrote dropTemporaryTable  in the tag 
it gave me error 

I would assume liquibase doesn't have an equivalent tag, you might have raw SQL, what error did you get?

Line 324 in this file as to go too right? Sorry I couldn't add a line comment there and github wouldn't allow me to do that

I'm not sure how well I've accomplished the job. Quite a task this! :)

Don't just comment this out, delete the whole file. (Note that this is going to generate a cascade of different things to delete or fix, but that is the point.)

yes, you should also be removing lines somewhere else in this file that were wiring templateDAO into some service.

Yeah I actually went ahead and fixed a whole lot of stuff and it got wayyy to complex. So I'm doing it in parts. I'm currently dealing with this class now. It's a lot of files interlinked, espeically to this `MessagePreparator` class

@wluyima    Invalid content was found starting with element 'dropTemporaryTable' .This was the error

Did you execute raw SQL or some liquibase tag?

@wluyima The error was due to the liquibase tag i used

Which tag?

Please remove the precondition. GenerateUuid can be run on any database as it uses generic SQL.

The javadocs of this custom changesets class actually suggest that it should only be used for databases that don't have inbuilt uuid generator functions, so i think that we have the preconditions and only use this for those DBs. You should have 2 changesets with the second using the in built functions for the appropriate DBs, we do have a couple of changests that do this that you can look use as an example. The primary reason i'm saying this is because the idExceptions feature i think is flaky in that it assumes you have exhausted all tables columns that don't follow the naming convention of id columns which might not be the case, so i would avoid it as much as possible

@wluyima  dropTemporaryTable tableName="temp" i got error for writing this

Which error? Can you share the stacktrace?

@dkayiwa please have a look at this. 

What's this variable for? 

Do not harcode english messages, use properties.

@lluismf please look into this, i have tried to use properties instead of hard coded message. 
thank you. :)

Yes that's it. I assume error.exceededMaxLengthOfField property already exists, right?

yes @lluismf it exists. Its been used in ValidateUtils.validateFieldLengths().

I see, but then why don't you use ValidateUtils.validateFieldLengths ? 

Why don't you use hibernate's ClassMetadata, otherwise getDeclaredFields wouldn't return inherited fields and also not all fields defined on a class are persistent.

The way getMaximumPropertyLength is implemented, the argument value is supposed to be the database column and not the java property name which can be different e.g Location.cityVillage is named city_village in the DB

Why are you using both reflection and hibernate class metadata to do the same thing? ClassMetadata should be all you need

Can you please have a test with a field where the column name differs from its mapped java property name? E.g Location.cityVillage

I think we need to fix AdministrationService.getMaximumPropertyLength to be clear, i think it was intended to take the java property name and not the column name in the DB

Exactly, just get the properties of string type and invoke ValidateUtil.validateFieldLengths. There are 52 references to this method that will be redundant after this change. 

@lluismf is right, just use hibernate class metadata to get the mapped fields of the persistent type and delegate to ValidateUtil.validateFieldLengths. The only problem is that the method actually takes column names and not property names, i doubt that this was not intentional, i think if it as a bug

Its name is clear, otherwise it will be getMaximumColumnLength. 
And its implementation expects a property, not a column:
`fieldLength = ((Column) persistentClass.getProperty(fieldName).getColumnIterator().next()).getLength();`

Why the line wrapping ? 

I was on the 1.12.x branch, i see this was fixed in 2.0.x and master at 41207c6c8a065a5af97be14807a7fe2cb965fe0b. Previously the method actually used column name but it has been fixed ever since.

You don't need to use reflection here, you need to delegate to ValidationUtil when looping over the class metadata below. The ClassMetadata Object has three methods to get information about identifiers, i.e getIndentifierPropertyName(), getIdentifier() and getIndentifierType, so you don't need to use reflection

you don't need to check for java.lang.String or does hibernate automatically convert it to string.
You also need to check for text

I would make this consistent with the one below

I starting to think you should get the value from the class metadata and you don't delegate to ValidateUtil so that you don't need the reflective code in case there are fields with no getters

Where do you use this?

The code in you had in this commit 71fc81ddb092939e33f9e1f6b2e54fb8623a9b11 seems more correct to me as long you address the comments on it

this getIdentifier(Object) method is deprecated, can you please use the other one that takes a SessionImplementer instance?

I think it would be nice to check the actual error message code because the field might be invalid but because of something else, you can loop over all the fields since the error message is expected to be the same

check the message code

Add @since to new classes and public methods

Is the ordering important to not use HashSet?

Correct me if am wrong, my assumption is that the returned collection is always sorted based on the sortWeight of the individual orders

This is already implemented in BaseOpenmrsObject which is one of the superclasses

Same here, this is already implemented in one of the superclasses

Removed the equals method from OrderSet.java, OrderGroup.java, OrderSetMember.java

Removed the equals method from OrderSet.java, OrderGroup.java, OrderSetMember.java

Added @since 1.12 to 
: OrderSet, OrderGroup, OrderSetMember classes,
: OrderSetService, HibernateOrderSetDAO, 
: new methods in OrderService
: new fields in OrderClass

It is just to maintain the consistency as it is in OpenMRS.

Currently in Encounter.java, we are maintaining a Set<Orders>. Same thing we used in maintaining the list of Orders in OrderGroup as well.

Not Applicable:

We have removed Set<OrderGroups> from Encounter as a change from the latest discussion

By convention we don't add @since to things that are not part of the public API which of course applies to new private fields and methods, it is the setters and getters for the fields that should have them since they are public

If ordering is not important, then i guess use a regular HashSet

But the ordering of the orders in an encounter is not important but for an order group i think it is 

But how comes i still see it here, have you committed the changes? FYI, you don't need a new pull request as long as you push your changes to the same remote branch linked to this pull request

@wluyima are you suggesting this should be SortedSet instead of Set? Or are you suggesting something else?

Please change this IntelliJ setting. We don't do any wildcard imports in non-test code.

Fix this also.

Better to avoid doing a class-level @Transactional annotation on the service, and instead put this only on the methods that need it.

capitalization should be unretireOrderSet (not unRetire)

I think that since you're extending BaseOpenmrsService you don't need to implement these empty methods.

All these privileges should have spacing like `GET_ORDER_SET = "Get Order Set"` as is done in other examples in this file.

Should have a single "Manage Order Sets" privilege instead of separate ones for Add and Edit. (This is the OpenMRS convention for _Metadata_ (whereas _Data_ does have separate Add and Edit privs).

missing FK constraints on changed_by and retired_by

Don't do this. And turn off this IntelliJ setting please :-)

Is this happening automatically?

Rename `sortWeight` to `sequenceNumber` (since "sort weight" is used as a double in [most other cases](http://resources.openmrs.org/datamodel/openmrs-data-model-1.11.html#.sort_weight)).

Yes am assuming it should be a SortedSet and the ordering would be based on the sortWeight of the orders.

Purging order sets isn't allowed?

Missing @since

The DAO is not publicly exposed to API consumers, so you normally don't need @since in the DAO 

Forgot curly braces around this if clause

So the assumption here is that an order set can't have set members of the same concept, is there any validation to guarantee this when creating an order set? 

AOP around retire methods i believe already sets the reason

I think by convention this would be saveOrderSet

By convention this should be plural i.e GET_ORDER_SETS and 'Get Order Sets' for the value

Same here

I think this needs to be longer than 3 just in case another enum constant is added

Shouldn't this be unique? Or voided duplicates are allowed?

It's good practice to add each column in its own changeset so that precondition failure for one doesn't affect the other

May be i missed one of the design calls, why do you have to ignore orders in the encounter that belong to an order group?

By convention we use the plain native id generator, is there a compelling reason for being different here?

I doubt you're gonna have that many order groups with many orders to really need batching

same here

When forward porting, this needs to be updated in master and 2.0.x to use **org.hibernate.type.EnumType**

Same here, i doubt if order set members would be that many

This is not correct, orderGroup and sortWeight need to be copied too, this should stay unchanged instead you update Order.copy to copy over these fields too

Same here, orderGroup and sortWeight need to be cloned and you undo this change

This needs to be undone

Same here, you need to undo this

A revised order is just like any other order so it can have an order group and sortWeight

You need to undo this

Since this is intended to be a unit test which tests validation logic in the OrderValidator so it belongs to OrderValidatorTest

Would be nice to test the error message too otherwise this could be an validation exception for something else

Is this really needed?

Do you change the locale in any of your tests?

Isn't this a reputation? And do you really need to update the search index?

Do you need to call intValue() which returns a primitive when checking for not null?

Can you also assert that dateChanged and changedBy have been set? You will also need sanity checks before saving to ensure they are null

This seems a bit confusing, for this to make sense i would assume the test data should be set up in such a way that you have some voided and none retired members, when "OrderSet should contain orderSetmembers" and "OrderSet should not contain voided orderSetmembers" both are checking for the same count it makes it unclear and shouldn't be 'retired' and not 'voided'. Also getSetMembers needs to be overloaded to have another variation that takes a boolean flag that indicates if retired members should be included. I would also assume passing false to OrderService.getOrderSets should not automatically propagate to the set members of the OrderSets i.e saying that exclude retired OrderSets doesn't translate to also excluding retired set members for each of the returned sets

Add a concept_description too, otherwise tests might fail when we forward port to 2.0.x and master

This should call Context.getOrderService().saveOrder so that any advice around the method is not bypassed

As a part of the design call, it was decided that it can have duplicates. The name may not be unique

This implementation is changed

Should I change it right now. Because I see all the 1.12.x versions uses **org.openmrs.util.HibernateEnumType**

Changing this to **org.hibernate.type.EnumType** 
gives me this error while running tests
**Unable to instantiate custom type: org.hibernate.type.EnumType**

The expectation was that the revised order, be just a normal order, which doesn't have any ordergroup or sortweight, that is why we had not put while doing a revisionClone.

Anyways I have put it now. The setting of the value of these fields can be handled while doing a revision.

I didn't get you

I said when forward porting to 2.0.x and master we have to remember to make the switch to use hibernate's standard EnumType and not 1.12.x

Shouldn't this be the orderGroup from the order being cloned? Otherwise it is redundant to be setting null because anyways thy are already null

Clarification, no need to set null values, i would just not include these 2 lines

Why does this need to be synchronized?

Right now the encounter is not having any orderGroup associated to it.  The encounter has orders which internally has orderGroups. And an orderGroup contains orders. 

So this mapping is not needed

But as an API consumer, if i look up an encounter i expect Encounter.getOrders() to return all orders linked to it regardless of whether they belong to an order group or not, with this where in the mapping file, it means getOrders won't return orders that belong to some order group even though they belong to this encounter

@ys-achinta from the comments above here, aren't these orders supposed to be returned in some order?

You are correct it should return all the orders irrespective of order_groups.
 That condition for order_group_id is null, in encounter mapping file is now removed.
 I missed to remove it from the mapping file. Modified and pushed it now.

- It's good practice to check first if the passed in order is not null.
- Sequence number is an Integer which already has standard code for comparing integers that you don't need to duplicate, just delegate to the compare function of Integer class, so you won't need line 44 below that returns 0. 

First point understood.

Second Point: Yes the compare I will delegate to the Integer class.
But even then I will need line 44 for the else clause right?
Because the compare logic is only for orders that are having sequenceNumber set for them,
not for others.
So I would anyway need the else return logic.
Am I understanding correctly?

Do you have to implement this? 

Do you have to implement this too? 

Did you test that this is no longer necessary? If yes, then we can get rid of the code instead of commenting it out

I still don't understand why these changes are necessary. We expect the value from the DB to match the correct class name, if not then we need to fix the upgrade scripts to do so

Shouldn't this be longer than 255?

I think calling deleteAllData() should be enough without the super since it is not overidden in this class

Then i guess we can leave it as 255 here and override it in the concrete classes

You should not be using xstream, you need to return the locationId? @djazayeri  am starting to think that this should return the uuid

Shouldn't this be fetching it from the LocationService?

This method should be testing serialization, so you should check that the serialized value is equal to what you expect

Add @since 1.12

Add @since 1.2

You also need to implemenet doGetTextSummary() and return the location name.
I would actually have an abstract class for all metadata that does this out of the box

You should just delegate to the datatype.deserialize()

i would just return the value returned by datatype.getTextSummary()

The ticket description was edited, can you please extend BaseMetadataDatatype?

You won't need to override this

You can merge these 2 lines into one with something like:

return Context.getProviderServiece.getProviderByUuid(serializedValue)

You can get rid of this

And this

This should extend BaseMetadataFieldGenDatatypeHandler and get rid of the methods here that are already implemented in the base class

Can you please use spring's MockHttpServletRequest, you won't need this class

Why format these file?

Why are you adding these locales here? And why are they hard coded?

Why are you commenting out this?

And this?

Is copying of the files unnecessary?

The ticket description was updated, please extend BaseMetadatatype

Extend BaseMetadataFieldGenDatatypeHandler

You won't need this actually once you extend BaseOpenmrsDatatype

I posted another comment saying that you ignore that comment but i don't know what happened to it, ignore it

Why not just load all files matching *messages*.properties?

Much better!

Do you think ServletContextResourcePatternResolver would have reduced the lines of code here?

missing @since

You might as well get rid of these since they are blank

To avoid an exception with no helpful error message, i would get rid of this default constructor

as per the ticket description i would expect the opposite of this

So you probably don't need this @should

And this should go away i.e the if clause

I don't think you need this test data, you should just place an order for with a concept or drug that matches that of an existing one

The same applies for drug orders, if someone calls discontinue a given drug and there is multiple orders with a matching drug and lets say different strengths, then the call is ambiguous too

Can you also add a test for drug orders too?

Can you please add the @should to the method in OrderService?

You don't need the else clause, it is redundant, just return null

This logic is actually not exactly worng because checkDrugOrdersForDiscontinuing could return null, the else clause on line 338 above assumes checkDrugOrdersForDiscontinuing won't return null, i will fix it

You shouldn't override this method, the base class if doing the correct thing

The first type parameter value should be **ProgramDatatype** and not **DT extends BaseMetadataDatatype<T>**, so the class declaration should be:
**public class ProgramFieldGenDatatypeHandler extends BaseMetadataFieldGenDatatypeHandler&lt;ProgramDatatype, Program&gt;**

The type parameter value should be **Program**, therefore your declaration should be as below:
**public class ProgramDatatype extends BaseMetadataDatatype&lt;Program&gt;**

Sorry, yes you need to implement deserialize, and the typical implementation is to fetch the object by uuid from the appropriate service since serialize from BaseOpenmrsDatatype does return the uuid.

You also need a test to ensure that it passes for overlapping orders in case the parallel orders are specified

I think you should use the orderContext for now instead and not overload this method

I think the parallel orders should be uuids instead of order objects

ProgramWorkflowService

I see a couple of these 'Q's after the opening angel brackets, can you please remove them?

It is pointless to pass in a null value here when there is a constructor that takes no argument, i will remove it

This won't work, you need to use Context.getProgramWorkflowService() and not new ProgramWorkflowServiceImpl() 

I already committed the fix and closed the ticket, thanks though!

Does this really work? That validate method i think expects non hashed passwords, probably you shouldn't validate this, the ticket says changePassword methods. I also think these should delegate to the changePassword method that validates the password to centralize the code

Use junit's @ExpectedException instead of this because it allows to check the actual error message since there is several sub classes of this with different error messages

As i mentioned earlier, these should delegate to the changePassword method that validates the password since it does some useful checks that these need too.

Is this stray? Or do you actually set it to test?

This method was a mistake in the first place, i guess you have to validate the new password manually and keep the old code for now, it is going to be removed soon since it is deprecated. Sorry about that!

According to the ticket description, I thought the GP name is supposed to be drugOrder.drugOther

This doesn't seem correct, you need to fetch all the active drug order and of the patient, loop through them to find all drug other orders and compare their none coded value to this drug's none coded value

I believe this test already exist since this is what the old code was checking

It is good to add such test data to new test data file instead of the existing that you avoid touching these existing tests

I think these tests are unnecessary because you already tested the same code in the tests for isSameOrderable

If you added this concept and the GO to OrderServiceTest-nonCodedDrugs.xml above instead of here, then you wouldn't need to touch existing tests in ConceptServiceTest and AdministrationServiceTest

It is good to have preconditions, but we try to avoid editing changesets, especially one like this where we don't expect one to have the table since it is new, have you tried to investigate why it already exists because that's what you might want to fix instead of this.

Aren't you just supposed to remove the deprecated annotation and not change the method code? Because it was already delegating to the the DefaultComparator anyways, i think this deprecation was invalid

Same here, you don't have to change the code, just remove the deprecate annotation

And get rid of this

Why are you renaming this to saveUser? Shouldn't you just be removing it?

I thought we already have saveUser() with 2 arguments

I thought createUser was deprecated and removed, saveUser should take an optional password so that we don't need a new saveUser, did i miss the design call where this was decided?

I see! But i would imagine that the change should be effective in the commit for that ticket and not this PR 

Does this mean, this was a bug? Why did you have to change it?

I guess if it was working, then you might as well just leave it the way it was to avoid any issues coming up

Delegate to isNonCodedDrug() when making the check. 

This should be checking if both orders have a none coded drug

I think this should check that also the non coded value is not blank, we normally user StringUtils.isNotBlank

You should actually replace all this logic, lines 187 to 195 should be replaced to use hasSameOrderable() since it pretty much duplicating the code in that method, and exception message should say "The orderable of the previous order and the new one order don't match"

Get rid of this method instead and where it is being used change the code to call hasSameOrderableAs()

You need to check that conceptUuid is not null and blank

uuid of concept -> uuid of the concept

Same here should be 'the concept'

Get rid of drug1 since it never gets used anywhere

If both drugNonCoded fields are null, then hasSameOrderableAs should return true if the concepts match

Did you see this comment?

Did you see this comment?

The test method says should fail if drug none coded is not set but the error message says "DrugOrder.error.cannotSetBothDrugAndNonCodedDrug", they seem contradictory

Should not be null

Is this required really?

This tests duplicates the one before it, i think you only need one of them 

I think you are missing some tests, see the acceptance criteria for the ticket and make sure all those scenario have been or already exist

For example, DrugOrderA is nonCoded but with a blank nonCodedValue, DrugOrderB is a regular drug order meaning it has a blank nonCodedValue too, it means we will get into this if clause and the comparison will return true when actually these are not the same based on our acceptance criteria on the ticket but if you use AND instead of OR then the if clause would fail and the logic stays correct, makes sense?

In theory, they should both be nonCoded drug orders

isEmpty returns false for white space characters

You forgot to set concept on this first order

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l498)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l474)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l522)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l510)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l486)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l449)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l498)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l474)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l85)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l462)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l522)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l486)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l449)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l85)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318747982/issues/source?bid=3204099&fileBranchId=3204128#l462)

What do you mean by the case for strings?

Please ignore this kind of issues. It is a misconfigured analysis rule.

Please ignore this kind of issues. It is a misconfigured analysis rule.

Do you plan to address this TODO?

As changing from lowercase to uppercase or vice versa

Nope, we should probably have a ticket for it

@wluyima do you know why bamboo is failing with this commit?
It passes locally and on travis.

Correct, you can rephrase it, it should be something like '@should mark the obs as dirty when a new member is added'

Dosing type is no-longer either of these values, please change the where clause to use the right values as mentioned on the ticket

You could actually zero down this check to the real column you are interested in

By the way, do we use this service anywhere?

Nope, no implementations in core. 

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/file/2381292621/issues/source?bid=3224683&fileBranchId=3225837#l40)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/file/2381292621/issues/source?bid=3224683&fileBranchId=3225837#l47)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/file/2381292431/issues/source?bid=3224683&fileBranchId=3225837#l87)

So when will you ensure that this test passes? :)

What is the reason for changing this?

You can use the same modules as those in ModuleActivatorTest

I wanted to make sure a modules dependencies are always started before the module is started. And i thought it would make sense to do that only in one method, that is why i delegated ModuleFactory.startModule(Module) to the one that has my changes(ModuleFactory.startModule(Module, Boolean, ApplicationContext) ). Looking at the implementation of Daemon.startModule(Module) shows that my change makes no difference in the logic because Daemon.startModule(Module) will call Daemon.startModule(Module, false, null) which is essentially the same thing i have done but just at higher level. @dkayiwa does that make sense to you? 

That is exactly why i asked :)

@dkayiwa oh, i understand now, everything will still boil down to the method that has my changes. :)

@dkayiwa i have done some checking again in the code and i realised that if i don't do that change as i did, when someone tries to start a module using ModuleFactory.startModule(module), following the method calls shows that it will end up in [ModuleFactory.startModuleInternal(Module, Boolean, ApplicationContext)](https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/api/context/Daemon.java#L64), therefore completely bypassing my changes in the other method. I think this is what i was trying to avoid when i wrote the code, please check again and see if am right.

I do not get you because Daemon.startModule(module) automatically calls startModule(module, false, null)

yes, but its calling Daemon.startModule(module, false, null) not ModuleFactory.startModule(module, false, null) and my changes are in the latter method. 

@dkayiwa does the above comment explain my point?

Yes. But the problem with your change is that the module no longer starts in a daemon thread.

i thought this [line](https://github.com/ivange94/openmrs-core/blob/TRUNK-4668/api/src/main/java/org/openmrs/module/ModuleFactory.java#L612) is enough to make it start in a demon thread?

Correct. Have you looked at ModuleFactory.startModules() in reference to your changes? See where is the comment: // Skip module if required ones are not started

I presume you are talking about the section i deleted that was taking care of missing dependencies. I did that because i moved the functionality to [here](https://github.com/ivange94/openmrs-core/blob/TRUNK-4668/api/src/main/java/org/openmrs/module/ModuleFactory.java#L604) and since ModuleFactory.startModules() makes a call to ModuleFactory.startModule(module) [here](https://github.com/ivange94/openmrs-core/blob/TRUNK-4668/api/src/main/java/org/openmrs/module/ModuleFactory.java#L237) which ends up making a call to ModuleFactory.startModule(module, false, null), i didn't think it was necessary to leave that there again. And UI test shows that it functions as required.

Oh i see! Ok finish the tests. :)

I will look at the examples you proposed in ModuleActivatorTest and see if can get the tests working before the end of tomorrow :). 

According to this comment, this assertion has nothing to do with this test. In other words, the assertion would pass if MockExtension had a valid class loader.

Did you add a should annotation for each and every test you added?

No I did not. However I believe these three annotations are sufficient for the 8 tests that I have added. 3 of the 8 tests test the case when one of these parameters are null. Another 3 of the 8 tests test the case when two of the parameters are null. The remaining two tests test the case when all of them are null or none of them are null. The should annotations I have added implies that regardless of whether any of the parameters are null or not, the method should not fail. 

If you want to break the convention, you will need to start a discussion on talk to defend your argument.
We even have a tool that generates a test for each should annotation. https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin

I did not realize that each should annotation needs to correspond to a test. I have added/changed the should annotations so that each one corresponds to a test case now. Thanks.

@ern2 my recommendation is that you spend your energy while prioritizing on real functionality tests instead of simple null argument validation tests. :)

@DrRacket did you look into why this assertion fails?

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749994/issues/source?bid=3204099&fileBranchId=3204129#l119)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid unnecessary constructors - the compiler will generate these for you](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749641/issues/source?bid=3204099&fileBranchId=3204129#l32)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749994/issues/source?bid=3204099&fileBranchId=3204129#l128)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749999/issues/source?bid=3204099&fileBranchId=3204129#l30)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749997/issues/source?bid=3204099&fileBranchId=3204129#l20)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused private fields such as 'log'.](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749637/issues/source?bid=3204099&fileBranchId=3204129#l30)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid unnecessary constructors - the compiler will generate these for you](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749637/issues/source?bid=3204099&fileBranchId=3204129#l37)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749996/issues/source?bid=3204099&fileBranchId=3204129#l33)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Use explicit scoping instead of the default package private level](https://www.codacy.com/app/openmrs/openmrs-core/file/2318749996/issues/source?bid=3204099&fileBranchId=3204129#l23)

Please ignore this kind of issues. It is a misconfigured analysis rule.

Why don't you do a criteria that filters by userId instead of fetching all and then filter in code?

Shouldn't sender and receiver be User object instead of Integer?

Don't you want to add some foreign key constraints for sender and receiver?

Are you sure content will not exceeed 50 characters?

It should be a CLOB

Dangerous method, could lead to an out of memory exception.

Even doing a filter can be slow or take up a lot of memory if the user has sent many messages. 
I would return a ScrollableResults object instead of a list or add pagination parameters. 

I was trying to follow the requirements on the ticket, because it looked liked the requester wanted to persist only the ids of the sender and the receiver.

@lluismf i don't understand this point. The API documentation says nothing about this. Please point me to something i can read online, you know am still learning.

@dkayiwa nope. will fix that, until now i always varchar could take an abiturary number of characters. :), i guess i was not concentrating well in class when it was thought in first year or my teacher just thought me wrong. 

Since this method already throws an exception, why do you catch it?

In general you should avoid getAll methods in the DAOs, unless it's a small table (hundreds of rows at max). If number of messages is huge, this method will load all of them in session and the VM will run out of memory. 

Check this
https://herbertwu.wordpress.com/2009/04/24/handling-large-collection-data-%E2%80%93-hibernate-pagination-scrollableresults-and-native-sql/

If you return NULL instead of an empty list, the API clients will need to check it. I think it's a bad idea.

I picked that convention from other tests in the file. Look at this [line](https://github.com/openmrs/openmrs-core/blob/master/api/src/test/java/org/openmrs/notification/MessageServiceTest.java#L96)

@lluismf i think its bad idea too. But the convention of returning null is all over the openmrs API, so i thought there was a reason it is done like that.

@lluismf Oh i see. I get your point now. But i got that by looking at other DAOs and almost all of them has a getAll method.

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/file/2376712033/issues/source?bid=3224683&fileBranchId=3224712#l20)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused imports such as 'org.junit.Assert'](https://www.codacy.com/app/infrastructure/openmrs-core/file/2376712030/issues/source?bid=3224683&fileBranchId=3224712#l16)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/file/2376712030/issues/source?bid=3224683&fileBranchId=3224712#l120)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/file/2376712032/issues/source?bid=3224683&fileBranchId=3224712#l70)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/file/2376712032/issues/source?bid=3224683&fileBranchId=3224712#l49)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [You may have misspelled a JUnit framework method (setUp or tearDown)](https://www.codacy.com/app/infrastructure/openmrs-core/file/2376712032/issues/source?bid=3224683&fileBranchId=3224712#l27)

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/file/2376712032/issues/source?bid=3224683&fileBranchId=3224712#l59)

I'm not aware it's a convention. Hibernate methods returning lists never return NULL precisely to avoid null checking.

VARCHAR has limitations in almost all RDBMs. Oracle for instance is 4000. 

You probably looked at metadata DAOs. Getting all orders, visits, patients ... makes no sense.

it might not be a convention. What i meant is, that i see it a lot in the code. :)

You may bring it up in Talk, but I guess it's just for metadata entities (low volume).

Even when we have the User object, we still persist only the user id. :)

@winglam shouldn't this test be about creating a patient without an identifier type, as the ticket suggests?

Your method name says should NOT throw module exception. But your test expects it. Do you notice this contradiction?

Our convention is for each test to have one should instead of two as you have done here. https://wiki.openmrs.org/display/docs/Unit+Testing+With+at-should+Annotation

The method naming differs form the should annotation text.

Does each of these tests have corresponding should annotations on the method being tested?

I have fixed this.

Yes, each test has a should annotation and matching name.

Can you correct the grammar for the above should? "but name if exist"

This test name does not match with its should annotation.

This, too, is done as well.

Sorry about this, this is done.

A more realistic test to increase coverage of the un tested processDeath method would test the real business logic instead of simply testing for throwing an exception with a null patient argument. Does this make sense?

Future efforts will be spent in the business logic direction, however the purpose here is to test robustness as software should fail safely.

Of recent i have seen a pattern of different people trying to increase test coverage by mostly testing for null arguments. Am now discouraging that by requiring to at least include some business logic testing, before i can merge.

Do you really need to insert the privilege? I thought the API does it automatically unless if you saying that they're not yet inserted by the time this gets run. If it isn't the case, I would think this should be split into 2 changesets to be more readable where one adds the the privilege and the other associates to the appropriate roles

I thought on the ticket they mention the 'View Patient Programs' privilege too

I'd indent lines 23-53 to make it more readable

PR Updated,
i did ctrl+shift+f to format the jsp

It's actually good practice and cleaner to leave this space at the end, therefore it was intentional and I think you should undo this

Same here

And here

I already merged the code, never mind

Wildcard imports are discouraged (in JSP also) 

I agree

In fact we discourage them throughout our code base including classes

These changesets needs to be two, one for converting SIMPLE and the other FREE_TEXT

I think since it is an update query and the precondition is an either or check, then the whole changeset is good enough instead of  being split into two

You should never  combine changesets like this because:
1. The precondition tests 2 scenarios where some installations can meet just one of them
2. You don't want failure of one update to affect the other.

I've read https://issues.openmrs.org/browse/TRUNK-4845 to understand why the classname is stored here. It's kind of weird. What happens if the class is refactored? Is there any good reason to do this ? 

Initially we added dosing_type as an enum and was required, we went a head to add a changeset that set the default values for existing rows. Later we changed it from being an enum to being fully qualified java class names for reasons i won't go through and were legit, but we forgot to change the changeset that sets the default values for existing rows from being enum values to class names and this is meant to fix that.

I wonder what you're coding against, I see this check [here](https://github.com/ldf92/openmrs-core/blob/PatientSetServiceTest/api/src/main/java/org/openmrs/api/impl/PatientSetServiceImpl.java#L239) already

Never mind, I was looking at a different line

I don't think you need the semi colon at the end

I think the comment needs to be specific that you're converting for simple dosing type so that it is different from that of the next changeset

Same here

Although this works too

The proper thing to do here is to use junit's ExpectedException object instead of a try and catch, for an example see [here](https://github.com/openmrs/openmrs-core/blob/master/api/src/test/java/org/openmrs/api/OrderServiceTest.java#L145)

Same here

Get rid of this instead of commenting it out

The reason I used try-catch instead of ExpectedException is because for some reason, ExpectedException cannot catch exact error message. If the actual error message is a subset of the expected message, it validates it to be true. I tried it before to make it cleaner code, but since it did not work for our purpose, I changed it to try-catch

Oops, I missed that one! I'll get to it

ExpectedException also takes a Matcher argument where you can use exact comparison

To be specific use the other method that takes a Matcher and use the isEqual Matcher so that you check that the messages are exactly the same

What is the use of the above should?

The formatting here looks ugly. Did you run mvn clean install before committing?
https://wiki.openmrs.org/display/docs/Pull+Request+Tips

Fix this and should annotations.

The formatting here does not look correct. Did you mvn clean install before committing?

You can user Assert.assertNull instead

Same here

I have made the changes for both cases.

You forgot to change this

This is incorrect, it should be

`Assert.assertNull(person.getAttribute(type));`

Thanks. I completed the changes.

I thought the ticket requires fixing why the exception is thrown and not handling it

Shouldn't this also be transactional read only?

Don't you want to add the if not table exists precondition?

You may also want to add a comment

Is the file name really null?

We discourage using wild card imports https://wiki.openmrs.org/display/docs/Coding+Conventions

Is this the only change necessary for this ticket? It would be easier to review this if you separated (two pull requests) the cosmetic WebConstants. prefix changes from the actual fix for the reported problem. Does it make sense? :)

Sory for that, I've missed that Intellij made it automatically. 
I've updated PR

@AdamGrzybkowski do you mind adding a test for this?

Can you use a more meaningful variable name than just string?

Are the three lines below necessary for this ticket?

Can you make the method name more readable? That is the part after "_"

Can you assert that result is not empty?

This doesn't sound exactly correct, I think this should say "indicating whether the order was activated before or on the current date"

How different is this from 'return false for an order not activated'

isActivated() already checks if dateActivated  == null, so you don't need to check if it is null again here

Same here

Can you update this to use the StringUtils from spring since it is already imported in to the class, I think the equivalent method to call is StringUtils.hasText()

Can you add a local variable and assign new Date() to it? So that you re-use it instead of creating multiple instances

This test doesn't seem correct to me, to guarantee that the dates are the same, you have to create one instance of date and reuse it as dateActivated and checkDate. Otherwise the only reason this test is passing is because by the time isActivated() is called, a new instance of Date is created a couple of milliseconds later which puts checkDate always after dateActivated, feel free to print the dates when comparing them and you will realize this.

In theory, you should not duplicate these tests for both isActivated() and isActivated(checkDate), all tests should be against isActivated(checkDate) except for one where you test that when isActivated() is called it defaults to now

@wluyima :+1: 

:+1: 

:+1: 

@wluyima should I? This is not part of the issue but if you insist I will.

sure

@wluyima tests case wher dateActivated is null

@wluyima done

Or you can say "indicating whether the order was activated as of the current date"

Then I think the wording needs to be clearer, one should say when date activated is null and the other should say when date activated is after the check date

Thanks!

You don't have to but it would be nice to clean it up, the two method calls are equivalent but the with the second you won't have that 'ugly' fully qualified java class name

Am struggling to marry these two line deletions with the pull request message. :)

You should have an @should here to test that this method defaults to now as the check date

@wluyima as I already told you isActive(), isActive(null), isStarted() and isStarted(null) don't have the test you are asking me to write. Tell me how to test this and I will.

👍 

@djazayeri can I get your opinion on this topic. I think @wluyima and I disagree here. he wants a test for case `isActive(null)` which leads checkDate to default to `new Date()`. This hasnt been tested in any method in this class (isActive(), isActive(null), isStarted() and isStarted(null) are not tested). Not saying this is an argument for not doing it but I just dont know how. I would be happy to do so but need more instruction.

I wouldn't write this test myself, but I can see the argument for doing so. @wluyima can decide whether this is required or not.

This looks to be testing more than what the method name says. :)

@MarcusViniciusCavalcanti after taking a second look at this, the actual message key in use is what you changed. So to switch to this new key, you would need to first search and replace all places where the old key was used. Am therefore closing this pull request such that you create a new one with this recommendation. Thanks again for taking time to work on this! 👍 

@wluyima if I should do so, can you please be specific in how I should do this? Extracting new Date() into an interface method so it can be mocked during testing? Yes, no? Is this worth the effort?

As Darius mentioned, it is not much of a big requirement to have the test and If it's going to take much of your time to write it then I guess you can ignore it.

Is this test about setting the redirect attribute or replacing _HASHTAG_ with # ?

Is it better now ?

should set or replace? :)

replace of course  ! :D

@dkayiwa this part of the query matches on drug names...

@rkorytkowski do you know why the unit test on TRUNK-4905 fails?

Did you just forget to remove the above printStackTrace? :)

The upgrade method should run all changesets from liquibase-master.xml...

Also do not catch the exception. It's better to fail with an exception and not Assert.fail()

To me it seems that all those changes happened in 2.0 and not 2.1. It's what the pull request title suggests (I may be wrong here so please reassure me). Since 2.0 has been released in beta already we cannot move those changesets out of liquibase-update-to-latest.xml. This file should really contain only changesets introduced in 2.1 (probably none at the moment). 

Actually let me answer myself. They happened in 1.12.x and have been released in 1.12.0. It means we cannot move them out of liquibase-update-to-latest.xml and this file should be empty initially.

.xml is missing

Is the ordering right? liquibase-update-to-latest should be executed prior to liquibase-update-2.1

Please add the following comment: This file contains all changesets that have been introduced in openmrs-core 2.1 exclusively. If you intend for a changeset to be backported to older releases, you must put such a changeset in the liquibase-update-to-latest.xml, which have been used for older releases.

The only change here should be the file name change to liquibase-master.xml

thanks for spotting, corrected.

2.1 precedes latest. According to the liquibase documentation, included change logs are run in the order in which they are specified.

done.

I had put changes prior to and including 2.1 into the file and changes after 2.1 into liquibase-update-to-latest.xml. Happy to reshuffle changes but I would need some help here what should go where. Can we have a quick chat some time so that I understand the constraints you mentioned better? 

done

Thanks for spotting, has been corrected.

Covered by the previous feedback / change, as filename is now a parameter.

I believe there is already tests that test partial name searches

Would be nice to have an assertion here that ensures there is actually at least one patient with one non voided identifier that matches the search text. Otherwise this could be passing just because there is no match in the test dataset

I think length was an error resulting from a copy and paste of a string type element. So it can be removed.

Should check if errors contains error with key "Concept.datatype.empty" 

Should check if errors contains error with key "Concept.conceptClass.empty" 

You need to check that the datatype field has the error and that the error code is `Concept.datatype.empty`, the errors object has methods like `errors.hasFieldErrors(propertyName)` and `errors.getFieldError(propertyName).getCode()`

Yeah, see my comment above about getting field errors and their codes

Thanks, I'll change that. I'll get back to you asap.

You also need to add translations for these codes in the messages.properties file

Does this test fail without your changes in the DAO?

@wluyima yes it does

Ok, thanks!

Did you remove this too from the hibernate mapping file?

@dkayiwa I did not. 
Would you like me to edit and amend? 

It looks like Note is almost entirely deprecated, should a ticket be opened to completely remove it?

Did you try to run the application after your changes?

Yes, and ran all unit tests. And did mvn clean package.
I also checked this: https://wiki.openmrs.org/display/docs/Data+Model?preview=/589829/34374263/openmrs_data_model_1.9.0.png and created an encounter to make sure there wasn't a regression.

Can you add a unit test that loads a Note object?

NoteServiceTest does this as part of the voidNote_shouldVoidTheNoteAndSetTheVoidReason()

```
NoteService noteService = Context.getNoteService();

Note note = noteService.getNote(8);
```

But I can add more to NoteServiceTest if that's necessary.

It does not run because it has an Ignore attribute.

@dkayiwa in order to remove the @ignore and make any tests based on Note the entire hbm, table and DBUnit flatfile need to be reconstructed. 
Note.java contains a comment that it is not currently used - is it being deprecated or introduced?
If all this is being deprecated then I would think it would be better to remove all references and not try to make a working unittest.
If Note is a new development I can refactor the tests.

When you remove it, does everything else compile?

I tested the following:

**Deleted:** 
- HibernateNoteDAO.java
- NoteDAO.java
- NoteServiceImpl.java
- Note.java
- NoteService.java
- NoteServiceTest.java

**Removed all references to the previous classes from:**
- Context.java
- ServiceContext.java
- applicationContext-service.xml

**Build Success
Unit Tests passed
All pages and functionality appears in-tact.**

It looks like all references to Note can be safely removed (or commented-out if preferable).

Wasn't this class referenced anywhere?

@wluyima 
Only in Note.java - see above conversation with dkayiwa.

Is this waiting on me?

Yes waiting on you to remove all references to Note.

How about having this in the validate method near the top?

Moved it

How phrasing this as "return true if the current openmrs version is in versions otherwise false"?

@wluyima should I still rephrase? or leave it, since you already merged the PR.

Why did you get rid of this?

Sorry, I see that resetObs(Obs) already checks it?

Just like you did for most of the other tests, it would be nice to add a test like this that ensures a new Obs doesn't get marked as dirty

Good catch. Fixing it in next commit

That is correct.

Added this as suggested @wluyima 

Shouldn't the method name say 'for an existing Obs'?

@PawelGutkowski the problem with this is that it results into an attempt to insert duplicate records. The original  "group by users.person_id" ensured that this did not happen. But now after your replacing it with "group by users.system_id, users.person_id, users.retired, users.retired_by, users.date_retired, users.retire_reason", you will get duplicate key constraint violation errors. Because you did a fresh setup and hence did not have providers/encounters, you did not get any such errors. But try to do an upgrade to 2.0 that has a good number of records for such. Does this make sense? :)

Why not just pass in only the message?

should this be named saveNewOrVoidedObs? I think it'd be more intuitive

I find it strange that if the Obs is not dirty, that you're setting the person, should this logic really be in Encounter.java when you add an Obs? And may be in Obs.java when a group member is added

voidExistingObs(), This method seems to be just saving rather than voiding an Obs and you've already marked the Obs as voided, unless you intended to move setting of voided fields to that method.  

It this a line ending change? I would just discard it

How about you use a junit @Rule with ExpectedException? That way you check the message otherwise the exception could be thrown for something else since APIExceptions are thrown all over the code base.

Done! Will update the PR

Makes sense! Will update the PR

Agreed with you!  But this PR is as-is behavior of the [current code](https://github.com/openmrs/openmrs-core/blob/2.0.x/api/src/main/java/org/openmrs/api/impl/ObsServiceImpl.java#L127) and I just did the refactored it.  The next PR will be on the basis of this.  I will clean it up there.   We are setting up the Person on the obs irrespective of if the obs is dirty.

We are actually voiding the obs using obsService.voidObs() method [here](https://github.com/bharatak/openmrs-core/blob/854f1648099266f2ef3e60ca43d19343b49865fd/api/src/main/java/org/openmrs/api/impl/ObsServiceImpl.java#L139)

Will discard the last line.

Done! Fixed it. Will be in next PR

I have added the message code instead of string.  Sorry, missed it here.

Thanks!

Makes sense

You're right, I didn't realize that you are voiding the old Obs

I think you changed this, in the current code this happens outside this if clause on line 106 above

Ah I see that you call it twice which I guess preserves the logic before, although I would have preferred to call it once just like before but it's no big deal.

@dkayiwa Are there any visits without patients? Should this not fail with an error? 

@dkayiwa Are there visits without a patient? Should this not fail with an error? 

If birthdate is not estimated, I'd think that you don't have to validate it again here since you've already validated it above

Won't converting age to years throw off your next computations for the bound?

Since you are discarding smaller age components when you cast to int

Can't you just set the birthdate in the test dataset?

It would be nice to have more tests for estimated birthdate, i.e where the patient is less than 2yrs old and also one that ensures that the validation passes for a valid visit start date when birth date is estimated

@wluyima Should I remove "Patient patient = visit.getPatient();" from my methods and add it to VisitValidator.validate? I would be able to check if birthdate is estimated or not and call suitable function.

@wluyima I don' t know how to find the patient with id=6. It' s not in PatientServiceTest-usersWhoArePatients.xml

@wluyima Will it be precise enough if I do something like this:
calendar.add(Calendar.DAY_OF_YEAR, -ageDaysInt);
instead of substracting years? ageDayisInt is converted ageDays which is ageInMillis / 86400000

Note that the you're adding extra test data in the file that matches the value of USERS_WHO_ARE_PATIENTS_XML, may be the patient is in there

I'd do it in mills

Not sure if I understand what you're saying, all I'm saying is you can merge the 2 methods into 1 that way you don't have to validate the birthdate that's not estimated twice

You need to update `validateHelper()` to call validate recursively for the child obs so that they also get skipped if voided

I will make the change as I merge the code, so don't worry about it

I guess it's not needed since Obs.groupMembers() can no longer return voided Obs after reverting Daniel's commit

That's true @ssmusoke, visit.patient is a required field and should be one of the first checks in the validation logic

Same here, startDatetime is required and was checked earlier, I understand why he checks if it's null here but it's a result of this validator not being well written, in theory a validator needs to check required fields first at the top like which this does and then only proceed if they're all set which is missing in this validator, see the snippet  below:

```
ValidationUtils.rejectIfEmpty(errors, "patient", "Visit.error.patient.required");
ValidationUtils.rejectIfEmpty(errors, "visitType", "Visit.error.visitType.required");
ValidationUtils.rejectIfEmpty(errors, "startDatetime", "Visit.error.startDate.required");
if(errors.hasErrors()){
    return;
}
//At this point we don't need any null checks for the required fields
```

Can you please translate this error message? i.e. add a code and its translation to message.properties file and use the code here

You can avoid code duplication by creating a local variable for the birthdate, assign the estimated date or the actual date of course depending on if it's estimated vs not and then do the comparison and rejection of the value once

Why are you changing this? You should've created a new patient record may be in the VisitValidatorTest.xml file since that technically should only be used in the VisitValidatorTest that way you don't break existing tests that are not related

It's good practice actually to include a sanity check that ensures that actually the visit start date is before the birtdate just in case the test data is edited.

Would be nice to add an assertion as a sanity check that ensures the birthdate is estimated just in case test data is edited

Wouldn't it be better to use a visit date that's just within the allowed range from the validator? Instead of 2012 which is way off.

And I would also assume that the visit startDate needs to be before that estimated birthdate for this test to be concrete

I would think this should say something like `should pass validation if the visit start date is before but within range of the estimated birth date of the patient`

I like this test better since the date is barely outside the allowed 2yr range

But I think it can be even closer the test patient's birthdate is 2015 so I would expect a test visit start date that is a day before the 2yr range

It would be nice to use dates that are just day off

I would say for estimated birthdate and in general birthdate precision when comparing it to other dates should be to day and ignoring the time

So you should possibly use age in days

Nice catch!

Do you mind adding a test for the situation where this condition would pass i.e when one of child Obs is edited without editing the parent itself and try to check if the parent still comes back not dirty, or should it be marked as dirty too? This is a little interesting

Ideally parent should not be made dirty in that situation ryt?

If parent is made dirty, then during the next save, the entire hierarchy would be voided and created again!

@wluyima So the question will be, whether parent obs has to be made dirty when a groupmember is added or removed?

The current logic is such that if you add a new member or remove an existing one, the parent is marked as dirty, my guess is that if you edit one of the child obs without editing the parent itself then the parent is gonna come back as dirty because of [these calls](https://github.com/openmrs/openmrs-core/blob/2.0.0/api/src/main/java/org/openmrs/api/impl/ObsServiceImpl.java#L148-L153) and I'm not sure if this should be the case.

should this be moved to talk then?

In theory, my take is that if you add a new member or remove an existing one from a parent, the parent should  be marked as dirty. On the other hand, editing a child without changes to the parent should not make the parent dirty  even though technically we replace the voided obs with the new one. May be we should ask this on talk and see what others think

So when the edited child obs is removed from the group members of the parent, the obsGroup field is made null. Does that mean obs_group_id column is made null for that child obs? When is it saved to the db? I see no save operation of the edited obs after the obs group is made null.
https://github.com/openmrs/openmrs-core/blob/2.0.0/api/src/main/java/org/openmrs/api/impl/ObsServiceImpl.java#L155

When the session is flushed, hibernate is the one that takes care of unsetting the foreign key column for the child when it's removed from its parent. What you're trying to ask I think was when does the parent get saved to flush changes to the collection since we don't call save, again I believe hibernate will auto save the changes to the parent when the session is flushed

okay

But I guess it wouldn't hurt to explicitly call dao.saveObs for the parent

@wluyima Do I have to add this manually to these 20 files or is there a faster way to do that?

I mean the error message only

How about throwing an exception instead of returning null?

Does this mean that we are no longer able to save any existing concept source that has not yet been assigned a value to this new field?

Nope. Just means if you exceed it max length its going to fail. Like retire  reason. Not needed at creation. But if more than max not allowed

No problem if that's better, I'll do it. Its just what's the difference in asking for the concept source of " " and "2.25.89.1" if they both don't exist

My line of thinking was that, why would one ask for a concept source with a null or empty parameter? Wouldn't this be a mistake that they should get an exception for?

Probably right. I think it should be like the other methods of this service. That's why I did it like this. I think some with null param throw an exception and with an empty string they return null. Generally we need more of a best practice/this is how we do it kind of style 

How about using lang instead of lang3?

Why? Isn't lang3 the future? ;) I mean "back to the future" was probably better than the sequel but

Oh you are right about this! :)

What do you think of this? http://www.javapractices.com/topic/TopicAction.do?Id=5

I am totally for failing fast. But I think we might need to split it. Passing null leads to an exception and passing an empty string you get null because an empty string is more like passing a string that doesn't exist. Right?

I agree!

Can you add a precondition to do this only if the column does not already exist?

added it at https://github.com/openmrs/openmrs-core/pull/1847

is it necessary to change the changeSet id  ? I left it as is in the current PR.

Shouldn't this comment say 'should not have saved the obs'?

Why not change a simpler field on the encounter e.g location instead of the collection of Obs, flush and clear the session and then check that the old location is still set to the old one?

sure will update it

But when we set the location to encounter and flush the session, location will be saved to encounter since encounter is attached to the session

Let me know if it can be tested in any way.

What I'm saying is that if encounter.location is set to location A, change it to location B, save the visit and make sure that the encounter location is still set to location A and not B after the flush and clear

I understand what you are saying but when I flush the session, even though encounter is not saved via VisitService.saveVisit, the location change will get flushed to the DB because encounter is attached to the session. I tried it.

May be we're trying to solve something that is unsolvable, hibernate will always flush everything in the current session when it gets flushed, in this case adding an encounter to a visit attaches it to the current session because it belongs to a persistent collection which makes it vulnerable to automatic flushing.

which means the same will be applied to obs as well!

The cascade attribute seems almost useless for collections except may be for the delete operation

It will also be useful on the create operation since object wont be attached to the session

@wluyima Any update on this PR?

I think we should just have tests for only the situations where the cascade option applies e.g delete and not worry about the others

But a visit cant be deleted if there are encounters associated to it. So we cant really test that scenario.
Also cascade option would be applicable for the case when a new encounter is added to visit. 

When you delete a parent with cascading disabled, my assumption is that hibernate will delete the parent and just drop the references to it from the oprhaned children meaning the children stick around standing on their own and we need a test to prove this behavior. Choosing to tell hibernate to delete vs keep 'orphan' children is purely based on real world semantics i.e can an encounter exist without a visit? Based on our data model this is true where as for certain objects like ConceptName that can't exist on their own based on our data model we explicitly tell hibernate to delete them when they become orphans.

As for saving a parent with a new child object, disabling the cascade would result in a hibernate exception complaining about a reference to a transient associated object so yes it might be worth adding a test that ensures this is happening.

@wluyima There is a validation in VisitService.purgeVisit which will throw error when there are encounters associated to the visit which is to be deleted.  That seems correct. Due to that anyway, encounter wont be deleted when we delete the visit. It forces the user to delete the encounters first and then delete the visit. So we cant really test the cascade option for delete in Visit. Please let me know your thoughts.

If the VisitService doesn't allow it at least that is our own custom logic and that's fine

So I'll remove the test written for update logic and update the pull request. 

Are you sure this test doesn't pass before your changes? I think it passes since you're not flushing the session before checking the encounter id.

I think the test needs to ensure that when the visit is flushed, an exception is thrown since the flushed visit would be referencing a transient encounter

Makes sense. Will update the pull request.

Thanks, I see you've already implemented it, are you done?

Yes updated few minutes back.

So in theory these changes imply that new encounters have to be saved prior to being added to a visit, right?

As in an existing visit, it should be fine if the visit is also new

Be it new visit or existing visit, encounters have to be saved first. In fact, the test is written using existing visit.

Ok!

Even better!

Wouldn't it actually be better to check if instance of Date and then delegate to compare(Date, Date)?

will do that

After adding one more patient to dataset I get errors like this one:
org.openmrs.validator.VisitValidatorTest.validate_shouldAcceptAVisitIfStartDateTimeFallsIntoAnotherVoidedVisitOfTheSamePatient(org.openmrs.validator.VisitValidatorTest)
  Run 1: VisitValidatorTest.before:53->BaseContextSensitiveTest.executeDataSet:670->BaseContextSensitiveTest.executeDataSet:775 » JdbcSQL
  Run 2: VisitValidatorTest.tearDown:71 NullPointer

Don't you have to flush the session for the test to be concrete, couldn't you actually use an existing encounter already in the DB?

I think the method name and should.. need to be clear about if when saving an new or existing Encounter

And possibly clear the session too

In theory os.getObs(id) would give you the saved copies from the DB once you flush and clear the session after saving the encounter the first time

When you say leaf, I was assume one of the  obs should not be an immediate child but i see you're adding both as children of the same parent, i would expect a child-parent-grandparent tree

So this test seems to contain the tree of obs I expected in the other test, when you say level one I expected editing a child and not a grand child. I think use immediate and nested child to be clearer

Again you would need to flush and clear the session

I don't see the assertions for the grand parent that they are not voided and still contain the same unvoided children except for the edited one

How different is this test from the first? You're updating an immediate child in both cases

'is update by removing a child obs'? Or 'if an immediate child is removed'

I really don't think you needed to have tests for top level vs nested child, I think you should have tests for removing, adding or editing a child regardless of the level

Fixed this.. Moved the test data into dataset xml

Fixed it.

Fixed this.. Moved the test data into dataset xml.  Subsequent saves are done and flushed the session.

Not evict, you should flush and then clear the session

Same, here you need to flush and clear the session

Hmm.. when you remove obs 101 which is not a top level obs, I would assume the top level Obs count should still be 1

For this particular test when I change to flushSession() and then clearSession() it fails, I personally think these are the correct calls in this order and not evicting the encounter and flushing after. Evicting means remove it from the hibernate cache without persisting any changes to the DB, is this what you want to happen? I'd think what you want is to push the changes to the DB, clear the entire cache so that all entities get reloaded with their new saved state and then test the new states

@wluyima I agree with you and I see this test case fails.  The reason it fails as follows: When the original oChild is [removed](https://github.com/bharatak/openmrs-core/blob/76ec6f3b4d6a6ed39de892cfda35e7f25efc144c/api/src/test/java/org/openmrs/api/EncounterServiceTest.java#L191) from oParent, the obsGroup is set to null in oChild.  But while we save the oChild, we evict the original obs to get the fresh one [here](https://github.com/bharatak/openmrs-core/blob/76ec6f3b4d6a6ed39de892cfda35e7f25efc144c/api/src/main/java/org/openmrs/api/impl/ObsServiceImpl.java#L131) and there by resetting the obs_group to previous parent.  

So, whenever we do a oParent.removeGroupMember(oChild), the oChild is voided but its obs_group field is never set to null.  But the new instance that is cloned from oChild will have its obs_group field set to null.  I think this is accepted behavior.  What do you think?

When we perform a oParent.removeGroupMember(oChild), the oChild's setObsGroup is set to null.  When we save oChild (which happens as part of es.saveEncounter), a clone of it is created, but it is still associated to the encounter with its parent set to null.  i.e. it will be a top level obs. 

Tried to articulate this behavior in talk [here](https://talk.openmrs.org/t/should-editing-the-child-obs-make-its-parent-dirty/8049/36)

Changed it as suggested

That's correct thanks!

I'd imagine we need to keep this if clause that way you only refresh the parent when there is a replaced child 

I.e you need a flag that you set to true if we have a replacement and then and check it below to determine if a refresh is needed

Doesn't seem to me like this is the correct thing to test here, I would expect you to flush and clear the session after saving the encounter, if you do that I think this test passes even without your changes

There is already existing tests around this behavior, If you comment out the line you added that refreshes the parent you'll notice there are some existing tests that fail, in theory after your changes as long those tests are passing, the code is good

The thing is, if i dont flush and clear the session and try to resave the enconunter, the obs which is now attached directly to the encounter will get saved. So I thought I'll add a test around it. Without the line that I added, whenever the leaf obs is edited, a duplicate obs is created which is attached only to encounter, since we save encounter more than once in our use cases.

If the test is not needed, I can remove it.

Will update this.

okay I can add a if clause to determine whether to refresh or not..

Shouldn't this say refreshing object and not clearing?

Hmmm... So you're imagining a situation where say one calls saveEncounter() from within another transactional method and the session might not yet be flushed since the outer transaction is still going on, that might make sense I guess, okay we can keep the test

Do you still need these commented out lines?

Seems like this file has been formatted? Can you try undoing the changes in it? Then just add the single for the new field and see if that resolves it

My assumption is that hibernate can resolve the field length for primitive types and their wrapper classes

Did you touch this? Or did you forget to run mvn clean install before committing as advised at https://wiki.openmrs.org/display/docs/Pull+Request+Tips

I ran the formatter on the whole file and it removed the new line here from a previous commit. You are right though that it has nothing to do with my changes. Should I only run formatting on the blocks that I add?

We only recommend doing mvn clean install on the whole project. This should not have any formatting in places you have not touched.

I actually don't seem to understand why we had this logic, seems like it can cause issues

I agree, hence it has been fixed now, however not sure why it was written in that manner, but I understand the logic what it intended to do.

What is the use of the above empty finally block? :)

How about log.error()?

:-) agreed, i had initially added some code and then removed it, now it is not of much use, I shall remove this block.

Yes, valid, shall correct it.

What happens if we do not sort?

What would lead to this? Patients without ids?

So here is how it goes, first we fetch the patient ID's that are duplicate based on the criteria selected, say First Name, Last Name, Gender, DOB. While fetching the patient ID's we have applied the order by clause so that matching patients appear one after another in the same sequence. Now when we use these patient ID's in the next query in the IN clause to fetch all the patient objects using HQL, the order of the patient ID's gets disturbed, so the duplicate patients are not listed to one another after patient objects are retrieved. Hence we do a in memory sorting of the patient objects retrieved to keep them in the same order of Patient ID's that were returned by first query. Please let me know if this is still unclear, I shall explain further with more details. The first query of patient ID,s might have returned IDs 1, 4, 2, 3 which means say 1 & 4 are matching and appear next to each other while 2 & 3 is the other pair. Now when we use this for IN clause query to fetch the patient objects, the patient objects returned does not have patients in the same order, it changes to 1,2,3,4. Hence this in memory sorting is done.

@dkayiwa : Please refer the comment below to understand what happens if sorting isn't done. (Look at my response for your question: What would lead to this? Patients without ids?)

the variable name Integer weekdayPos1 isn't correct, so I shall correct the variable name to indicate what is the variable used for.

Would it be faster if we dropped the order by clause in the first query? Since we end up having to sort in memory?

@dkayiwa : I am on vacation for rest of this week, I shall respond to your question by early next week. Apologies for the delay.

@dkayiwa is there much value to logging the exception and throwing it again? why not just not catch it at all?

@karrtikiyer-tw can you please use more expressive variable names, like maybe `attribute` in this case. your method is very long so one has to mentally keep track of all the different variables. good names make it easier, thanks :smile:

@karrtikiyer-tw can you put the curly braces also on your single line if statements. reduces the chance of someone messing things up later.

@karrtikiyer-tw what about adding a tests for when one adds an attribute that does not exist like "foobar" or one that is not persisted in the db. these are definitely cases that could happen and so if we have those tests we can make sure it works, when someone else later refactors your methods we make sure he doesnt break this behavior.

@dkayiwa and @wluyima I would be in favor of using hibernates criteria, since there is a lot of "manual" SQL construction going on here that is hard to read overall. With criteria we prevent some errors already at compile time and it makes it more readable in my view. Whats your opinion on this?

@teleivo  very good point. I completely agree! 👍 

@karrtikiyer-tw thanks for the update. Enjoy your vacation! :)

@teleivo i agree. I suspect that it was complexity of the equivalent hibernate criteria that led to this original manual SQL. Though that would be another ticket different from what he is doing here. There could also be some performance implications that could have led to this using of manual sql instead of the hibernate magic :)

@teleivo : Shall take care and update the code accordingly.

@teleivo : Shall be done in coming week once I back from vacation.

@teleivo : Yes there are lot more test cases with permutation and combination of various attributes selected for duplicate matching as well. However since there were no cases initially when I picked this up, wanted to add the cases to cover the scenarios for which this fix was being done, we shall create more cases for all positive and negative scenarios.

@dkayiwa and @teleivo : I also wanted to avoid native SQL and use hibernate APIs when I started off, however hibernate API's became more complex to have group by and having by clauses which would have columns from different tables with joins among them. I did even ask this on the hibernate forum and based on their suggestion, went to head to split the 1st part to native SQL so that duplicate patient IDS can be first retrieved avoiding the Hibernate API's and in 2nd part used HQL which is simple to retrieve all the patient objects using the patient ID's retrieved in the first query. Here is the link to the hibernate forum question:
https://forum.hibernate.org/viewtopic.php?f=1&t=1043635

@karrtikiyer-tw happy vacation! enjoy

Hi @dkayiwa , there isn't much of a difference in terms of response time if we do order by in MYSQL (native sql statement) as we have done now, as compared to native SQL without order by clause. Please see the screenshot below. So just by removing the order by clauses from native SQL we are not going to gain much.
In addition to clarify, currently (in this fix) we are doing in memory sorting just based on patient ID's since we need to maintain the order of the patient ID's (to show duplicate patients together) returned by native SQL. Please let me know if you need further clarifications on the same.
![image](https://cloud.githubusercontent.com/assets/19147821/19429663/800437f4-946e-11e6-9871-f44a6ec07137.png)

@karrtikiyer-tw am satisfied with your explanation. :)

The idea was to explicitly log the stack trace for debugging purposes, there were cases initially when code was still under development where we faced some query formation issues, hence added this line, I shall be removing it the catch statement completely.

This has been taken care in the latest commit.

Shouldn't we put back the check for getData() not being null? Of course in addition to what you have just added. :)

Sorry missed it. Will add back.

@samshuster do you mind throwing some more light as to why you prefer creating a new OrderExceptions class for grouping purposes instead of just putting them in the org.openmrs.api or any other package, as the rest of the existing custom exception classes? :)

will obviously defer to you on whats best.
But here is why I made the decision not to make them there own classes.
1. There is a lot of exceptions being created and it would pollute the number of classes in that package.
2. These exceptions are all similar to each other and it might make it easier on user to see a list of all different Order Exception classes.
3. Unless static import used, when throwing them, the name is very expressive. new OrderExceptions.CannotEditExistingOrderException()

Downsides:
1. Not consistent with rest of project
2. OrderExceptions is essentially a package name. Making a separate package called orderexceptions would help alleviate concern 1 and 2.

i will move them to custom exception package

If just passing null for the third argument, why not just use the two argument constructor? :)

@jdegraft this will keep rebuilding the index every time openmrs starts. The ticket is about building it on the initial install.

I thought there is another place where this is called at start up too, doesn't it mean this will get called twice in case of the standalone which unsets the index GP in the DB? Assuming the other call will trigger it?

Yes, it seems like this pull request is really nor necessary as the updates are already being done. Since we (and @dkayiwa) are unable to duplicate the original problem we at waiting to see if @bmamlin can indicate if this is still a problem that needs to be addressed.

You would still need this change if one isn't running the standalone

I guess this is fine, the  GP gets cleared after each run so there will be no second run happening immediately after

@jdegraft do you think this change is necessary? Note that the next call WebDaemon.startOpenmrs will eventually call Context. updateSearchIndex() via Context.startup()

But the reporter of the tickets seems to imply it isn't run when installing OpenMRS, can we verify this? i.e try to reproduce it

Note the filepath differs for unix based system

The duplication was https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/util/OpenmrsUtil.java#L1055-L1069 and not what you removed.

Nevermind, misread the code. All good.

The folder containing this is no longer metadata/model :)

Shouldn't this order be reversed? What is the order of execution of the files listed here?

Quite right, given that the liquibase-update-2.1.xml file is currently empty. I renamed the files to
- liquibase-update-baseline.xml - contains the historic baseline
- liquibase-update-to-latest.xml - starts as an empty file. At some point in time you would close the baseline and add any changes either to this file or to another file referring to a particular version.

Please let me know if that makes sense. 

Done.

Is this file name correct? :)

It depends, please have a look at my other comment on renaming files.

@WolfSchlegel i looked at the comments but i still do not yet understand the need to have "update" twice in the  file name. :)

Since this is really still an update file, it would be nice for it to contain the word update,
how about `liquibase-update-to-latest-master.xml`? I'll update the ticket

Thought this was renamed

If we're doing this in 2.1, this should be probably named liquibase-update-2.0.xml

I have updated the ticket description, we don't need to rename the `liquibase-update-to-lastest.xml` fie

Do you mind sharing the reason behind removing Patient?
The same question applies to the rest of the code below.

typo here 'an user' -> 'a user'

ForAnUser -> ForAUser

If I recall correctly, when you setup ehcache this way you don't have to declare caches for each name... If they are not declared the defaults are used... Am I wrong here?

Where do you tell Hibernate to use "hibernateCache"? Or is it the default name it looks for?

If I'm right modules can use caches based on the default cache config without having to explicitly declare names here. Sys admins seeing too much memory consumption could edit the file and disable some of caches by overriding their settings. We could provide more granular adjustments of config for module developers in a separate issue if needed.

Yes, you are right, default caches are created. 

> We could provide more granular adjustments of config for module developers in a separate issue if needed.

I think it is a good idea

As you said, ehcache.xml is default filename. In fact, we can rename it to `hibernate-ehcache.xml` by adding `net.sf.ehcache.configurationResourceName` parameter to hiebrnate.cfg, if you think we need to be more clear about it

isn't this too high?

Probably is, I've copied this configuration from commit which was reverted a couple months ago, I guess we can limit it to 500?

@dkayiwa, Its a new feature introduced by Java 7 know as the "Diamond" operator. For more info, follow http://openjdk.java.net/projects/jdk7/features/#f618

@Nishen-Peiris oh i see! :)
The ticket under which you are creating these pull requests does not seem related to the changes you are making. Do you mind creating a new ticket? :)

I just wondered why you added name="hibernateCache" here... 

Ok

I did it for debugging purposes, because default name is "_DEFAULT_". At first I had problem with those multiple CacheManager instances, so having explicit names was handy, and I think it can be useful in future if anybody will have to do something with those.

Can you please use the openmrs generate test case plugin, see https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin

You used the old test style and the generator will easily create the scaffold for you in the new style :)

can you please add a test for when `name` is an empty string. wonder what happens :)

comments like arrange, act, assert, clean up. are not used in openmrs tests, as far as i know. can you just replace them with newlines.

what about using type `File` instead of `Object` you then dont need to cast multiple times later on.

or maybe use a list:
List<File> filesList = (List<File>) FileUtils.listFiles(destinationFolder, null, true);

i think you can simplify your tests by leveraging the java `File` you dont need to use/add/replace file separators.

I think you can do something like

``` java
    public void expandJar_shouldExpandDirectoryWithoutParentTreeIfNameIsDirectoryAndKeepFullPathIsFalse() throws IOException {

        final int numberOfFilesInSpecifiedDirectory = 2;
        String directoryPath = "META-INF/maven/org.openmrs.module/test1-api";
        File destinationFolder = this.getEmptyJarDestinationFolder();

        ModuleUtil.expandJar(getJarFile(), destinationFolder, directoryPath, false);

        List<File> actualExpandedFiles = (List<File>) FileUtils.listFiles(destinationFolder, null, true);
        Assert.assertEquals(numberOfFilesInSpecifiedDirectory, actualExpandedFiles.size());
        Assert.assertEquals(destinationFolder.toString(), actualExpandedFiles.get(0).getParent());

        FileUtils.deleteDirectory(destinationFolder);
    }
```

you use File.separator in your tests but hard code the separator here, why?

I find them helpful to keep tests clean, but no problem, I will apply to rules that are used in a project :)

Since `JarEntry` uses slash as a separator I would expect that `name` parameter will also use them. This is in line with rest of the code in this function, which also uses hard coded slash.

Are you saying jarEntry uses forward slash on other systems like windows?

Can you please add a comment here to explain what you're trying to solve?

@wluyima what about extracting it into a private method with a descriptive name instead of a comment? A lot of methods are already bloated and hard to read since they do so many things

Which ever way he does it, as long as it's clear to the reader I'd be okay with it

Yes, I ran unit tests also on Windows and they do not fail, which proves that paths in `JarEntry` do not use File.Separator but always forward slash.

Actually `if` block in which this code is nested has already a pretty good description:
`// trim out the name path from the name of the new file`
I'm just making sure that we trim only a path, without the file name itself.

That comment made sense for the old changes though, it was trimming out just the name, yours seems to have an extra uncommented inner if clause that's not clear what it does when one glances at the code

This comment is still valid - the whole block trims out the name path from the name of the new file. Code added in inner if statement makes sure that it happens no matter if `name` parameter is file or directory. But of course I can add comments to make that clear :)

That's what I've been trying to ask for :), i.e to add the comment to say why you have that inner clause and logic, thanks!

I'm still a little confused by this change, which test fails when you remove this? The old logic trims out the filename from the entry so that you remain with the path but it appears to me like you're doing the opposite here i.e you are stripping out the path and remaining with the filename

The failing test was expanding file without full path: `expandJar_shouldExpandFileWithoutParentTreeIfNameIsFileAndKeepFullPathIsFalse()`. In this case `name` provides filename with path e.g. FOLDER1/FOLDER2/FILE. Original function was stripping this whole string from jar filename which was leaving it empty. As a result nothing was getting extracted. What I did is to make sure in that specific case that only path part of `name` gets trimmed out, so that jar filename still stays and gets extracted.

I understand it when you say that but do we actually ever call this method with a path and not a filename?

You're right, in openmrs-core this function is always called with `name` parameter as filename, but at the same time it is always called with `keepFullPath == true`, so the case causing an error never occured.

I guess what am saying is that it was intentional to exclude this, right now it just seems to me like a contrived case.

I'm not sure if I understand. Do you mean that `keepFullPath` parameter is obsolete and full path should be always recreated? But isn't it possible that this function gets called from outside of openmrs-core or gets used in future with `keepFullPath == false`?
What I did is, since it has `keepFullPath` and `name` parameters, make sure that it works with every combination of those two.

What am saying is this code is intended to be called by the module framework in core only and if it always calls the method with keepFullPath set to true and name as a filename, then we don't need this change

Ok, I can revert the change and get rid of failing test. 
Still I would prefer such function to work properly with all parameter combinations and not only with those that we can observe in a present code. :)

I'm trying to go by this saying [don't try to fix it if ain't broke](http://www.phrases.org.uk/meanings/if-it-aint-broke-dont-fix-it.html), until something fails because this code is missing then we will fix it at that point, as long as all reference to it in core set the parameters to true and the filename respectively and it works, it's all good otherwise you risk introducing other obscure bugs, we don't expect external code to be calling this method.

Is there any extra work on this ticket?

Does the path above work on windows? :)

Yes it does :) I've ran test on both Linux and Windows.

I would need another windows user to run and confirm it. :)
Why don't you use System.getProperty("java.io.tmpdir")?

Good idea! I will use it. 
Do you already have a corresponding should annotation on the ObsService?
@rkorytkowski Could you take a look here ? There is some infinite recurrency going on here and I can't find out why. The cacheManager() method is being called over and over...
Maybe it's http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html#cacheManager--

Look cacheManger() has to be annotated with @Bean... In such a case we need to delete apiCacheManger method and annotate cacheManager with @Bean(name = "apiCacheManager")
Also it suggests to extend  CachingConfigurerSupport instead of implementing CachingConfigurer
extend CachingConfigurerSupport and override only cacheManager()...
Unfortunately this is not the problem... I'm almost sure it's being called in config.addCache()
@rkorytkowski I did try to just set the cache config only from properties file so it looks almost like one to one with this http://stackoverflow.com/questions/21944202/using-ehcache-in-spring-4-without-xml and it also doesn't work with the same reason... 
The page to link is: https://wiki.openmrs.org/display/docs/Caching+service+methods, but use tiny a link instead https://wiki.openmrs.org/x/IYaEBg which can be generated from wiki by clicking at three dots in the top right corner and selecting link to this page.

The doc should be more helpful... something like:

"CacheConfig provides a cache manager for the @Cacheable annotation and uses ehCache under the hood. The config of ehCache is loaded from ehache-api.xml and can be extended by modules through apiCacheConfig.properties. For more details see the wiki page at https://wiki.openmrs.org/x/IYaEBg"
Please paste an example of apiCacheConfig.properties content here as well and say it is for use in modules.
Since the fix version is 2.1, can you move these changesets to liquibase-update-to-2.1.xml
Done 👍 
Are these three TODO removals also part of this ticket?
I had to squash everything, including a merge of upstream master, which gave those TODO removals. 
Is this file also part of this ticket?
Is this part of this ticket?
There used to be 3 commits, one of which was a master upstream merge
No, this comes from the upstream merge
This is only temporary but i couldn't find a way to set mappings from hibernate.cfg.xml file directly
I had to edit this to make it work together with JPA according to http://stackoverflow.com/questions/21671731/simultaneous-use-of-hibernate-and-spring-data-jpa
Not the latest version,because of compatibility issue with Spring. The latest one requires Spring 4.2.8.RELEASE
You could leave the above empty line for formatting purposes.
We still need the return javadoc. The only text to be removed is: "TODO change this return type to list?"
ok.

thanks. ill make the changes.
The type for the items in this Set should be `CohortMember` and not `Integer`

Our convention is to create a new instance if members is null that way the method never returns null.

I wouldn't include endDate since it will be uncommon to set that when adding a new member

This seems a little vague to belong here, I don't think it's needed

You most likely don't need to add any methods to CohortService

I would just discard these changes since they do nothing 

You don't need these new methods in CohortService

We normally prepend the date to the to the id, see other changesets

These changesets should go in `liquibase-update-to-latest.xml`

The patient_id has `ON UPDATE CASCADE` added to it which I think is no longer necessary now that this table has it own primary key column

You need to get rid of the memberIds field 

- cascade should be set to `all-delete-orphan,evict`
- No need to specify cohort_member

key column is cohort_id

See other mapping files in core for how primary keys are mapped

Should be a many-to-one with Patient as the class and no need to specify length for int fields, hibernate can figure out the default

Should be mapped as many-to-one with class set to Cohort

Specify the lenth to be 19 and should not be nullable

set length to 11

You need to change these tests to test Cohort class

While using the actual types Cohort, Patient. For the getters I'm getting a message:  `'Property' attribute type should not be 'Hibernate Class'`

If you change the types, you need to update the mapping file to use many-to-one for these fields, I did mention this in one of my comments in the mapping file

Thanks, that fixed it. I had not made those changes then. 

I would change the type to Collection instead of Set but keep a set implementation

I meant to set this should be 

```
public Collection<CohortMember> getMembers(){
}
```

And this should be 

```
public void setMembers(Collection<CohortMember> members) {

}
```

Did you see this comment?

Did you mean `public void setMembers(Collection<CohortMember> members) {}`?

Ha ha ha! Yes that's what I meant

You also need to add these columns; uuid, creator and date_created

Is there really a patient with id 1? This might be the reason you're getting the referential integrity error

Noted. Will add the additional columns

It was exactly that. I found more patient data in `standardTestDateset.xml`. Now the tests pass successfully.

You shouldn't have to do this, instead make CohortMember implement Comparable

deprecate this constructor

You can combine these two lines into 1 with:

`members.add(new CohortMember(this, p, new Date()));`

CohortMember should have a constructor that takes just a cohort and patient instance and sets the start date to now by default that way you don't keep passing in new Date()

This method should be deprecated, in theory every Constructor and method that takes in patient id(s) and an argument should be deprecated.

Why did you change form sb.toString()? It looked cleaner and should be able to handle an empty builder

Probably we should add a TODO item here that this needs to be changed to compare the Patient objects instead of their ids when we finally remove the deprecated methods that take ids

Noe that you're are using a TreeSet but I don't recall seeing your implementation of the equals() and hashcode() methods in CohortMember class

You need to deprecate the old getter and keep it around otherwise this is going to break external code

Same here, deprecate the old setter and keep it around otherwise this is going to break external code

same here, just deprecate the old constructor and leave it around

Why do you need the cohortMemberId argument? 

Actually you should have a constructor that takes in only a Patient object, when you add the member to a cohort  the cohort field will get set and the start date will default to current date time.

the argument names should be cohort and patient not cohortId and patientId in fact you don't need the cohort argument

you should deprecate and now remove

Assuming you added setters and getters for the cohort and patient fields

You should deprecate methods and not remove them

Oops! these are the methods you had added

field names should be cohort and patient and not cohortId and patientId

You dont need the cohort argument, you also need a constructor that take only a patient

Dont need the cohortMemberId argument

Why are you renaming this?

Revert everything in this class

Just revert this formatting changes

Revert these changes

Do you have a voided field in this cohort_member table? In theory members don't get removed from the set.
You might need to update Cohort.removeMember() to set stop date instead of removing. Which means that getCohortsContainingPatientId() should return cohorts that contain the patient as of the current date i.e members that have no stop date or those where the startDate is before current date and end date is after current date

Don't make these changes please

Revert these changes

Does cohort_member already have a creator column?

This should not be nullable

You need to add the new columns that you added to the table

Why is endDate of length 11 while startDate is of 19?

Why is this changing to 1?

Why are you changing to patient 7 here too?

Sorry, I over-engineered it. Thought I could remove the trailing comma. I'll revert it. 

I have deprecated the following the methods:

```
    @Deprecated
    public Set<Integer> getMemberIds() {
        return memberIds;
    }

    @Deprecated
    public void setMemberIds(Set<Integer> memberIds) {
        this.memberIds = new TreeSet<Integer>(memberIds);
    }

```

Should I deprecate, even though I created those methods after I refactored based on your feedback? Those won't be used anywhere.

These are the constructors I currently have in CohortMember.java, while I discarded the rest.

```
    public CohortMember(Cohort cohort, Patient patient, Date startDate) {
        this.cohort = cohort;
        this.patient = patient;
        this.startDate = startDate;
    }

    public CohortMember(Cohort cohort, Patient patient) {
        this(cohort, patient, new Date());
    }
```

I couldn't get rid of Cohort in the Constructor, since I couldn't query the members Collection in `HibernateCohortDAO.java` soon after I made the change. If there is a better way to do this, please let me know.

Yes, it does have a creator column.

There was only 1 non-voided cohort as per the test data. I had debugged it thoroughly. I'll inspect this again.

I don't have a voided field in the cohort_member table.
Should `getCohortsContainingPatientId()` lookup patients according to membership details or should I create another method? This method's signature suggests to lookup by patient id.

`removePatientFromCohort(cohort, patient)` in CohortService currently calls Cohort.removeMember(). Since this is no longer the case, should there be a new method, say `Cohort.endMembership()` or something? 

So how comes the test was passing before? Did you remove any member from the test dataset?

No, the test data has only one non-voided cohort. Not sure why it was 2 earlier:

```
  <cohort cohort_id="1" name="Example Cohort" description="First cohort that is now voided" creator="1" date_created="2005-01-01 00:00:00.0" voided="true" voided_by="1" date_voided="2005-01-01 00:00:00.0" void_reason="This is voided" uuid="h9a9m0i6-15e6-467c-9d4b-mbi7teu9lf0f"/>
  <cohort cohort_id="2" name="Example Cohort" description="Second cohort that has not been voided" creator="1" date_created="2005-01-01 00:00:00.0" voided="false"/>
```

But the fact that the test was passing before it means there actually 2, note that there is always some other test data that gets inserted, some is in the standardTestDataset file, also in a method annotated usually with @Before and in some cases within each test method. So you might want to check other files.

Why is access field here?

Why is this ignored?

Remove this field please

I'd think that this method needs to take into consideration the period of membership, in theory this would only return true if the patient is a member as of the current date

Same here, and I'd assume that one of these methods needs to delegate to another to centralize and avoid duplication of the code. The earlier one I think is what should delegate to this since we are comparing patientIds

I don't think this method is needed

With access set to field in the hbm file you probably don't need this private setter

This must be the reason your query is failing, it should be createAlias("members") to perform the join

This should only add a membership if no active one exists for the same patient and if the patient is not voided

I think this should also be able to lookup the membership with the matching patient and remove it so that a call like the one below  works too:

`Cohort.removeMembership(new CohortMembership(Context.getPatientService().getPatient(patientId)))`

This should also return a membership that started on as of date

This should be able to remove a membership that matches the patient, if there is multiple for the same patient then you can ignore it

Did the ticket say it should implement Comparable?

The getter has to be public, only the setter should be private

Though I think it makes, does it matter if we sort the members by patientId vs memberId? I guess it's okay to sort by patientId

What do I do with the deprecated getter and setter methods? Remove them? Is it okay if I deprecate this field alone?

Ha I created this as a check for the service methods add/removeMembership to/from Cohort. If there is a better way to do this, please let me know.

Yes, I did try with createAlias. Same result:

```
        return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class)
                .add(Restrictions.eq("voided", false))
                .createAlias("members", "m")
                    .add(Restrictions.le("m.startDate", new Date()))
                    .add(orDisjunction)
                    .createAlias("m.patient", "p")
                    .add(Restrictions.eq("p.patientId", patientId))
                .setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY)
                .list();
```

I get this when I only try to query the `patientId`, in contrast as a test `cohort.cohortId` works as intended.
`org.hibernate.QueryException: could not resolve property: patient.patientId of: org.openmrs.CohortMembership`

I did create `contains(CohortMembership cohortMembership)` for this purpose that is used in `addMembershipToCohort(Cohort, CohortMembership)` in `CohortService`. As for my previous comment regarding `contains` method, I'd appreciate if there is a better way to do this.

Should the method signature be `purgeMemberships(List<CohortMembership> cohortMembershipList, Patient patient)`?

My bad, I was just debugging the HQL and I forgot to change it back.

I had to implement this for the condition if member contains patient. I picked to sort patientId as a result. I'm open to suggestions.

We decided to keep them around as utility methods to allow external optimized code that doesn't wish to deal with heavier patient objects

I would think the service methods should just call add or remove on the Cohort object and under the hood these Cohort methods silently ignore duplicates, do you intend to do anything in the service in case this fails?

You contains method isn't checking dates

The contains check should be in the Cohort class and not the service, the service should just delegate to Cohort.addMember

The patient object is on the membership already so you don't need an argument for it

I think we should also have a purgeMembership(Patient) method

The way you implemented the equals method doesn't follow what was decided on the design call, the semantics are different, membership A is equal to membership B only if they have the same uuid if you are basing equality on java semantics, what I'm trying to say is that membership A is equal to B if they match the same patient, start and end time. Therefore the contains method and calls like remove will misbehave because they are using equality based on java's semantics and that's not what we want

I know we have this throws APIException on our existing service methods but it's redundant because it's a runtime exception, you can get rid of it, same for the public modifier, it is redundant on interfaces

Why do you need this method?

Did you see these comments that say discard the formatting changes?

I would think this should be greater than, if am searching for things active as of today, anything that expired today should be excluded

The clue is in the error message, you don't need to join to the patient table again since it's already a property on the root entity(CohortMembership), you should just add restriction directly as `Restrictions.eq("m.patient", new Patient(patientId)))`

Never mind, I see why

This is incorrect, the unvoid handler should unvoid any memberships of the patient whose endDate matches the patient's dateVoided

I'd think the if clause is unnecessary, the is only called when the patient is getting unvoided so they have to be unvoided anyways

same here, this patient is getting voided so this is redundant

Based on your implementation of equals, this isn't doing the correct thing, a patient can have multiple memberships in the same cohort although technically there should be one active one. You want to remove the active membership for this patient and not just any membership

All validation should be handled in the CohortValidator, if it doesn't exist we need to add it

You should add an argument for letting the caller to decided if you should included voided memberships and should default to false

You should instead call cohort.removePatient(Patient) an save it

Remove member should just mark the matching membership as voided, you need to set voided, voidedBy, dateVoided and voidReason, so the remove methods in Cohort and CohortService can take an optional reason argument

This is a Cohort validator and not membership

This should be cohort class

Copy and paste issue here, ConceptMapTypeValidator?

This class should be a CohortValidator, inside it it should loop over all the memberships and validate each

I think this will fail if you have a voided membership and an unvoided patient which should be allowed

Can you please add unit tests for this validator?

You should reject the membership or cohort when you change the code and not the voided field

remove these formatting changes

This needs to go to the liquibase-update-to-latest.xml file

You can't edit an existing changeset, you need to add a new changeset to the liquibase-update-to-latest.xml file that drops this

You normally want the add constraint in separate changeset otherwise this will fail for installations where they have existing rows in this table. You will also have to first populate the column for existing rows

Sam here, you want the add constraint in separate changeset otherwise this will fail for installations where they have existing rows in this table. You will also have to first populate the column for existing rows

Same here, you will need to insert values for existing rows and then add the constraint, I think dateCreated can be that of the cohort for existing rows

Same here, you might to look in this file for functions to call to generate uuids

Using == for object comparison? :)

Yes, I did. Apparently, the IDE thought it'd be good to format and arrange the imports by itself.

Hmm, this didn't work either. I simplified the query as well.

```
        return (List<Cohort>) sessionFactory.getCurrentSession().createCriteria(Cohort.class)
                .createAlias("members", "m")
                    .add(Restrictions.eq("m.patient", new Patient(patientId)))
                .list();
```

I've added the date check in the contains method as per your previous comment and modifying the service to delegate to `Cohort.addMember`.

`!m.getStartDate().before(asOf))` I hope this works as well.

I hope semantics you mention is for the contains method. If I'm not wrong, the `contains` method should look for the patientId and should be an active member, considering there are no duplicate patientIds. So how will the `contains` look like? Considering the active member constitutes the `startDate` to be before the current DATETIME and the `endDate` is `null`?

```
public boolean contains(Integer patientId) {
        return getMembers() != null && getMembers().stream()
                .anyMatch(m -> m.getPatient().getPatientId().equals(patientId) &&
                m.getStartDate().before(new Date()) &&
                m.getEndDate() == null);
    }
```

This file has no 'real' changes, I'd say just revert this

You still need the other conditions that check start date and voided

You can add some unit tests tests as proof

That looks fine to me, I think you might have to add a utility method to check if a membership is active to replace the last 2 conditions because you will call it multiple times

So in the case of a patient becoming unvoided, what happens to the membership startDate and endDate?

Should I create the utility method say `isMemberActive` in `Cohort`?

You should compare endDate and Patient.dateVoided, if they match, you unset endDate because it implies the membership was ended as the patient was getting voided

Are we checking for equality or are we checking if the values are voided? If I am not wrong, validation will fail if either of values of `getVoided()` is `false`? Does this make more sense?

```
                if (!(p.getVoided() == member.getVoided())) { 
                }
```

I did try moving it to update-to-latest at the top before all the other changesets. I got this error message:

`Error executing SQL ALTER TABLE`cohort_member`DROP PRIMARY KEY: Error on rename of './openmrs/#sql-175b4_a' to './openmrs/cohort_member' (errno: 150 - Foreign key constraint is incorrectly formed): Caused By: Error executing SQL ALTER TABLE`cohort_member`DROP PRIMARY KEY: Error on rename of './openmrs/#sql-175b4_a' to './openmrs/cohort_member'`

> You will also have to first populate the column for existing rows

I hope you mean setting a value for startDate, what will the value be?

Imagine that I have a cohort X, with an existing cohort membership linked to patient A who is an active one (not voided), I choose to void the membership and save the cohort, this is a valid cohort and it should pass validation but according to your if clause above that checks `(p.getVoided() != cohortMembership.getVoided())` this cohort will be rejected because it will pass this condition since  p.getVoided() will return false while cohortMembership.getVoided() will return true, makes sense?

Oh yes thanks, working with booleans is tricky.  So we reject if membership is voided and patient is non-voided and vice-versa. Am I right?

This file only gets executed when installing OpenMRS and never again, so any changesets you add to it never get executed for installations performing an upgrade yet it's actually meant for them, this is why it's appearing to you like it works when you move it here when actually what's happening is that it's not getting run.

The issue might be because you're providing a blank constraint name, you might want to just get rid of the constraintName attribute

Yes, makes more sense to set it to dateCreated of the Cohort it belongs to

In my example above that's the exact scenario I described and said that a voided membership linked to a non-voided patient is fine, the only invalid membership is one where the patient is voided and the membership is not voided, if they are both voided it should also be fine.

I figured it out, I had to drop the foreign key constraint before dropping the primary key. Thanks.

You can get rid of these formatting changes in files that have no 'real' code changes, it makes the PR/commits much cleaner and easier to review

The correct precondition should instead check if the foreign key exists i.e 
`<foreignKeyConstraintExists foreignKeyName="member_patient" />`

Without the `<not>`

precondition should check 
`<foreignKeyConstraintExists foreignKeyName="parent_cohort" />`

Without the `<not>`

precondition should be
`<primaryKeyExists tableName="cohort_member" />`

Without the `<not>`

Won't this fail for installations that have rows in this table that are upgrading? You need to add the nullable constraint after setting column values are set for existing rows. Also remember this column needs to allow autoIncrement since it is the primary key

Liquibase has an update tag, it's better to use the tags instead of raw sql whenever you can to keep the changeset as DB agnostic as possible

You need a precondition that checks if there's at least 1 row in the tables, you can look at the liquibase update file for examples

Use the update tag

Historically we've always used user id 1 as creator but I think it's better to use the user id of the daemon user, you don't have to change it, I guess you can use 1.

Shouldn't the autoIncrement be added with the changeset that adds the column?

Can't set nullable to false before you set the values for existing rows

Alternatively instead of having separate changesets to set new column values, you can set the default value, in this case you set it with the `defaultValueBoolean` attribute

@rkorytkowski , @dkayiwa do we still need to specify the DB like here? I recall as though we decided that we assume mysql for upgrade scripts

uuid is string and not a number

I would imagine that you have a new contains method that takes in patient object that internally delegates to the old one so you wouldn't need these changes

Would nice to have a sanity check that the cohort doesn't contain an active membership for the patient before

I don't you should set them as deferred because I'm guessing it might be useful in unit tests

You also need to set dateVoided and voidedBy and voidReason so that you copy them over to the memberships except may be for the reason, would be nice to add a special translated message like "Voided as a result of the associated patient getting voided"

The assertions should instead check that voided, dateVoided and voidedBy match those of the voided patient

Can you also add another call where asOfDate returns some matches?

Can you also check the error message to make sure it matches the expected one? Otherwise this could be failing for another reason

This is a private field, you should remove it instead of deprecating but keep the setter and getters for it

I think the semantics of this method need to be clarified in the javadocs, my assumption is that it need to take into consideration the startDate and endDates. Startdate isn't expected to be null.

@bmamlin, @djazayeri do we really need this method? In case scenario would one call it? The useful methods I imagine devs would call are contains(Patient) or contains(Integer)

We said we will keep these methods around without deprecation

You don't need this restriction and createAlias calls, I think you should have one restriction in place of the 2 lines above like this:

`Restrictions.eq("m.patient", new Patient(1))`

Alternatively you can load the patient by the patientId first and use the loaded patient object in place of of `new Patient(1)`

You would need to set other fields like dateVoided, voidedBy to match those of the voided patient

May be you also need a `patientUnvoided()` method which will be call from the PatientDataUnvoidHandler

Add @since 2.1.0

You don't need the extra brackets around `member.getVoided()`.
Remember you also need to update this if clause to do the right thing

members is a collection and has no matching column in the table, so it doesn't make sense to validate the field length

Sorry, this is the IDE that is doing the "magic" during the commit. I'm not sure how to prevent it. I did come across: https://github.com/suniala/openmrs-code-style-idea from the wiki. Again, I'm not sure if it will solve it.

I read addAutoIncrement adds the values incrementally for existing rows, since it literally translates to sql:

ALTER TABLE table.column MODIFY id INT AUTO_INCREMENT;

I tested this on a test table. So altering the table to add a primary key and auto increment in theory should fill the values? I can add the nullable constraint right after this.

I looked into this, but liquibase doesn't support join operations. Is there a better to perform this operation?

I just took an example from the existing changesets in that file. It mentions valueNumeric in there:

```
        <update tableName="cohort" >
            <column name="uuid" valueNumeric="name-of-uuid-function" />
            <where>uuid is null</where>
```

Is it okay to add the addNotNullConstraint to the same changeset where we update the values? 

I just added it. Thanks.

Should I remove `initiallyDeferred="false"`?

If you undo the changes, they should go away for good

i.e if you revert them, the IDE isn't doing the same for me.

As long as you've tested at least on mysql and it works that's fine

Use a where clause instead of an inner join since liquibase does support it

I wonder it's valueNumeric in other changesets, might be because it's a place holder, again, as long as you tested it and it works that's fine

We discourage that, make them separate

I guess, because I doubt if they are needed

What other error message should I check for?

I got a compilation error when I removed it.

So I replaced those two lines with:
                `.add(Restrictions.eq("m.patient", new Patient(patientId)))`
Yet it doesn't seem to work. Won't "m.patient" and new Patient(patientId) be two different objects?

I did come across this situation. So if the patient has it's dateVoided, voidedBy etc. set. Could I set the membership void details the same as the patient in removeMember?

I could only add the auto increment after declaring it as a primary key.

So I found out that I could query patient 6 but not patient 7. The only difference I see here is Cohort property is null for patient 7. Patient 7 is the new added member. I could fix this by adding Cohort to the CohortMembership constructor (the way it was working earlier). Is there any other workaround to fix this?

<img width="478" alt="screen shot 2016-11-06 at 12 53 23 pm" src="https://cloud.githubusercontent.com/assets/193819/20041572/2334c82e-a420-11e6-9dd2-cb6a2085538e.png">

There is an error message associated to each rejection, you need to check for the expected error message since you can potentially reject a field for different reasons which would mean different error messages.

You also need other tests for the other scenarios around patient and membership void status?

The only compilation error you can get is if there is code directly referencing it which should be fixed

Can you please put your new comments below older ones and not above? Otherwise it's hard to follow them. 

The patient objects might be different but they have the same patientId so they are essentially the same from hibernate's perspective. 

You also need to make sure the test data is set up well, the only reason cohort is null for a membership is because it is actually not set in the DB or it isn't mapped correctly.

dateVoided and possibly voidedBy would be the same but voidReason would be different, voidReason should be along the lines that it's getting voided because the associated patient has been voided

Okay

Hmm I think it maybe because I'm not saving it in the db. I will look into this.

Also, I think I know why the comments are jumbled. Your newer comments aren't being shown in the conversation view. Adding new comments in the Files tab seems to be messing up with the order. For me, the conversation view is easier to follow since it shows comments in chronological order. Let me know, if you feel the same.

When adding inline comments, you need to use the 'file changed' view

OK it was confusing, because the notifications were taking me to the conversations view.

@wluyima I tried for the last 2 days. I couldn't find a solution to it. I'm not sure if there is a problem with mapping. Basically with creating a new instance of CohortMembership, the cohort property is null. Tried following different fetch strategies in the hbm file, none of them worked. Could you please look at the mappings in the hbm files? The one-to-many and many-to-one?

> referencing it which should be fixed

What should these methods be doing then?

```
    public Set<Integer> getMemberIds() {
        return memberIds;
    }

    public void setMemberIds(Set<Integer> memberIds) {
        this.memberIds = new TreeSet<Integer>(memberIds);
    }
```

I debugged and couldn't find any other error message. The only one listed was the "members" value.

I consolidated the constraints in the addColumn changeSet. Technically it should set the ids after the adding the autoIncrement property to the column. I tested this on mysql.

This void logic doesn't belong here, but instead in the CohortService.patientVoided()

I don't this is what we said, removing a patient should only set endDate and not void the membership

Setting of the void fields need to happen here and no in the Cohort class just like you did in the patientunVoided() method

You only want to unvoid memberships that were voided as a result of the patient get voided, which presumably are the memberships whose dateVoided matches that of the patient, so you need to check if the dateVoided field of a membership matches that of the patient to unvoid it otherwise you will end up unvoiding memberships that were truly voided even before the patient had been voided.

Won't this fail for existing rows since they wont have values for this column? If you tested and it passed it's fine

I had never done this before, did you test to confirm that it works? I used to think valueComputed is what supports this

Check for existence of errors on the members field itself

Check for existence of errors on the members field itself

Check for existence of errors on patient not members

I think it should be on the membership itself

You need to throw an exception here if the cohort is voided, i believe this might be a clue as to why that test that has been bothering you is failing, I think you are adding a patient to a voided cohort so when you call getCohortsContainingPatient() it never gets returned this cohort since the query excludes voided cohorts

Our convention is such that collection getters never return null, you need to check if members is null and if yes you instantiate it

You need to make this not nullable, it will give you a clue if the cohort field is getting saved or not

Same here, you need to make this not nullable, it will give you a clue if the cohort field is getting saved or not

patient_id and cohort_id fields previously had a default value of 0 which in my opinion is wrong, can you drop it please? Liquibase has `dropDefaultValue` tag

You will need to set the cohort on the membership, this is why that painful test is failing, because you are not setting the cohort field, i also added a comment that you need to make this column not nullable in the hibernate mapping file, if you had done so before you would have already noticed that cohort field is null. I recall telling you that you should add private setter in Cohort class for the cohort field that you will call here to set the cohort

Yes, I tested this. Adding a new column with autoincrement and not nullable constraint along with primary key adds the values of the indexes into the new column.

Cool! I trust you

Going with this, should I `rejectValue` with the `patient` field? Because `patient` doesn't exist in the `fieldErrors` neither does `Cohort` has a `patient` property? How do I check for this?

If setCohort has private access in CohortMembership, won't the method be inaccessible from the Cohort class? And I'd removed the setCohort() method since I had added the access="field" attribute to the mapping according your feedback.

True but I have a doubt regarding the state of the patient before patientUnvoided(Patient) is called. Will all the void fields (voided, voidReason, dateVoided, voidedBy) of the patient be set at this point? I was assuming their values will be unset at this point, so I didn't have a date to be compared with. 

The only solution I found so far was changing the accessor to public for Cohort in CohortMembership. That solves my problem with the tests.

Hmmm.. since patient isn't a direct field on the cohort class then I guess it's okay to reject the members field, but can you change the error message in the validator to be more specific by mentioning the actual patient id and then check the message to be the expected one in the test e.g the error message could be `"Patient with id "+membership.getPatient().getId()+" is voided, cannot add voided members to a cohort"`

Not that the handler takes in some arguments, you will need to forward all of them to this method too and use them for comparison, in theory you need to check that dateVoided and voidedBy match. You will need to add a unit test that proves that when you void a patient that has several memberships, that only the memberships that were voided with the patient get unvoided and the others don't

Nope, the setter needs to be private, a class has access to its private members within itself so you should be able to call the private setter within the addMember() method, and this can't be the only fix to the test without the other changes, if you are not setting the cohort on the membership in addmember, there is still no way the test would pass even if you made setter for cohort public

You should call `addMembership(CohortMembership)`, you should always call addMembership() instead of adding the  members directly to the collection, adding the member to the list should ONLY happen in addMembership(CohortMembership) method which should be responsible for setting the cohort field on the membership

Please delegate to `addMembership(CohortMembership)`, this is one of the reasons why the test is failing

Please delegate to `addMembership(CohortMembership)`

Please delegate to `addMembership(CohortMembership)`

Meant to say addMembership(CohortMembership)

Meant to say addMembership(CohortMembership)

I understand, but I didn't get my question answered. I'll explain it clearly:

PatientDataUnvoidHandler.java calls CohortService.patientUnvoided(Patient), at this point before the call is made, is the Patient unvoided i.e. are the void fields unset? In short, what is the state of the patient before patientUnvoided(Patient) is called? I was assuming the patients were unvoided with their void fields unset.

If the patient is still voided, and patientUnvoided(Patient) is called, won't I have to unvoid the patient as well?

But with private, I cannot access it outside its own class from Cohort.

> The private modifier specifies that the member can only be accessed in its own class.
> http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html

`[ERROR] /openmrs-dev/repos/openmrs-core/api/src/main/java/org/openmrs/Cohort.java:[189,19] error: setCohort(Cohort) has private access in CohortMembership`

That's what I just explained above, if you pass the arguments from the handler to the CohortService and use those, it won't matter if the patient fields are already set or not.

I see what you're saying, I think I mixed up things a little bit, sorry about that.
How about you make the setter for CohortMembership protected and make sure the CohortMembership class is in the same package as Cohort. 

That makes sense. I have made that change already. Thanks.

In my tests, I had the membership void fields set and the patient being unvoided didn't have the void fields set. In this scenario, how should I approach it? Just like in the code above, I am checking for equality for patientId and dateVoided using &&, it returns an empty list as a result for obvious reasons.

As I mentioned earlier you need to pass the dateVoided, voidedBy and voidReason as arguments to this method that way you don't have to use the field values on the patient object. The argument values are what the were when the patient was first loaded from the database

I tried working on it. I'm not sure if this is the right implementation that you are wanting. Eager to know your feedback.

@wluyima I missed out on this. I haven't come around to remove this field, because it errors out with the getters and setters saying: `cannot find symbol`. Do I repurpose the getters and setters to something like this:

```
	public Set<Integer> getMemberIds() {
		Set<Integer> memberIds = new TreeSet<Integer>();
		if (CollectionUtils.isNotEmpty(getMembers())) {
			for (CohortMembership member : getMembers()) {
				memberIds.add(member.getCohortMemberId());
			}
		}
		return memberIds;
	}

	public void setMemberIds(Set<Integer> memberIds) {
		memberIds = new TreeSet<Integer>(memberIds);
	}
```
The formatting here, and in a number of other places, does not look correct. Did you run mvn clean install before committing?
Yes, I did run it. Not sure how the formatting changed. Will fix it soon.
@dkayiwa I just checked my code, strangely it appears fine in my IDE, but not in a text editor:

![screen shot 2016-12-05 at 12 23 00 pm](https://cloud.githubusercontent.com/assets/193819/20901064/aa32add8-bae5-11e6-9ecf-ade3537c2ee6.png)

Has this happened to you?
Do you plan to address the above TODO?
The ticket seems to suggest that existing members should not change their signatures but simply delegate to the new ones. Did you intentionally get rid of removeMember which takes an integer member id?
I believe @wluyima mentioned somewhere in the comments that it was planned not to deprecate the methods as of now. So I am not sure how relevant is the TODO right now. 
I believe I changed this after a review. But I can add the delegation if this is necessary.
If not sure of its relevancy, then you can just get rid of it. :)
Not sure if i understood your response. Does it mean the ticket requirements changed? :)
What happens if startDate is null?
What happens if patient is null?
Ha. I don't think so. Alright, I suppose I'll retain the method signature and delegate to the new one. Hope that helps.
Did you evaluate ObjectUtils.compare(firstComparable, secondComparable)?
If this returns non voided cohorts, then what is the use of the second boolean voided argument?
startDate has not-null constraint. The changeset has the insert to ensure existing records have the startDate.
Yes it helps! 👍 
CohortMembeship can't be created without a patient. There won't be a chance that a patient is null?
I didn't check ObjectUtils.compare. I followed the documentation for comparing a Collection when I encountered an error that it couldn't compare objects.
I'm sorry. I didn't edit that javadoc to reflect the method signature.
What will happen if i do this? new CohortMembership().isMemberActive()?
What happens if i do this? new CohortMembership().compareTo(new CohortMembership())
By documentation, do you mean this? http://www.javapractices.com/topic/TopicAction.do?Id=10
I didn't consider that case. I suppose I will add a check for null instance, as well as for the other comments.
I followed the Oracle java documentation to work around the error, but yes similar content to what's given in that page.
Plus, Wyclif also suggested to implement Comparable<>. If I recall correctly, the errors stems from the use of the contains method.
Can you also add some text to the params?
Without looking at the implementation, am struggling to understand the meaning of this method. Is it checking whether a patient is voided? Is it voiding a patient?
Same question as above.
Can also also add a @since to all the new service methods as recommended at? https://wiki.openmrs.org/display/docs/Coding+Conventions
Which looks clearer? patientUnvoided() or unvoidPatient()?
Is there a reason why you changed the above from private to protected?
I only followed the [design notes](https://notes.openmrs.org/2016-10-12-Design-Forum). In the event of the patient getting voided or unvoided, it voids or unvoids the corresponding Cohort memberships.
I changed it as per Wyclif's recommendation from one code review.
I think the former. Only because the purpose of these methods are for the event when a patient is voided or unvoided. If there is a better name, I am open to suggestions. Then again, I merely followed the [design forum notes](https://notes.openmrs.org/2016-10-12-Design-Forum).
Why not just use assertTrue()?
What does shouldValidate mean?
If the test before this had shouldFail, shouldn't be clearer if these one below are named as shouldPass?
test = should void or unvoid?
Why not use assertTrue? This will make it explicitly clear that you expect the patient to be voided.
Will this test be of any use if the above returns false?
I suppose assertTrue() makes more sense :)
Agree, shouldPass is clearer.
Thanks. Bad copy paste work!
Agree. assertTrue makes more sense.
I suppose no. How do I treat the false condition?
Is the test dataset random, where you do not know its contents at unit test time? :)
I suppose there is an element of randomness in choosing the patient. How do you propose I do this test?
Did you test this with a table that already had some records? If yes, what happened to their not having this field and yet its the primary key?
How is the randomness coming up in choosing the patient?
Will start date allow nulls?
I tested this multiple times, it does create a new column with the new values starting from 1. I do add the constraint below to add this as a primary key.
Are you updating date_created with the same date_created field?
Um, I didn't understand your question then :)
It does not. I added a not-null constraint below. 
I'm updating the date_created column of cohort_member with the value from the cohort table.
How does the randomness of choosing a patient come about when you are using a patient of a fixed patient id?
Where did you copy the above from? I mean this: "test = should add membership to cohort". Did you see any existing tests using this convention of having such a message before the test?
I didn't follow. By randomness, I thought you were meaning what id to choose. I just went by a case of adding a membership to the cohort. 
Are there cases where running this same unit test will make the if statement return true and others return false?
If yes, what are those cases?
I don't remember :). I think the IDE added it automatically. I will remove it.
I didn't consider any other cases. I suppose I can remove the if clause. Because I know the dataset doesn't have patient id 4 in the Cohort. Is that what you want?
Exactly! :)
Actually, some of the existing tests above do have that javadoc. Do I remove it now or leave it as it is?
I do not see any value added by it. It just gives us more unneeded lines to maintain. So just get rid of it. :)
Alright. Btw, does your github comments order get messed up for you? I reply right below your comment, yet the order gets jumbled.
Yes i noticed that too! :)
How about? "Removes membership from a cohort"?
Can you borrow the naming convention as used here for includeVoided? https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/api/PatientService.java#L808
Can you also take a look at the javadoc in that file and follow the same pattern of using all lower case for your javadoc on this method and others?
I do not see much value added by the above comment. :)
I do not think this will work on PostgreSQL.
If it were as simple as this, i would not see a need for a custom java changeset. You would just use a liquibase sql tag. My thinking was that you were going to loop through the records in java while assigning an incrementing id. That way it would not be a database specific sql. Does it make sense? :)
Ah I see, I wasn't aware that other Databases were under consideration. So I didn't think of anything else. So should I continue to utilize this class or will the sql tag suffice?
If you can use an sql tag in a database independent way, then fine.
Just ++i would do. :)
Sorry for UpdateLayoutAddressFormatChangeSet.java having showed you a bad example of JDBC batch operations. CreateDiscontinueOrders.java has the correct usage. You can get more details of how to properly do batch updates from: http://viralpatel.net/blogs/batch-insert-in-java-jdbc/
Thanks, that makes sense. It did come across my mind as well.
Did you test and confirm that this changeset actually generated uuids for the cohort member existing data?
Yes, it works.
I did run and confirmed that it does not work. :)
I created some cohort and cohort members before running your changes. The cohort member id field was properly filled but uuid remained null.
Could you check again? I made a small change a while ago, that I reverted. Sorry!
Shouldn't this be unique?
Did you intentionally remove the nullable?
I refactored to add a not-null constraint in the changeset below.
What happens to rows where the uuid is null?
In my tests, adding a column with nullable="false" adds an empty string to existing rows.
How about databases which are not MySQL? Which do not use empty strings for such new fields.
I really don't know :) Shouldn't it not have NULL values because nullable="false"? I'm not sure how to address this.
Should I just remove the where clause?
So when PostgreSQL or Oracle puts NULL, what will happen with your changes?
It will fail obviously, does appending an "OR uuid is null" work in this case?
Oh ya! 👍 
Did you intend for this method to be part of the API? If you are just wrapping redundant code, then this method should be private as it is not part of the api.
This too. Shouldn't this be a private method?
@dkayiwa, @ivange94 My local builds are passing and I can provide screenshots if you want. I have no issue. So I'm a little bit confused on why the travis build is failing
Shouldn't the above even be final? :)
I would rename this to start like get.......
Shouldn't the above be final or a constant?
I would rename this also to something like getPasswordEncodeFailMessage
Simply saying that, "This method is called when the password cannot be encoded" is not very helpful.
I would rather you say what the method accomplishes for the caller. :)
Can you add a description for the method?
getFindingUserErrorMessage is more meaningful.
Lol, :smile: ok let me change it
Are you sure this method logs an error? :)
Does this method log any error? Look at it from the perspective of someone who may want to use the method. What will the method do for them?
You could take a look at classes in the JDK to see how methods are described in the javadoc.
Show an error message? 
It would be better to have something like: "Gets the error message for failing to resolve a user with a certain id, family, and given names."
Do you really need to do this? The ticket is simply about copying child collection objects.
Ticket description says 
> if any of the original or copied object modifies the collection, the other's is not affected

that is why I'm making sure that every field of collection elements is a new instance. The same approach was already used in `PersonName.newInstance()`. If I leave out this copying then e.g. Date fields in elements of both collections will point to the same instances. And since Date is not immutable I thought I should handle it.
That statement is referring to collection object references, not the collection members. That is, all those of type List or Set as the examples given on the ticket.
Ok :) Just to make it completely clear - I should make new instances of collections, but what about members of those collection (PersonName, PersonAddress, PersonAttribute)? Should I make new instances but without deep copy of members, or should I just add the same instances to new collections?
@mjanuchowski you are right about deep copying the members like (PersonName, PersonAddress, PersonAttribute) 👍 
Done, that made it muuuch simpler :)
I like how it turned out. Is luceneQuery.listProjection cached? If not please do not call it twice, rather store the results.
Shouldn't this include luceneQuery.listProjection as well?
Is it needed here? Doesn't line 761 do it?
Is it needed here? Doesn't line 764 do it?
I'd rather we changed the signature to be called like this: `query1.skipSame(fieldOfQuery1, new SkipSame(query2, fieldOfQuery2))` i.e. `LuceneQuery<T> skipSame(String field, SkipSame... skipSame);`
line 764 skips results from lucenceQuery.
I did that because those are separate methods and if someone will want to use it in the future there will be no duplicates.
see my comment above 
The issue calling skipSame adds to the method execution time... as the query needs to be executed against lucene index in that line.... 
When using multifieldqueryparser you shouldn't be repeating fields in the query itself... it should be just .newQuery(PersonName.class, sessionFactory.getCurrentSession(), query, fields);
middleName misspelled
I believe we want to set defaultOperator to AND here so that we return only items matching all terms included in a query
The convention is to start with lower case for method names. :)
I know :) but it was created like that by unit test plug-in. It's because it is testing copying consturctor, which starts with upper case. Maybe it should stay like that to match tested function name?
OK
How about the formatting?
Yes, I did. Even if I run it again, it does not change anything in those files. Do I miss some settings?
I would have expected our formatter to put space after the above "for"
Please don't add star imports. Check your IDE settings.
Don't think we should catch all exceptions, like this the user won't see that the operation failed.
the javadoc says the "outputStream /is/ closed at completion of this method" the inputstream is not.

I dont think your implementation using the try-with-resource block closes the outputStream.

you could try:

```java
 try {
     IOUtils.copy(inputStream, outputStream);
 } finally {
     IOUtils.closeQuietly(outputStream);
 }
```

see https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html

also please write test cases for all possible cases. for example the logic at the top where it closes the outputStream if the inputStream is null is not tested.

please refer to https://wiki.openmrs.org/display/docs/Unit+Tests
for the testing style used within OpenMRS. there is a plugin which can help you create the scaffolds for each test.
dear @lkukielka changing the method signature was not part of the ticket. this would break compatibility with users of this method so please revert that change.
can you test that the outputstream was closed as well and you are not copying files although the method name says it (I know its misleading), but copying input to outputstream

I suggest tests like
"should close the outputstream if inputstream is null"
"should copy inputstream to outputstream and close the outputstream"

no need for the return statement.
you should also test that the outputstream is closed at completion.

so "should copy inputstream to outputstream and close the outputstream"
@teleivo Do you maybe have any idea how to check is the outputstream closed in this case?
Since the test class is a `BaseContextSensitiveTest`  I dont think you can use Mockito to mock the `outputStream` which would make it easy to verify if it has been closed. A solution might be to override the close() of the  `outputStream` method so you can check that it was called see http://stackoverflow.com/a/13800353/3996784

@dkayiwa or @wluyima maybe you can add some more wisdom :smile: 
@teleivo i have no more wisdom than what you have already provided. :)
Did you intentionally make these two should lines differ by "if" vs "when"?
No, Its my mistake. Do you think is it necessary to fix it?
@lkukielka what is the difference between the two? :)
Why not use assertNull and assertNotNull?
Why not use assertNull and assertNotNull?
Is switching from Assert.fail to fail part of the changes required for the ticket? Or did you just change it accidentally? :)
Well, it did not :/ I can fix it manually and push the change. Shall I?
No. Its the formatter's job. Does this formatter make any difference? https://wiki.openmrs.org/display/docs/Coding+Conventions
Yes, now it got fixed. Thank you! Shall I push this formatting change? I ask because after your merge my commit will consist only of this additional formatting, it will not indicate my previous changes as I got them now from upstream.
Was this really a typo? :)
@dkayiwa, Lol it's not a typo, is a slight grammatical adjustment. I made the noun come before the subject since it is referred in the third person :smile: 
Hahahaha. You are trying to do some magic. :)
Do you mind explaining the reason behind capitalising the C for class?
I would expect you to remove the TODO text also as part of the pull request.
The as of version should be the very first version which will be released with this deprecation. And in this case it is not 2.0 because this is already released without this deprecation. :)
what version should i mention??? 2.0.3 or 2.0.x?
2.1.0
Can you also remove these three new empty lines?
Why not include the exception in the log.debug?
What happens if deathdate or birthdate is null?
@dkayiwa I think those conditions are already checked for in the validateBirthDate and validateDeathDate methods right?
`
private void validateBirthDate(Errors errors, Date birthDate) {
		if (birthDate == null) {
			return;
		}

@reubenvarghese1 does that prevent validateDeathDate() from being called?
@dkayiwa What you say is exactly what's happening I feel.In that case I feel I'll have to make the new function totally independent of the class it's currently being called in.
What do you feel?
Shouldn't a null check suffice?
I'll try what you say and get back to you 🙂. Sorry for the trouble
@SarthakA Is this really a typo?
@SarthakA Please do not change this at it is wrong. That is the path to the `.war` file so you can't change this :)
This is not the required behavior. We want to validate the rest of the fields instead of just returning.
That is possibly why other tests are now failing.
@dkayiwa The reason for the tests failing was that I had not prepared a proper test case.Now I have  :-)
Can you use a more specific error message than the generic nonsensical date message? On which clearly shows what the exact problem is.
Okay sure🙂
How do I add an error message?As in do I add it in the messages.properties or in the others as well(the other language files)?
@dkayiwa I have changed the error shown and also squashed the new commits into one :+1: 
What text does "person.dead.false" translate to?
Can you put the above line in an english sentence, as a github comment? In other words, what is the if condition trying to test?
I would also expect you to add some new tests for the functionality you are putting in place.
i was to specify that that the attribute dead of the person class was false and due to this the death date can not be set unless we set dead to true.
the above statement checks if deathDate has some non-null value along with dead being set as false ie (the person is not dead but deathDate has been set) which is what we shouldn't allow according to the ticket. The third condition was added explicitly because of one test case in the PersonServeiceTest class. In that test, unlike other tests (where i manually set dead to true whenever deathdate was being set), setting dead to true was leading to a null pointer exception. so i added it. bcoz earlier what i tried was

private void validateDeathDateDead(Errors errors, Date deathDate, boolean dead, boolean deathDateEstimated) {
      if(dead == true || deathDate == null ) {
               return;
       }
       else if(dead == false && deathDate != null) {
               errors.rejectValue("deathDate", "person.dead.false");
       }
}
this gave some null pointer exception while runnning the tests. i thought i might be due to the empty return statement abouve
yes i completely understand, but without  ( patient.setDead(true);) this particular test shows validation exception as you see above that the deathdate has been set to current date (new Date())
which means we are setting the deathdate but not setting the person as dead which is a voilation of the issue in the ticket, isn't it?
while this test runs the exception, that my added code throws, shows up.
this line checks if deathDate is null or is dead true, if so, then we do not need to check further.
(the actual case we want to validate is dead == false and deathdate == null.)
Did you remember to include this new error message code in the messages.properties file?
Yes it's already included in message.properties .I have checked it too  😬
Would there be any problem if dead == false and deathdate == null?
Are you sure you did the above line correctly? :)
It would well if you instead described what this method does. :)
Oops my mistake! Will fix it now
Replaces... etc is not helpful because the method consumer will not care whether this was a refactoring or not. Just describe what the method actually does. All that one wants is what the method will accomplish for them.
Remember to squash the commits into one when you are done.
The above boolean param is not well described. Just check at the existing javadoc for boolean params for an example.
ok.
Hopefull you saw my followup comments for this.
Yes of course :)
but there is no boolean param? It is only Module and String
You could change this to: Checks if a module is required by another
dependentModule: the module whose required modules we are to check
modulePackage: the package of the module to check if required by another
return: true if the module is required, else false
Now I understand fully what the method is returning! Will update it soon
i think I will change the method name too.
@dkayiwa  there shouldn't be a problem , bcoz that way the person is not dead and no deathdate is being associated with it, which seems fair.
I noticed a thing in a lot of test cases that the deathdate has been initialized with new Date(), which return an instance of current date, which means that the deathdate is not null. also in these tests dead is not set to true. i think this may be a problem.
I asked because of your response which was: (the actual case we want to validate is dead == false and deathdate == null.)
if the person is dead, we dont care if deathdate is set or not, if its set its fair, if not fair too.
if deathdate is null we dont care if person is dead or not.
but if deathdate is set the peron should surely be dead.
this is what i have understood, am i right?
The formatting here does not look correct. Did you take a look at this? https://wiki.openmrs.org/display/docs/Pull+Request+Tips
And if the person is dead, the death date should not be null.
should a check for this be included too?
but i don't think even after including this the failing test case would pass.
Without your changes, we have no failing tests. Which means that look at your changes and check for causes of failure to fix
yes i know that, but my point is some test cases have set deathDate without setting dead and also called the validate method in the person validator class. isn't this making them fail?
Fix those tests by making them behave as expected. :)
ok, i will try and get back asap :)
@piyush9620 are you still working on this?
Compilation error. You opened a block but did not close it. This is probably the cause of your build failure.
Why do you think this is better than calling isEmpty()? This can be actually very inefficient as you'll have to compute the size of the list which might be expensive.
You should definitely use an IDE. A good IDE will never let this escape. :)
@ivange94 thanks alot let me look into it and clarify.
Does the exception message reflect the new business logic?
Something like voidOrdersForType or anything else along those lines would make this method more meaningful.
Okay. I will do that.
Yes, It means that patients are having active order of <certain type>. Hence, cannot merge.
Did you get a chance to look at the actual text that this code represents in the messages.properties file? :)
Do I have to update the `"Patient.cannot.merge"` property just in the messages.properties file or all the `*.properties` files?
Some of those files have commented lines with `english text`.
I would be in favour of a new message code that is descriptive enough to reflect the message. For message properties files, if you do not know the equivalent text in other languages, then you do not need to touch their message properties files.
`Patient.merge.bothHasActiveOrders=Cannot merge patients. Both {0} and {1} patients have active {2} orders.`

ex: `Cannot merge patients. Both 'COM238821' and 'BAH238591' patients have active 'Drug' orders.`

Something like this. Is it fine?
Why not just use this? new APIException(String messageKey, Object[] parameters) 
I would expect the error message to also reflect the second condition under which you are throwing the exception. The same applies to the message key.
`String message = Context.getMessageSourceService().getMessage(messageKey, parameters,`
`							Context.getLocale());`
`					log.debug(message);`
`					throw new APIException(message);`
We're logging the message.
Could you tell me what is the second condition?
The logic is that if `both the patients are having active orders of same type` the error is thrown.
Let me ask it this way, would the merge fail if two patients simply have active orders?
If both the patients are having active orders of **same type** the error is thrown.
Lets say patient A has `1 Active Drug Order` and patient B has `1 Active Lab Order`.
We will allow to merge those patients.
Does the messages.properties changes reflect that? :) 
I think i now see same type reflected in the third parameter. :)
How about? Patient.merge.sameTypeActiveOrders
A possible error message would be:
Cannot merge patients. Both BAH109245 and BAH239281 patients have active [Drug Order] orders.
I hope that message is clear.
It would be good, If you can tell a better message, If you have any.

Yes that makes perfect sense! I have just noticed that the third parameter takes care of the order type. :)
Lets go with this: Patient.merge.bothHasSameTypeActiveOrders.
What do you think?
How about cannotHaveSameTypeActiveOrders? :)
Okay. I'll go with that. `cannotHaveSameTypeActiveOrders`
There is a getActiveOrders() that you can call and simplify this code
I don't think this logic address the conditions mentioned that were defined i.e.

- patient records that both have active DrugOrders cannot be merged (same as existing behavior)
- for other order types, you cannot merge patient records if both have active orders for the same concept
- in other cases, it's okay to merge patient records even if they both have active orders
This method name is a little confusing, can you rephrase it please and actually it would be nice for it to mention drug order in the method name, how about `mergePatients_shouldFailIfBothPatientsHaveActiveDrugOrders`
getActiveOrders() method **excludes** discontinued orders.
But, getAllOrdersByPatient **includes** discontinued orders.
Could you have a look it and whether it clarifies some of your questions or not?
Specially this one: `for other order types, you cannot merge patient records if both have active orders for the same concept`
I thought that's the whole point of this ticket and logic, i.e to check if any patient has any active orders, discontinued orders are never active
Note that it's one thing to check if any of the patients has any active orders and it's another to copy over the orders, when checking if any of the patients has any active orders, getActiveOrders() is what you need to call, when moving over the orders to the preferred  patient, then you need to call getAllOrders, makes sense? In this method I believe you are checking if they have active orders and you should be calling getActiveOrder
[Could you have a look it](https://talk.openmrs.org/t/patient-merge-functionality/9310/16) and whether it clarifies some of your questions or not?
Specially this one: for other order types, you cannot merge patient records if both have active orders for the same concept
\*forgot the link
Sorry! I don't seem to understand your comment above
Do you mind clarifying it please?
We have discussed some of the scenarios of patient merge in this [talk](https://talk.openmrs.org/t/patient-merge-functionality/9310).
I want to highlight this [part](https://talk.openmrs.org/t/patient-merge-functionality/9310/16).
We have decided the following:
 We will check only whether the patients have active orders of SAME ORDER TYPE or not.
 We will not check whether the patients have active orders of SAME CONCEPT or not, as of now.

\*I hope this is clear and forgive me for the previous incomprehensible comment.
I'm also commenting based on the conclusion that was made from that discussion. As per the conclusion from that discussion, I don't think the intended behavior is well reflected by the unit tests, it could be because of the way they are named, and the code changes to me don't  seem to be explicitly addressing all 3 conditions. Can you try renaming the test methods so that they are more intuitive based on the 3 conditions that need to be met.
Error while trying to read file or while trying to probe content type?
There may be a gap between our understandings, since there was further discussion on the openmrs talk after the design call on 11th of Jan. Could you have a look at it once more?
The second condition of the three conditions, you are referring to, we **didn't agree** to do.

Well, based on the discussion it was a suggestion that was never confirmed, i have posted to the talk topic to get a green light from others. Once we get the green light, it would be nice to clean up the test methods i.e rename them to be more intuitive to portray what they are testing more clearly and also to have more useful assertions, this helps to ensure they aren't passing simply because the test data is not well set up. E.g if a test says that it should fail if both patients have active drug orders, you need to have an assertion for each patient that ensures that they actually  have at least one drug order before proceeding with the unit test.
Great! Let us hear what people say and we will proceed.
What does the above sentence mean?
Did you intentionally duplicate these lines?
The test for identifier type restrictions means test if given identifier types return the expected results. You can look at the restriction here: https://github.com/hilz041/openmrs-core/blob/8ff4b3763ac8c98913e3d16c3b2b60a3e1549ebd/api/src/main/java/org/openmrs/api/db/hibernate/PatientSearchCriteria.java#L318
Can you fix this method name to say Patients**Have** and not Patient**Has**
Before merging the patients, can you add an assertion here to act as a sanity check to ensure that actually both patients have active orders of the same order type, this is helpful in case someone alters the test data and the test  ends up passing simply because the test is not well setup.
Same here add sanity checks which ensure that only one patient has active orders
Same here, add some sanity checks that ensure that actually both patients have active orders of different types
which lines are duplicating?
should i change this to @should return a criterion of given identiferTypes ?  
The one above and below my comment.
That was  intentional, i will remove it. thanks
What happens if the names contain more than one space?
What is this space used for?
Sorry for that.
Actually there was a linebreak used after every test in this file. So I went along with it
Do you want me to remove all such line breaks?

Like which other one?
`      /* *
 	 * @verifies return null if given an empty string
 	 * @see ConceptService#getConceptSourceByHL7Code(String)
 	 */
 	@Test public void getConceptSourceByHL7Code_shouldReturnNullIfGivenAnEmptyString() throws Exception {
 
 		assertThat(conceptService.getConceptSourceByHL7Code(""), is(nullValue()));
 		assertThat(conceptService.getConceptSourceByHL7Code("    "), is(nullValue()));
 	}
 
 	/**
 	 * @verifies fail if given null
 	 * @see ConceptService#getConceptSourceByHL7Code(String)
 	 */`

Like this section in ConceptServiceTest.java
Would you like me to make a change? @dkayiwa 
yup
Any other change? So that I could wrap it up in a single commit.
And thanks for the time @dkayiwa 
this is the culprit. There `@deprecated` is a javadoc annotation. Hence it's used only inside javadocs. Like you did above. What you are looking for is `@Deprecated`. Notice capitalization of the D.
thanks Ivange just refactored that
Why all these many lines?
Are you sure getConcept was replaced with getName and getDescription?
@dkayiwa doesn't deprecating mean annotating the code but keeping it for backwards compatibility or waiting for deletion during a new release?
a little puzzled here
Am asking in reference to your deprecated comment.
@reubenvarghese1 can you fix the formatting here please
@teleivo I wonder why this test is failing now.I had tested the build before creating the PR.I'll look into it and the formatting :)
I just tried running that test in my PC and it compiled without any errors , now i'm kinda clueless regarding the error out here.Any ideas?
@hilz041 you need to remove this block. it is a duplicate of the block above.
@mavrk I think you mixed tabs and whitespaces in the description.setConcept(this) line. in OpenMRS we use tabs. Please remove your whitespaces.
@mavrk I think you can and should remove the braces around the last expression
@mavrk I still see a mix of whitespace and tabs. please replace whitespaces with tabs. configure your IDE to show you the whitespaces
let me address it . @teleivo 
@hilz041 I dont think we add punctuations to these shoulds at least no point at the end
see https://wiki.openmrs.org/display/docs/Unit+Testing+With+at-should+Annotation
@dkayiwa please correct me if Im wrong :)
patient or patients?
patientIdentifierTypes and patient? or just patientIdentifierTypes?
We have not been doing so. :)
How about a unit test? :)
Hi @dkayiwa , thanks for the reminder. :-) Here is the unit test. Thank you for reviewing this pull request.
Can you do like for the original code which had space between the if statement and (?
yea sure

@dkayiwa do i hv to create a new PR or can i edit the file here only?
Edit this and squash. Did you get a chance to look at https://wiki.openmrs.org/display/docs/Pull+Request+Tips
@dkayiwa is it ok now ? :)

@PKatGITHUB please remove the comments in this method. the method name is now long and meaningful enough that the comments are not needed.
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [JUnit tests should include assert() or fail()](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused imports such as 'org.openmrs.ConceptMapType'](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [JUnit tests should include assert() or fail()](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=533445)
A public service layer method mentioning dao does not sound very nice. 😊 
Ok ;-)

I'll rather provide another signature for the `purgeObs(..)` method with yet another boolean argument, it'll make everything simpler. I'll do that tomorrow.
How about just changing purgeComplexData() to return true if the complex obs is just not found. But always return false if something else went wrong (Failure to actually delete an existing complex obs, e.g due to permissions, etc)
The possible implementations for complex obs handlers are too broad to just reduce the behaviour of `purgeComplexData(..)` like that, IMHO. In reality this method should return some form of success or status code that can be unequivocally linked to a clearly identified situation.

I will settle on @djazayeri suggestion to add a `forcePurge` parameter that permits ignoring non-DAO deletions. It will of course default to false.
dear @mks-d can you please update the test. it is written in the old style.
the https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin can generate the test boilerplate according to the new style for you
Hi @teleivo , thanks for the tip.
So I did all that and the boiletplate test had already been generated and implemented. However it wasn't handling my case about complex obs. So I added my case in it.
Repushing now...
@mks-d please for the next ones use this plugin
https://wiki.openmrs.org/display/docs/Generate+Test+Case+Plugin
you added the test using the old unit test style. thanks :)
Did you intentionally make this test different from the one for master?
Can you explain what exactly is being accomplished by this last else if? 😊 
@dkayiwa Nothing at all! Thanks for pointing out my foolishness yet again! ;-)
Yes, I reacted here to @teleivo 's comments about using the Generate Test Case Plugin for Eclipse. While I was doing so I also improved the unit test a little (= the deletion of complex data files).
Eventually I wanted to submit 2.0.x's commit on the master branch, but you have merged the former one on master already.

Also this one here would be the new style, but then I had to add my test case in an already existing test method, this was not done on master where my test case has its own method. Which one do you think is the better one?
Why is this in your commit? Don't see any mention of this here https://issues.openmrs.org/browse/TRUNK-5056
This is not my commit. Before squashing my commits, i ran the below command "git pull --rebase upstream master" to get the latest code and this pulled checkstyle.xml change, I think this change is committed by @dkayiwa  
You have squashed someone else's commits into your commit as well. While squashing make sure that you pick only your commits. If you used this command 'git reset --soft HEAD~X' make sure to squash first and then rebase. If you manually want to pick commits to squash try this http://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git/5201642#5201642
The related issue doesn't require any modifications to this file
remove the i
do you need these tests?
May be i will leave one test (retireOrderSetWithNullRetireReason_shouldThrowException) instead of 2. Other wise we will not be unit testing the exception scenario
@mavrk please remove the comment, it doesnt add information/value
@mavrk please remove the comment, it doesnt add information/value
@mavrk remove newline
@mavrk please remove the comment, it doesnt add information/value

@mavrk inline this temp variable. it doesnt make the code more readable
@mavrk please remove the comment, it doesnt add information/value
@mavrk inline null
@mavrk do not use Vector, use ArrayList
remove newline
@mavrk remove comment. do not comment your code. in this case any dev can see in the IDE that the parameter false in getAllConceptClasses does what your comment says.
@mavrk remove newline. be consistent in your code. either always add a  newline at the end of a method or never. I am for never. doesnt improve readability. newline after the test method name would improve it. but stick to the style you see in all tests.
@mavrk remove all your comments in the code
If I use inline null here the test fails with hibernate.TransientObjectException as the null object is an unsaved transient instance 
Nevermind, I did a re run and it was fine :)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 8,640 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '392'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method length is 102 lines (max allowed is 75).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 8,192 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method length is 127 lines (max allowed is 75).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 5,712 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 512 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '46'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '258'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method length is 83 lines (max allowed is 75).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '215'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 280 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 257 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '261'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 648 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 866 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '90'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 512 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method length is 114 lines (max allowed is 75).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 608 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 320 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method length is 95 lines (max allowed is 75).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid using clone method.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '114'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [NPath Complexity is 88,705 (max allowed is 200).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=549363)
Is this change also about mime type? Or is it dealing with something else?
@dkayiwa This loop is responsible for finding two digit number (which is useful when there are multiple files with same name). It was solution that was implemented here before, I've only upgraded it to handle MIMEs in filename :)
@tmarzeion am a bit confused by this change because it seems to do more than i would expect. For instance, can you throw some more light as to why you removed the while loop?
@dkayiwa Okay, so:
Generally, `getOutputFileToWrite` is about creating new blank file with proper filename that contain some information about data is would get.
Before it was like: `TITLE + NUMBER + EXTENSION` (`NUMBER` is appended when file with same `TITLE` already exists.
Now it is like: `TITLE + MIME + NUMBER + EXTENSION` (`MIME` is appended when it is defined in `Obs`)

You are asking about `while` loop that I replaced with `for` loop, explanation:
- `for` looks better, since we don't need to initialize iterator out of the loop.
- this loop is responsible for finding proper `NUMBER` that would be appended to file if it already exists.
- after number is found (no file named `TITLE + MIME + NUMBER + EXTENSION` exists) it goes out of the loop and create returns file with given `TITLE + MIME (OPTIONAL) + NUMBER (OPTIONAL) + EXTENSION`.

Isn't it more readable than it was before? :smiley: 
Am please very sorry to make you go back and forth regarding this. But am just careful not to accidentally break existing code. I would prefer the refactoring to be a separate pull request from this whose purpose is to add mime type. My thinking is that the code would not have to change this much for just the mime type addition. I would expect the mime type generated and then this line modified to include it: https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/obs/handler/AbstractHandler.java#L96
I also noticed that Files.probeContentType(file.toPath()) always returns null for the mime type.
Did you notice it too?
@dkayiwa Sorry for long response,
I've minimized changes in `getOutputFileToWrite()` as You said.
I don't have any problems with `Files.probeContentType(file.toPath())`, for example when running `shouldGuessMimeTypeIfNotSpecified()` test it is guessing type just fine :)
Will windows clients have forward or backward slash?
How do you compare this method with OpenmrsUtil.getFileMimeType(file)?
It doesn't matter since this slash is for parsing MIME type and filename in both UNIX and Windows will look like "`somefile_image-slash-jpg`".
`getMimeTypeFromFile` is more complex since it tries to parse MIME type from filename, then if there is no MIME type in file it tries to probe it and returns default MIME type (`application/octet-stream`) if it couldn't guess MIME by any way mentioned before.
`getFileMimeType` is just trying to guess MIME type by using `MimetypesFileTypeMap.getContentType()` which is not enough and it is less reliable than `Files.probeContentType()`
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.File' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Missing a Javadoc comment.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.nio.file.Files' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.text.NumberFormat' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Date' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.HashSet' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.IOException' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.text.SimpleDateFormat' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrong lexicographical order for 'java.util.Arrays' import. Should be before 'java.util.Date'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.FileInputStream' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.File' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.FileOutputStream' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.OutputStream' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.InputStream' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.FileInputStream' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.IOException' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.FileOutputStream' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.OutputStream' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.FileNotFoundException' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.File' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'javax.imageio.ImageIO' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'javax.imageio.stream.FileImageInputStream' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'javax.imageio.ImageReader' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.File' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=506212)
@mavrk why is that change needed?
@teleivo Can codacy failures be ignored if travis passes while reviewing PR's?
is your question related to this specific diff? it confuses me since codacy doesnt complain about this part  ;)

a contributor with merge privileges can ignore any of the PR checks and simply merge. however comments by codacy should help contributors adhere to our style and prevent error prone code from getting merged.

I just checked codacy's comments and will try to add exceptions to test classes for MagicNumbers and throwing Exception since that affects all tests 

@teleivo Gotcha! :+1:  . @mavrk Sorry for posting it within this section.
@mavrk why is that change needed?

@teleivo The AuthorizationAdviceTest was failing and this fixed that.
@mavrk why did it fail? Was it because of your change in ConceptServiceImpl?

The issue you are working on was about adding tests but you also changed the implementation. Can you please remove your changes from the ConceptServiceImpl and this test and just work on testing the ConceptServiceImpl (on which you are doing a great job!). You can refactor code in another issue. Once we have good test coverage showing how it currently works, its safe to change the implementation.
@mavrk the @should annotations come last as you've correctly done above. please move them under the throws
@mavrk 'return of all list of all concept classes'
'return a list of all matching concept classes'
@mavrk please move all @should's to the end so they are the last annotations
@mavrk can you ensure we have tests for when includeRetired is true and false
what if concept is null? please test
@mavrk can you please remove this change. remember my comment that this issue is about adding tests not refactoring. thank you!!
@mavrk either add a test in here or delete this :)
@mavrk generally if you reuse numbers/strings/... its good to create a local variable in your test. this way if the id changes in the test data only one change is needed here. this advice can be applied to all your tests
@mavrk one test should only be for one method and one combination of parameters.
and the goal is that every public method in the service layer is tested.

so you should write tests for the methods

* getAllDrugs()
* getAllDrugs(includeRetired)

and for the latter you need one test passing true and one passing false.
another case is also what if there are no drugs will it return an empty list?

I know this is tedious but thats because when this was written [TDD|https://en.wikipedia.org/wiki/Test-driven_development] which would start with tests wasnt used.



nice!
you dont need this local variable, only when using the same value more than once. like you did with the retireReason.
thats nice, when you want to explain a certain value you can use this style. explanatory temp variable. instead of just a magic number.
@mavrk same as above please split these into separate tests. so you also need two should annotations
for example:
should return a list of all non retired concept classes when given false
should return a list of all concept classes including retired ones when given true
please make all those "V" of "Verifies" small, the plugin writes small ones. sorry for this annoying thing.
No problem @teleivo. Its the right thing to do :)
@mavrk you didnt write this as suggested.
you should be more specific, what is the expected behavior of the method given the different parameter.

* should return all drugs including retired ones if given true
* should return all drugs excluding retired ones if given false

same here

* should return all concept classes including retired ones when given true
* should return all concept classes excluding retired ones when given false

(note I removed "matching" since this method returns all without a query parameter)
remove "matching" for methods that return all

 * should return all concept proposals including retired ones when given true
 * should return all concept proposals excluding retired ones when given false

you know ;)
please organize the imports with your IDE. choose your IDE here https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE and look for "Java Imports"

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Nested if-else depth is 5 (max allowed is 4).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=554059)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 128).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=554059)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=554059)
The formatting here is still incorrect. You need to run mvn clean install before committing as advised at https://wiki.openmrs.org/display/docs/Pull+Request+Tips
@dkayiwa 
The old tests are failing sir....It is because of this line and line 99
Why do you catch this null pointer exception? Which value is null to result into this?
You will also need to run mvn clean install before committing such that it auto formats the source.
Patient can be null sometimes and thus I'm catching the null pointer and sending an error message attribute error for the object patient
Yes I've done that but it's not being autoformatted properly everytime
Are you sure we cannot have patients who are less than one year? :)
@dkayiwa 

I had a doubt on this one actually....But it was confirmed when the issue mentioned to add patients to be at least one year old.....If that is not the case please do let me know....I will modify the code

Thank You :)
Why don't you declare and assign these two before the above if check? That way you can reuse them even in the if check.
The above code will be clearer if you use Date.before() or Date.after()
Can you put a comment here explaining what you are trying to do in the next two lines below?
Or simply wrap it in a self descriptive method name?
Actually I thought we always compared dates that might come from the DB using OpenmrsUtil.compare(Date, Date) because there's sometimes an issue where the date on a hibernate proxy is actually a java.sql.Timestamp (which isn't correctly comparable to a java.util.Date)
Since you already have the patient variable, do you think you need to again call visit.getPatient()?
Did you see Darius's comment about using OpenmrsUtil to compare these dates?
What is the above line trying to accomplish? Can you put a comment or wrap it in a self descriptive method name?
What happens for years with 366 days?
@djazayeri 
I totally agree on that point but i think the birthdate and startdate are always stored in same format
So i think Date.before() or Date.after() will help more maybe

Please correct me if I'm wrong
Thank You :)

My apologies that i didn't notice your comment
This line is definitely wrong. (I haven't looked at the code yet to see if it's only an incorrect comment.)
This comment is unnecessary. You only need to comment things that are not obvious to someone glancing at the code. (And in this case the next two lines tell the story "if ... compare ... error start date before birthdate".)
@djazayeri 
Can you please explain it more?
I added those lines expecting the need to define the test cases I write
Please correct me if I'm wrong
You absolutely do not have to be 1 year of age to have a visit in the system! :)
You have misunderstood the logic that is supposed to be carried out here. Sorry if my proposal on the ticket was not clear. I will comment on TRUNK-4939.
@djazayeri 
That logic is to check whether the patient is at least one year old....
If that was not the case to be done....Please do let me know the changes to be made
Will remove it and update the PR
Thanks a lot for the review :)
you will need to add @since with the correct version of when we are adding this
I know our current api methods have this throws clause but it's redundant since this is a runtime exception, so going forward you don't have to include it
Do you need to get the id? Hibernate should be able to work with the Obs object rather than its id, it can help to avoid a potential NullPointerException
The api shouldn't be the one to recursively fetch revisions, the api caller could actually be interested in the immediate revision for some reason, so it's up to the client code to recursively do this.
Shouldn't this be a unique result? An order should have exactly one previous order to it
This is also a runtime exception that you shouldn't declare here
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Only one statement per line allowed.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=556489)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: '}' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=556489)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['{' at column 56 should have line break after.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=556489)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['{' at column 51 should have line break after.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=556489)
To help the reviewer find the changes I've made I am flagging this
This is an addition
Another addition.
Another addition
Another addition
Another addition
Another addition.
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Comment has incorrect indentation level 3, expected is 12, indentation should be the same level as line 256.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=557678)
no need to flag this, we can see the diff. but thank you :)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused method parameters such as 'attr'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=560638)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method name 'User_Patient_Attributes' must match pattern '^[a-z][a-z0-9][a-zA-Z0-9_]*$'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=560638)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 137).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=560638)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Comment has incorrect indentation level 1, expected is 2, indentation should be the same level as line 562.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=560638)
can you please rename that to `combineAttributes`
that variable to `result`
remove that variable since its not needed
please configure your IDE according to https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE
your formatting is off
I dont think `s.length > 0` is needed, if s is not blank it will be a non empty string.
also please move this private method below the `getPersonAttributeTypes` where its used the first time. this way it reads more naturally from top to bottom.
@Ankitkumar94 you need to switch the arguments when calling the method, check all occurences. you call the method with user then patient attributes but the method expects them in different order. please switch them here.
@Ankitkumar94 here as well
@Ankitkumar94 here as well
@Ankitkumar94 you can add `final` in front, to signal its only assigned once, here.
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid empty if statements](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [JUnit tests should include assert() or fail()](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [JUnit tests should include assert() or fail()](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
Did you intentionally remove these methods?
Did you intentionally remove these methods?
Yes, they were duplicated, so I moved them into the Customizable interface.
Yes, they were duplicated, so I moved them into the Customizable interface.
Could you remind me about the use of the slashes at the end?
Same with the slashes here.
Well, I'm using Eclipse neon.2 with the OpenMRS code formatter config and it always formats code as a single line, which is less readable than having a single operation per line. Is there another way to accomplish this?
Do you mean a way to remove the slashes at the end?
Yes, how to format it this way without the slashes in Eclipse.
Did you try out the eclipse formatter on this page? https://wiki.openmrs.org/display/docs/Coding+Conventions
Yes, it always formats chains as single lines. I can remove the slashes and not reformat the file if you like. 
I guess you are using IDEA? 
I use Eclipse!
Hmm OK, strange. And it doesn't reformat the block as a single line? 
Interesting, thanks, I will investigate it again.
Did you get a chance to investigate?
Not yet, since I was away for the weekend, but I will be able to do it tomorrow and update the PR!
@dkayiwa I tried it and I see the same behavior as @florianschmitt with our current OpenMRSFormatter.xml in the eclipse neon2 4.6.2.

we should update our formatter.xml to support fluent APIs better like the Java 8 streams and our maven plugin which is old and not maintained.

I created https://issues.openmrs.org/browse/TRUNK-5095
@florianschmitt do you want to work on it?
@teleivo yes, sure, you can assign it to me. I started taking a look, but I think its a bit of a complicated issue. 
I think it would be best to choose some sample classes, try different formatter settings and let the community vote on them, what do you think?
sure, grab the issue and open a thread on https://talk.openmrs.org/ with your suggestions
Can we add a since annotation to the above?
Since this is changing the signature of a public method, shouldn't we follow the guidelines at? https://wiki.openmrs.org/display/docs/Java+Conventions#JavaConventions-Deprecation
sure
Well, since I'm new to the project you have to decide ;) 

The thing is, we can't have two methods with the same name but different return-type in Java. So deprecation would be difficult. Since Collection is the super-type of Set, I think its unlikely to break existing code. But I'm not really sure, since I don't know the project well. 
Did you remember to add this annotation?
If the validation exception is not thrown, will these assertions ever get executed?
If the validation exception is not thrown, will these assertions ever get executed?
i will add "@since 2.1" is that correct?
good point, you are perfectly right! I'll add a fail(), in case the validation succeeds
good point, you are perfectly right! I'll add a fail(), in case the validation succeeds
2.2
i updated the version
Will the assertions below ever get executed if the validation exception is not thrown?
Will the assertions below ever get executed if the validation exception is not thrown?
@ILauerIV these should annotations have to go in the interface PersonService and not in the PersonServiceImpl.
please add your tests to the existing test class PersonServiceTest.
and just as a note we do not add authors in javadocs see https://wiki.openmrs.org/display/docs/Java+Conventions
we know and see who contributed since thats in the git commit infos
please remove this class, I was just confused because there is no code in this tests. You have the tests in the PersonServiceTest class which is correct.
@ILauerIV am not quite sure, but I suspect your IDE isnt properly configured in terms of how it organizes imports. can you please check with https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE
please remove all the newlines
you have a typo in the method name
you are not testing anything, you just create a patientAttributeType and assert that its sortWeight is null.
think about what it is that you want to test and then implement it here.

please rename the `service` to `ps` or `personService` like in the other tests.
remove comment
no need for the full name `@Test` is enough since there is an import for it. please change for all your tests
do not add any code with TODOs, if you need to add this test than please add it, or remove it if its not needed.
remove file
please use junits expected exception rule:
you can read about it here https://github.com/junit-team/junit4/wiki/Rules
 
and also find examples in openmrs-core 
* https://github.com/openmrs/openmrs-core/blob/a9a1fcee01ff6a8d40af6440be014a3b208ecc52/api/src/test/java/org/openmrs/DurationTest.java#L29-L30
* https://github.com/openmrs/openmrs-core/blob/a9a1fcee01ff6a8d40af6440be014a3b208ecc52/api/src/test/java/org/openmrs/DurationTest.java#L101-L102

this applies to all the tests you add which test for exceptions
Can do. 
I am sorry about all of this. I am wrestling really hard wit Git and working across 2 computers. The auto generation tool created that extra class and I copied the code onto the main class for the real code. I am not sure  how the test code generation tool works. 

This problem caused my other 2 problems.
Done
Done as this class has been removed.
Removed. 
Done

Thanks for the resource. 
Done
Removed
I am working on this ticket with a class mate and he was in charge of this test method. I have asked him to explain this method.
Removed, these were auto generated in the PersonServiceImplTest and I just copied them over as such. 
Removed this method all together. 
Removed
@Nuwantha why did you introduce these members? they are not needed
@Nuwantha I just checked the issue on jira, sorry for this but since the issue was created the line numbers must have changed.

the `failOnExistingOrder(Order order)` is of course not for setting the dateActivated but for the first if block that throws the UnchangeableObjectException
`ensureDateActivatedIsSet` is for setting dateActivated

this should be clear from the method names
this is for ensureConceptIsSet
@Nuwantha currently I cannot access jira and adapt the issue. But it should be clear from the method names what the method does and since the code snippet in the issue of how it should look in the end is correct and should also help you. furthermore please put the private methods after the method `saveOrder` as stated in the issue. this makes reading of the code easier since it follow the natural read from top to bottom and simply flows :) 
@Nuwantha we can simplify this.
turn this into a guard clause like
```java
if (order.getOrderType() != null) {
  return;
}
Order previousOrder = order.getPreviousOrder();
...
```

this way you remove one level of nesting in this method and you signal the reader that ok if the `orderType` is already set, nothing to do here, return.
remove all comments in this method, we see from the code that this is what is happening
move `previousOrder` declaration to right before its first use. see that we declare it here but there are a few cases where we might return before the variable is actually used.
remove newline at the end of methods
same comment doesnt add value, remove
extract this into a private method

```java
private boolean isDrugOrder(Order order)
```

this code is used twice already in this class and I have another suggestion which will make it 3 times, so its worth extracting it into a private method.

after extracting it call the method below in the `if(concept == null && isDrugOrder(order))`, no need for a local variable then
extract this if block into another method called

`ensureDrugOrderAutoExpirationDateIsSet`

reason is this: the method we extracted is `ensureConceptIsSet` but this block takes care of something else so keeping this in here is misleading of what the method is doing. Therefore extract it and with the new helper `isDrugOrder(order)` thats an easy task :)

call this method then in the saveOrder right after ensureConceptIsSet like so

```java
		failOnExistingOrder(order);
		ensureDateActivatedIsSet(order);
		ensureConceptIsSet(order);
		ensureDrugOrderAutoExpirationDateIsSet(order);
		ensureOrderTypeIsSet(order,orderContext);
		ensureCareSettingIsSet(order,orderContext);
		failOnOrderTypeMismatch(order);
```
same here as before.

* make guard clause
```java
if (order.getCareSetting() != null) {
return;
}
```
* move `previousOrder` declaration right before its used.
What does seenIt mean?
Can we add some javadoc descriptions to these new methods?
Could we assign the new array list to a local variable with a name documenting what it is?
This is just to make sure If there is an obs is added as it's own group member then I should not process that again. Actually I had no such scenarios in my mind(not sure if it is possible as well). I saw a piece of code in `Encounter.java#addObs()`. Then I thought this might be a scenario and can be added as an extra check.
I am done with other two things, waiting for a reply from you. Wanted to know if the above check is necessary. 
One more question, how can I check the Codacy and CodeCoverage things locally? So I can fix them before pushing it.
If you are not sure whether it will happen or not, then for now, you can start simple by assuming it will not happen. 😊 
@teleivo the codacy question over to you. ☺️ 
@mddubey please dont comment your code. you write one line of comment for one line of code. your method is private, you can easily give it a more descriptive name if you feel the need to explain what it does. the method name/signature gives you a chance to explain.
@mddubey this is the old unit test style, see tests before yours. delete the verifies annotation above the method signature. not in the javadoc though.
Yeah, I was confused between both, I saw few tests using `@Verifies` annotation, and few javadoc style. That's why I used both, I will delete one of them. I will do the change you mentioned in first comment.
The method name seems to suggest removing obs that have (with) group members.
Wouldn't removeObsAndGroupMembers be less confusing?
Same as above regarding the method name.
Shouldn't we have "that" between "obs" and "need"?
Shouldn't we have "that" between "obs" and "need"?
Okay, I will change this one. I was in an impression since I am passing a `list` of obs it should be fine. 
I am done with above two changes as well.
Could you remind me as to why we instantiate a new collection on the line above?
Could you remind me as to why we instantiate a new collection on the line above?
Well, here it is.
In `EncounterServiceImpl#saveEncounter():201` :-  
- We save the existing obs and add to a list named `toRemove`.
- We get a new obs after saving the existing one we add it to a list named `toAdd`.
- Other than this we get the existing obs from the database and add it to a list named `toAdd`.

Since I am removing/adding these obs recursively, I am passing the list and the encounter as a parameter to remove/add method. These are two private methods introduced which is supposed to iterate over list of obs and remove/add from encounter recursively. For recursion I need to do the same for all the group members of each obs in that list, in an iterator, I am calling `obs.getGroupMembers` which I need to pass as other members to add/remove. Since this call returns a `set` and the method accepts a `list`, I am wrapping it into a list and passing it.

Hope that answers your question.
Can't you just change the method signature from List to Collection?
Hey. done with this change as well. This was something stupid which I could have thought of.
please remove empty line
remove extra whitespace

remove indentation.

did you configure your IDE as described here
https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE
and ran the formatter (either via Eclipse save action or manually) ?
please check your IDE formatter settings and then let the formatter take care of these issues here.
same
put the brace back, was probably an accident :)
also seems like an accident to add this dot here
this file should not show in your commit. remove all changes you made here please.
@dkayiwa should we deprecate this first? I mean its not used in the core but what if other modules use it? Or does it suffice to put this in a changelog that from 2.2.0 they do not exist anymore
@dkayiwa same here
Since it was not used, i do not think any module is using it for any meaningful work. And even if any module used it, it would just remove its usage without any effects, in terms of backwards compatibility.
So no need for deprecation. 😊 
Same response as above.
It could potentially cause module compile errors, though, no?

Or, if we aren't careful and run a module against the latest version of core without testing that it compiles, could result in runtime errors?

That being said, these do look like little-used methods.

@teleivo , @dkayiwa 
Thank you for your comments. sorry for delay. Could I know what exact changes I need to do ?

@Nuwantha I think its best you exclude these for now from your PR. I am unsure if we should simply remove them.
@Nuwantha same here: I think its best you exclude these for now from your PR. I am unsure if we should simply remove them.
@pushpa446 
I think your formatting might be off. you use spaces instead of tabs. maybe you need to check your ide settings
https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE
you seem to have stumbled on a java bug https://bugs.openjdk.java.net/browse/JDK-8148463 :)

I feel that since we cant do anything about the bug we should not use streams here since its hard to read. but thats just IMHO

what about sticking to the traditional kind:

```java
		for (EncounterProvider ep : encounterProviders) {
			if (includeVoided || !ep.getVoided()) {
				if (!result.containsKey(ep.getEncounterRole())) {
					result.put(ep.getEncounterRole(), new HashSet<>());
				}
				result.get(ep.getEncounterRole()).add(ep.getProvider());
			}
		}
		return result;
```

maybe others @dkayiwa or @wluyima or our master of streams @lluismf want to comment as well
I would like to comment after @lluismf has done so. 😊 
@lluismf can we please get your input on this one (please see comments).
I wasn't aware role was optional, sorry! I also agree with Ivo, it's a bit hard to read. Can you please revert to the previous implementation without streams? I'd do it but I don't have permissions. 
Isn't obs.getObsId() already tested on the previous line?
We discourage wild card imports as per https://wiki.openmrs.org/display/docs/Coding+Conventions
What does check_patient() mean?
I didn't give the function an appropriate name. ill  work on it. What the function does is that it takes an obs as input and it checks whether the obs.person id and its encounters patient id match.
I'm sorry about that. ill remove it. and add only those that are required :-)
This is so that only new obs with  null ids are checked and not those which have been voided 
What is this method doing?
And why does it return an obs?
Why do you think this does not belong here https://github.com/openmrs/openmrs-core/blob/master/api/src/test/java/org/openmrs/api/ObsServiceTest.java
you may want to log the exception
thanks. had missed that :)
The formatting does not look right here. Did you run mvn clean install before committing?
Did you check out conventions regarding e.printStackTrace()? https://wiki.openmrs.org/display/docs/Java+Conventions
What the role of this catch and assertion in this test?
The objective of the ticket was that ObsService.saveObs should throw a validation exception if the obs and its encounter point to different persons. Hence the try-catch block is to catch that exception and check whether the message is the same as that thrown [here](https://github.com/openmrs/openmrs-core/pull/1991/files#diff-e6b861b7858beff1a122db8d7eace065R95) 
Did you get a chance to look at this? https://github.com/openmrs/openmrs-core/blob/master/api/src/test/java/org/openmrs/api/OrderServiceTest.java#L486
Can I modify it to previous implementation and add a commit in this pull request? @teleivo 
@pushpa446 what is the additional commit? just the test? than yes 👍 
Sorry to insist, but does it make any sense to add a NULL role to an encounter provider, even if the DB prevents so ? 
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Locale' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Collections' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'org.openmrs.Order.Action.DISCONTINUE' is in the wrong order. Should be in the 'STATIC' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.ArrayList' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Arrays' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.List' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Date' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Vector' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.lang.reflect.Field' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Calendar' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'org.openmrs.Order.Action.REVISE' is in the wrong order. Should be in the 'STATIC' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.LinkedHashMap' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Locale' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.List' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.SortedMap' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.net.UnknownHostException' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Collection' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.ArrayList' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.io.UnsupportedEncodingException' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Properties' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.TreeMap' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.net.InetAddress' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.HashSet' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.text.SimpleDateFormat' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.util.Calendar' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=580243)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: 'else' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=582272)
@JudeNiroshan dont extract this temp variable. just move the fis into the try-with resource like you did in the other cases.
@djazayeri can you please join our discussion. by making use of streams here we ran into a NPE (due to a java bug) which @pushpa446 would fix with this change. see explanation starting from my 2 post. but this also lead to @lluismf fundamental question of why null is allowed in in the first place.
@pushpa446 and I talked about this. We thought this was a bug because it appeared when we updated bahmni-core to build against the latest openmrs-core, but we now realize that actually our Bahmni test data was invalid. We will cancel this PR and ticket, and just fix our Bahmni test data to include an encounter role.
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=582554)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=582554)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=582554)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=582554)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: '{' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=582554)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: '{' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=582554)
@JudeNiroshan please remove your javadocs. They dont add value/information. The methods are short, dont do much, and have meaningful names. Its easy for the reader to see what they do. And most importantly these are private methods. If they were public then of course you need to add proper javadocs (but then you would also need to fill in the parameter doc as codacy told you)
@JudeNiroshan please configure your IDE as per https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE
especially the imports (static ones should be on top).
@teleivo  I have actually configured accordingly. I'm using IDEA
https://wiki.openmrs.org/display/docs/Developer+How-To+Setup+And+Use+IntelliJ#DeveloperHow-ToSetupAndUseIntelliJ-JavaImports

static imports are first, check again
@teleivo My apologies. I missed it. Currently I'm writing the test to get 100% coverage. Once I'm done with that, I will commit them.
@Nuwantha why not the entire block?
@Nuwantha remove this entire if, it doesnt do anything.
@dkayiwa do you agree?
remove also
@Nuwantha leave this one
remove, it reads the same as the latter statement
remove all 3 comments
remove the entire block comment
@Nuwantha remove the entire block.
@Nuwantha why do you often only remove on line? please remove the entire commented out code section
@Nuwantha please review your PR and comment out more diligently
@Nuwantha remove the entire TODO. plus the 'validate message'. do you see how this just repeats the method call?
leave this one in.
leave this one
@Nuwantha remove this javadoc which was the belonging to this commented out code.
@Nuwantha remove the javadoc that did belong to the commented out method signature. this has to be done for every occurence. in this class and everywhere else.
@Nuwantha remove as well and remove the empty lines
@Nuwantha leave this one
@Nuwantha remove
@Nuwantha remove
@Nuwantha leave this block since it belongs to the TODO
@Nuwantha remove
@Nuwantha why remove this?
@Nuwantha same. leave
@Nuwantha leave. you just remove one sentence in the middle of a block. that doesnt make sense. either remove it all or leave it.
@Nuwantha same. leave for now
Do you mind explaining a bit why this changed necessitated a switch from 1 to 2 for provider id?
I though the ticket changes would not require modifications in this test. Not so?
Provider id 1 does not have a provider/person name because of which its giving a validation exception. 
log:
[Provider: providerId:1 providerName: ]
[Provider: providerId:2 providerName:[Mr. Horatio Test Hornblower, Mr. Horatio Peeter Hornblower2, Mr. John Peeter Hornblower3, Mr. adolf hitler] ]

org.openmrs.api.ValidationException: '[Provider: providerId:1 providerName: ]' failed to validate with reason: name: Provider Name or Person required, person: Provider Name or Person required

before this ticket we were not validating on unretiring, and hence had skipped on some exceptions. On making changes to the method according to the ticket, these exceptions were caught (maybe due to some data missing from that particular set). Hence i switched to new id's 
Can you also share some light on why the above assertion was removed?
sorry about that.  I have made the relevant changes and added the assert statement again
The above formatting (TAB) does not look correct. Could you also explain why you changed from 3 to 7?
adding an new dataset increased the overall size of order frequencies from 3 to 7.  
unretire or unvoid?
sorry about that. ill make the change
Did you just accidentally remove the above assertion?
no. Since the id was changed so was the retire reason associated with it.
This is problematic because you are changing the expected behaviour. The assertion ensured that the retire reason should of an expected text, which is different from ensuring that it is null.
I have made a small change but the thing is that we are using an already existing dataset and this orderFrequency has been set retired without any reason. 
The orignal orderFrequency = 3 was failing with below exception on validation at unretiring

org.openmrs.api.ValidationException: 'CIVIL STATUS' failed to validate with reason: concept: Concept should be of class Frequency   
Can't you make the change to ensure that the existing test passes as it was?
I had a look at https://github.com/openmrs/openmrs-core/blob/9b977a18fcc759af9ad782110b18efe27175dd76/api/src/test/resources/org/openmrs/include/standardTestDataset.xml  where the original dataset was located. The reason order frequency 3 is giving an error is because its class_id is not defined as 19 (line 19) i.e the the concept of order frequency 3 from the original dataset id not of class frequency.   On the other hand the one i have replaced it with (from file:///home/jthacker/openmrs-core/api/target/test-classes/org/openmrs/api/include/OrderServiceTest-otherOrderFrequencies.xml )  order frequency 103, its concept has class_id =19
We might want to have an exception for Obs, there is some complex logic around updating Obs and this may introduce some obscure behavior.
That seems to make sense, now that validation is kicking in, you might need that extra text data
should i revert the changes

Though the question becomes, what is in that file that is required for validation? I thought the file contains just other frequencies along with their concepts. Does it fail because there is no backing concept?
unretireOrderFrequency should unset the reason, so the assertion should instead check that the reason if blank.
@wluyima  yeah i have already changed the assertion
@wluyima  yes. it seems that the original data was failing because the class_id of the backing concept was not set to class frequency

I guess the question is what is the behavior after your change? 
I.e if you void and unvoid an Obs with no other changes in both operations, do you shouldn't get an extra 'replacment' obs for the old one, but if there in any other changes then it should get voided and replaced with a new one. The tricky thing is how to know if there were changes when it was initially getting voided. This is why one might argue that may be we should have your change, I guess we need to know what the behavior is.
Does that mean the frequency is backed up by a concept that has the same concept_id from the standard test dataset and then the order frequency dataset is overwriting it (adding a concept with  same concept_id) with the correct class_id?
in the standard data set concept_class_id="19" has been set for order Frequency (https://github.com/openmrs/openmrs-core/blob/9b977a18fcc759af9ad782110b18efe27175dd76/api/src/test/resources/org/openmrs/include/standardTestDataset.xml#L35)   and the backing concept (L172) for order frequency 3 (L342 of standardTestDataset.xml) has not been assigned this class_id because of which a validation exception was caused.
In the new dataset a new concept with new concept id has been created that has class_id ="19". This is the backing concept for orderFrequency 103 that i have switched to    
   
My apologies, I've just realized that you're now using a new frequency with id 103, so it makes sense to include that file. Too early here for me to be tired :)
Its true that we can update voided obs and cannot track such a change. To track such a change maybe we could change isDirty() property of the obs to false on voiding it and change it to true if a voided obs is modified. Then we could keep a check that if an obs is voided and is marked dirty means than it means has been modified.  Anyway I do think we should validate an obs obs before unvoiding it. The fact whether an obs has been modified after voiding or not should not affect that.(the current test still seem to pass) This is what I understand. What do you think @wluyima @dkayiwa :)  
What is the current behavior with your changes?
What I want to know is the behavior for the scenarios below after your changes;

- One voids and unvoid an obs with no changes.
- One voids an obs with changes and then unvoids it, there is a ticket about discarding any changes when voiding an item which would partly address this particular scenario.
- One voids an obs with no changes and unvoids it with changes.

I guess the question is what happens to the unvoided obs and is there any new Obs getting created to repalce it?
behavior of change 
This is what I observed after writing a few tests.
Before the change:-
on voiding and unvoiding an obs without any change no new obs is created.
On voiding an obs with change and then unvoiding it, the change is not considered and thus yet again no new obs is created and the same obs gets unvoided. The same thing happens when an obs without any change is voided and then unvoided with changes.
After the change:- 
on voiding and unvoiding an obs without any change no new obs is created.
On voiding an obs with change and then unvoiding it, the change is now considered, and hence a new obs is created on unvoiding and this change is carried to the groupmembers of the obs. Same thing happens when an obs is voided and then unvoided with changes.
Hence as @wluyima said  there is obscure behavior. How should i proceed with the ticket ?
(Here are the test that i added to ObsServiceTest.java http://pastebin.com/J6FTY1rx, please check and let me know whether the test are wrong) :)
In the test :- 
before the change:- all the new tests pass
after the test:- the last 2 new tests fail since new obs have been created to replace the old one
Thanks @jtatia , that's interesting, when you void an Obs with changes and unvoid it later, I wonder how the code knows about the previous change that was made when voiding it, might be because you did this in a unit test and the same object is still in the the hibernate session, I think the way tests are setup they can mislead sometimes. Do you mind making these checks through the application and not unit tests please?
@wluyima  I did what u asked. I repeated the steps locally in the application and it turns out that even after the change no new Obs is created when an obs is voided with changes and then unvoided. Same with an obs being voided without changes and then being unvoided with changes. I have recorded the screenshots of what i performed here https://drive.google.com/drive/folders/0B54Y2dWNGuH1Y0VXbVgtZG5yVFE?usp=sharing.
I repeated the with_change procedure this time changing the actual parameters like height and weight when voiding and unvoiding and the changes didn't get saved :-) please let me know whether i followed the correct procedure
I see, I guess it would be nice to discuss this on a design call about what the proper behavior should be, I would Imagine that if an Obs is voided and later unvoided with changes as it was getting voided or unvoided that would technically constitute a change but it would fairly be complex to track the change.
If the behavior before and after your change is exactly the same for those scenarios, we can merge the PR the way it is and if we want any other behavior we implement it in a separate ticket
Did you intentionally replace "Some Retire Reason" with null?
Could you explain why order frequency id 3 required replacing with 103?
Did you forget to fix the tabbing?
as i have already explained in previous comments the original data was failing because the class_id of the backing concept was not set to class frequency. The new data covers for that.  :)
So what made it pass (not fail) before your changes?
before this ticket it was not validated. any you can see [here](https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java#L51)  after validation, its checked whether the concept is of class frequency.  in the previous [dataset](https://github.com/openmrs/openmrs-core/blob/9b977a18fcc759af9ad782110b18efe27175dd76/api/src/test/resources/org/openmrs/include/standardTestDataset.xml#L342) the order_frequency has concept_id = 4 which has class_id =10. class_id = 10 is that for ConvSet and hence the test was failing after the validation.
@dkayiwa yes. the dataset has been replaced and this change is for the new dataset since its retire reason is null. 
@vixus0 can you please remove this comment. the code after that says the same thing
@vixus0 you dont use the logger, can you please remove it
done
thanks, done.
@vixus0 you left the other TODO in I think, if this is the test for it
@DataMinerUK can you please format this like in other tests.

```java
public void before() {
    editor = ...;
}
```
move the methods after they are first used. more natural to read top to bottom
i think the changes in this file are not part of the issue. this comes from your other PR. please fix that.
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=589225)
- Why not move the whole block into failIfDeniedToEdit() instead of just moving APIException?
- "Keep the private methods in order of their execution and right after the method saveEncounter."

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=589237)
Sorry for that mistake, I will change the methods. 

![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=513402)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: 'catch' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=513402)
Wouldn't it be nice to have @since on these new enums?
Good point, I remembered for the getters/setters but I forgot it here. I will add this.
@MalshaL same comment I gave on your other PR applies. please remove the javadocs you added
@MalshaL please remove the javadocs on all the private methods you added
@MalshaL please remove all the javadocs you added. Note how you just repeat what the method name + parameter already say? This just takes up space and the readers time without adding more information.

Of course if you would write a public method it should have javadocs.
@MalshaL why didnt you remove the javadocs on the private methods?
No, but if the validation exception is not thrown, the test will definitely fail, because auf the fail()-call in the try block.
No, but if the validation exception is not thrown, the test will definitely fail, because auf the fail()-call in the try block.
You should use equals method for object comparison
It's also good to add another version of this that takes in a date as of when to check, this is useful especially for tests, can you add a test for this?
I would also think that a membership that started on the current or passed in date should be considered as active

End could be null and the memebership is active depending on the passed in asOfDate that I mentioned above

Can you add javadocs that say what these dates are, typically these are the values for the void details before the patient was unvoided

Add **@since 2.1**

Add **@since 2.1**

Add **@since 2.1**

Add **@since 2.1**

Add **@since 2.1**

Add **@since 2.1** to this class

Add **@since 2.1**

Add **@since 2.1** to this new methods in an existing class on an interface or domain object

I believe Cohort.getMembers() includes voided memberships, right? If yes you might want to skip them when voiding below so that you don't overwrite the voided fields i.e you don't want to void them again. Otherwise if they were previously voided and you void them along again when the patient is voided, in case the patient is unvoided later they would as a result get unvoided along since their void fields would match that of the patient which would be wrong.

It would also be nice to have tests that encure such conditions i.e that previously voided memberships never get re-voided with the patient. And that memberships that were previously voided never get unvoided when the patient is unvoided later

I don't see where you added this message code and its translation in messages.properties file

The liquibase-update-to-2.0.xml should not exist in your PR because you didnt add nor change it, how did you perform the merge? Can you try `git pull --rebase upstream master`. A simpler way you could have done it would be to just copy out all your changesets from the liquibase-update-to-latest file and save them somewhere temporarily i.e revert them, do the merge and add them to the new file

@jtatia could you explain a bit why you introduced the OrderServiceTest-otherOrderFrequencies.xml dataset in this test? Wouldn't you make the original test pass without this?
Did you intentionally decide not to use @Test(expected = ValidationException.class)
or http://junit.org/junit4/javadoc/4.12/org/junit/rules/ExpectedException.html

http://stackoverflow.com/questions/156503/how-do-you-assert-that-a-certain-exception-is-thrown-in-junit-4-tests
@vshl please organize your imports according to the https://wiki.openmrs.org/display/docs/Coding+Conventions
@vshl fix formatting. use the IDE formatting settings as described here https://wiki.openmrs.org/display/docs/Coding+Conventions
@vshl fix formatting
@vshl please use the org.junit.Assert.assertTrue wich is what we use in tests
again old unit test style please update
remove comments. they do not add information. the code speaks for itself
good example of why this comment is not needed. the code reads almost exactly the same as your comment.  please remove your comments in all your tests! if you feel the need to explain your code think about a more clear way to write it. but in this case it is very clear :) 
@vshl who is this TODO for? Do not add TODOs, they will be left forever in the code. Nobody will feel responsible for it. if there is something left TODO your PR is not ready.
This logic should be in the patientUnvoided method and not here
Meant to say patientUnvoided method
I agree, typically you add comments to areas where you're implementing some logic that isn't straight forward to understand, doesn't make sense to comment on method call like this unless you're saying why you are calling it.
I wanted to clear a doubt with @wluyima. Basically to address [this comment](https://github.com/openmrs/openmrs-core/commit/0b662c88e8352da41bb3ac6525557b4801bf3e48#commitcomment-21178110) that I added in the earlier commit. I will remove it.
Since these test `CohortMembership.java`, should I move them to their own test class `CohortMembershipTest.java`?
For the condition to be in patientUnvoided(), shouldn't the patient be "unvoided" at the time? With the fields, dateVoided, voidedBy == null? This falls back to my earlier question about the unvoiding logic: [here](https://github.com/openmrs/openmrs-core/commit/0b662c88e8352da41bb3ac6525557b4801bf3e48#commitcomment-21178110). I will probably test again and get back to this comment.
Calling `Context.getPatientService().unvoidPatient(patient);`
gives error: `org.openmrs.api.ValidationException: 'Cohort id=2 name=Example Cohort size=2' failed to validate with reason: memberships: Cohort.patientAndMemberShouldBeVoided`
because of this in CohortValidator.java:
```
					if ((p.getVoided() && !member.getVoided())
							|| (member.getStartDate() == null || dateCompare == 1)) {
```

At this point, the patient is voided and the membership isn't. So my question, at what point the patient should be unvoided? Because at these stages: PatientDataUnvoidHandler.handle(), CohortServiceImpl.patientUnvoided(), the patient's voided fields are still set. Hence the validation fails in CohortValidator. I hope you get my question.
I would imagine that there should be a condition where this returns 1
yea sure

@dkayiwa do i hv to create a new PR or can i edit the file here only?
@dkayiwa is it ok now ? :)

@wluyima regular drop worked for me when i wrote dropTemporaryTable  in the tag 
it gave me error 

@wluyima    Invalid content was found starting with element 'dropTemporaryTable' .This was the error

@wluyima The error was due to the liquibase tag i used

@wluyima  dropTemporaryTable tableName="temp" i got error for writing this

ok.

thanks. ill make the changes.
what version should i mention??? 2.0.3 or 2.0.x?
I didn't give the function an appropriate name. ill  work on it. What the function does is that it takes an obs as input and it checks whether the obs.person id and its encounters patient id match.
I'm sorry about that. ill remove it. and add only those that are required :-)
This is so that only new obs with  null ids are checked and not those which have been voided 
Provider id 1 does not have a provider/person name because of which its giving a validation exception. 
log:
[Provider: providerId:1 providerName: ]
[Provider: providerId:2 providerName:[Mr. Horatio Test Hornblower, Mr. Horatio Peeter Hornblower2, Mr. John Peeter Hornblower3, Mr. adolf hitler] ]

org.openmrs.api.ValidationException: '[Provider: providerId:1 providerName: ]' failed to validate with reason: name: Provider Name or Person required, person: Provider Name or Person required

before this ticket we were not validating on unretiring, and hence had skipped on some exceptions. On making changes to the method according to the ticket, these exceptions were caught (maybe due to some data missing from that particular set). Hence i switched to new id's 
sorry about that.  I have made the relevant changes and added the assert statement again
adding an new dataset increased the overall size of order frequencies from 3 to 7.  
sorry about that. ill make the change
no. Since the id was changed so was the retire reason associated with it.
I have made a small change but the thing is that we are using an already existing dataset and this orderFrequency has been set retired without any reason. 
The orignal orderFrequency = 3 was failing with below exception on validation at unretiring

org.openmrs.api.ValidationException: 'CIVIL STATUS' failed to validate with reason: concept: Concept should be of class Frequency   
I had a look at https://github.com/openmrs/openmrs-core/blob/9b977a18fcc759af9ad782110b18efe27175dd76/api/src/test/resources/org/openmrs/include/standardTestDataset.xml  where the original dataset was located. The reason order frequency 3 is giving an error is because its class_id is not defined as 19 (line 19) i.e the the concept of order frequency 3 from the original dataset id not of class frequency.   On the other hand the one i have replaced it with (from file:///home/jthacker/openmrs-core/api/target/test-classes/org/openmrs/api/include/OrderServiceTest-otherOrderFrequencies.xml )  order frequency 103, its concept has class_id =19
should i revert the changes

@wluyima  yeah i have already changed the assertion
@wluyima  yes. it seems that the original data was failing because the class_id of the backing concept was not set to class frequency

in the standard data set concept_class_id="19" has been set for order Frequency (https://github.com/openmrs/openmrs-core/blob/9b977a18fcc759af9ad782110b18efe27175dd76/api/src/test/resources/org/openmrs/include/standardTestDataset.xml#L35)   and the backing concept (L172) for order frequency 3 (L342 of standardTestDataset.xml) has not been assigned this class_id because of which a validation exception was caused.
In the new dataset a new concept with new concept id has been created that has class_id ="19". This is the backing concept for orderFrequency 103 that i have switched to    
   
Its true that we can update voided obs and cannot track such a change. To track such a change maybe we could change isDirty() property of the obs to false on voiding it and change it to true if a voided obs is modified. Then we could keep a check that if an obs is voided and is marked dirty means than it means has been modified.  Anyway I do think we should validate an obs obs before unvoiding it. The fact whether an obs has been modified after voiding or not should not affect that.(the current test still seem to pass) This is what I understand. What do you think @wluyima @dkayiwa :)  
behavior of change 
This is what I observed after writing a few tests.
Before the change:-
on voiding and unvoiding an obs without any change no new obs is created.
On voiding an obs with change and then unvoiding it, the change is not considered and thus yet again no new obs is created and the same obs gets unvoided. The same thing happens when an obs without any change is voided and then unvoided with changes.
After the change:- 
on voiding and unvoiding an obs without any change no new obs is created.
On voiding an obs with change and then unvoiding it, the change is now considered, and hence a new obs is created on unvoiding and this change is carried to the groupmembers of the obs. Same thing happens when an obs is voided and then unvoided with changes.
Hence as @wluyima said  there is obscure behavior. How should i proceed with the ticket ?
(Here are the test that i added to ObsServiceTest.java http://pastebin.com/J6FTY1rx, please check and let me know whether the test are wrong) :)
In the test :- 
before the change:- all the new tests pass
after the test:- the last 2 new tests fail since new obs have been created to replace the old one
@wluyima  I did what u asked. I repeated the steps locally in the application and it turns out that even after the change no new Obs is created when an obs is voided with changes and then unvoided. Same with an obs being voided without changes and then being unvoided with changes. I have recorded the screenshots of what i performed here https://drive.google.com/drive/folders/0B54Y2dWNGuH1Y0VXbVgtZG5yVFE?usp=sharing.
I repeated the with_change procedure this time changing the actual parameters like height and weight when voiding and unvoiding and the changes didn't get saved :-) please let me know whether i followed the correct procedure
thanks. had missed that :)
as i have already explained in previous comments the original data was failing because the class_id of the backing concept was not set to class frequency. The new data covers for that.  :)
before this ticket it was not validated. any you can see [here](https://github.com/openmrs/openmrs-core/blob/master/api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java#L51)  after validation, its checked whether the concept is of class frequency.  in the previous [dataset](https://github.com/openmrs/openmrs-core/blob/9b977a18fcc759af9ad782110b18efe27175dd76/api/src/test/resources/org/openmrs/include/standardTestDataset.xml#L342) the order_frequency has concept_id = 4 which has class_id =10. class_id = 10 is that for ConvSet and hence the test was failing after the validation.
The objective of the ticket was that ObsService.saveObs should throw a validation exception if the obs and its encounter point to different persons. Hence the try-catch block is to catch that exception and check whether the message is the same as that thrown [here](https://github.com/openmrs/openmrs-core/pull/1991/files#diff-e6b861b7858beff1a122db8d7eace065R95) 
@dkayiwa yes. the dataset has been replaced and this change is for the new dataset since its retire reason is null. 
any decision on this. @dkayiwa ?
thanks Ivange just refactored that
@dkayiwa doesn't deprecating mean annotating the code but keeping it for backwards compatibility or waiting for deletion during a new release?
a little puzzled here
i was to specify that that the attribute dead of the person class was false and due to this the death date can not be set unless we set dead to true.
the above statement checks if deathDate has some non-null value along with dead being set as false ie (the person is not dead but deathDate has been set) which is what we shouldn't allow according to the ticket. The third condition was added explicitly because of one test case in the PersonServeiceTest class. In that test, unlike other tests (where i manually set dead to true whenever deathdate was being set), setting dead to true was leading to a null pointer exception. so i added it. bcoz earlier what i tried was

private void validateDeathDateDead(Errors errors, Date deathDate, boolean dead, boolean deathDateEstimated) {
      if(dead == true || deathDate == null ) {
               return;
       }
       else if(dead == false && deathDate != null) {
               errors.rejectValue("deathDate", "person.dead.false");
       }
}
this gave some null pointer exception while runnning the tests. i thought i might be due to the empty return statement abouve
yes i completely understand, but without  ( patient.setDead(true);) this particular test shows validation exception as you see above that the deathdate has been set to current date (new Date())
which means we are setting the deathdate but not setting the person as dead which is a voilation of the issue in the ticket, isn't it?
while this test runs the exception, that my added code throws, shows up.
this line checks if deathDate is null or is dead true, if so, then we do not need to check further.
(the actual case we want to validate is dead == false and deathdate == null.)
@dkayiwa  there shouldn't be a problem , bcoz that way the person is not dead and no deathdate is being associated with it, which seems fair.
I noticed a thing in a lot of test cases that the deathdate has been initialized with new Date(), which return an instance of current date, which means that the deathdate is not null. also in these tests dead is not set to true. i think this may be a problem.
if the person is dead, we dont care if deathdate is set or not, if its set its fair, if not fair too.
if deathdate is null we dont care if person is dead or not.
but if deathdate is set the peron should surely be dead.
this is what i have understood, am i right?
should a check for this be included too?
but i don't think even after including this the failing test case would pass.
yes i know that, but my point is some test cases have set deathDate without setting dead and also called the validate method in the person validator class. isn't this making them fail?
ok, i will try and get back asap :)
@ivange94 thanks alot let me look into it and clarify.
which lines are duplicating?
should i change this to @should return a criterion of given identiferTypes ?  
That was  intentional, i will remove it. thanks
let me address it . @teleivo 
@teleivo  I have actually configured accordingly. I'm using IDEA
@teleivo My apologies. I missed it. Currently I'm writing the test to get 100% coverage. Once I'm done with that, I will commit them.
@teleivo Do you maybe have any idea how to check is the outputstream closed in this case?
No, Its my mistake. Do you think is it necessary to fix it?
Yes, you are right, default caches are created. 

> We could provide more granular adjustments of config for module developers in a separate issue if needed.

I think it is a good idea

As you said, ehcache.xml is default filename. In fact, we can rename it to `hibernate-ehcache.xml` by adding `net.sf.ehcache.configurationResourceName` parameter to hiebrnate.cfg, if you think we need to be more clear about it

Probably is, I've copied this configuration from commit which was reverted a couple months ago, I guess we can limit it to 500?

I did it for debugging purposes, because default name is "_DEFAULT_". At first I had problem with those multiple CacheManager instances, so having explicit names was handy, and I think it can be useful in future if anybody will have to do something with those.

@dkayiwa This loop is responsible for finding two digit number (which is useful when there are multiple files with same name). It was solution that was implemented here before, I've only upgraded it to handle MIMEs in filename :)
@dkayiwa Okay, so:
Generally, `getOutputFileToWrite` is about creating new blank file with proper filename that contain some information about data is would get.
Before it was like: `TITLE + NUMBER + EXTENSION` (`NUMBER` is appended when file with same `TITLE` already exists.
Now it is like: `TITLE + MIME + NUMBER + EXTENSION` (`MIME` is appended when it is defined in `Obs`)

You are asking about `while` loop that I replaced with `for` loop, explanation:
- `for` looks better, since we don't need to initialize iterator out of the loop.
- this loop is responsible for finding proper `NUMBER` that would be appended to file if it already exists.
- after number is found (no file named `TITLE + MIME + NUMBER + EXTENSION` exists) it goes out of the loop and create returns file with given `TITLE + MIME (OPTIONAL) + NUMBER (OPTIONAL) + EXTENSION`.

Isn't it more readable than it was before? :smiley: 
@dkayiwa Sorry for long response,
I've minimized changes in `getOutputFileToWrite()` as You said.
I don't have any problems with `Files.probeContentType(file.toPath())`, for example when running `shouldGuessMimeTypeIfNotSpecified()` test it is guessing type just fine :)
It doesn't matter since this slash is for parsing MIME type and filename in both UNIX and Windows will look like "`somefile_image-slash-jpg`".
`getMimeTypeFromFile` is more complex since it tries to parse MIME type from filename, then if there is no MIME type in file it tries to probe it and returns default MIME type (`application/octet-stream`) if it couldn't guess MIME by any way mentioned before.
`getFileMimeType` is just trying to guess MIME type by using `MimetypesFileTypeMap.getContentType()` which is not enough and it is less reliable than `Files.probeContentType()`
Sorry for that mistake, I will change the methods. 

@dkayiwa, Its a new feature introduced by Java 7 know as the "Diamond" operator. For more info, follow http://openjdk.java.net/projects/jdk7/features/#f618

Ok

I agree, hence it has been fixed now, however not sure why it was written in that manner, but I understand the logic what it intended to do.

:-) agreed, i had initially added some code and then removed it, now it is not of much use, I shall remove this block.

Yes, valid, shall correct it.

So here is how it goes, first we fetch the patient ID's that are duplicate based on the criteria selected, say First Name, Last Name, Gender, DOB. While fetching the patient ID's we have applied the order by clause so that matching patients appear one after another in the same sequence. Now when we use these patient ID's in the next query in the IN clause to fetch all the patient objects using HQL, the order of the patient ID's gets disturbed, so the duplicate patients are not listed to one another after patient objects are retrieved. Hence we do a in memory sorting of the patient objects retrieved to keep them in the same order of Patient ID's that were returned by first query. Please let me know if this is still unclear, I shall explain further with more details. The first query of patient ID,s might have returned IDs 1, 4, 2, 3 which means say 1 & 4 are matching and appear next to each other while 2 & 3 is the other pair. Now when we use this for IN clause query to fetch the patient objects, the patient objects returned does not have patients in the same order, it changes to 1,2,3,4. Hence this in memory sorting is done.

@dkayiwa : Please refer the comment below to understand what happens if sorting isn't done. (Look at my response for your question: What would lead to this? Patients without ids?)

the variable name Integer weekdayPos1 isn't correct, so I shall correct the variable name to indicate what is the variable used for.

@dkayiwa : I am on vacation for rest of this week, I shall respond to your question by early next week. Apologies for the delay.

@teleivo : Shall take care and update the code accordingly.

@teleivo : Shall be done in coming week once I back from vacation.

@teleivo : Yes there are lot more test cases with permutation and combination of various attributes selected for duplicate matching as well. However since there were no cases initially when I picked this up, wanted to add the cases to cover the scenarios for which this fix was being done, we shall create more cases for all positive and negative scenarios.

@dkayiwa and @teleivo : I also wanted to avoid native SQL and use hibernate APIs when I started off, however hibernate API's became more complex to have group by and having by clauses which would have columns from different tables with joins among them. I did even ask this on the hibernate forum and based on their suggestion, went to head to split the 1st part to native SQL so that duplicate patient IDS can be first retrieved avoiding the Hibernate API's and in 2nd part used HQL which is simple to retrieve all the patient objects using the patient ID's retrieved in the first query. Here is the link to the hibernate forum question:
https://forum.hibernate.org/viewtopic.php?f=1&t=1043635

Hi @dkayiwa , there isn't much of a difference in terms of response time if we do order by in MYSQL (native sql statement) as we have done now, as compared to native SQL without order by clause. Please see the screenshot below. So just by removing the order by clauses from native SQL we are not going to gain much.
In addition to clarify, currently (in this fix) we are doing in memory sorting just based on patient ID's since we need to maintain the order of the patient ID's (to show duplicate patients together) returned by native SQL. Please let me know if you need further clarifications on the same.
![image](https://cloud.githubusercontent.com/assets/19147821/19429663/800437f4-946e-11e6-9871-f44a6ec07137.png)

The idea was to explicitly log the stack trace for debugging purposes, there were cases initially when code was still under development where we faced some query formation issues, hence added this line, I shall be removing it the catch statement completely.

This has been taken care in the latest commit.

'String.valueOf' part was there in the original code, and i didn't change it. I don't know the exact purpose of that
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid empty if statements](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [JUnit tests should include assert() or fail()](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [JUnit tests should include assert() or fail()](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Method names should not contain underscores](https://www.codacy.com/app/infrastructure/openmrs-core/pullRequest?prid=532210)
do i understand right that you want to have closing brace, catch and opening brace on one line?
the code formatter changes that to 
closing brace on one line and 
catch and opening brace on the next line


![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 186).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=629632)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 149).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=629632)
@teleivo i created a new pull request as i messed up the git commit history with sqash to much and push to early. still learning git,
i don't see  where i can remove this pull request but will try further.  
I don't think this change is of any value since you still need to use the key after, I think what you need to clean up is cases where they key set is retrieved and the keys are never used except for getting their respective values.
The ticket asked to fix the performance issue caused by use of keyset. I changed that. 
Really optimizing the implementation might be another ticket? 
@MalshaL you need to remove the string replace call, see that before the "/" was replaced with the File.separator to make it cross-platform. thats not needed when letting File construct the path.
I think this can be replaced with `File(webInf, "dwr-modules.xml")`

check out the different constructors available https://docs.oracle.com/javase/7/docs/api/java/io/File.html
you can use a File as parent to construct a new File from it appending a child string.
same as above, the goal of this ticket is to get rid of all the manual path constructions in the code using `File.separator` or `System.getProperty("file.separator")` and `File.separatorChar`
same
@MalshaL can you please double check your formatter settings am wondering why there are so many whitespace formatting changes in this file, I dont get them with my eclipse config (https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE).
Forgot to add final here
@MalshaL please also use the try-with-resource statement
http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html
instead of calling the close() yourself.

this has just been fixed in https://issues.openmrs.org/browse/TRUNK-5031
do not change this here, this has been fixed in
https://issues.openmrs.org/browse/TRUNK-5031

you are currently overriding his fix.
you need to discard your changes.

you can see the changes that introduced the try-with-resource at
https://github.com/openmrs/openmrs-core/commit/b99cdc85526c08e7f6da3f4aab5ae5666f184e63

from  https://issues.openmrs.org/browse/TRUNK-5031
this relates to the entire UpgradeUtil.java
@MalshaL cant you just use

`File outFile = new File(webInf, "view", ...);`

instead of using the Paths.get() ?

Also please do not comment out code! Always remove it. We use git, if we need it back we can easily get it.
same as my last comment above this one
same, use new File()
same
same
same
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 4 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=638554)
@wluyima, meinsen's change is already a performance optimization. The issue is that when you use propertyValues.get(property) it may be O(log n) whereas you can simply do e.getValue() when using entrySet which is O(1). 
Do we still need localeConceptNamesMap.keySet() on the lines above?
From the code diff i can't see that there was a localeConceptNamesMap.keySet() call. Can you tell why you see that there should "still" be the call?
In my opinion, and that's why i made the pull request, old and new code are equivalent in what they achieve.  
    
The diff will not show it because you did not change it. But your changes seem to make it irrelevant. If you want to see it, take a look at the actual source file https://github.com/meinsen/openmrs-core/blob/26cf38871f542c57fd2ef3c81aa6a7956b801fa1/api/src/main/java/org/openmrs/util/databasechange/ConceptValidatorChangeSet.java#L130
@meinsen does the above comment make sense? 😊 
@dkayiwa Yes, it does make sense. I removed the line in that branch.
Is this change really about removing the try and catch blocks?
Is this change really about removing the try and catch blocks?
Then I think I didn't understand the ticket.
What was it about?

What was I expected to do?
or I was supposed to catch the NullPointerException ?
Can you get rid of this comment please? I find it redundant
Did you format this code? The closing bracket should have gone to the next line if you did
Aren't you missing a closing bracket? 
Was moving this part of the ticket goals?
Can you do only what the ticket is all about and no more? Not formatting, no nothing else. It greatly simplifies the review. 😊 
This is part of the ticket I guess, I have not made any formatting changes. When I extract the lines into another method, these lines move up. 
Extracting the ensurePreferredNameForLocale is part of this ticket. Sorry for the trouble.
I have just made the changes mentioned in the ticket. Is it okay?
Did you commit and push the change to this pull request?
Yes I squashed the commits and rechecked if I have made any formatting changes.
Thanks for the update, I'll work on that 
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 126).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=750592)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 126).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=750592)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=754218)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=754218)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=754218)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=754218)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=754218)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=754218)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '71'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=754218)
Could you explain the reason behind removing setDate(true)?
Coz it's set now automatically, when you set deathDate. So it looks like a just unneeded line of code.
Because it is a public method and hence can be called by the API consumer. So what would happen when one calls person.setDead(true)?
The behavior of Person#setDead hasn't been changed. 
I deleted setDead calls from unrelated tests like Person#getAge(Date) and PatientService#mergePatients(Patient, Patient). 
How do you think, maybe we need a special test for Person#setDead call?
If so, should I make it in the same PR, or make a separate task in Jira?
My thinking was that you do not change the existing tests. Hence you leave the call to setDead() as it was. That way we are sure your changes did not break any existing tests.
OK. Brought it back
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 148).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=756976)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '71'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=763840)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=763840)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=763840)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=763840)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=763840)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=763840)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Document empty method body](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=763840)
please remove the javadocs from your private methods, they dont give more info than the methods name. just takes space and the readers time.
please move the getConcept branch out of this one since this has nothing to do with ensuring the program is set. sorry for this, was probably due to the line numbers in the issue have moved since the code changed in the meanwhile.
Thanks. This is just my second contribution, so I'm still learning my way around. Is there any documentation at all for a private method?
I should have this fixed soon. Would I just create a new pull request or do I modify this one when finished?
Similarly should the getProgramWorkflow branch be removed from ensureProgramWorkflowIsSet (for the same reasoning)?
don't worry, your commit is well done. these are just minor things.

the method is private so will not be documented in our public API docs. there can of course be a javadoc for a private method if needed but if we write short expressive methods and give meaningful names to methods, parameters, variables there is no need for comments. the code will speak for itself. this is the idea of this refactoring. you can browse around in this code base and you will find parts that have comments explaining what the code around it does. this to me shows that the code can/should be refactored as it needs explanation. browse around and maybe you'll find improvements you would like to propose :)
as to your 2nd comment, no. the method names say what's going on in the method. the first is concerned with Program, the second with ProgramWorkflow.
@HVFrancis this if clause should stay in here with the APIException("ProgramWorkflow.concept.required"
the else if clause with the APIException("Program.error.contains.ProgramWorkflow" should go in here.

remember the ensureProgramIsSet method is about the Program, so `else if (!workflow.getProgram().equals(program))` needs to go in here 
@HVFrancis you dont need to declare `throws APIException` since its not a checked but an unchecked exception, so please remove it. see http://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/
same here remove the `throws APIException`, other than that this method is perfect 👍 
Did you actually make this change as part of your pull request?
Could you explain a bit why you passed a value of 0 for new Date(0)?
I was need to set a birth date earlier than death date. It l's the shortest way. But maybe not very obvious. Should I set the dates explicitly?
What could be the reason behind setting the birthdate? Is it needed for this test? Did you consider just using the test as it is in the ticket description? 😊 
Would the test fail if you do not set the birth date?
Yes. Got the failure:
PatientServiceTest.shouldCreatePatientWithValidatedIdentifier:313 Patient creation should have failed with identifier 123-1
It's just a copypast from other 4 tests. Don't know what better to use.
Unlike the ticket test, I also checked that dead flag is set to false, if null has been passed to deathDate
Are you the same person who did? https://github.com/openmrs/openmrs-core/pull/2213
No
Of the two of you, who is assigned to the ticket? In other words, who claimed it?
Not me
Did you get a chance to look at this? https://wiki.openmrs.org/display/docs/Pull+Request+Tips
A've already written in the task why i've sent the pr
Did you get a chance to look at the contents of the link i gave above?
Sure
Since you did not claim the ticket as advised on that link, and some one else did, it means that the one who did so is the one whose pull request is going to be merged. 
I would advice you to choose another ticket, but this time remember to follow the instructions on that page. 😊 
Did you intentionally decided not to use "Assert.assertTrue()" as provided in the ticket description?
Yes I did it intentionally. This is because I noticed that the codacy bot raised it as an issue in my previous pull requests. Even though I didnt see any thing wrong with it at the time, I decided to use assert instead since functionality is almost the same and I thought it would enable me pass the codacy bot review
What issue did codacy raise when you used it?
It had something to do with this import "import static org.junit.Assert.assertTrue;" I am sorry I can't recall the exact issue. Since I could not remove the import as it may have affected other things in the class, I decided to use assert instead, and that cleared that particular issue
What you removed is what we use else where. Have you looked at other existing tests to confirm what am saying.
Can you use assertTrue as here? https://github.com/openmrs/openmrs-core/blob/master/api/src/test/java/org/openmrs/PersonTest.java#L58
Yes I can. Permit me do the change and make the commit
You need to separate these tests i.e the one for estimated birthdate and the one for a non estimated date
You should not be having if clauses line this in a test, it's not good practice
Can't have these if clauses, you need to write separate tests instead
Is it possible for me to have just one if clause in the test to check if the birthdate is after a visit date for the said patient? Then I make another test which handles the estimated birthdate situation
As in to make some sort of sanity check, right? If yes, that's what assertions are for in unit tests in place of if clauses
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=837883)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['15000' is a magic number.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=837883)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 136).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=876694)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Local variable name 's_context' must match pattern '^[a-z]([a-z0-9][a-zA-Z0-9]*)?$'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=876694)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: '{' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=876694)
The method name seems to suggest that you are also voiding the name. Can you change it to match the comments?
falsify does look so much tied to the method implementation details. I would go for something like makeLocaleNotPreferred or something else along those lines.
I do not see the value of the above comment.
When which module is missing? htmlformentry or test1?
Did you see the above comment from codacy? 😊 
I don't get that, is the formatter not taking care of this?
Did you intentionally get rid of these?
I would rename v to validator.
Does <= 0 make it any better than < 1?
This is covered in the test  isValid_shouldFailWithIncorrectlyCalculatedSuffixes()
Agree, I will rename it.
Sorry, I think I changed it to <0, then realised that it should fail on zero, so I added an "=" sign. I should have reinstated <1.
Was the above extra indention done by the openmrs formatter?
Yes, I just cherry-picked that file from master.
I see more changes in this class than the original commit. Did you intentionally make these extra changes?
@dkayiwa true, at least another commit that did not happen yet on 2.1.x is affecting this test file and is coming now through cherry-picking [e045948](https://github.com/openmrs/openmrs-core/commit/e04594822fb19117fe665623cf9b9b11b4834dba). The file would become exactly as it is on master.
So are you reverting those extra changes?
Why would we do that since this brings 2.1.x a more in line with 2.2 (master)?
When back porting, we usually do not do more than the original commit. If there are any improvements to the old branch, we do that using a new pull request. In other words, the changes we back port should be exactly like the original. This helps us to trace possible regressions.
Ok so... I did this on my feature branch:
```
git checkout --patch upstream/master
api/src/test/java/org/openmrs/module/ModuleClassLoaderTest.java
```
That let me interactively pick only from master the changes that are relevant to the new feature.
The three changes above this are not in the original commit.
Some times it may be easier to just manually put in some changes.
I did :-)
I just force pushed too early.
Did you intentionally remove these?
Did you intentionally remove these?
Did you intentionally remove these?
Did you intentionally remove these?
They aren't removed (all of the cases you commented as far as I can see). I'm not sure if some of it has to do with Eclipse's Auto Formatting (I took the OpenMRS Profile for it) or just with me moving code. I just added new code before these tests. 

Check the right side of the diff and you will see they should all still be there, just moved down. I haven't changed them at all. Does the diff here on github normally recognize moved lines of code? Or does it always mark them as deleted and added?
It takes more time to review such a pull request because one needs to differentiate between what was actually removed (red) and what was added back (green). How about if you just added your changes at the very end of the file?
I do understand your point of course. However, adding the @Before method before the @Test methods for ordering reasons is pretty understandable I think. I can't imagine other developers add code to files "chronologically" always? The same goes for the new variables I introduced to the test classes, including the @Mock variable for the administration service. Why would I add class variables below?

The new tests were all added below, I just added setup parts of the tests at the top.
In that case, you can start by just adding them at the end such that the pull request does not show the other methods as moved. After it is merged, you can create a new pull request for simply formatting purposes.
What about imports and other declarations that go before the class, do they cause the same problems? I can't move them down.
imports and variable declarations are fine.
I will do that and see if the diffs come out clearer, hopefully I can manage to do it later today. Meanwhile, are the null errors gone now? And could you take a look at my last comment concerning the codacy remarks?
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [The name of the outer type and the file do not match.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=941371)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [The name of the outer type and the file do not match.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=941371)
Why are you changing this?
Why are you adding this?
I think you should revert all changes in this file
This is a mistake. Will correct it.
This was work of another issue. I've mistakenly put it here. Let me remove it . :) 

Why do you have to call String.valueOf?
'String.valueOf' part was there in the original code, and i didn't change it. I don't know the exact purpose of that
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'javax.swing.JOptionPane' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=880777)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'javax.swing.JDialog' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=880777)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: '{' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=880777)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 142).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948195)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 148).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948195)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Abbreviation in name 'locationGP' must contain no more than '2' consecutive capital letters.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948221)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['(' is preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948221)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['(' is followed by whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948221)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['(' is preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948221)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['(' is preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948221)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['(' is followed by whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948221)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid reassigning parameters such as 'location'](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948221)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 136).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948227)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: '{' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948227)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Local variable name 's_context' must match pattern '^[a-z]([a-z0-9][a-zA-Z0-9]*)?$'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948227)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Using the '.*' form of import should be avoided - org.springframework.beans.factory.*.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948227)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: '{' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948227)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrong lexicographical order for 'org.springframework.beans.factory.*' import. Should be before 'org.springframework.context.support.ClassPathXmlApplicationContext'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948227)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Abbreviation in name 'locationGP' must contain no more than '2' consecutive capital letters.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=947483)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['(' is preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=947483)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid reassigning parameters such as 'location'](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=947483)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 136).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948569)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['(' is followed by whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948569)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Abbreviation in name 'locationGP' must contain no more than '2' consecutive capital letters.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948569)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid reassigning parameters such as 'location'](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=948569)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid reassigning parameters such as 'loc'](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=951557)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'org.openmrs.util.DatabaseUpdater' is in the wrong order. Should be in the 'SPECIAL_IMPORTS' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.sql.ResultSet' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: 'try' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.sql.SQLException' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Import statement for 'java.sql.Statement' is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group, expecting not assigned imports on this line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Unused import - liquibase.exception.ValidationErrors.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Unused import - liquibase.database.Database.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Unused import - liquibase.change.custom.CustomTaskChange.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['liquibase.change.custom.CustomTaskChange' should be separated from previous import group by one line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Unused import - liquibase.resource.ResourceAccessor.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Unused import - liquibase.exception.SetupException.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Unused import - liquibase.exception.CustomChangeException.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Empty catch block.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952181)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Function 'showCalendar' has a complexity of 5. (complexity)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected { after 'for-in'. (curly)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected { after 'if' condition. (curly)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected '===' and instead saw '=='. (eqeqeq)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['b' used outside of binding context. (block-scoped-var)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Missing semicolon. (semi)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected { after 'if' condition. (curly)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [A function with a name starting with an uppercase letter should only be used as a constructor. (new-cap)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Function has a complexity of 5. (complexity)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['k' was used before it was defined. (no-use-before-define)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Function has a complexity of 14. (complexity)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['d' is already defined. (no-redeclare)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrap an immediate function invocation in parentheses. (wrap-iife)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected { after 'if' condition. (curly)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype. (guard-for-in)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [A constructor name should not start with a lowercase letter. (new-cap)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Move the invocation into the parens that contain the function. (wrap-iife)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Missing semicolon. (semi)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected method shorthand. (object-shorthand)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Missing semicolon. (semi)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Missing semicolon. (semi)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [A constructor name should not start with a lowercase letter. (new-cap)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected a conditional expression and instead saw an assignment. (no-cond-assign)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected { after 'for' condition. (curly)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=955920)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 128).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=956034)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Catching 'RuntimeException' is not allowed.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=956034)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected '!==' and instead saw '!='. (eqeqeq)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Missing semicolon. (semi)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['$j' is not defined. (no-undef)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['$j' is not defined. (no-undef)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['$$this' is assigned a value but never used. (no-unused-vars)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['iDelay' is already defined. (no-redeclare)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['$j' is not defined. (no-undef)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Function has a complexity of 5. (complexity)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Missing semicolon. (semi)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['$j' is not defined. (no-undef)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['DWRConceptService' is not defined. (no-undef)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['$j' is not defined. (no-undef)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['ConceptSearchCallback' is defined but never used. (no-unused-vars)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected { after 'if' condition. (curly)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Expected property shorthand. (object-shorthand)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Strings must use doublequote. (quotes)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['$j' is not defined. (no-undef)](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959202)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959291)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959291)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959291)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Nested if-else depth is 5 (max allowed is 4).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959291)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959291)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=959291)
Did you look at the above codacy comment?
Yes. Shall I add description also? I see that the other files don't follow this convention. The description for @throws remains empty.
Did you intentionally change the above?
@dkayiwa Yes I did. It looked somewhat bizarre to me, so I just decided to put it on one line. Does it pose a problem?
And also if i remember very well, it raised an issue with the codacy check, something about the line being too long.

@tenas97 was this ticket simply about adding unit tests? Or even changing the implementation to ensure that the visit start date can't be before the birth date of the patient?
From the description of the ticket, I concluded that it just required tests to check that the start date is not before the birth date. I may be wrong though because I didnt really think of changing the implementation. Could you please take a look at the ticket description [https://issues.openmrs.org/browse/TRUNK-4939?filter=-1](url) and tell me what you think?
Where are you calling upon VisitValidator.validate()?
Where are you calling upon VisitValidator.validate()?
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['-0.5' is a magic number.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=795715)
@Kavindi183 please remove these comments now that we have a method with a meaningful name
* same here please remove comment
* I think these private methods do not need to declare `throws APIException` since its a runtime exception
@Kavindi183 can you please rename this method. Sorry that I am changing my mind but now that I read it again I think `assignVisitToNewEncoutner(encounter)` makes more sense since it might not necessarily create a new visit.
Should we actually get rid of this interface? Or should we keep it around?
I added these overrides so that these setters/getters don't appear deprecated as an effect from the superclass since eventually the methods will still exist on this class.
Do `MutableOpenmrsData` and `MutableOpenmrsMetadata` classes exist outside of this PR? Or should these be references `Changeable`, `BaseChangeableOpenmrsData`, and `BaseChangeableOpenmrsMetadata` classes?
Unless we can scan core code and popular modules and ensure nobody is referencing it, I would keep it around for now.
Make sense.
I assume @deprecated in javadoc would ideally include "as of version x.y".
Definitely it's referenced in core, but in the follow up commit I was going to replace its usage. I wasn't going to remove it in this version, we would mark it as deprecated now and eventually remove it may be 2 versions later.
Good catch! I had them and removed them and should have updated these javadocs
Yes, I will add it
By convention we don't use wildcard imports
I would think this class needs to be application context aware, instead of creating a new application context object because there might be one already.
Why don't you go through the AlertService instead of raw JDBC?
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=952361)
Do you need to flush? In theory you should actually be testing OrderGroup.addOrder method
With that said, the test should be in OrderGroupTest class since you will be testing OrderGroup.addOrder, if it doesn't exist you need to add it.
You should be testing `OrderGroup` class and not `OrderService` because the unit of code that has the behavior you are testing is in `OrderGroup` and not `OrderService`, that's the meaning of unit testing.
To be more specific, you should be testing the `OrderGroup.addOrder(Order)` method
I don't think test requires any access to the DB, so it should not extend `BaseContextSensitiveTest`
I think should be renamed to something more intuitive like `addOrder_shouldSetTheOrderGroupOnTheAddedOrder()`
Can you revert this format change in this file before I can merge the code please? Sorry! I should have seen this earlier.
Missing license here,
You can also get rid of these javadocs since they are not saying much, we try to keep attribution out of the code since the VCS already has it anyways.
Sorry that I didn't catch these too earlier
I thought you need to get rid of the forward slashes, this is where Paths comes in handy
You need to get rid of the forward slashes here too
You need to get rid of the forward slashes here too
You need to get rid of the forward slashes here too
You need to get rid of the forward slashes here too
You need to get rid of the forward slashes here too
Paths has a `toFile()` Method , please use that
Note that folderPath on the line above contains forward slashes, you need to get rid of them too
Doesn't `absPath` contain a '/'? I think it does
messagesPath contains a forward slash
Should actually extend BaseCustomizableData which will reduce the code changes you made
Sorry, meant to say BaseCustomizableData, I've updated the comment above to say BaseCustomizableData
Can you please remove this? They had it in Bahmini just because they wanted to construct their own instance from a PatientProgram so they can link them, you don't need it in core.
You won't need most of these methods because they are already implemented in BaseCustomizableData, and that's why you need to extend it
This needs to be cleaned up to remove the duplication, `BaseAttribute` already implements `Attribute`
MIssing javadocs
And you need to add @since annotations
Am starting to think that may be you might want to override these method to add @since annotations but delegate to the super class methods, what do you think @dkayiwa ?
This should just set patientProgram without creating another instance
Missing javadocs
Same here with the duplication, `BaseAttributeType` already implements `AttributeType`
And @since
Missing @ since annotations on the new methods
I don't see where you register these new privileges
I know they forgot this in Bahmni, but you need to add a `getAllProgramAttributeTypes()` method that takes in boolean argument that specifies whether retired ones should be included or excluded. In theory, this method that has no arguments should delegate to the other with a value of false. I personally prefer naming these methods `getProgramAttributeTypes` rather than `getAllProgramAttributeTypes` but I guess most existing methods are named that way so I guess it's fine.
I think we also need retire and unretire methods for ProgramAttributeTypes
I think this should be named `PatientProgramAttributeType`
Would be nice to leave existing code the way it is that is not related to this ticket
You should add the boolean argument to this method, the one with no arguments shouldn't  exist in the DAO
I think table name should be `patient_program_attribute_type`
I think this defaultValue here is redundant
Shouldn't this be voided rather than retired?
`baseColumnName` here should also be `voided_by`
Defining a defaultValue of null here is redundant
I think a package is defined at the top of the hbm file, so `PatientProgramAttribute` would be enough.
These tests need to be in ProgramWorkflowServiceTest, you don't need this new class
These tests should not be mocked, these are meant to be end to end integration tests to test both the service and dao layers
I don't see where you are using this file
In theory, you should use it for the integration tests in `ProgramWorkflowServiceTest` after you get rid of the mocks
any decision on this. @dkayiwa ?
I agree with @wluyima 
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused private fields such as 'attributes'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['org.openmrs.customdatatype.CustomValueDescriptor' should be separated from previous import group by one line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Block comment has incorrect indentation level 1, expected is 4, indentation should be the same level as line 304.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Annotation 'Authorized' have incorrect indentation level 4, expected level should be 1.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrong lexicographical order for 'org.openmrs.ProgramAttributeType' import. Should be before 'org.openmrs.annotation.Authorized'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Annotation 'Authorized' have incorrect indentation level 4, expected level should be 1.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Block comment has incorrect indentation level 1, expected is 4, indentation should be the same level as line 552.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: 'else' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [WhitespaceAround: '{' is not preceded with whitespace.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['org.openmrs.attribute.BaseAttributeType' should be separated from previous import group by one line.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1001441)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrong lexicographical order for 'org.openmrs.api.CannotStopInactiveOrderException' import. Should be before 'org.openmrs.api.db.OrderDAO'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrong lexicographical order for 'org.openmrs.api.EditedOrderDoesNotMatchPreviousException' import. Should be before 'org.openmrs.api.db.OrderDAO'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrong lexicographical order for 'org.openmrs.api.CannotStopDiscontinuationOrderException' import. Should be before 'org.openmrs.api.db.OrderDAO'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrong lexicographical order for 'org.openmrs.api.OrderEntryException' import. Should be before 'org.openmrs.api.db.OrderDAO'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Wrong lexicographical order for 'org.openmrs.api.CannotUnvoidOrderException' import. Should be before 'org.openmrs.api.db.OrderDAO'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '54'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '76'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 126).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '73'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Line is longer than 125 characters (found 148).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: ['}' at column 3 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Annotation 'Authorized' have incorrect indentation level 4, expected level should be 1.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [Overload methods should not be split. Previous overloaded method located at line '88'.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
![Codacy](https://www.codacy.com/assets/images/favicon.png) Issue found: [At-clause should have a non-empty description.](https://www.codacy.com/app/openmrs/openmrs-core/pullRequest?prid=1014731)
@iranganN did you see the above codacy comment?
